-- MySQL Administrator dump 1.4
--
-- ------------------------------------------------------
-- Server version	5.0.18-nt


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

--
-- Definition of procedure `accounts_payable`
--

DROP PROCEDURE IF EXISTS `accounts_payable`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `accounts_payable`(IN pi_company VARCHAR(30),
                                    IN pi_branch VARCHAR(30),
                                    IN pi_suppno VARCHAR(30),
                                    IN pi_saletype VARCHAR(30),
                                    IN pi_date VARCHAR(10))
BEGIN
  DECLARE v_advms DATE;
  DECLARE v_advms2 DATE;
  DECLARE v_advme DATE;
  DECLARE v_advme2 DATE;
  DECLARE v_30ms DATE;
  DECLARE v_60ms DATE;
  DECLARE v_90ms DATE;
  DECLARE v_30me DATE;
  DECLARE v_60me DATE;
  DECLARE v_90me DATE;
  DECLARE v_MONTH_END INT;
  DECLARE filter varchar(30);
  SET v_30ms = date(concat(substring(pi_date,1,7),'-01'));
  SET v_advms = v_30ms + interval 1 month;
  SET v_advms2 = v_30ms + interval 2 month;
  SET v_60ms = v_30ms - interval 1 month;
  SET v_90ms = v_30ms - interval 2 month;
  SET v_30me = last_day(date(pi_date));
  SET v_advme = last_day(v_30me + interval 1 month);
  SET v_advme2 = last_day(v_30me + interval 2 month);
  SET v_60me = last_day(v_30me - interval 1 month);
  SET v_90me = last_day(v_30me - interval 2 month);
  SET v_MONTH_END = concat('-',substring(v_60me,9,2)+1);
DROP TEMPORARY TABLE IF EXISTS `pdcpayments`;
CREATE TEMPORARY TABLE  `pdcpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `ACCTNO` varchar(30) NULL default '',
    `PDCAMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO pdcpayments (COMPANY,BRANCH,ACCTNO,PDCAMOUNT)
      SELECT a.company,a.branch,a.refno, sum(a.amount) as pdcamount
        from paymentinvoices a, paymentcheques b, payments c
        where b.company = a.company and b.branch = a.branch
        and b.docno = a.docno
        and b.company = c.company
        and b.branch = c.branchcode
        and b.docno = c.docno
        and c.pdc=1
        and a.company = pi_company and a.branch = pi_branch
        and b.checkdate >= pi_date
        group by a.refno;
DROP TEMPORARY TABLE IF EXISTS `balances`;
CREATE TEMPORARY TABLE  `balances` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount) as BALANCE, c.DOCDATE
        from apinvoices a, paymentinvoices b, payments c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by a.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.amount) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, paymentinvoices b, payments c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'S'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by d.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount) as BALANCE, c.DOCDATE
        from apcreditmemos a, paymentinvoices b, payments c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `journalpayments`;
CREATE TEMPORARY TABLE  `journalpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from apinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'S'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by d.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.debit - b.credit) as BALANCE, c.DOCDATE
        from apcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `sale_return`;
CREATE TEMPORARY TABLE  `sale_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sale_return (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
       SELECT a.company,a.branch,a.docno, b.BASEAMOUNT, b.DOCDATE
        from apinvoices a, apcreditmemos b, apcreditmemoitems c
        where b.company = a.company
        and b.branch = a.branch
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and (b.BASEDOCNO = a.docno or c.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and b.docdate <= pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `adv`;
CREATE TEMPORARY TABLE  `adv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount) as advancepayment, c.DOCDATE
        from apinvoices a, paymentinvoices b, payments c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.amount) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, paymentinvoices b, payments c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'S'
        AND d.reftype = ''
        AND d.accttype=''
        and c.valuedate > pi_date
        group by d.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount) as advancepayment, c.DOCDATE
        from apcreditmemos a, paymentinvoices b, payments c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `advjv`;
CREATE TEMPORARY TABLE  `advjv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from apinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'S'
        AND d.reftype = ''
        AND d.accttype=''
        and c.docdate > pi_date
        group by d.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from apcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `adv_sales_return`;
CREATE TEMPORARY TABLE  `adv_sales_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv_sales_return (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
       SELECT a.company,a.branch,a.docno, 0 - b.BASEAMOUNT, b.DOCDATE
        from apinvoices a, apcreditmemos b, apcreditmemoitems c
        where b.company = a.company
        and b.branch = a.branch
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and (b.BASEDOCNO = a.docno or c.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and b.docdate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `concatfield`;
CREATE TEMPORARY TABLE  `concatfield` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `advpay` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `D60` NUMERIC(18,6) NULL default '0',
    `D90` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D30,D60,D90)
    SELECT apinvoices.COMPANY, apinvoices.BRANCH, apinvoices.DOCNO,
        (apinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(apinvoices.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(apinvoices.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(apinvoices.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (apinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((apinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (apinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        case when datediff(pi_date, date_format(apinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 0 and 30 then (apinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D30',
        case when datediff(pi_date, date_format(apinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 31 and 60 then (apinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D60',
        case when datediff(pi_date, date_format(apinvoices.DOCDUEDATE, '%y-%m-%d')) >= 61
        then (apinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D90'
        FROM apinvoices
        LEFT OUTER JOIN departments on if(apinvoices.saletype = '', apinvoices.department = departments.department, apinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON apinvoices.COMPANY = pdcpayments.COMPANY AND apinvoices.BRANCH = pdcpayments.BRANCH AND apinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON apinvoices.COMPANY = balances.COMPANY AND apinvoices.BRANCH = balances.BRANCH AND apinvoices.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON apinvoices.COMPANY = journalpayments.COMPANY AND apinvoices.BRANCH = journalpayments.BRANCH AND apinvoices.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON apinvoices.COMPANY = adv.COMPANY AND apinvoices.BRANCH = adv.BRANCH AND apinvoices.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON apinvoices.COMPANY = advjv.COMPANY AND apinvoices.BRANCH = advjv.BRANCH AND apinvoices.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON apinvoices.COMPANY = sale_return.COMPANY AND apinvoices.BRANCH = sale_return.BRANCH AND apinvoices.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON apinvoices.COMPANY = adv_sales_return.COMPANY AND apinvoices.BRANCH = adv_sales_return.BRANCH AND apinvoices.DOCNO = adv_sales_return.DOCNO
        WHERE apinvoices.accttype='' and apinvoices.docdate <= pi_date
        AND apinvoices.DOCSTATUS NOT IN('D') AND apinvoices.TOTALAMOUNT <> 0
        AND apinvoices.COMPANY = pi_company AND apinvoices.BRANCH = pi_branch
        GROUP BY apinvoices.DOCNO;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D30,D60,D90)
    SELECT journalvoucheritems.COMPANY, journalvoucheritems.BRANCH, journalvoucheritems.DOCNO,
        ((journalvoucheritems.credit - journalvoucheritems.debit) - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(journalvouchers.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then ((journalvoucheritems.credit - journalvoucheritems.debit) - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if(((journalvoucheritems.credit - journalvoucheritems.debit) -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        ((journalvoucheritems.credit - journalvoucheritems.debit) -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 0 and 30 then ((journalvoucheritems.credit - journalvoucheritems.debit) -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D30',
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 31 and 60 then ((journalvoucheritems.credit - journalvoucheritems.debit) -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D60',
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) >= 61
        then ((journalvoucheritems.credit - journalvoucheritems.debit) -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D90'
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvoucheritems.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON journalvouchers.COMPANY = balances.COMPANY AND journalvouchers.BRANCH = balances.BRANCH AND journalvoucheritems.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON journalvouchers.COMPANY = journalpayments.COMPANY AND journalvouchers.BRANCH = journalpayments.BRANCH AND journalvoucheritems.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON journalvouchers.COMPANY = adv.COMPANY AND journalvouchers.BRANCH = adv.BRANCH AND journalvoucheritems.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON journalvouchers.COMPANY = advjv.COMPANY AND journalvouchers.BRANCH = advjv.BRANCH AND journalvoucheritems.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON journalvouchers.COMPANY = sale_return.COMPANY AND journalvouchers.BRANCH = sale_return.BRANCH AND journalvoucheritems.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON journalvouchers.COMPANY = adv_sales_return.COMPANY AND journalvouchers.BRANCH = adv_sales_return.BRANCH AND journalvoucheritems.DOCNO = adv_sales_return.DOCNO
        WHERE journalvoucheritems.itemtype = 'S'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
        GROUP BY journalvoucheritems.DOCNO;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D30,D60,D90)
    SELECT apcreditmemos.COMPANY, apcreditmemos.BRANCH, apcreditmemos.DOCNO,
        (apcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(apcreditmemos.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(apcreditmemos.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(apcreditmemos.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (apcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((apcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (apcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        case when datediff(pi_date, date_format(apcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 0 and 30 then (apcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D30',
        case when datediff(pi_date, date_format(apcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 31 and 60 then (apcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D60',
        case when datediff(pi_date, date_format(apcreditmemos.DOCDUEDATE, '%y-%m-%d')) >= 61
        then (apcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D90'
        FROM apcreditmemos
        LEFT OUTER JOIN departments on if(apcreditmemos.saletype = '', apcreditmemos.department = departments.department, apcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON apcreditmemos.COMPANY = pdcpayments.COMPANY AND apcreditmemos.BRANCH = pdcpayments.BRANCH AND apcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON apcreditmemos.COMPANY = balances.COMPANY AND apcreditmemos.BRANCH = balances.BRANCH AND apcreditmemos.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON apcreditmemos.COMPANY = journalpayments.COMPANY AND apcreditmemos.BRANCH = journalpayments.BRANCH AND apcreditmemos.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON apcreditmemos.COMPANY = adv.COMPANY AND apcreditmemos.BRANCH = adv.BRANCH AND apcreditmemos.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON apcreditmemos.COMPANY = advjv.COMPANY AND apcreditmemos.BRANCH = advjv.BRANCH AND apcreditmemos.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON apcreditmemos.COMPANY = sale_return.COMPANY AND apcreditmemos.BRANCH = sale_return.BRANCH AND apcreditmemos.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON apcreditmemos.COMPANY = adv_sales_return.COMPANY AND apcreditmemos.BRANCH = adv_sales_return.BRANCH AND apcreditmemos.DOCNO = adv_sales_return.DOCNO
        WHERE apcreditmemos.BASEDOCNO = '' AND apcreditmemos.accttype = ''
        AND apcreditmemos.docdate <= pi_date
        AND apcreditmemos.DOCSTATUS NOT IN('D') AND apcreditmemos.TOTALAMOUNT <> 0
        AND apcreditmemos.COMPANY = pi_company AND apcreditmemos.BRANCH = pi_branch
        GROUP BY apcreditmemos.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `mainfield`;
CREATE TEMPORARY TABLE  `mainfield` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `BRANCHNAME` varchar(100) NULL default '',
    `BPCODE` varchar(100) NULL default '',
    `BPNAME` varchar(500) NULL default '',
    `BILLTOADDRESS` varchar(1000) NULL default '',
    `ITEMCODE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `DOCDUEDATE` DATE NULL,
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `aging` NUMERIC(18,6) NULL default '0',
    `AREACODE` varchar(100) NULL default '',
    `zonedesc` varchar(100) NULL default '',
    `fisrtmonth` DATE NULL,
    `secondndmonth` DATE NULL,
    `thirdmonth` DATE NULL,
    `advpay` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `D60` NUMERIC(18,6) NULL default '0',
    `D90` NUMERIC(18,6) NULL default '0',
    `fcompany` varchar(100) NULL default '',
    `saletype` varchar(100) NULL default '',
    `PDC` NUMERIC(18,6) NULL default '0',
    `cname` varchar(100) NULL default '',
    `wcbal` varchar(100) NULL default '',
    `info` varchar(100) NULL default '',
    `filter` varchar(100) NULL default '',
    `BPREFNO` varchar(100) NULL default '',
    `DOCDATE` DATE NULL
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,AREACODE,zonedesc,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D30,D60,D90,fcompany,saletype,
    PDC,cname,BPREFNO,DOCDATE)
    SELECT apinvoices.COMPANY,
        apinvoices.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        apinvoices.BPCODE,
        upper(suppliers.suppname) as BPNAME,
        apinvoices.BILLTOADDRESS,
        apinvoiceitems.ITEMCODE,
        apinvoices.DOCNO,
        date(if(apinvoices.DOCDUEDATE is null, now(), apinvoices.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(apinvoices.DOCDUEDATE, '%y-%m-%d')) AS aging,
        '' as AREACODE ,
        '' as zonedesc,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D30 as '30',
        concatfield.D60 as '60',
        concatfield.D90 as '90',
        '' as fcompany,
        upper(departments.departmentname) as saletype,
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname,
        apinvoices.BPREFNO,
        apinvoices.DOCDATE
        FROM apinvoices
        LEFT OUTER JOIN branches ON apinvoices.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN suppliers ON apinvoices.BPCODE = suppliers.suppno
        LEFT OUTER JOIN apinvoiceitems ON apinvoices.BRANCH = apinvoiceitems.BRANCH AND apinvoices.COMPANY = apinvoiceitems.COMPANY AND apinvoices.DOCID = apinvoiceitems.DOCID
        LEFT OUTER JOIN companies on apinvoices.company = companies.companycode
        LEFT OUTER JOIN departments on if(apinvoices.saletype = '', apinvoices.department = departments.department, apinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON apinvoices.COMPANY = pdcpayments.COMPANY AND apinvoices.BRANCH = pdcpayments.BRANCH AND apinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON apinvoices.COMPANY = concatfield.COMPANY AND apinvoices.BRANCH = concatfield.BRANCH
                        AND apinvoices.DOCNO = concatfield.DOCNO
        WHERE (apinvoices.closeddate is null or  apinvoices.closeddate > pi_date )
        AND apinvoices.accttype='' and apinvoices.docdate <= pi_date
        AND apinvoices.DOCSTATUS NOT IN('D') AND apinvoices.TOTALAMOUNT <> 0
        AND apinvoices.COMPANY = pi_company AND apinvoices.BRANCH = pi_branch
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY apinvoices.DOCNO;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,AREACODE,zonedesc,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D30,D60,D90,fcompany,saletype,
    PDC,cname,BPREFNO,DOCDATE)
    SELECT apcreditmemos.COMPANY,
        apcreditmemos.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        apcreditmemos.BPCODE,
        upper(suppliers.suppname) as BPNAME,
        apcreditmemos.BILLTOADDRESS,
        apcreditmemoitems.ITEMCODE,
        apcreditmemos.DOCNO,
        date(if(apcreditmemos.DOCDUEDATE is null, now(), apcreditmemos.DOCDUEDATE)) as DOCDUEDATE,
        0-(concatfield.DUEAMOUNT),
        datediff(pi_date, date_format(apcreditmemos.DOCDUEDATE, '%y-%m-%d')) AS aging,
        '' as AREACODE ,
        '' as zonedesc,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        0-(concatfield.advpay),
        0-(concatfield.current),
        0-(concatfield.D30) as '30',
        0-(concatfield.D60) as '60',
        0-(concatfield.D90) as '90',
        '' as fcompany,
        upper(departments.departmentname) as saletype,
        0-(if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount)) AS 'PDC',
        upper(companies.companyname) as cname,
        apcreditmemos.BPREFNO,
        apcreditmemos.DOCDATE
        FROM apcreditmemos
        LEFT OUTER JOIN branches ON apcreditmemos.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN suppliers ON apcreditmemos.BPCODE = suppliers.suppno
        LEFT OUTER JOIN apcreditmemoitems ON apcreditmemos.BRANCH = apcreditmemoitems.BRANCH AND apcreditmemos.COMPANY = apcreditmemoitems.COMPANY AND apcreditmemos.DOCID = apcreditmemoitems.DOCID
        LEFT OUTER JOIN companies on apcreditmemos.company = companies.companycode
        LEFT OUTER JOIN departments on if(apcreditmemos.saletype = '', apcreditmemos.department = departments.department, apcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON apcreditmemos.COMPANY = pdcpayments.COMPANY AND apcreditmemos.BRANCH = pdcpayments.BRANCH AND apcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON apcreditmemos.COMPANY = concatfield.COMPANY AND apcreditmemos.BRANCH = concatfield.BRANCH
                        AND apcreditmemos.DOCNO = concatfield.DOCNO
        WHERE (apcreditmemos.closeddate is null or  apcreditmemos.closeddate > pi_date )
        AND apcreditmemos.BASEDOCNO = '' AND apcreditmemos.accttype = ''
        AND apcreditmemos.docdate <= pi_date
        AND apcreditmemos.COMPANY = pi_company AND apcreditmemos.BRANCH = pi_branch
        AND apcreditmemos.DOCSTATUS NOT IN('D') AND apcreditmemos.TOTALAMOUNT <> 0
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY apcreditmemos.DOCNO;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,AREACODE,zonedesc,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D30,D60,D90,fcompany,saletype,
    PDC,cname,BPREFNO,DOCDATE)
    SELECT journalvouchers.COMPANY,
        journalvouchers.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        journalvoucheritems.itemno as BPCODE,
        upper(suppliers.suppname) as BPNAME,
        '' as BILLTOADDRESS,
        '' as ITEMCODE,
        journalvoucheritems.DOCNO,
        date(if(journalvouchers.DOCDUEDATE is null, now(), journalvouchers.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) AS aging,
        '' as AREACODE ,
        '' as zonedesc,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D30 as '30',
        concatfield.D60 as '60',
        concatfield.D90 as '90',
        '' as fcompany,
        upper(departments.departmentname) as saletype,
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname,
        journalvouchers.REFERENCE1,
        journalvouchers.DOCDATE
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date
        LEFT OUTER JOIN branches ON journalvouchers.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN suppliers ON journalvoucheritems.ITEMNO = suppliers.suppno
        LEFT OUTER JOIN companies on journalvouchers.company = companies.companycode
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvouchers.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON journalvouchers.COMPANY = concatfield.COMPANY AND journalvouchers.BRANCH = concatfield.BRANCH
                        AND journalvoucheritems.DOCNO = concatfield.DOCNO
        WHERE journalvoucheritems.itemtype = 'S'
          AND journalvoucheritems.reftype = ''
          AND (journalvoucheritems.closeddate is null or  journalvoucheritems.closeddate > pi_date )
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
          and (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY journalvoucheritems.DOCNO;
  select cname as COMPANY,
         BRANCH,
         concat(BRANCH, ' - ', BRANCHNAME) as BRANCHNAME,
         date(pi_date) as DATE1,
         BPCODE,
         BPNAME,
         DOCNO as RRNO,
         BPREFNO as INVOICENO,
         DOCDATE as RRDATE,
         DOCDUEDATE as DUEDATE,
         DUEAMOUNT as BALANCE,
         current,
         D30,
         D60,
         D90
  from mainfield
  order by BPCODE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `apcm_checkbalances`
--

DROP PROCEDURE IF EXISTS `apcm_checkbalances`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `apcm_checkbalances`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_mode VARCHAR(10))
BEGIN
DECLARE v_DocNo       varchar(30);
DECLARE v_Balance numeric(20,2);
DECLARE v_Done        integer;
DECLARE v_DirectRate        integer;
DECLARE v_Updated        integer;
DECLARE Cursor_apcmbalances CURSOR FOR SELECT DocNo, Totalamount - (RC+PY+JV) FROM apcmbalances where  SETTLEDAMOUNT<>(RC+PY+JV) or (docstatus='C' and dueamount>0) or (docstatus='O' and dueamount=0);
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;
DROP TEMPORARY TABLE IF EXISTS `apcmbalances`;
CREATE TEMPORARY TABLE  `apcmbalances` (
    `DOCNO` varchar(30) NULL default '',
    `DOCSTATUS` varchar(5) NULL default '',
    `TOTALAMOUNT` NUMERIC(18,6) NULL default '0',
    `SETTLEDAMOUNT` NUMERIC(18,6) NULL default '0',
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `RC` NUMERIC(18,6) NULL default '0',
    `PY` NUMERIC(18,6) NULL default '0',
    `JV` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
Select directrate into v_DirectRate from companies;

INSERT
    INTO apcmbalances (DOCNO,DOCSTATUS,TOTALAMOUNT,SETTLEDAMOUNT,DUEAMOUNT,RC,PY,JV)
select docno,docstatus,totalamount,settledamount,dueamount,
  ifnull((select sum(collectionsinvoices.amount) from collections,collectionsinvoices where collectionsinvoices.company=collections.company and collectionsinvoices.branch=collections.branchcode and collectionsinvoices.docno=collections.docno and collections.company=apcreditmemos.company and collections.branchcode=apcreditmemos.branch and collections.docstat IN ('O','C') and collectionsinvoices.reftype='APCREDITMEMO' and collectionsinvoices.refno=apcreditmemos.docno),0),
  ifnull((select sum(paymentinvoices.amount * -1) from payments,paymentinvoices where paymentinvoices.company=payments.company and paymentinvoices.branch=payments.branchcode and paymentinvoices.docno=payments.docno and payments.company=apcreditmemos.company and payments.branchcode=apcreditmemos.branch and payments.docstat IN ('O','C') and paymentinvoices.reftype='APCREDITMEMO' and paymentinvoices.refno=apcreditmemos.docno),0),
  ifnull((select sum(if(v_DirectRate=1,(credit-debit)/currencyrate,(credit-debit)*currencyrate)) from journalvoucheritems where journalvoucheritems.company=apcreditmemos.company and journalvoucheritems.branch=apcreditmemos.branch and journalvoucheritems.reftype='APCREDITMEMO' and journalvoucheritems.refno=apcreditmemos.docno),0)
from apcreditmemos where company=pi_company and branch=pi_branch and docstatus <>'D';
if pi_mode = 'update' then
  SET v_Updated = 0 ;
  SET v_Done = 0 ;
  BLOCK1: BEGIN
  OPEN Cursor_apcmbalances ;
  REPEAT
    FETCH Cursor_apcmbalances INTO v_DocNo, v_Balance ;
    IF NOT v_Done THEN
       update apcreditmemos set docstatus=if(v_Balance=0,'C','O'), settledamount=totalamount-v_Balance, dueamount=v_balance where company=pi_company and branch=pi_branch and docno=v_DocNo;
      SET v_Updated = v_Updated + 1;
    END IF ;
  UNTIL v_Done END REPEAT ;
  CLOSE Cursor_apcmbalances ;
  END BLOCK1 ;
  select v_Updated;
else
  select DOCNO,TOTALAMOUNT,SETTLEDAMOUNT,DUEAMOUNT,DOCSTATUS,(RC+PY+JV),RC,PY,JV from apcmbalances where SETTLEDAMOUNT<>(RC+PY+JV) or (docstatus='C' and dueamount>0) or (docstatus='O' and dueamount=0);
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `apcreditmemojournal_st`
--

DROP PROCEDURE IF EXISTS `apcreditmemojournal_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `apcreditmemojournal_st`(IN pi_company VARCHAR(30),   IN pi_branch VARCHAR(30),    IN pi_docno_fr VARCHAR(30), IN pi_docno_to VARCHAR(30),
                                          IN pi_bpcode_fr VARCHAR(30), IN pi_bpcode_to VARCHAR(30), IN pi_date_fr DATE,         IN pi_date_to DATE)
BEGIN

DECLARE v_docno_fr  VARCHAR(30);
DECLARE v_docno_to  VARCHAR(30);
DECLARE v_bpcode_fr VARCHAR(30);
DECLARE v_bpcode_to VARCHAR(30);
DECLARE v_selectall INT;
DECLARE v_now       VARCHAR(30);

SET v_now = CAST(NOW() as char(30));

  IF pi_docno_fr is null THEN
    SET v_docno_fr = '';
  ELSE
    SET v_docno_fr = pi_docno_fr;
  END IF;

  IF pi_docno_to is null THEN
    SET v_docno_to = '';
  ELSE
    SET v_docno_to = pi_docno_to;
  END IF;

  IF v_docno_fr > '' and v_docno_to = '' THEN

    SET v_docno_to = v_docno_fr;

  ELSEIF v_docno_fr = '' and v_docno_to > '' THEN

    SET v_docno_fr = v_docno_to;

  ELSEIF v_docno_fr = '' and v_docno_to = '' THEN

    SET v_docno_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;

  IF pi_bpcode_fr is null THEN
    SET v_bpcode_fr = '';
  ELSE
    SET v_bpcode_fr = pi_bpcode_fr;
  END IF;

  IF pi_bpcode_to is null THEN
    SET v_bpcode_to = '';
  ELSE
    SET v_bpcode_to = pi_bpcode_to;
  END IF;

  IF v_bpcode_fr > '' and v_bpcode_to = '' THEN

    SET v_bpcode_to = v_bpcode_fr;

  ELSEIF v_bpcode_fr = '' and v_bpcode_to > '' THEN

    SET v_bpcode_fr = v_bpcode_to;

  ELSEIF v_bpcode_fr = '' and v_bpcode_to = '' THEN

    SET v_bpcode_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;



  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP1 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP1` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP2 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS LEDGER_TEMP ;
  CREATE TEMPORARY TABLE `LEDGER_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`      VARCHAR(100),
    `DOCID`        DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO JOURNAL_TEMP1 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, v_now,       JE.DOCID,      JE.LINEID,  JE.DOCDATE,  JE.DOCTYPE, JE.DOCNO, JE.GLACCTNO,      JE.GLACCTNAME, JE.GLDEBIT,
               JE.GLCREDIT,    JE.SLTYPE, JE.SLACCTNO, JE.SLACCTNAME, JE.SLDEBIT, JE.SLCREDIT, JE.REMARKS, JE.CURRENCY,  ACM.CURRENCYRATE, ACM.DOCTYPE,   ACM.BPCODE,
               ACM.BPNAME ,     '', ACM.BPREFNO
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN APCREDITMEMOS ACM        ON ACM.COMPANY     = pi_company  AND ACM.BRANCH    = pi_branch  AND ACM.DOCNO  = JE.DOCNO
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH =  pi_branch  AND
                  JE.DOCTYPE = 'ACM' AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to;

        INSERT INTO JOURNAL_TEMP2 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
               SELECT * FROM JOURNAL_TEMP1 JE
                     WHERE JE.BPCODE >= v_bpcode_fr AND
                           JE.BPCODE <= v_bpcode_to AND
                           JE.DOCNO  >= v_docno_fr  AND
                           JE.DOCNO  <= v_docno_to;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.SLACCTNO > '' THEN JE.SLACCTNO
                  ELSE JE.GLACCTNO END AS BP_CODE,
             CASE WHEN JE.SLACCTNAME > '' THEN JE.SLACCTNAME
                  ELSE JE.GLACCTNAME END AS BP_NAME,
             '',
             JE.REFNO,
             JE.GLDEBIT,
             JE.GLCREDIT
        FROM JOURNAL_TEMP2 JE
          WHERE (JE.ORITYPE = 'I');


  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.SLACCTNO > '' THEN JE.SLACCTNO
                  ELSE JE.GLACCTNO END AS BP_CODE,
             CASE WHEN JE.SLACCTNAME > '' THEN JE.SLACCTNAME
                  ELSE JE.GLACCTNAME END AS BP_NAME,
             ACI.ITEMDESC,
             JE.REFNO,
             JE.GLDEBIT,
             CASE WHEN JE.GLCREDIT > 0 AND ACI.GLACCTNO = JE.GLACCTNO THEN IF(ABO.AMOUNT IS NULL,(ACI.LINETOTAL * JE.CURRENCYRATE),(ACI.LINETOTAL + ABO.AMOUNT) * JE.CURRENCYRATE)
                  ELSE JE.GLCREDIT END
        FROM JOURNAL_TEMP2 JE
             LEFT OUTER JOIN APCREDITMEMOS ACM             ON ACM.COMPANY  = pi_company  AND ACM.BRANCH  = pi_branch  AND ACM.DOCNO  = JE.DOCNO
             LEFT OUTER JOIN APCREDITMEMOITEMS ACI         ON ACI.COMPANY = ACM.COMPANY  AND ACI.BRANCH = ACM.BRANCH  AND ACI.DOCID = ACM.DOCID  AND ACI.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT APO.COMPANY, APO.BRANCH, SUM(APO.AMOUNT) AS AMOUNT, BO.GLACCTNO, APO.DOCID
                                   FROM APCREDITMEMOOTHERCHARGESITEMS APO, BRANCHOTHERCHARGES BO
                                   WHERE APO.COMPANY = BO.COMPANY AND
                                         APO.BRANCH = BO.BRANCH   AND
                                         APO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY APO.DOCID, BO.GLACCTNO) AS ABO
                                                           ON ABO.COMPANY = pi_company AND ABO.BRANCH = pi_branch AND ABO.DOCID = ACM.DOCID AND ABO.GLACCTNO = JE.GLACCTNO
          WHERE (JE.ORITYPE = 'S');



  SELECT * FROM LEDGER_TEMP ORDER BY DOCNO, DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `apinvoicejournal_st`
--

DROP PROCEDURE IF EXISTS `apinvoicejournal_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `apinvoicejournal_st`(IN pi_company VARCHAR(30),   IN pi_branch VARCHAR(30),    IN pi_docno_fr VARCHAR(30), IN pi_docno_to VARCHAR(30),
                                       IN pi_bpcode_fr VARCHAR(30), IN pi_bpcode_to VARCHAR(30), IN pi_date_fr DATE,         IN pi_date_to DATE)
BEGIN

DECLARE v_docno_fr  VARCHAR(30);
DECLARE v_docno_to  VARCHAR(30);
DECLARE v_bpcode_fr VARCHAR(30);
DECLARE v_bpcode_to VARCHAR(30);
DECLARE v_selectall INT;
DECLARE v_now       VARCHAR(30);

SET v_now = CAST(NOW() as char(30));

  IF pi_docno_fr is null THEN
    SET v_docno_fr = '';
  ELSE
    SET v_docno_fr = pi_docno_fr;
  END IF;

  IF pi_docno_to is null THEN
    SET v_docno_to = '';
  ELSE
    SET v_docno_to = pi_docno_to;
  END IF;

  IF v_docno_fr > '' and v_docno_to = '' THEN

    SET v_docno_to = v_docno_fr;

  ELSEIF v_docno_fr = '' and v_docno_to > '' THEN

    SET v_docno_fr = v_docno_to;

  ELSEIF v_docno_fr = '' and v_docno_to = '' THEN

    SET v_docno_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;

  IF pi_bpcode_fr is null THEN
    SET v_bpcode_fr = '';
  ELSE
    SET v_bpcode_fr = pi_bpcode_fr;
  END IF;

  IF pi_bpcode_to is null THEN
    SET v_bpcode_to = '';
  ELSE
    SET v_bpcode_to = pi_bpcode_to;
  END IF;

  IF v_bpcode_fr > '' and v_bpcode_to = '' THEN

    SET v_bpcode_to = v_bpcode_fr;

  ELSEIF v_bpcode_fr = '' and v_bpcode_to > '' THEN

    SET v_bpcode_fr = v_bpcode_to;

  ELSEIF v_bpcode_fr = '' and v_bpcode_to = '' THEN

    SET v_bpcode_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;

  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP1 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP1` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP2 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS LEDGER_TEMP ;
  CREATE TEMPORARY TABLE `LEDGER_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`      VARCHAR(100),
    `DOCID`        DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO JOURNAL_TEMP1 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, v_now,       JE.DOCID,      JE.LINEID,  JE.DOCDATE,  JE.DOCTYPE, JE.DOCNO, JE.GLACCTNO,     JE.GLACCTNAME, JE.GLDEBIT,
               JE.GLCREDIT,    JE.SLTYPE, JE.SLACCTNO, JE.SLACCTNAME, JE.SLDEBIT, JE.SLCREDIT, JE.REMARKS, JE.CURRENCY,  AP.CURRENCYRATE, AP.DOCTYPE,    AP.BPCODE,
               AP.BPNAME ,     '', AP.BPREFNO
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN APINVOICES AP            ON AP.COMPANY      = pi_company  AND AP.BRANCH      = pi_branch  AND AP.DOCNO  = JE.DOCNO
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH =  pi_branch  AND
                  JE.DOCTYPE = 'AP' AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to;

        INSERT INTO JOURNAL_TEMP2 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
               SELECT * FROM JOURNAL_TEMP1 JE
                     WHERE JE.BPCODE >= v_bpcode_fr AND
                           JE.BPCODE <= v_bpcode_to AND
                           JE.DOCNO  >= v_docno_fr  AND
                           JE.DOCNO  <= v_docno_to;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.SLACCTNO > '' THEN JE.SLACCTNO
                  ELSE JE.GLACCTNO END AS BP_CODE,
             CASE WHEN JE.SLACCTNAME > '' THEN JE.SLACCTNAME
                  ELSE JE.GLACCTNAME END AS BP_NAME,
             '',
             JE.REFNO,
             JE.GLDEBIT,
             JE.GLCREDIT
        FROM JOURNAL_TEMP2 JE
          WHERE (JE.ORITYPE = 'I');


  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.SLACCTNO > '' THEN JE.SLACCTNO
                  ELSE JE.GLACCTNO END AS BP_CODE,
             CASE WHEN JE.SLACCTNAME > '' THEN JE.SLACCTNAME
                  ELSE JE.GLACCTNAME END AS BP_NAME,
             API.ITEMDESC,
             JE.REFNO,
             CASE WHEN JE.GLDEBIT > 0 AND API.GLACCTNO = JE.GLACCTNO THEN IF(ABO.AMOUNT IS NULL,(API.LINETOTAL * JE.CURRENCYRATE),(API.LINETOTAL + ABO.AMOUNT) * JE.CURRENCYRATE)
                  ELSE JE.GLDEBIT END,
             JE.GLCREDIT
        FROM JOURNAL_TEMP2 JE
             LEFT OUTER JOIN APINVOICES AP              ON AP.COMPANY  = pi_company  AND AP.BRANCH  = pi_branch  AND AP.DOCNO  = JE.DOCNO
             LEFT OUTER JOIN APINVOICEITEMS API         ON API.COMPANY = AP.COMPANY  AND API.BRANCH = AP.BRANCH  AND API.DOCID = AP.DOCID  AND API.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT APO.COMPANY, APO.BRANCH, SUM(APO.AMOUNT) AS AMOUNT, BO.GLACCTNO, APO.DOCID
                                   FROM APINVOICEOTHERCHARGESITEMS APO, BRANCHOTHERCHARGES BO
                                   WHERE APO.COMPANY = BO.COMPANY AND
                                         APO.BRANCH = BO.BRANCH   AND
                                         APO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY APO.DOCID, BO.GLACCTNO) AS ABO
                                                           ON ABO.COMPANY = pi_company AND ABO.BRANCH = pi_branch AND ABO.DOCID = AP.DOCID AND ABO.GLACCTNO = JE.GLACCTNO
          WHERE (JE.ORITYPE = 'S');


  SELECT * FROM LEDGER_TEMP ORDER BY DOCNO, DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `applied_custdeposit`
--

DROP PROCEDURE IF EXISTS `applied_custdeposit`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `applied_custdeposit`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200))
BEGIN
Select upper(c.companyname) as COMPANY, upper(a.branchcode) as BRANCH,
        a2.docno as REFNO, a2.DOCDATE, upper(a2.bpcode) as CUSTNO, upper(a2.bpname) as name,
        DATE(a.DOCDATE) AS DATEAPPLY, if(z1.AMOUNT > if(z.AMOUNT is null or z.AMOUNT = 0, za1.AMOUNT, z.AMOUNT), if(z.AMOUNT is null or z.AMOUNT = 0, za1.AMOUNT, z.AMOUNT), z1.AMOUNT) as PAIDAMOUNT,
        date(pi_date1) AS DATE1, date(pi_date2) AS DATE2,
        upper(b.BRANCHNAME) as BRANCHNAME, '' as LOANTYPENAME, a.REMARKS,
        if(f.REFNO = '' or f.REFNO is null, z.REFNO, f.REFNO) AS INVOICENO,
        upper(if(a.bpcode = '' or a.bpcode is null, za1.GLACCTNO, a.bpcode)) as custno2,
        upper(if(a.bpname = '' or a.bpcode is null, za1.GLACCTNAME, a.bpname)) AS name2,
        if(z1.AMOUNT > if(z.AMOUNT is null or z.AMOUNT = 0, za1.AMOUNT, z.AMOUNT), if(z.AMOUNT is null or z.AMOUNT = 0, za1.AMOUNT, z.AMOUNT), z1.AMOUNT) as AMOUNT
        FROM collections A
            LEFT OUTER JOIN collectionsinvoices z ON a.COMPANY = z.COMPANY AND a.BRANCHCODE = z.BRANCH AND a.DOCNO = z.DOCNO AND z.REFTYPE <> 'DEPOSIT'
            LEFT OUTER JOIN collectionsaccounts za1 ON a.COMPANY = za1.COMPANY AND a.BRANCHCODE = za1.BRANCH AND a.DOCNO = za1.DOCNO
            LEFT OUTER JOIN collectionsinvoices z1 ON a.COMPANY = z1.COMPANY AND a.BRANCHCODE = z1.BRANCH AND a.DOCNO = z1.DOCNO AND z1.REFTYPE = 'DEPOSIT'
            LEFT OUTER JOIN collections a2 ON z1.COMPANY = a2.COMPANY AND z1.BRANCH = a2.BRANCHCODE AND z1.REFNO = a2.DOCNO
            LEFT OUTER JOIN accountslist f ON z.REFNO = f.acctno and z.refbranch = f.branchcode
            LEFT OUTER JOIN branches B ON A.BRANCHCODE = B.BRANCHCODE
            LEFT OUTER JOIN companies C on C.COMPANYCODE = A.COMPANY
            LEFT OUTER JOIN departments D on a2.DEPARTMENT = D.DEPARTMENT
        where a.trxtype = 'CM' and a.DOCSTAT NOT IN('D')
              AND A.COMPANY = pi_company AND B.BRANCHCODE = pi_branch
              AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        order by a.docdate;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ap_checkbalances`
--

DROP PROCEDURE IF EXISTS `ap_checkbalances`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ap_checkbalances`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_mode VARCHAR(10))
BEGIN
DECLARE v_DocNo       varchar(30);
DECLARE v_Balance numeric(20,2);
DECLARE v_Done        integer;
DECLARE v_DirectRate        integer;
DECLARE v_Updated        integer;
DECLARE Cursor_apbalances CURSOR FOR SELECT DocNo, Totalamount - (RC+PY+CM+JV) FROM apbalances where  SETTLEDAMOUNT<>(RC+PY+CM+JV) or (docstatus='C' and dueamount>0) or (docstatus='O' and dueamount=0);
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;
DROP TEMPORARY TABLE IF EXISTS `apbalances`;
CREATE TEMPORARY TABLE  `apbalances` (
    `DOCNO` varchar(30) NULL default '',
    `DOCSTATUS` varchar(5) NULL default '',
    `TOTALAMOUNT` NUMERIC(18,6) NULL default '0',
    `SETTLEDAMOUNT` NUMERIC(18,6) NULL default '0',
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `RC` NUMERIC(18,6) NULL default '0',
    `PY` NUMERIC(18,6) NULL default '0',
    `CM` NUMERIC(18,6) NULL default '0',
    `JV` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
Select directrate into v_DirectRate from companies;

INSERT
    INTO apbalances (DOCNO,DOCSTATUS,TOTALAMOUNT,SETTLEDAMOUNT,DUEAMOUNT,RC,PY,CM,JV)
select docno,docstatus,totalamount,settledamount,dueamount,
  ifnull((select sum(collectionsinvoices.amount * -1) from collections,collectionsinvoices where collectionsinvoices.company=collections.company and collectionsinvoices.branch=collections.branchcode and collectionsinvoices.docno=collections.docno and collections.company=apinvoices.company and collections.branchcode=apinvoices.branch and collections.docstat IN ('O','C') and collectionsinvoices.reftype='APINVOICE' and collectionsinvoices.refno=apinvoices.docno),0),
  ifnull((select sum(paymentinvoices.amount) from payments,paymentinvoices where paymentinvoices.company=payments.company and paymentinvoices.branch=payments.branchcode and paymentinvoices.docno=payments.docno and payments.company=apinvoices.company and payments.branchcode=apinvoices.branch and payments.docstat IN ('O','C') and paymentinvoices.reftype='APINVOICE' and paymentinvoices.refno=apinvoices.docno),0),
  ifnull((select sum(apcreditmemos.baseamount+apcreditmemos.totalamount) from apcreditmemos where apcreditmemos.company=apinvoices.company and apcreditmemos.branch=apinvoices.branch and apcreditmemos.docstatus IN ('O','C') and apcreditmemos.basedocno=apinvoices.docno),0),
  ifnull((select sum(if(v_DirectRate=1,(debit-credit)/currencyrate,(debit-credit)*currencyrate)) from journalvoucheritems where journalvoucheritems.company=apinvoices.company and journalvoucheritems.branch=apinvoices.branch and journalvoucheritems.reftype='APINVOICE' and journalvoucheritems.refno=apinvoices.docno),0)
from apinvoices where company=pi_company and branch=pi_branch and docstatus <>'D';
if pi_mode = 'update' then
  SET v_Updated = 0 ;
  SET v_Done = 0 ;
  BLOCK1: BEGIN
  OPEN Cursor_apbalances ;
  REPEAT
    FETCH Cursor_apbalances INTO v_DocNo, v_Balance ;
    IF NOT v_Done THEN
       update apinvoices set docstatus=if(v_Balance=0,'C','O'), settledamount=totalamount-v_Balance, dueamount=v_balance where company=pi_company and branch=pi_branch and docno=v_DocNo;
      SET v_Updated = v_Updated + 1;
    END IF ;
  UNTIL v_Done END REPEAT ;
  CLOSE Cursor_apbalances ;
  END BLOCK1 ;
  select v_Updated;
else
  select DOCNO,TOTALAMOUNT,SETTLEDAMOUNT,DUEAMOUNT,DOCSTATUS,(RC+PY+CM+JV),RC,PY,CM,JV from apbalances where SETTLEDAMOUNT<>(RC+PY+CM+JV) or (docstatus='C' and dueamount>0) or (docstatus='O' and dueamount=0);
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ap_creditmemos`
--

DROP PROCEDURE IF EXISTS `ap_creditmemos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ap_creditmemos`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.SHIPTOADDRESS as shiptoadd, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       '' as chassis, '' as 'engine', d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno,
       d.QUANTITY as qty,
       d.price as unitprice,
       d.linetotal as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.OTHERCHARGES as othercharges, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.ROUNDAMOUNT as rouding, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, i.username as created_by,
       '' as u_sqrno
       from apcreditmemos a
            left outer join apcreditmemoitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            
                                                 
            left outer join users i on d.CREATEDBY = i.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ap_creditmemos_ghe`
--

DROP PROCEDURE IF EXISTS `ap_creditmemos_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ap_creditmemos_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd, '' as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       if(d.ITEMCODE = '', d.glacctno, d.ITEMCODE) as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCPERC as DISCAMOUNT,
       i.WEIGHTSA * d.QUANTITY AS WEIGHT,
       d.U_U_LINEVOLUME as LINEVOLUME,
       d.U_U_QTYPERCRTN * d.QUANTITY as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when d.UNITPRICE < d.ITEMCOST then 'C'
            when d.UNITPRICE > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       a.docduedate,
       a.u_u_sleadtime,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       hb.bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       a.u_u_transshipment,
       a.u_u_shipmark,
       
       i.u_u_netweight * d.QUANTITY as netweight,
       a.u_u_hscno,
       d.u_u_qtypercrtn,
       d.u_u_itemvolume,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.currencyrate,
       d.u_u_scharge,
       d.u_u_sqty,
       d.u_u_remark as itemremark
       from apcreditmemos a
            left outer join apcreditmemoitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join suppliers g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join suppliers cust on a.BPCODE = cust.SUPPNO
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join suppliercontacts cp on a.BPCODE = cp.SUPPNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ap_invoice`
--

DROP PROCEDURE IF EXISTS `ap_invoice`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ap_invoice`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.SHIPTOADDRESS as shiptoadd, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       '' as chassis, '' as 'engine', d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno,
       d.QUANTITY as qty,
       d.price  as unitprice,
       d.linetotal as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.OTHERCHARGES as othercharges, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, i.username as created_by,
       d.basedocno, '' as U_color, d.whscode as whs
       from apinvoices a
            left outer join apinvoiceitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            
                                                 
            
            left outer join users i on d.CREATEDBY = i.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno  ;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ap_invoices_ghe`
--

DROP PROCEDURE IF EXISTS `ap_invoices_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ap_invoices_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd, '' as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       if(d.ITEMCODE = '', d.glacctno, d.ITEMCODE) as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCPERC as DISCAMOUNT,
       i.WEIGHTSA * d.QUANTITY AS WEIGHT,
       d.U_U_LINEVOLUME as LINEVOLUME,
       d.U_U_QTYPERCRTN * d.QUANTITY as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when d.UNITPRICE < d.ITEMCOST then 'C'
            when d.UNITPRICE > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       a.docduedate,
       a.u_u_sleadtime,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       hb.bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       a.u_u_transshipment,
       a.u_u_shipmark,
       
       i.u_u_netweight * d.QUANTITY as netweight,
       a.u_u_hscno,
       d.u_u_qtypercrtn,
       d.u_u_itemvolume,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.currencyrate,
       d.u_u_scharge,
       d.u_u_sqty
       from apinvoices a
            left outer join apinvoiceitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join suppliers g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join suppliers cust on a.BPCODE = cust.SUPPNO
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join suppliercontacts cp on a.BPCODE = cp.SUPPNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `arcreditmemojournal_st`
--

DROP PROCEDURE IF EXISTS `arcreditmemojournal_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `arcreditmemojournal_st`(IN pi_company VARCHAR(30),   IN pi_branch VARCHAR(30),    IN pi_docno_fr VARCHAR(30), IN pi_docno_to VARCHAR(30),
                                          IN pi_bpcode_fr VARCHAR(30), IN pi_bpcode_to VARCHAR(30), IN pi_date_fr DATE,         IN pi_date_to DATE)
BEGIN

DECLARE v_docno_fr  VARCHAR(30);
DECLARE v_docno_to  VARCHAR(30);
DECLARE v_bpcode_fr VARCHAR(30);
DECLARE v_bpcode_to VARCHAR(30);
DECLARE v_selectall INT;
DECLARE v_now       VARCHAR(30);

SET v_now = CAST(NOW() as char(30));

  IF pi_docno_fr is null THEN
    SET v_docno_fr = '';
  ELSE
    SET v_docno_fr = pi_docno_fr;
  END IF;

  IF pi_docno_to is null THEN
    SET v_docno_to = '';
  ELSE
    SET v_docno_to = pi_docno_to;
  END IF;

  IF v_docno_fr > '' and v_docno_to = '' THEN

    SET v_docno_to = v_docno_fr;

  ELSEIF v_docno_fr = '' and v_docno_to > '' THEN

    SET v_docno_fr = v_docno_to;

  ELSEIF v_docno_fr = '' and v_docno_to = '' THEN

    SET v_docno_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;

  IF pi_bpcode_fr is null THEN
    SET v_bpcode_fr = '';
  ELSE
    SET v_bpcode_fr = pi_bpcode_fr;
  END IF;

  IF pi_bpcode_to is null THEN
    SET v_bpcode_to = '';
  ELSE
    SET v_bpcode_to = pi_bpcode_to;
  END IF;

  IF v_bpcode_fr > '' and v_bpcode_to = '' THEN

    SET v_bpcode_to = v_bpcode_fr;

  ELSEIF v_bpcode_fr = '' and v_bpcode_to > '' THEN

    SET v_bpcode_fr = v_bpcode_to;

  ELSEIF v_bpcode_fr = '' and v_bpcode_to = '' THEN

    SET v_bpcode_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;



  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP1 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP1` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP2 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS LEDGER_TEMP ;
  CREATE TEMPORARY TABLE `LEDGER_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`      VARCHAR(100),
    `DOCID`        DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO JOURNAL_TEMP1 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, v_now,       JE.DOCID,      JE.LINEID,  JE.DOCDATE,  JE.DOCTYPE, JE.DOCNO, JE.GLACCTNO,     JE.GLACCTNAME, JE.GLDEBIT,
               JE.GLCREDIT,    JE.SLTYPE, JE.SLACCTNO, JE.SLACCTNAME, JE.SLDEBIT, JE.SLCREDIT, JE.REMARKS, JE.CURRENCY,  CM.CURRENCYRATE, CM.DOCTYPE,    CM.BPCODE,
               CM.BPNAME ,     '', CM.BPREFNO
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN ARCREDITMEMOS CM         ON CM.COMPANY      = pi_company  AND CM.BRANCH      = pi_branch  AND CM.DOCNO  = JE.DOCNO
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH =  pi_branch  AND
                  JE.DOCTYPE = 'CM' AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to;

        INSERT INTO JOURNAL_TEMP2 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
               SELECT * FROM JOURNAL_TEMP1 JE
                     WHERE JE.BPCODE >= v_bpcode_fr AND
                           JE.BPCODE <= v_bpcode_to AND
                           JE.DOCNO  >= v_docno_fr  AND
                           JE.DOCNO  <= v_docno_to;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.SLACCTNO > '' THEN JE.SLACCTNO
                  ELSE JE.GLACCTNO END AS BP_CODE,
             CASE WHEN JE.SLACCTNAME > '' THEN JE.SLACCTNAME
                  ELSE JE.GLACCTNAME END AS BP_NAME,
             '',
             JE.REFNO,
             JE.GLDEBIT,
             JE.GLCREDIT
        FROM JOURNAL_TEMP2 JE
          WHERE (JE.ORITYPE = 'I');


  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.SLACCTNO > '' THEN JE.SLACCTNO
                  ELSE JE.GLACCTNO END AS BP_CODE,
             CASE WHEN JE.SLACCTNAME > '' THEN JE.SLACCTNAME
                  ELSE JE.GLACCTNAME END AS BP_NAME,
             CMI.ITEMDESC,
             JE.REFNO,
             CASE WHEN JE.GLDEBIT > 0 AND CMI.GLACCTNO = JE.GLACCTNO THEN IF(ABO.AMOUNT IS NULL, (CMI.LINETOTAL * JE.CURRENCYRATE), (CMI.LINETOTAL + ABO.AMOUNT) * JE.CURRENCYRATE)
                  ELSE JE.GLDEBIT END,
             JE.GLCREDIT
        FROM JOURNAL_TEMP2 JE
             LEFT OUTER JOIN ARCREDITMEMOS CM              ON CM.COMPANY  = pi_company  AND CM.BRANCH  = pi_branch  AND CM.DOCNO  = JE.DOCNO
             LEFT OUTER JOIN ARCREDITMEMOITEMS CMI         ON CMI.COMPANY = CM.COMPANY  AND CMI.BRANCH = CM.BRANCH  AND CMI.DOCID = CM.DOCID  AND CMI.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT ARO.COMPANY, ARO.BRANCH, SUM(ARO.AMOUNT) AS AMOUNT, BO.GLACCTNO, ARO.DOCID
                                   FROM ARCREDITMEMOOTHERCHARGESITEMS ARO, BRANCHOTHERCHARGES BO
                                   WHERE ARO.COMPANY = BO.COMPANY AND
                                         ARO.BRANCH = BO.BRANCH   AND
                                         ARO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY ARO.DOCID, BO.GLACCTNO) AS ABO
                                                           ON ABO.COMPANY = pi_company AND ABO.BRANCH = pi_branch AND ABO.DOCID = CM.DOCID AND ABO.GLACCTNO = JE.GLACCTNO
          WHERE (JE.ORITYPE = 'S');



  SELECT * FROM LEDGER_TEMP ORDER BY DOCNO, DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `arcreditmemo_list`
--

DROP PROCEDURE IF EXISTS `arcreditmemo_list`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `arcreditmemo_list`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM arcreditmemos A
        LEFT OUTER JOIN arcreditmemoitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `arinvoice_list`
--

DROP PROCEDURE IF EXISTS `arinvoice_list`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `arinvoice_list`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM arinvoices A
        LEFT OUTER JOIN arinvoiceitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE)
        ORDER BY A.DOCDATE,A.DOCNO,B.LINEID;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_aging`
--

DROP PROCEDURE IF EXISTS `ar_aging`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_aging`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_saletype VARCHAR(30), IN pi_date VARCHAR(10), IN pi_zone VARCHAR(30), IN pi_fgroup VARCHAR(30), IN pi_status VARCHAR(30), IN pi_wcrbal VARCHAR(30),IN pi_info VARCHAR(30))
BEGIN
  DECLARE v_advms DATE;
  DECLARE v_advme DATE;
  DECLARE v_30ms DATE;
  DECLARE v_60ms DATE;
  DECLARE v_90ms DATE;
  DECLARE v_30me DATE;
  DECLARE v_60me DATE;
  DECLARE v_90me DATE;
  DECLARE v_MONTH_END INT;
  DECLARE filter varchar(30);
   IF PI_status='UPDATED' THEN SET filter = '* UPDATED ACCOUNTS ONLY *';
   ELSEIF PI_status='PASTDUE' THEN SET filter = '* PASTDUE ACCOUNTS ONLY *';
   ELSEIF PI_status='MATURED' THEN SET filter = '* MATURED ACCOUNTS ONLY *';
   ELSE SET filter = '';
   END IF;
  SET v_30ms = date(concat(substring(pi_date,1,7),'-01'));
  SET v_advms = v_30ms + interval 1 month;
  SET v_60ms = v_30ms - interval 1 month;
  SET v_90ms = v_30ms - interval 2 month;
  SET v_30me = last_day(date(pi_date));
  SET v_advme = v_30me + interval 1 month;
  SET v_60me = v_30me - interval 1 month;
  SET v_90me = v_30me - interval 2 month;
  SET v_MONTH_END = concat('-',substring(v_60me,9,2)+1);
CREATE TEMPORARY TABLE  `pdcpayments` (
    `COMPANY` varchar(30) NOT NULL default '',
    `BRANCH` varchar(30) NOT NULL default '',
    `ACCTNO` varchar(30) NOT NULL default '',
    `PDCAMOUNT` NUMERIC(18,6) NOT NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO pdcpayments (COMPANY,BRANCH,ACCTNO,PDCAMOUNT)
      SELECT a.company,a.branch,a.refno, sum(a.rebate + a.amount) as pdcamount
        from collectionsinvoices a, collectionscheques b, collections c
        where b.company = a.company and b.branch = a.branch
        and b.docno = a.docno
        and b.company = c.company
        and b.branch = c.branchcode
        and b.docno = c.docno
        and c.pdc=1
        and a.company = pi_company and a.branch = pi_branch
        and b.checkdate <= v_advme
        and (c.valuedate > v_advme or  c.valuedate = '0000-00-00')
        group by a.refno;
CREATE TEMPORARY TABLE  `balances` (
    `COMPANY` varchar(30) NOT NULL default '',
    `BRANCH` varchar(30) NOT NULL default '',
    `DOCNO` varchar(30) NOT NULL default '',
    `BALANCE` NUMERIC(18,6) NOT NULL default '0',
    `DOCDATE` varchar(10) NOT NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
CREATE TEMPORARY TABLE  `journalpayments` (
    `COMPANY` varchar(30) NOT NULL default '',
    `BRANCH` varchar(30) NOT NULL default '',
    `DOCNO` varchar(30) NOT NULL default '',
    `BALANCE` NUMERIC(18,6) NOT NULL default '0',
    `DOCDATE` varchar(10) NOT NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        and (pi_saletype='' or (pi_saletype<>'' and a.saletype = pi_saletype))
        and
        (a.closeddate is null or  a.closeddate >= pi_date )
        AND a.accttype='' and a.docdate <= pi_date
        and (c.valuedate <= pi_date and c.valuedate<>'0000-00-00')
        group by a.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        and (pi_saletype='' or (pi_saletype<>'' and a.saletype = pi_saletype))
        and
        (a.closeddate is null or  a.closeddate >= pi_date )
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
CREATE TEMPORARY TABLE  `adv` (
    `COMPANY` varchar(30) NOT NULL default '',
    `BRANCH` varchar(30) NOT NULL default '',
    `DOCNO` varchar(30) NOT NULL default '',
    `advancepayment` NUMERIC(18,6) NOT NULL default '0',
    `DOCDATE` varchar(10) NOT NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        and (pi_saletype='' or (pi_saletype<>'' and a.saletype = pi_saletype))
        and
        (a.closeddate is null or  a.closeddate >= pi_date )
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
CREATE TEMPORARY TABLE  `advjv` (
    `COMPANY` varchar(30) NOT NULL default '',
    `BRANCH` varchar(30) NOT NULL default '',
    `DOCNO` varchar(30) NOT NULL default '',
    `advancepayment` NUMERIC(18,6) NOT NULL default '0',
    `DOCDATE` varchar(10) NOT NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        and (pi_saletype='' or (pi_saletype<>'' and a.saletype = pi_saletype))
        and
        (a.closeddate is null or  a.closeddate >= pi_date )
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
CREATE TEMPORARY TABLE  `concatfield` (
    `COMPANY` varchar(30) NOT NULL default '',
    `BRANCH` varchar(30) NOT NULL default '',
    `DOCNO` varchar(30) NOT NULL default '',
    `DUEAMOUNT` NUMERIC(18,6) NOT NULL default '0',
    `advpay` NUMERIC(18,6) NOT NULL default '0',
    `current` NUMERIC(18,6) NOT NULL default '0',
    `D30` NUMERIC(18,6) NOT NULL default '0',
    `D60` NUMERIC(18,6) NOT NULL default '0',
    `D90` NUMERIC(18,6) NOT NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
    INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D30,D60,D90)
    SELECT arinvoices.COMPANY, arinvoices.BRANCH, arinvoices.DOCNO,
        (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE)) as DUEAMOUNT,
        if (adv.advancepayment is null, 0, adv.advancepayment) + if (advjv.advancepayment is null, 0, advjv.advancepayment) AS advpay,
        if(arinvoices.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) <0
        and datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE)) else
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE))<0,
        (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE)),0) end
        ,0) as 'current',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 0 and 30 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 31 and 60 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE)) else 0.00 end,
        0) as 'D60',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) >= 61
        then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE)) else 0.00 end,
        0) as 'D90'
        FROM arinvoices
        LEFT OUTER JOIN loantypes on arinvoices.saletype = loantypes.loantype
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arinvoices.COMPANY = balances.COMPANY AND arinvoices.BRANCH = balances.BRANCH AND arinvoices.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arinvoices.COMPANY = journalpayments.COMPANY AND arinvoices.BRANCH = journalpayments.BRANCH AND arinvoices.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arinvoices.COMPANY = adv.COMPANY AND arinvoices.BRANCH = adv.BRANCH AND arinvoices.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arinvoices.COMPANY = advjv.COMPANY AND arinvoices.BRANCH = advjv.BRANCH AND arinvoices.DOCNO = advjv.DOCNO
        WHERE (arinvoices.closeddate is null or  arinvoices.closeddate >= pi_date )
        AND arinvoices.accttype='' and arinvoices.docdate <= pi_date
        AND (pi_saletype='' or (pi_saletype<>'' and arinvoices.saletype = pi_saletype)) AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        GROUP BY arinvoices.DOCNO
        ORDER BY arinvoices.u_zone, arinvoices.u_fgroup, arinvoices.docno ASC;
SELECT arinvoices.COMPANY, arinvoices.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME, arinvoices.BPCODE,
        concat(upper(customers.lastname), ', ',upper(customers.firstname)) as BPNAME, arinvoices.BILLTOADDRESS, arinvoiceitems.ITEMCODE,
        arinvoices.DOCNO, arinvoices.DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) AS aging,
        concat(upper(u_zones.code), ' - ',upper(u_zones.u_zonedesc)) as AREACODE ,
        upper(u_zones.code) as zonedesc,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D30 as '30',
        concatfield.D60 as '60',
        concatfield.D90 as '90',
        upper(u_fgroups.u_fgroupname) as fcompany, upper(loantypes.loantypename) as saletype,
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',upper(companies.companyname) as cname,
        upper(if(pi_wcrbal='Y','- w/ credit balance','- w/o credit balance')) as wcbal,pi_info as info,filter as filter
        FROM arinvoices
        LEFT OUTER JOIN branches ON arinvoices.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN customers ON arinvoices.BPCODE = customers.CUSTNO AND arinvoices.BRANCH = customers.BRANCH AND arinvoices.COMPANY = customers.COMPANY
        LEFT OUTER JOIN arinvoiceitems ON arinvoices.BRANCH = arinvoiceitems.BRANCH AND arinvoices.COMPANY = arinvoiceitems.COMPANY AND arinvoices.DOCID = arinvoiceitems.DOCID
        LEFT OUTER JOIN u_fgroups on arinvoices.u_fgroup = u_fgroups.code
        LEFT OUTER JOIN u_zones on arinvoices.u_zone = u_zones.code
        LEFT OUTER JOIN companies on arinvoices.company = companies.companycode
        LEFT OUTER JOIN loantypes on arinvoices.saletype = loantypes.loantype
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arinvoices.COMPANY = concatfield.COMPANY AND arinvoices.BRANCH = concatfield.BRANCH AND arinvoices.DOCNO = concatfield.DOCNO
        WHERE (arinvoices.closeddate is null or  arinvoices.closeddate >= pi_date )
        AND arinvoices.accttype='' and arinvoices.docdate <= pi_date
        AND (pi_saletype='' or (pi_saletype<>'' and arinvoices.saletype = pi_saletype)) AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        and (pi_zone='' or (pi_zone<>'' and arinvoices.u_zone=pi_zone))
        and (pi_fgroup='' or (pi_fgroup<>'' and arinvoices.u_fgroup=pi_fgroup))
        and (pi_status=''
               or (pi_status='UPDATED' and concatfield.D30=0 and concatfield.D60=0 and concatfield.D90=0)
               or (pi_status='PASTDUE' and (concatfield.D30>0 or concatfield.D60>0 or concatfield.D90>0))
               or (pi_status='MATURED' and arinvoices.docduedate <= v_30me)
            )
        and (pi_wcrbal='Y' or (pi_wcrbal='N' and concatfield.DUEAMOUNT>0))
        and (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY arinvoices.DOCNO, customers.AREACODE, branches.BRANCHNAME
        ORDER BY arinvoices.u_zone, arinvoices.u_fgroup, customers.lastname, arinvoices.docno ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_aging_new`
--

DROP PROCEDURE IF EXISTS `ar_aging_new`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_aging_new`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_date VARCHAR(10))
BEGIN
  DECLARE v_advms DATE;
  DECLARE v_advme DATE;
  DECLARE v_30ms DATE;
  DECLARE v_60ms DATE;
  DECLARE v_90ms DATE;
  DECLARE v_30me DATE;
  DECLARE v_60me DATE;
  DECLARE v_90me DATE;
  DECLARE v_MONTH_END INT;
  SET v_30ms = date(concat(substring(pi_date,1,7),'-01'));
  SET v_advms = v_30ms + interval 1 month;
  SET v_60ms = v_30ms - interval 1 month;
  SET v_90ms = v_30ms - interval 2 month;
  SET v_30me = date(pi_date);
  SET v_advme = last_day(v_30me + interval 1 month);
  SET v_60me = last_day(v_30me - interval 1 month);
  SET v_90me = last_day(v_30me - interval 2 month);
  SET v_MONTH_END = concat('-',substring(v_60me,9,2)+1);
DROP TEMPORARY TABLE IF EXISTS `pdcpayments`;
CREATE TEMPORARY TABLE  `pdcpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `ACCTNO` varchar(30) NULL default '',
    `PDCAMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO pdcpayments (COMPANY,BRANCH,ACCTNO,PDCAMOUNT)
      SELECT a.company,a.branch,a.refno, sum(a.rebate + a.amount) as pdcamount
        from collectionsinvoices a, collectionscheques b, collections c
        where b.company = a.company and b.branch = a.branch
        and b.docno = a.docno
        and b.company = c.company
        and b.branch = c.branchcode
        and b.docno = c.docno
        and c.pdc=1
        and a.company = pi_company and a.branch = pi_branch
        and b.checkdate >= pi_date
        group by a.refno;
DROP TEMPORARY TABLE IF EXISTS `balances`;
CREATE TEMPORARY TABLE  `balances` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by a.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by d.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `journalpayments`;
CREATE TEMPORARY TABLE  `journalpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by d.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.debit - b.credit) as BALANCE, c.DOCDATE
        from arcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `sale_return`;
CREATE TEMPORARY TABLE  `sale_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sale_return (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
       SELECT a.company,a.branch,a.docno, sum(b.BASEAMOUNT), b.DOCDATE
        from arinvoices a, arcreditmemos b
        where b.company = a.company
        and b.branch = a.branch
        and (b.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and b.docdate <= pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `adv`;
CREATE TEMPORARY TABLE  `adv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype=''
        and c.valuedate > pi_date
        group by d.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `advjv`;
CREATE TEMPORARY TABLE  `advjv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype=''
        and c.docdate > pi_date
        group by d.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `adv_sales_return`;
CREATE TEMPORARY TABLE  `adv_sales_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv_sales_return (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
       SELECT a.company,a.branch,a.docno, sum(0 - b.BASEAMOUNT), b.DOCDATE
        from arinvoices a, arcreditmemos b
        where b.company = a.company
        and b.branch = a.branch
        and (b.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and b.docdate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `concatfield`;
CREATE TEMPORARY TABLE  `concatfield` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `advpay` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D15,D30,UP30)
    SELECT arinvoices.COMPANY, arinvoices.BRANCH, arinvoices.DOCNO,
        (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(arinvoices.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) >= 31
        then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM arinvoices
        LEFT OUTER JOIN departments on if(arinvoices.saletype = '', arinvoices.department = departments.department, arinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arinvoices.COMPANY = balances.COMPANY AND arinvoices.BRANCH = balances.BRANCH AND arinvoices.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arinvoices.COMPANY = journalpayments.COMPANY AND arinvoices.BRANCH = journalpayments.BRANCH AND arinvoices.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arinvoices.COMPANY = adv.COMPANY AND arinvoices.BRANCH = adv.BRANCH AND arinvoices.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arinvoices.COMPANY = advjv.COMPANY AND arinvoices.BRANCH = advjv.BRANCH AND arinvoices.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON arinvoices.COMPANY = sale_return.COMPANY AND arinvoices.BRANCH = sale_return.BRANCH AND arinvoices.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON arinvoices.COMPANY = adv_sales_return.COMPANY AND arinvoices.BRANCH = adv_sales_return.BRANCH AND arinvoices.DOCNO = adv_sales_return.DOCNO
        WHERE arinvoices.trxtype<>'POS' and arinvoices.accttype='' and arinvoices.docdate <= pi_date
        AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        GROUP BY arinvoices.DOCNO
        ORDER BY arinvoices.docno ASC;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D15,D30,UP30)
    SELECT journalvoucheritems.COMPANY, journalvoucheritems.BRANCH, journalvoucheritems.DOCNO,
        (journalvoucheritems.grossamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(journalvouchers.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (journalvoucheritems.grossamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) >= 31
        then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvoucheritems.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON journalvouchers.COMPANY = balances.COMPANY AND journalvouchers.BRANCH = balances.BRANCH AND journalvoucheritems.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON journalvouchers.COMPANY = journalpayments.COMPANY AND journalvouchers.BRANCH = journalpayments.BRANCH AND journalvoucheritems.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON journalvouchers.COMPANY = adv.COMPANY AND journalvouchers.BRANCH = adv.BRANCH AND journalvoucheritems.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON journalvouchers.COMPANY = advjv.COMPANY AND journalvouchers.BRANCH = advjv.BRANCH AND journalvoucheritems.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON journalvouchers.COMPANY = sale_return.COMPANY AND journalvouchers.BRANCH = sale_return.BRANCH AND journalvoucheritems.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON journalvouchers.COMPANY = adv_sales_return.COMPANY AND journalvouchers.BRANCH = adv_sales_return.BRANCH AND journalvoucheritems.DOCNO = adv_sales_return.DOCNO
        WHERE journalvoucheritems.itemtype = 'C'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
        GROUP BY journalvoucheritems.DOCNO
        ORDER BY journalvoucheritems.DOCNO ASC;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D15,D30,UP30)
    SELECT arcreditmemos.COMPANY, arcreditmemos.BRANCH, arcreditmemos.DOCNO,
        (arcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(arcreditmemos.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (arcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) >= 31
        then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM arcreditmemos
        LEFT OUTER JOIN departments on if(arcreditmemos.saletype = '', arcreditmemos.department = departments.department, arcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arcreditmemos.COMPANY = pdcpayments.COMPANY AND arcreditmemos.BRANCH = pdcpayments.BRANCH AND arcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arcreditmemos.COMPANY = balances.COMPANY AND arcreditmemos.BRANCH = balances.BRANCH AND arcreditmemos.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arcreditmemos.COMPANY = journalpayments.COMPANY AND arcreditmemos.BRANCH = journalpayments.BRANCH AND arcreditmemos.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arcreditmemos.COMPANY = adv.COMPANY AND arcreditmemos.BRANCH = adv.BRANCH AND arcreditmemos.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arcreditmemos.COMPANY = advjv.COMPANY AND arcreditmemos.BRANCH = advjv.BRANCH AND arcreditmemos.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON arcreditmemos.COMPANY = sale_return.COMPANY AND arcreditmemos.BRANCH = sale_return.BRANCH AND arcreditmemos.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON arcreditmemos.COMPANY = adv_sales_return.COMPANY AND arcreditmemos.BRANCH = adv_sales_return.BRANCH AND arcreditmemos.DOCNO = adv_sales_return.DOCNO
        WHERE arcreditmemos.totalamount > 0 AND arcreditmemos.accttype = ''
        AND arcreditmemos.docdate <= pi_date
        AND arcreditmemos.COMPANY = pi_company AND arcreditmemos.BRANCH = pi_branch
        GROUP BY arcreditmemos.DOCNO
        ORDER BY arcreditmemos.docno ASC;
DROP TEMPORARY TABLE IF EXISTS `mainfield`;
CREATE TEMPORARY TABLE  `mainfield` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `BRANCHNAME` varchar(100) NULL default '',
    `BPCODE` varchar(100) NULL default '',
    `BPNAME` varchar(500) NULL default '',
    `BILLTOADDRESS` varchar(1000) NULL default '',
    `ITEMCODE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `DOCDUEDATE` DATE NULL,
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `aging` NUMERIC(18,6) NULL default '0',
    `fisrtmonth` DATE NULL,
    `secondndmonth` DATE NULL,
    `thirdmonth` DATE NULL,
    `advpay` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0',
    `PDC` NUMERIC(18,6) NULL default '0',
    `cname` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D15,D30,UP30,
    PDC,cname)
    SELECT arinvoices.COMPANY,
        arinvoices.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        arinvoices.BPCODE,
        arinvoices.BPNAME,
        arinvoices.BILLTOADDRESS,
        arinvoiceitems.ITEMCODE,
        arinvoices.DOCNO,
        date(if(arinvoices.DOCDUEDATE is null, now(), arinvoices.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D15 as '15',
        concatfield.D30 as '30',
        concatfield.UP30 as 'UP30',
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname
        FROM arinvoices
        LEFT OUTER JOIN branches ON arinvoices.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN arinvoiceitems ON arinvoices.BRANCH = arinvoiceitems.BRANCH AND arinvoices.COMPANY = arinvoiceitems.COMPANY AND arinvoices.DOCID = arinvoiceitems.DOCID
        LEFT OUTER JOIN companies on arinvoices.company = companies.companycode
        LEFT OUTER JOIN departments on if(arinvoices.saletype = '', arinvoices.department = departments.department, arinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arinvoices.COMPANY = concatfield.COMPANY AND arinvoices.BRANCH = concatfield.BRANCH
                        AND arinvoices.DOCNO = concatfield.DOCNO
        WHERE arinvoices.trxtype<>'POS' and arinvoices.accttype='' and arinvoices.docdate <= pi_date
        AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY arinvoices.DOCNO, branches.BRANCHNAME
        ORDER BY arinvoices.docno ASC;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D15,D30,UP30,
    PDC,cname)
    SELECT arcreditmemos.COMPANY,
        arcreditmemos.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        arcreditmemos.BPCODE,
        arcreditmemos.BPNAME,
        arcreditmemos.BILLTOADDRESS,
        arcreditmemoitems.ITEMCODE,
        arcreditmemos.DOCNO,
        date(if(arcreditmemos.DOCDUEDATE is null, now(), arcreditmemos.DOCDUEDATE)) as DOCDUEDATE,
        0-(concatfield.DUEAMOUNT),
        datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        0-(concatfield.advpay),
        0-(concatfield.current),
        0-(concatfield.D15) as '15',
        0-(concatfield.D30) as '30',
        0-(concatfield.UP30) as 'UP30',
        0-(if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount)) AS 'PDC',
        upper(companies.companyname) as cname
        FROM arcreditmemos
        LEFT OUTER JOIN branches ON arcreditmemos.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN arcreditmemoitems ON arcreditmemos.BRANCH = arcreditmemoitems.BRANCH AND arcreditmemos.COMPANY = arcreditmemoitems.COMPANY AND arcreditmemos.DOCID = arcreditmemoitems.DOCID
        LEFT OUTER JOIN companies on arcreditmemos.company = companies.companycode
        LEFT OUTER JOIN departments on if(arcreditmemos.saletype = '', arcreditmemos.department = departments.department, arcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arcreditmemos.COMPANY = pdcpayments.COMPANY AND arcreditmemos.BRANCH = pdcpayments.BRANCH AND arcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arcreditmemos.COMPANY = concatfield.COMPANY AND arcreditmemos.BRANCH = concatfield.BRANCH
                        AND arcreditmemos.DOCNO = concatfield.DOCNO
        WHERE arcreditmemos.totalamount > 0 AND arcreditmemos.accttype = ''
        AND arcreditmemos.docdate <= pi_date
        AND arcreditmemos.COMPANY = pi_company AND arcreditmemos.BRANCH = pi_branch
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY arcreditmemos.DOCNO, branches.BRANCHNAME
        ORDER BY arcreditmemos.docno ASC;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D15,D30,UP30,
    PDC,cname)
    SELECT journalvouchers.COMPANY,
        journalvouchers.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        journalvoucheritems.itemno as BPCODE,
        journalvoucheritems.itemname as BPNAME,
        '' as BILLTOADDRESS,
        '' as ITEMCODE,
        journalvoucheritems.DOCNO,
        date(if(journalvouchers.DOCDUEDATE is null, now(), journalvouchers.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D15 as '15',
        concatfield.D30 as '30',
        concatfield.UP30 as 'UP30',
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date
        LEFT OUTER JOIN branches ON journalvouchers.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on journalvouchers.company = companies.companycode
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvouchers.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON journalvouchers.COMPANY = concatfield.COMPANY AND journalvouchers.BRANCH = concatfield.BRANCH
                        AND journalvoucheritems.DOCNO = concatfield.DOCNO
        WHERE journalvoucheritems.itemtype = 'C'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
        and (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY journalvoucheritems.DOCNO, branches.BRANCHNAME
        ORDER BY journalvoucheritems.docno ASC;
  SELECT COMPANY, cname AS 'COMPANYNAME',BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,DOCNO,DOCDUEDATE,
    DUEAMOUNT, AGING,
    if(DUEAMOUNT < 0, DUEAMOUNT, current) as current,
    if(DUEAMOUNT < 0, 0, D15) as 'D15',
    if(DUEAMOUNT < 0, 0, D30) as 'D30',
    if(DUEAMOUNT < 0, 0, UP30) as 'UP30',
    advpay,
    PDC,
    date(pi_date) as date1
  FROM mainfield
  ORDER BY DOCNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_aging_new2`
--

DROP PROCEDURE IF EXISTS `ar_aging_new2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_aging_new2`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_date VARCHAR(10))
BEGIN
  DECLARE v_advms DATE;
  DECLARE v_advme DATE;
  DECLARE v_30ms DATE;
  DECLARE v_60ms DATE;
  DECLARE v_90ms DATE;
  DECLARE v_30me DATE;
  DECLARE v_60me DATE;
  DECLARE v_90me DATE;
  DECLARE v_MONTH_END INT;
  SET v_30ms = date(concat(substring(pi_date,1,7),'-01'));
  SET v_advms = v_30ms + interval 1 month;
  SET v_60ms = v_30ms - interval 1 month;
  SET v_90ms = v_30ms - interval 2 month;
  SET v_30me = date(pi_date);
  SET v_advme = last_day(v_30me + interval 1 month);
  SET v_60me = last_day(v_30me - interval 1 month);
  SET v_90me = last_day(v_30me - interval 2 month);
  SET v_MONTH_END = concat('-',substring(v_60me,9,2)+1);
DROP TEMPORARY TABLE IF EXISTS `pdcpayments`;
CREATE TEMPORARY TABLE  `pdcpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `ACCTNO` varchar(30) NULL default '',
    `PDCAMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO pdcpayments (COMPANY,BRANCH,ACCTNO,PDCAMOUNT)
      SELECT a.company,a.branch,a.refno, sum(a.rebate + a.amount) as pdcamount
        from collectionsinvoices a, collectionscheques b, collections c
        where b.company = a.company and b.branch = a.branch
        and b.docno = a.docno
        and b.company = c.company
        and b.branch = c.branchcode
        and b.docno = c.docno
        and c.pdc=1
        and a.company = pi_company and a.branch = pi_branch
        and b.checkdate >= pi_date
        group by a.refno;
DROP TEMPORARY TABLE IF EXISTS `balances`;
CREATE TEMPORARY TABLE  `balances` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by a.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by d.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `journalpayments`;
CREATE TEMPORARY TABLE  `journalpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by d.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.debit - b.credit) as BALANCE, c.DOCDATE
        from arcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `sale_return`;
CREATE TEMPORARY TABLE  `sale_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sale_return (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
       SELECT a.company,a.branch,a.docno, sum(b.BASEAMOUNT), b.DOCDATE
        from arinvoices a, arcreditmemos b
        where b.company = a.company
        and b.branch = a.branch
        and (b.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and b.docdate <= pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `adv`;
CREATE TEMPORARY TABLE  `adv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype=''
        and c.valuedate > pi_date
        group by d.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `advjv`;
CREATE TEMPORARY TABLE  `advjv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype=''
        and c.docdate > pi_date
        group by d.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `adv_sales_return`;
CREATE TEMPORARY TABLE  `adv_sales_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv_sales_return (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
       SELECT a.company,a.branch,a.docno, sum(0 - b.BASEAMOUNT), b.DOCDATE
        from arinvoices a, arcreditmemos b
        where b.company = a.company
        and b.branch = a.branch
        and (b.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and b.docdate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `concatfield`;
CREATE TEMPORARY TABLE  `concatfield` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `advpay` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `D7` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D7,D15,D30,UP30)
    SELECT arinvoices.COMPANY, arinvoices.BRANCH, arinvoices.DOCNO,
        (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(arinvoices.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 7 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D7',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 8 and 15 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) >= 31
        then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM arinvoices
        LEFT OUTER JOIN departments on if(arinvoices.saletype = '', arinvoices.department = departments.department, arinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arinvoices.COMPANY = balances.COMPANY AND arinvoices.BRANCH = balances.BRANCH AND arinvoices.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arinvoices.COMPANY = journalpayments.COMPANY AND arinvoices.BRANCH = journalpayments.BRANCH AND arinvoices.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arinvoices.COMPANY = adv.COMPANY AND arinvoices.BRANCH = adv.BRANCH AND arinvoices.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arinvoices.COMPANY = advjv.COMPANY AND arinvoices.BRANCH = advjv.BRANCH AND arinvoices.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON arinvoices.COMPANY = sale_return.COMPANY AND arinvoices.BRANCH = sale_return.BRANCH AND arinvoices.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON arinvoices.COMPANY = adv_sales_return.COMPANY AND arinvoices.BRANCH = adv_sales_return.BRANCH AND arinvoices.DOCNO = adv_sales_return.DOCNO
        WHERE arinvoices.trxtype<>'POS' and arinvoices.accttype='' and arinvoices.docdate <= pi_date
        AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        GROUP BY arinvoices.DOCNO
        ORDER BY arinvoices.docno ASC;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D7,D15,D30,UP30)
    SELECT journalvoucheritems.COMPANY, journalvoucheritems.BRANCH, journalvoucheritems.DOCNO,
        (journalvoucheritems.grossamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(journalvouchers.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (journalvoucheritems.grossamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 7 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D7',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 8 and 15 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) >= 31
        then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvoucheritems.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON journalvouchers.COMPANY = balances.COMPANY AND journalvouchers.BRANCH = balances.BRANCH AND journalvoucheritems.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON journalvouchers.COMPANY = journalpayments.COMPANY AND journalvouchers.BRANCH = journalpayments.BRANCH AND journalvoucheritems.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON journalvouchers.COMPANY = adv.COMPANY AND journalvouchers.BRANCH = adv.BRANCH AND journalvoucheritems.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON journalvouchers.COMPANY = advjv.COMPANY AND journalvouchers.BRANCH = advjv.BRANCH AND journalvoucheritems.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON journalvouchers.COMPANY = sale_return.COMPANY AND journalvouchers.BRANCH = sale_return.BRANCH AND journalvoucheritems.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON journalvouchers.COMPANY = adv_sales_return.COMPANY AND journalvouchers.BRANCH = adv_sales_return.BRANCH AND journalvoucheritems.DOCNO = adv_sales_return.DOCNO
        WHERE journalvoucheritems.itemtype = 'C'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
        GROUP BY journalvoucheritems.DOCNO
        ORDER BY journalvoucheritems.DOCNO ASC;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D7,D15,D30,UP30)
    SELECT arcreditmemos.COMPANY, arcreditmemos.BRANCH, arcreditmemos.DOCNO,
        (arcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(arcreditmemos.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (arcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 7 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D7',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 8 and 15 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) >= 31
        then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM arcreditmemos
        LEFT OUTER JOIN departments on if(arcreditmemos.saletype = '', arcreditmemos.department = departments.department, arcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arcreditmemos.COMPANY = pdcpayments.COMPANY AND arcreditmemos.BRANCH = pdcpayments.BRANCH AND arcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arcreditmemos.COMPANY = balances.COMPANY AND arcreditmemos.BRANCH = balances.BRANCH AND arcreditmemos.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arcreditmemos.COMPANY = journalpayments.COMPANY AND arcreditmemos.BRANCH = journalpayments.BRANCH AND arcreditmemos.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arcreditmemos.COMPANY = adv.COMPANY AND arcreditmemos.BRANCH = adv.BRANCH AND arcreditmemos.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arcreditmemos.COMPANY = advjv.COMPANY AND arcreditmemos.BRANCH = advjv.BRANCH AND arcreditmemos.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON arcreditmemos.COMPANY = sale_return.COMPANY AND arcreditmemos.BRANCH = sale_return.BRANCH AND arcreditmemos.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON arcreditmemos.COMPANY = adv_sales_return.COMPANY AND arcreditmemos.BRANCH = adv_sales_return.BRANCH AND arcreditmemos.DOCNO = adv_sales_return.DOCNO
        WHERE arcreditmemos.totalamount > 0 AND arcreditmemos.accttype = ''
        AND arcreditmemos.docdate <= pi_date
        AND arcreditmemos.COMPANY = pi_company AND arcreditmemos.BRANCH = pi_branch
        GROUP BY arcreditmemos.DOCNO
        ORDER BY arcreditmemos.docno ASC;
DROP TEMPORARY TABLE IF EXISTS `mainfield`;
CREATE TEMPORARY TABLE  `mainfield` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `BRANCHNAME` varchar(100) NULL default '',
    `BPCODE` varchar(100) NULL default '',
    `BPNAME` varchar(500) NULL default '',
    `BILLTOADDRESS` varchar(1000) NULL default '',
    `ITEMCODE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `DOCDUEDATE` DATE NULL,
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `aging` NUMERIC(18,6) NULL default '0',
    `fisrtmonth` DATE NULL,
    `secondndmonth` DATE NULL,
    `thirdmonth` DATE NULL,
    `advpay` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `D7` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0',
    `PDC` NUMERIC(18,6) NULL default '0',
    `cname` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D7,D15,D30,UP30,
    PDC,cname)
    SELECT arinvoices.COMPANY,
        arinvoices.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        arinvoices.BPCODE,
        arinvoices.BPNAME,
        arinvoices.BILLTOADDRESS,
        arinvoiceitems.ITEMCODE,
        arinvoices.DOCNO,
        date(if(arinvoices.DOCDUEDATE is null, now(), arinvoices.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D7 as '7',
        concatfield.D15 as '15',
        concatfield.D30 as '30',
        concatfield.UP30 as 'UP30',
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname
        FROM arinvoices
        LEFT OUTER JOIN branches ON arinvoices.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN arinvoiceitems ON arinvoices.BRANCH = arinvoiceitems.BRANCH AND arinvoices.COMPANY = arinvoiceitems.COMPANY AND arinvoices.DOCID = arinvoiceitems.DOCID
        LEFT OUTER JOIN companies on arinvoices.company = companies.companycode
        LEFT OUTER JOIN departments on if(arinvoices.saletype = '', arinvoices.department = departments.department, arinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arinvoices.COMPANY = concatfield.COMPANY AND arinvoices.BRANCH = concatfield.BRANCH
                        AND arinvoices.DOCNO = concatfield.DOCNO
        WHERE arinvoices.trxtype<>'POS' and arinvoices.accttype='' and arinvoices.docdate <= pi_date
        AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY arinvoices.DOCNO, branches.BRANCHNAME
        ORDER BY arinvoices.docno ASC;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D7,D15,D30,UP30,
    PDC,cname)
    SELECT arcreditmemos.COMPANY,
        arcreditmemos.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        arcreditmemos.BPCODE,
        arcreditmemos.BPNAME,
        arcreditmemos.BILLTOADDRESS,
        arcreditmemoitems.ITEMCODE,
        arcreditmemos.DOCNO,
        date(if(arcreditmemos.DOCDUEDATE is null, now(), arcreditmemos.DOCDUEDATE)) as DOCDUEDATE,
        0-(concatfield.DUEAMOUNT),
        datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        0-(concatfield.advpay),
        0-(concatfield.current),
        0-(concatfield.D7) as '7',
        0-(concatfield.D15) as '15',
        0-(concatfield.D30) as '30',
        0-(concatfield.UP30) as 'UP30',
        0-(if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount)) AS 'PDC',
        upper(companies.companyname) as cname
        FROM arcreditmemos
        LEFT OUTER JOIN branches ON arcreditmemos.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN arcreditmemoitems ON arcreditmemos.BRANCH = arcreditmemoitems.BRANCH AND arcreditmemos.COMPANY = arcreditmemoitems.COMPANY AND arcreditmemos.DOCID = arcreditmemoitems.DOCID
        LEFT OUTER JOIN companies on arcreditmemos.company = companies.companycode
        LEFT OUTER JOIN departments on if(arcreditmemos.saletype = '', arcreditmemos.department = departments.department, arcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arcreditmemos.COMPANY = pdcpayments.COMPANY AND arcreditmemos.BRANCH = pdcpayments.BRANCH AND arcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arcreditmemos.COMPANY = concatfield.COMPANY AND arcreditmemos.BRANCH = concatfield.BRANCH
                        AND arcreditmemos.DOCNO = concatfield.DOCNO
        WHERE arcreditmemos.totalamount > 0 AND arcreditmemos.accttype = ''
        AND arcreditmemos.docdate <= pi_date
        AND arcreditmemos.COMPANY = pi_company AND arcreditmemos.BRANCH = pi_branch
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY arcreditmemos.DOCNO, branches.BRANCHNAME
        ORDER BY arcreditmemos.docno ASC;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D7,D15,D30,UP30,
    PDC,cname)
    SELECT journalvouchers.COMPANY,
        journalvouchers.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        journalvoucheritems.itemno as BPCODE,
        journalvoucheritems.itemname as BPNAME,
        '' as BILLTOADDRESS,
        '' as ITEMCODE,
        journalvoucheritems.DOCNO,
        date(if(journalvouchers.DOCDUEDATE is null, now(), journalvouchers.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D7 as '7',
        concatfield.D15 as '15',
        concatfield.D30 as '30',
        concatfield.UP30 as 'UP30',
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date
        LEFT OUTER JOIN branches ON journalvouchers.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on journalvouchers.company = companies.companycode
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvouchers.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON journalvouchers.COMPANY = concatfield.COMPANY AND journalvouchers.BRANCH = concatfield.BRANCH
                        AND journalvoucheritems.DOCNO = concatfield.DOCNO
        WHERE journalvoucheritems.itemtype = 'C'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
        and (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY journalvoucheritems.DOCNO, branches.BRANCHNAME
        ORDER BY journalvoucheritems.docno ASC;
  SELECT a.COMPANY, a.cname AS 'COMPANYNAME', a.BRANCH, a.BRANCHNAME,
    a.BPCODE, a.BPNAME, a.BILLTOADDRESS, a.DOCNO, a.DOCDUEDATE,
    a.DUEAMOUNT, a.AGING,
    if(a.DUEAMOUNT < 0, a.DUEAMOUNT, a.current) as current,
    if(a.DUEAMOUNT < 0, 0, a.D7) as 'D7',
    if(a.DUEAMOUNT < 0, 0, a.D15) as 'D15',
    if(a.DUEAMOUNT < 0, 0, a.D30) as 'D30',
    if(a.DUEAMOUNT < 0, 0, a.UP30) as 'UP30',
    a.advpay,
    a.PDC,
    date(pi_date) as date1,
    pt.paymenttermNAME as term,
    ct.CREDITLIMIT as creditlimit
  FROM mainfield a
       LEFT OUTER JOIN customers ct ON ct.custno = a.BPCODE
       LEFT OUTER JOIN paymentterms pt ON pt.paymentterm = ct.paymentterm
  ORDER BY DOCNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_aging_new3`
--

DROP PROCEDURE IF EXISTS `ar_aging_new3`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_aging_new3`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_date VARCHAR(10))
BEGIN
  DECLARE v_advms DATE;
  DECLARE v_advme DATE;
  DECLARE v_30ms DATE;
  DECLARE v_60ms DATE;
  DECLARE v_90ms DATE;
  DECLARE v_30me DATE;
  DECLARE v_60me DATE;
  DECLARE v_90me DATE;
  DECLARE v_MONTH_END INT;
  SET v_30ms = date(concat(substring(pi_date,1,7),'-01'));
  SET v_advms = v_30ms + interval 1 month;
  SET v_60ms = v_30ms - interval 1 month;
  SET v_90ms = v_30ms - interval 2 month;
  SET v_30me = date(pi_date);
  SET v_advme = last_day(v_30me + interval 1 month);
  SET v_60me = last_day(v_30me - interval 1 month);
  SET v_90me = last_day(v_30me - interval 2 month);
  SET v_MONTH_END = concat('-',substring(v_60me,9,2)+1);
DROP TEMPORARY TABLE IF EXISTS `pdcpayments`;
CREATE TEMPORARY TABLE  `pdcpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `ACCTNO` varchar(30) NULL default '',
    `PDCAMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO pdcpayments (COMPANY,BRANCH,ACCTNO,PDCAMOUNT)
      SELECT a.company,a.branch,a.refno, sum(a.rebate + a.amount) as pdcamount
        from collectionsinvoices a, collectionscheques b, collections c
        where b.company = a.company and b.branch = a.branch
        and b.docno = a.docno
        and b.company = c.company
        and b.branch = c.branchcode
        and b.docno = c.docno
        and c.pdc=1
        and a.company = pi_company and a.branch = pi_branch
        and b.checkdate >= pi_date
        group by a.refno;
DROP TEMPORARY TABLE IF EXISTS `balances`;
CREATE TEMPORARY TABLE  `balances` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by a.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by d.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `journalpayments`;
CREATE TEMPORARY TABLE  `journalpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by d.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.debit - b.credit) as BALANCE, c.DOCDATE
        from arcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `sale_return`;
CREATE TEMPORARY TABLE  `sale_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sale_return (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
       SELECT a.company,a.branch,a.docno, sum(b.BASEAMOUNT), b.DOCDATE
        from arinvoices a, arcreditmemos b
        where b.company = a.company
        and b.branch = a.branch
        and (b.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and b.docdate <= pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `adv`;
CREATE TEMPORARY TABLE  `adv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype=''
        and c.valuedate > pi_date
        group by d.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `advjv`;
CREATE TEMPORARY TABLE  `advjv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype=''
        and c.docdate > pi_date
        group by d.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `adv_sales_return`;
CREATE TEMPORARY TABLE  `adv_sales_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv_sales_return (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
       SELECT a.company,a.branch,a.docno, sum(0 - b.BASEAMOUNT), b.DOCDATE
        from arinvoices a, arcreditmemos b
        where b.company = a.company
        and b.branch = a.branch
        and (b.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and b.docdate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `concatfield`;
CREATE TEMPORARY TABLE  `concatfield` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `advpay` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `D7` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D7,D15,D30,UP30)
    SELECT arinvoices.COMPANY, arinvoices.BRANCH, arinvoices.DOCNO,
        (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(arinvoices.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D7',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 31 and 45 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) >= 46
        then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM arinvoices
        LEFT OUTER JOIN departments on if(arinvoices.saletype = '', arinvoices.department = departments.department, arinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arinvoices.COMPANY = balances.COMPANY AND arinvoices.BRANCH = balances.BRANCH AND arinvoices.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arinvoices.COMPANY = journalpayments.COMPANY AND arinvoices.BRANCH = journalpayments.BRANCH AND arinvoices.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arinvoices.COMPANY = adv.COMPANY AND arinvoices.BRANCH = adv.BRANCH AND arinvoices.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arinvoices.COMPANY = advjv.COMPANY AND arinvoices.BRANCH = advjv.BRANCH AND arinvoices.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON arinvoices.COMPANY = sale_return.COMPANY AND arinvoices.BRANCH = sale_return.BRANCH AND arinvoices.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON arinvoices.COMPANY = adv_sales_return.COMPANY AND arinvoices.BRANCH = adv_sales_return.BRANCH AND arinvoices.DOCNO = adv_sales_return.DOCNO
        WHERE arinvoices.trxtype<>'POS' and arinvoices.accttype='' and arinvoices.docdate <= pi_date
        AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        GROUP BY arinvoices.DOCNO
        ORDER BY arinvoices.docno ASC;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D7,D15,D30,UP30)
    SELECT journalvoucheritems.COMPANY, journalvoucheritems.BRANCH, journalvoucheritems.DOCNO,
        (journalvoucheritems.grossamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(journalvouchers.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (journalvoucheritems.grossamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D7',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 30 and 45 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) >= 46
        then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvoucheritems.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON journalvouchers.COMPANY = balances.COMPANY AND journalvouchers.BRANCH = balances.BRANCH AND journalvoucheritems.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON journalvouchers.COMPANY = journalpayments.COMPANY AND journalvouchers.BRANCH = journalpayments.BRANCH AND journalvoucheritems.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON journalvouchers.COMPANY = adv.COMPANY AND journalvouchers.BRANCH = adv.BRANCH AND journalvoucheritems.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON journalvouchers.COMPANY = advjv.COMPANY AND journalvouchers.BRANCH = advjv.BRANCH AND journalvoucheritems.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON journalvouchers.COMPANY = sale_return.COMPANY AND journalvouchers.BRANCH = sale_return.BRANCH AND journalvoucheritems.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON journalvouchers.COMPANY = adv_sales_return.COMPANY AND journalvouchers.BRANCH = adv_sales_return.BRANCH AND journalvoucheritems.DOCNO = adv_sales_return.DOCNO
        WHERE journalvoucheritems.itemtype = 'C'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
        GROUP BY journalvoucheritems.DOCNO
        ORDER BY journalvoucheritems.DOCNO ASC;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D7,D15,D30,UP30)
    SELECT arcreditmemos.COMPANY, arcreditmemos.BRANCH, arcreditmemos.DOCNO,
        (arcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(arcreditmemos.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (arcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D7',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 31 and 45 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) >= 46
        then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM arcreditmemos
        LEFT OUTER JOIN departments on if(arcreditmemos.saletype = '', arcreditmemos.department = departments.department, arcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arcreditmemos.COMPANY = pdcpayments.COMPANY AND arcreditmemos.BRANCH = pdcpayments.BRANCH AND arcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arcreditmemos.COMPANY = balances.COMPANY AND arcreditmemos.BRANCH = balances.BRANCH AND arcreditmemos.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arcreditmemos.COMPANY = journalpayments.COMPANY AND arcreditmemos.BRANCH = journalpayments.BRANCH AND arcreditmemos.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arcreditmemos.COMPANY = adv.COMPANY AND arcreditmemos.BRANCH = adv.BRANCH AND arcreditmemos.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arcreditmemos.COMPANY = advjv.COMPANY AND arcreditmemos.BRANCH = advjv.BRANCH AND arcreditmemos.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON arcreditmemos.COMPANY = sale_return.COMPANY AND arcreditmemos.BRANCH = sale_return.BRANCH AND arcreditmemos.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON arcreditmemos.COMPANY = adv_sales_return.COMPANY AND arcreditmemos.BRANCH = adv_sales_return.BRANCH AND arcreditmemos.DOCNO = adv_sales_return.DOCNO
        WHERE arcreditmemos.totalamount > 0 AND arcreditmemos.accttype = ''
        AND arcreditmemos.docdate <= pi_date
        AND arcreditmemos.COMPANY = pi_company AND arcreditmemos.BRANCH = pi_branch
        GROUP BY arcreditmemos.DOCNO
        ORDER BY arcreditmemos.docno ASC;
DROP TEMPORARY TABLE IF EXISTS `mainfield`;
CREATE TEMPORARY TABLE  `mainfield` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `BRANCHNAME` varchar(100) NULL default '',
    `BPCODE` varchar(100) NULL default '',
    `BPNAME` varchar(500) NULL default '',
    `BILLTOADDRESS` varchar(1000) NULL default '',
    `ITEMCODE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `DOCDUEDATE` DATE NULL,
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `aging` NUMERIC(18,6) NULL default '0',
    `fisrtmonth` DATE NULL,
    `secondndmonth` DATE NULL,
    `thirdmonth` DATE NULL,
    `advpay` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `D7` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0',
    `PDC` NUMERIC(18,6) NULL default '0',
    `cname` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D7,D15,D30,UP30,
    PDC,cname)
    SELECT arinvoices.COMPANY,
        arinvoices.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        arinvoices.BPCODE,
        arinvoices.BPNAME,
        arinvoices.BILLTOADDRESS,
        arinvoiceitems.ITEMCODE,
        arinvoices.DOCNO,
        date(if(arinvoices.DOCDUEDATE is null, now(), arinvoices.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D7 as '7',
        concatfield.D15 as '15',
        concatfield.D30 as '30',
        concatfield.UP30 as 'UP30',
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname
        FROM arinvoices
        LEFT OUTER JOIN branches ON arinvoices.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN arinvoiceitems ON arinvoices.BRANCH = arinvoiceitems.BRANCH AND arinvoices.COMPANY = arinvoiceitems.COMPANY AND arinvoices.DOCID = arinvoiceitems.DOCID
        LEFT OUTER JOIN companies on arinvoices.company = companies.companycode
        LEFT OUTER JOIN departments on if(arinvoices.saletype = '', arinvoices.department = departments.department, arinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arinvoices.COMPANY = concatfield.COMPANY AND arinvoices.BRANCH = concatfield.BRANCH
                        AND arinvoices.DOCNO = concatfield.DOCNO
        WHERE arinvoices.trxtype<>'POS' and arinvoices.accttype='' and arinvoices.docdate <= pi_date
        AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY arinvoices.DOCNO, branches.BRANCHNAME
        ORDER BY arinvoices.docno ASC;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D7,D15,D30,UP30,
    PDC,cname)
    SELECT arcreditmemos.COMPANY,
        arcreditmemos.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        arcreditmemos.BPCODE,
        arcreditmemos.BPNAME,
        arcreditmemos.BILLTOADDRESS,
        arcreditmemoitems.ITEMCODE,
        arcreditmemos.DOCNO,
        date(if(arcreditmemos.DOCDUEDATE is null, now(), arcreditmemos.DOCDUEDATE)) as DOCDUEDATE,
        0-(concatfield.DUEAMOUNT),
        datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        0-(concatfield.advpay),
        0-(concatfield.current),
        0-(concatfield.D7) as '7',
        0-(concatfield.D15) as '15',
        0-(concatfield.D30) as '30',
        0-(concatfield.UP30) as 'UP30',
        0-(if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount)) AS 'PDC',
        upper(companies.companyname) as cname
        FROM arcreditmemos
        LEFT OUTER JOIN branches ON arcreditmemos.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN arcreditmemoitems ON arcreditmemos.BRANCH = arcreditmemoitems.BRANCH AND arcreditmemos.COMPANY = arcreditmemoitems.COMPANY AND arcreditmemos.DOCID = arcreditmemoitems.DOCID
        LEFT OUTER JOIN companies on arcreditmemos.company = companies.companycode
        LEFT OUTER JOIN departments on if(arcreditmemos.saletype = '', arcreditmemos.department = departments.department, arcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arcreditmemos.COMPANY = pdcpayments.COMPANY AND arcreditmemos.BRANCH = pdcpayments.BRANCH AND arcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arcreditmemos.COMPANY = concatfield.COMPANY AND arcreditmemos.BRANCH = concatfield.BRANCH
                        AND arcreditmemos.DOCNO = concatfield.DOCNO
        WHERE arcreditmemos.totalamount > 0 AND arcreditmemos.accttype = ''
        AND arcreditmemos.docdate <= pi_date
        AND arcreditmemos.COMPANY = pi_company AND arcreditmemos.BRANCH = pi_branch
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY arcreditmemos.DOCNO, branches.BRANCHNAME
        ORDER BY arcreditmemos.docno ASC;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D7,D15,D30,UP30,
    PDC,cname)
    SELECT journalvouchers.COMPANY,
        journalvouchers.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        journalvoucheritems.itemno as BPCODE,
        journalvoucheritems.itemname as BPNAME,
        '' as BILLTOADDRESS,
        '' as ITEMCODE,
        journalvoucheritems.DOCNO,
        date(if(journalvouchers.DOCDUEDATE is null, now(), journalvouchers.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D7 as '7',
        concatfield.D15 as '15',
        concatfield.D30 as '30',
        concatfield.UP30 as 'UP30',
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date
        LEFT OUTER JOIN branches ON journalvouchers.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on journalvouchers.company = companies.companycode
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvouchers.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON journalvouchers.COMPANY = concatfield.COMPANY AND journalvouchers.BRANCH = concatfield.BRANCH
                        AND journalvoucheritems.DOCNO = concatfield.DOCNO
        WHERE journalvoucheritems.itemtype = 'C'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
        and (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY journalvoucheritems.DOCNO, branches.BRANCHNAME
        ORDER BY journalvoucheritems.docno ASC;
  SELECT a.COMPANY, a.cname AS 'COMPANYNAME', a.BRANCH, a.BRANCHNAME,
    a.BPCODE, a.BPNAME, a.BILLTOADDRESS, a.DOCNO, a.DOCDUEDATE,
    a.DUEAMOUNT, a.AGING,
    if(a.DUEAMOUNT < 0, a.DUEAMOUNT, a.current) as current,
    if(a.DUEAMOUNT < 0, 0, a.D7) as 'D7',
    if(a.DUEAMOUNT < 0, 0, a.D15) as 'D15',
    if(a.DUEAMOUNT < 0, 0, a.D30) as 'D30',
    if(a.DUEAMOUNT < 0, 0, a.UP30) as 'UP30',
    a.advpay,
    a.PDC,
    date(pi_date) as date1,
    pt.paymenttermNAME as term,
    ct.CREDITLIMIT as creditlimit
  FROM mainfield a
       LEFT OUTER JOIN customers ct ON ct.custno = a.BPCODE
       LEFT OUTER JOIN paymentterms pt ON pt.paymentterm = ct.paymentterm
  ORDER BY DOCNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_checkbalances`
--

DROP PROCEDURE IF EXISTS `ar_checkbalances`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_checkbalances`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_mode VARCHAR(10))
BEGIN
DECLARE v_DocNo       varchar(30);
DECLARE v_Balance numeric(20,2);
DECLARE v_Done        integer;
DECLARE v_DirectRate        integer;
DECLARE v_Updated        integer;
DECLARE Cursor_arbalances CURSOR FOR SELECT DocNo, Totalamount - (RC+PY+CM+JV) FROM arbalances where  SETTLEDAMOUNT<>(RC+PY+CM+JV) or (docstatus='C' and dueamount>0) or (docstatus='O' and dueamount=0);
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;
DROP TEMPORARY TABLE IF EXISTS `arbalances`;
CREATE TEMPORARY TABLE  `arbalances` (
    `DOCNO` varchar(30) NULL default '',
    `DOCSTATUS` varchar(5) NULL default '',
    `TOTALAMOUNT` NUMERIC(18,6) NULL default '0',
    `SETTLEDAMOUNT` NUMERIC(18,6) NULL default '0',
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `RC` NUMERIC(18,6) NULL default '0',
    `PY` NUMERIC(18,6) NULL default '0',
    `CM` NUMERIC(18,6) NULL default '0',
    `JV` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
Select directrate into v_DirectRate from companies;

INSERT
    INTO arbalances (DOCNO,DOCSTATUS,TOTALAMOUNT,SETTLEDAMOUNT,DUEAMOUNT,RC,PY,CM,JV)
select docno,docstatus,totalamount,settledamount,dueamount,
  ifnull((select sum(collectionsinvoices.amount) from collections,collectionsinvoices where collectionsinvoices.company=collections.company and collectionsinvoices.branch=collections.branchcode and collectionsinvoices.docno=collections.docno and collections.company=arinvoices.company and collections.branchcode=arinvoices.branch and collections.docstat IN ('O','C') and collectionsinvoices.reftype='ARINVOICE' and collectionsinvoices.refno=arinvoices.docno),0),
  ifnull((select sum(paymentinvoices.amount*-1) from payments,paymentinvoices where paymentinvoices.company=payments.company and paymentinvoices.branch=payments.branchcode and paymentinvoices.docno=payments.docno and payments.company=arinvoices.company and payments.branchcode=arinvoices.branch and payments.docstat IN ('O','C') and paymentinvoices.reftype='ARINVOICE' and paymentinvoices.refno=arinvoices.docno),0),
  ifnull((select sum(arcreditmemos.baseamount+arcreditmemos.totalamount) from arcreditmemos where arcreditmemos.company=arinvoices.company and arcreditmemos.branch=arinvoices.branch and arcreditmemos.docstatus IN ('O','C') and arcreditmemos.basedocno=arinvoices.docno),0),
  ifnull((select sum(if(v_DirectRate=1,(journalvoucheritems.credit-journalvoucheritems.debit)/journalvoucheritems.currencyrate,(journalvoucheritems.credit-journalvoucheritems.debit)*journalvoucheritems.currencyrate)) from journalvoucheritems where journalvoucheritems.company=arinvoices.company and journalvoucheritems.branch=arinvoices.branch and journalvoucheritems.reftype='ARINVOICE' and journalvoucheritems.refno=arinvoices.docno),0)
from arinvoices where company=pi_company and branch=pi_branch and docstatus <>'D';
if pi_mode = 'update' then
  SET v_Updated = 0 ;
  SET v_Done = 0 ;
  BLOCK1: BEGIN
  OPEN Cursor_arbalances ;
  REPEAT
    FETCH Cursor_arbalances INTO v_DocNo, v_Balance ;
    IF NOT v_Done THEN
       update arinvoices set docstatus=if(v_Balance=0,'C','O'), settledamount=totalamount-v_Balance, dueamount=v_balance where company=pi_company and branch=pi_branch and docno=v_DocNo;
      SET v_Updated = v_Updated + 1;
    END IF ;
  UNTIL v_Done END REPEAT ;
  CLOSE Cursor_arbalances ;
  END BLOCK1 ;
  select v_Updated;
else
  select DOCNO,TOTALAMOUNT,SETTLEDAMOUNT,DUEAMOUNT,DOCSTATUS,(RC+PY+CM+JV),RC,PY,CM,JV from arbalances where SETTLEDAMOUNT<>(RC+PY+CM+JV) or (docstatus='C' and dueamount>0) or (docstatus='O' and dueamount=0);
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_creditmemos`
--

DROP PROCEDURE IF EXISTS `ar_creditmemos`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_creditmemos`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as shiptoadd, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       '' as chassis, '' as 'engine', d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice, d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.OTHERCHARGES as othercharges, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.ROUNDAMOUNT as rouding, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, i.username as created_by
       from arcreditmemos a
            left outer join arcreditmemoitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            
                                                 
            left outer join users i on d.CREATEDBY = i.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_creditmemos_ghe`
--

DROP PROCEDURE IF EXISTS `ar_creditmemos_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_creditmemos_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `sales_order` (
    `docno` varchar(30) NULL default '',
    `docperc` NUMERIC(18,6) NULL default '0',
    `itemcode` varchar(30) NULL default '',
    `lineperc` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sales_order (docno, docperc, itemcode, lineperc)
    Select a.docno, a.discperc as docperc, d.itemcode, d.discperc as lineperc
       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            where a.COMPANY = pi_company and a.BRANCH = pi_branch;
CREATE TEMPORARY TABLE  `delivery` (
    `docno` varchar(30) NULL default '',
    `basedocno` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO delivery (docno, basedocno)
    Select a.docno, d.basedocno
       from salesdeliveries a
            left outer join salesdeliveryitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            where a.COMPANY = pi_company and a.BRANCH = pi_branch;
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd, g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       if(d.ITEMCODE = '', d.glacctno, d.ITEMCODE) as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCPERC as DISCAMOUNT,
       i.WEIGHTSA * d.QUANTITY AS WEIGHT,
       d.U_U_LINEVOLUME as LINEVOLUME,
       d.U_U_QTYPERCRTN * d.QUANTITY as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when d.UNITPRICE < d.ITEMCOST then 'C'
            when d.UNITPRICE > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       a.docduedate,
       a.u_u_sleadtime,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       hb.bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       a.u_u_transshipment,
       a.u_u_shipmark,
       concat('S.O. No.: ', so.docno) as so_docno,
       so.docperc,
       so.lineperc,
       i.u_u_netweight * d.QUANTITY as netweight,
       a.u_u_hscno,
       d.u_u_qtypercrtn,
       d.u_u_itemvolume,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.currencyrate,
       d.u_u_scharge,
       d.u_u_sqty
       from arcreditmemos a
            left outer join arcreditmemoitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join delivery de on if(d.basetypenm = 'Sales Order', de.docno = '', d.basedocno = de.docno)
            left outer join sales_order so on if(d.basetypenm = 'Sales Order',
                                                d.basedocno = so.docno and d.itemcode = so.itemcode,
                                                de.basedocno = so.docno and d.itemcode = so.itemcode)
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_deliveries_ghe`
--

DROP PROCEDURE IF EXISTS `ar_deliveries_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_deliveries_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN

select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd, g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       if(d.ITEMCODE = '', d.glacctno, d.ITEMCODE) as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCPERC as DISCAMOUNT,
       if(d.U_U_WEIGHTSA > 0, d.U_U_WEIGHTSA, i.weightsa) AS WEIGHT,
       if(d.U_U_ITEMVOLUME > 0, d.U_U_ITEMVOLUME * d.QUANTITY, i.VOLUMESA * d.QUANTITY) as LINEVOLUME,
       if(d.U_U_QTYPERCRTN > 0, (d.QUANTITY / d.U_U_QTYPERCRTN), if(i.U_U_QTYPERCRTN > 0 , d.QUANTITY / i.U_U_QTYPERCRTN, If(i.isinventory = 1, d.QUANTITY, 0))) as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.totalamount as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when (d.UNITPRICE * a.CURRENCYRATE) < d.ITEMCOST then 'c'
            when (d.UNITPRICE * a.CURRENCYRATE) > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       a.docduedate,
       a.u_u_sleadtime,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       hb.bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       a.u_u_transshipment,
       a.u_u_shipmark,
       concat('S.O. No.: ', so.docno) as so_docno,
       so.discperc as docperc,
       si.discperc as lineperc,
       if(d.u_u_netweight > 0, d.u_u_netweight, i.u_u_netweight) as netweight,
       a.u_u_hscno,
       if(d.U_U_QTYPERCRTN > 0, d.U_U_QTYPERCRTN, if(i.U_U_QTYPERCRTN > 0 , i.U_U_QTYPERCRTN, If(i.isinventory = 1, 1, 0))) as u_u_qtypercrtn,
       if(d.u_u_itemvolume > 0, d.u_u_itemvolume, i.volumesa) as u_u_itemvolume,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.currencyrate,
       d.u_u_scharge,
       d.u_u_sqty,
       a.company as companyx,
       a.branch as branchx,
       a.docid,
       cust.u_u_cominfo
       from salesdeliveries a
            left outer join salesdeliveryitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left join (salesorders so cross join salesorderitems si ) on (so.company = si.company and so.branch = si.branch and
                       so.docid and si.docid and so.company = a.company and so.branch = a.branch and
                       so.docno = if(d.basetypenm = 'Sales Order', d.basedocno, '') and si.lineid = d.baselineid)
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_downpayment_ghe`
--

DROP PROCEDURE IF EXISTS `ar_downpayment_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_downpayment_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `sales_order` (
    `docno` varchar(30) NULL default '',
    `docperc` NUMERIC(18,6) NULL default '0',
    `itemcode` varchar(30) NULL default '',
    `lineperc` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sales_order (docno, docperc, itemcode, lineperc)
    Select a.docno, a.discperc as docperc, d.itemcode, d.discperc as lineperc
       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            where a.COMPANY = pi_company and a.BRANCH = pi_branch;
CREATE TEMPORARY TABLE  `delivery` (
    `docno` varchar(30) NULL default '',
    `basedocno` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO delivery (docno, basedocno)
    Select a.docno, d.basedocno
       from salesdeliveries a
            left outer join salesdeliveryitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            where a.COMPANY = pi_company and a.BRANCH = pi_branch;
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd, g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       if(d.ITEMCODE = '', d.glacctno, d.ITEMCODE) as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCPERC as DISCAMOUNT,
       if(d.U_U_WEIGHTSA > 0, d.U_U_WEIGHTSA, i.weightsa) AS WEIGHT,
       if(d.U_U_ITEMVOLUME > 0, d.U_U_ITEMVOLUME * d.QUANTITY, i.VOLUMESA * d.QUANTITY) as LINEVOLUME,
       if(d.U_U_QTYPERCRTN > 0, (d.QUANTITY / d.U_U_QTYPERCRTN), if(i.U_U_QTYPERCRTN > 0 , d.QUANTITY / i.U_U_QTYPERCRTN, If(i.isinventory = 1, d.QUANTITY, 0))) as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.dueamount as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when (d.UNITPRICE * a.CURRENCYRATE) < d.ITEMCOST then 'c'
            when (d.UNITPRICE * a.CURRENCYRATE) > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       a.docduedate,
       a.u_u_sleadtime,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       hb.bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       a.u_u_transshipment,
       a.u_u_shipmark,
       concat('S.O. No.: ', so.docno) as so_docno,
       so.docperc,
       so.lineperc,
       if(d.u_u_netweight > 0, d.u_u_netweight, i.u_u_netweight) as netweight,
       a.u_u_hscno,
       if(d.U_U_QTYPERCRTN > 0, d.U_U_QTYPERCRTN, if(i.U_U_QTYPERCRTN > 0 , i.U_U_QTYPERCRTN, If(i.isinventory = 1, 1, 0))) as u_u_qtypercrtn,
       if(d.u_u_itemvolume > 0, d.u_u_itemvolume, i.volumesa) as u_u_itemvolume,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.currencyrate,
       d.u_u_scharge,
       d.u_u_sqty,
       a.company as companyx,
       a.branch as branchx,
       a.docid,
       cust.u_u_cominfo,
       a.dpamount,
       a.dpperc
       from ardownpaymentinvoices a
            left outer join ardownpaymentinvoiceitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join delivery de on if(d.basetypenm = 'Sales Order', de.docno = '', d.basedocno = de.docno)
            left outer join sales_order so on if(d.basetypenm = 'Sales Order',
                                                d.basedocno = so.docno and d.itemcode = so.itemcode,
                                                de.basedocno = so.docno and d.itemcode = so.itemcode)
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_invoices`
--

DROP PROCEDURE IF EXISTS `ar_invoices`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_invoices`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as shiptoadd, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       '' as chassis, '' as 'engine', d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.glacctno as glacctno,
       d.QUANTITY as qty,
       d.price as unitprice,
       linetotal as linetotal,
       '' as CREDITCARDNAME,
       a.ACCTNO, a.ACCTFDD, a.ACCTLDD, a.INSTNUM, a.ACCTDPAMOUNT,
       a.ACCTMA, a.ACCTREBATE, a.ACCTFINAMOUNT, a.ACCTPNAMOUNT,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.OTHERCHARGES as othercharges, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.DPAPPLIED,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, i.username as created_by,
       '' as datebirth,
       e.ADDRESS, d.whscode as whscode
       from arinvoices a
            left outer join arinvoiceitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            
                                                 
            
                                              
            
            left outer join users i on d.CREATEDBY = i.userid
            
            
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno    ;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_invoices_ghe`
--

DROP PROCEDURE IF EXISTS `ar_invoices_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_invoices_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `sales_order` (
    `docno` varchar(30) NULL default '',
    `docperc` NUMERIC(18,6) NULL default '0',
    `itemcode` varchar(30) NULL default '',
    `lineperc` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sales_order (docno, docperc, itemcode, lineperc)
    Select a.docno, a.discperc as docperc, d.itemcode, d.discperc as lineperc
       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            where a.COMPANY = pi_company and a.BRANCH = pi_branch;
CREATE TEMPORARY TABLE  `delivery` (
    `docno` varchar(30) NULL default '',
    `basedocno` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO delivery (docno, basedocno)
    Select a.docno, d.basedocno
       from salesdeliveries a
            left outer join salesdeliveryitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            where a.COMPANY = pi_company and a.BRANCH = pi_branch;
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,

       a.SHIPTOADDRESS as shiptoadd, g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       if(d.ITEMCODE = '', d.glacctno, d.ITEMCODE) as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCPERC as DISCAMOUNT,
       if(d.U_U_WEIGHTSA > 0, d.U_U_WEIGHTSA, i.weightsa) AS WEIGHT,
       if(d.U_U_ITEMVOLUME > 0, d.U_U_ITEMVOLUME * d.QUANTITY, i.VOLUMESA * d.QUANTITY) as LINEVOLUME,
       if(d.U_U_QTYPERCRTN > 0, (d.QUANTITY / d.U_U_QTYPERCRTN), if(i.U_U_QTYPERCRTN > 0 , d.QUANTITY / i.U_U_QTYPERCRTN, If(i.isinventory = 1, d.QUANTITY, 0))) as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.dueamount as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when (d.UNITPRICE * a.CURRENCYRATE) < d.ITEMCOST then 'c'
            when (d.UNITPRICE * a.CURRENCYRATE) > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       a.docduedate,
       a.u_u_sleadtime,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       hb.bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       a.u_u_transshipment,
       a.u_u_shipmark,
       concat('S.O. No.: ', so.docno) as so_docno,
       so.docperc,
       so.lineperc,
       if(d.u_u_netweight > 0, d.u_u_netweight, i.u_u_netweight) as netweight,
       a.u_u_hscno,
       if(d.U_U_QTYPERCRTN > 0, d.U_U_QTYPERCRTN, if(i.U_U_QTYPERCRTN > 0 , i.U_U_QTYPERCRTN, If(i.isinventory = 1, 1, 0))) as u_u_qtypercrtn,
       if(d.u_u_itemvolume > 0, d.u_u_itemvolume, i.volumesa) as u_u_itemvolume,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.currencyrate,
       d.u_u_scharge,
       d.u_u_sqty,
       a.company as companyx,
       a.branch as branchx,
       a.docid,
       cust.u_u_cominfo
       from arinvoices a
            left outer join arinvoiceitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join delivery de on if(d.basetypenm = 'Sales Order', de.docno = '', d.basedocno = de.docno)
            left outer join sales_order so on if(d.basetypenm = 'Sales Order',
                                                d.basedocno = so.docno and d.itemcode = so.itemcode,
                                                de.basedocno = so.docno and d.itemcode = so.itemcode)
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_picking_ghe`
--

DROP PROCEDURE IF EXISTS `ar_picking_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_picking_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `sales_order` (
    `book_no` varchar(100) NULL default '',
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(300) NULL default '',
    `batch_no` varchar(30) NULL default '',
    `qty` NUMERIC(18,6) NULL default '0',
    `docno` varchar(100) NULL default '',
    `base_docno` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sales_order (book_no, itemcode, itemdesc, batch_no,qty,docno,base_docno)
    Select a.u_u_bookno, d.itemcode, d.ITEMDESC, db.batch, if(a.docstatus = 'D', d.QUANTITY*-1, db.QUANTITY*-1),a.docno,null
          from salesdeliveries a
            left outer join salesdeliveryitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join documentbatches db on a.DOCID = db.DOCID and a.COMPANY = db.COMPANY and a.BRANCH = db.BRANCH
                                                  and d.OBJECTCODE = db.OBJECTCODE and d.ITEMCODE = db.ITEMCODE
            where a.COMPANY = pi_company and a.BRANCH = pi_branch;
  INSERT
    INTO sales_order (book_no, itemcode, itemdesc, batch_no,qty,docno,base_docno)
    Select a.u_u_bookno, d.itemcode, d.ITEMDESC, db.batch, d.QUANTITY,a.docno, a.docno
          from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join documentbatches db on a.DOCID = db.DOCID and a.COMPANY = db.COMPANY and a.BRANCH = db.BRANCH
                                                  and d.OBJECTCODE = db.OBJECTCODE and d.ITEMCODE = db.ITEMCODE
            where a.COMPANY = pi_company and a.BRANCH = pi_branch;
CREATE TEMPORARY TABLE  `sales_order_sum` (
    `book_no` varchar(100) NULL default '',
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(300) NULL default '',
    `batch_no` varchar(30) NULL default '',
    `qty` NUMERIC(18,6) NULL default '0',
    `group_order` NUMERIC(18,6) NULL default '0',
    `docno` varchar(100) NULL default '',
    `base_docno` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sales_order_sum (book_no, itemcode, itemdesc, batch_no,qty,group_order,docno,base_docno)
    select book_no, itemcode, itemdesc, batch_no, sum(qty),1,docno,group_concat(base_docno)
           from sales_order
           group by book_no, itemcode
           having sum(qty) <> 0;
CREATE TEMPORARY TABLE  `main` (
       `company` varchar(500) NULL default '',
       `branch` varchar(500) NULL default '',
       `taxid` varchar(500) NULL default '',
       `bpcode` varchar(500) NULL default '',
       `bpname` varchar(500) NULL default '',
       `billtoadd` varchar(500) NULL default '',
       `shiptoadd` varchar(500) NULL default '',
       `SHIPTYPE` varchar(500) NULL default '',
       `contact_person` varchar(500) NULL default '',
       `bprefno` varchar(500) NULL default '',
       `docdate` date null,
       `delivery_date` date NULL,
       `docno` varchar(500) NULL default '',
       `term` varchar(500) NULL default '',
       `sales_person` varchar(500) NULL default '',
       `serials` varchar(500) NULL default '',
       `ITEMGROUP` varchar(500) NULL default '',
       `itemcode` varchar(500) NULL default '',
       `itemdesc` varchar(500) NULL default '',
       `item_remarks` varchar(500) NULL default '',
       `glacctno` varchar(500) NULL default '',
       `qty` NUMERIC(18,6) NULL default '0',
       `unitprice` NUMERIC(18,6) NULL default '0',
       `DISCAMOUNT` NUMERIC(18,6) NULL default '0',
       `WEIGHT` NUMERIC(18,6) NULL default '0',
       `LINEVOLUME` NUMERIC(18,6) NULL default '0',
       `BOXES` NUMERIC(18,6) NULL default '0',
       `linetotal` NUMERIC(18,6) NULL default '0',
       `total_bf_disc` NUMERIC(18,6) NULL default '0',
       `disc_percentage` NUMERIC(18,6) NULL default '0',
       `disc_amount` NUMERIC(18,6) NULL default '0',
       `vat_amount` NUMERIC(18,6) NULL default '0',
       `wtax_amount` NUMERIC(18,6) NULL default '0',
       `instalment_addon_amount` NUMERIC(18,6) NULL default '0',
       `total_amount` NUMERIC(18,6) NULL default '0',
       `settled_amount` NUMERIC(18,6) NULL default '0',
       `due_amount` NUMERIC(18,6) NULL default '0',
       `remarks` varchar(500) NULL default '',
       `created_by` varchar(500) NULL default '',
       `condition_a` varchar(500) NULL default '',
       `u_u_cntr` varchar(500) NULL default '',
       `u_u_seal` varchar(500) NULL default '',
       `u_u_etd` date null,
       `u_u_eta` date null,
       `u_u_pod` varchar(500) NULL default '',
       `u_u_fdes` varchar(500) NULL default '',
       `u_u_vsl` varchar(500) NULL default '',
       `u_u_shipline` varchar(500) NULL default '',
       `u_u_pol` varchar(500) NULL default '',
       `u_u_color` varchar(500) NULL default '',
       `PHONE1` varchar(500) NULL default '',
       `FAX` varchar(500) NULL default '',
       `EMAIL` varchar(500) NULL default '',
       `docduedate` date null,
       `u_u_sleadtime` varchar(500) NULL default '',
       `u_u_shiptype` varchar(500) NULL default '',
       `u_u_shipmode` varchar(500) NULL default '',
       `currency` varchar(500) NULL default '',
       `bankname` varchar(500) NULL default '',
       `U_ADDR01` varchar(500) NULL default '',
       `U_ADDR02` varchar(500) NULL default '',
       `U_ADDR03` varchar(500) NULL default '',
       `U_ADDR04` varchar(500) NULL default '',
       `bankacctno` varchar(500) NULL default '',
       `U_SWIFTID` varchar(500) NULL default '',
       `U_INTERBANK` varchar(500) NULL default '',
       `U_TELEXNO` varchar(500) NULL default '',
       `u_u_transshipment` varchar(500) NULL default '',
       `u_u_shipmark` varchar(500) NULL default '',
       `so_docno` varchar(500) NULL default '',
       `netweight` varchar(500) NULL default '',
       `u_u_hscno` varchar(500) NULL default '',
       `u_u_qtypercrtn` varchar(500) NULL default '',
       `u_u_itemvolume` varchar(500) NULL default '',
       `U_U_TELNO` varchar(500) NULL default '',
       `U_U_FAXNO` varchar(500) NULL default '',
       `U_U_EMAIL` varchar(500) NULL default '',
       `lineid` NUMERIC(18,6) NULL default '0',
       `currencyrate` NUMERIC(18,6) NULL default '0',
       `u_u_scharg` NUMERIC(18,6) NULL default '0',
       `u_u_sqty` NUMERIC(18,6) NULL default '0',
       `u_u_bookno` varchar(500) NULL default '',
       `batch_no` varchar(500) NULL default '',
       `status_group` NUMERIC(18,6) NULL default '0'
       ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO main (company,
       branch,
       taxid,
       bpcode,
       bpname,
       billtoadd,
       shiptoadd,
       SHIPTYPE,
       contact_person,
       bprefno,
       docdate,
       delivery_date,
       docno,
       term,
       sales_person,
       serials,
       ITEMGROUP,
       itemcode,
       itemdesc,
       item_remarks,
       glacctno,
       qty,
       unitprice,
       DISCAMOUNT,
       WEIGHT,
       LINEVOLUME,
       BOXES,
       linetotal,
       total_bf_disc,
       disc_percentage,
       disc_amount,
       vat_amount,
       wtax_amount,
       instalment_addon_amount,
       total_amount,
       settled_amount,
       due_amount,
       remarks,
       created_by,
       condition_a,
       u_u_cntr,
       u_u_seal,
       u_u_etd,
       u_u_eta,
       u_u_pod,
       u_u_fdes,
       u_u_vsl,
       u_u_shipline,
       u_u_pol,
       u_u_color,
       PHONE1,
       FAX,
       EMAIL,
       docduedate,
       u_u_sleadtime,
       u_u_shiptype,
       u_u_shipmode,
       currency,
       bankname,
       U_ADDR01,
       U_ADDR02,
       U_ADDR03,
       U_ADDR04,
       bankacctno,
       U_SWIFTID,
       U_INTERBANK,
       U_TELEXNO,
       u_u_transshipment,
       u_u_shipmark,
       so_docno,
       netweight,
       u_u_hscno,
       u_u_qtypercrtn,
       u_u_itemvolume,
       U_U_TELNO,
       U_U_FAXNO,
       U_U_EMAIL,
       lineid ,
       currencyrate,
       u_u_scharg ,
       u_u_sqty ,
       u_u_bookno,
       batch_no,
       status_group)
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid,
       a.BPCODE as bpcode,
       a.BPNAME as bpname,
       a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd,
       g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno,
       a.DOCDATE as docdate,
       a.DOCDUEDATE as delivery_date,
       a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       if(d.ITEMCODE = '', d.glacctno, d.ITEMCODE) as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno,
       if(a.docstatus = 'D', d.QUANTITY, db.QUANTITY) as qty,
       d.UNITPRICE as unitprice,
       d.DISCPERC as DISCAMOUNT,
       i.WEIGHTSA * d.QUANTITY AS WEIGHT,
       d.U_U_LINEVOLUME as LINEVOLUME,
       d.U_U_QTYPERCRTN * d.QUANTITY as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc,
       a.DISCPERC as disc_percentage,
       a.DISCAMOUNT as disc_amount,
       a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount,
       a.INSTADDONAMOUNT as instalment_addon_amount,
       a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount,
       a.DUEAMOUNT as due_amount,
       a.REMARKS as remarks,
       us.username as created_by,
       case when d.UNITPRICE < d.ITEMCOST then 'C'
            when d.UNITPRICE > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       a.docduedate,
       a.u_u_sleadtime,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       hb.bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       a.u_u_transshipment,
       a.u_u_shipmark,
       if(d.basedocno = '', '', concat('S.O. No.: ', d.basedocno)) as so_docno,
       i.u_u_netweight * d.QUANTITY as netweight,
       a.u_u_hscno,
       d.u_u_qtypercrtn,
       d.u_u_itemvolume,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.currencyrate,
       d.u_u_scharge,
       d.u_u_sqty,
       a.u_u_bookno,
       if(a.docstatus = 'D',
       concat(replace(mid(d.sbnids,locate('|',d.sbnids)+1,locate('|',d.sbnids,locate('|',d.sbnids)+1)-locate('|',d.sbnids)-1),'`',',')),
       db.batch) as batch_no,
       0 as status_group
       from salesdeliveries a
            left outer join salesdeliveryitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
            left outer join documentbatches db on a.DOCID = db.DOCID and a.COMPANY = db.COMPANY and a.BRANCH = db.BRANCH
                                                 and d.OBJECTCODE = db.OBJECTCODE and d.ITEMCODE = db.ITEMCODE
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid, db.batch;
  INSERT
    INTO main (company,
       branch,
       taxid,
       bpcode,
       bpname,
       billtoadd,
       shiptoadd,
       SHIPTYPE,
       contact_person,
       bprefno,
       docdate,
       delivery_date,
       docno,
       term,
       sales_person,
       serials,
       ITEMGROUP,
       itemcode,
       itemdesc,
       item_remarks,
       glacctno,
       qty,
       unitprice,
       DISCAMOUNT,
       WEIGHT,
       LINEVOLUME,
       BOXES,
       linetotal,
       total_bf_disc,
       disc_percentage,
       disc_amount,
       vat_amount,
       wtax_amount,
       instalment_addon_amount,
       total_amount,
       settled_amount,
       due_amount,
       remarks,
       created_by,
       condition_a,
       u_u_cntr,
       u_u_seal,
       u_u_etd,
       u_u_eta,
       u_u_pod,
       u_u_fdes,
       u_u_vsl,
       u_u_shipline,
       u_u_pol,
       u_u_color,
       PHONE1,
       FAX,
       EMAIL,
       docduedate,
       u_u_sleadtime,
       u_u_shiptype,
       u_u_shipmode,
       currency,
       bankname,
       U_ADDR01,
       U_ADDR02,
       U_ADDR03,
       U_ADDR04,
       bankacctno,
       U_SWIFTID,
       U_INTERBANK,
       U_TELEXNO,
       u_u_transshipment,
       u_u_shipmark,
       so_docno,
       netweight,
       u_u_hscno,
       u_u_qtypercrtn,
       u_u_itemvolume,
       U_U_TELNO,
       U_U_FAXNO,
       U_U_EMAIL,
       lineid ,
       currencyrate,
       u_u_scharg ,
       u_u_sqty ,
       u_u_bookno,
       batch_no,
       status_group)
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid,
       a.BPCODE as bpcode,
       a.BPNAME as bpname,
       a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd,
       g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno,
       a.DOCDATE as docdate,
       a.DOCDUEDATE as delivery_date,
       a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       '' as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       so.itemcode as itemcode,
       so.itemdesc as itemdesc,
       i.remarks as item_remarks,
       '' as glacctno,
       so.qty as qty,
       0 as unitprice,
       0 as DISCAMOUNT,
       0 AS WEIGHT,
       0 as LINEVOLUME,
       0 as BOXES,
       0 as linetotal,
       a.TOTALBEFDISC as total_bf_disc,
       a.DISCPERC as disc_percentage,
       a.DISCAMOUNT as disc_amount,
       a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount,
       a.INSTADDONAMOUNT as instalment_addon_amount,
       a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount,
       a.DUEAMOUNT as due_amount,
       a.REMARKS as remarks,
       us.username as created_by,
       '' as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       a.docduedate,
       a.u_u_sleadtime,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       hb.bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       a.u_u_transshipment,
       a.u_u_shipmark,
       if(so.base_docno = '', '', concat('S.O. No.: ', so.base_docno)) as so_docno,
       0 as netweight,
       a.u_u_hscno,
       '',
       0,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       0,
       a.currencyrate,
       0,
       0,
       a.u_u_bookno,
       '' as batch_no,
       1 as status_group
       from salesdeliveries a
            left outer join sales_order_sum so on a.u_u_bookno = so.book_no
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on so.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and so.ITEMCODE = pl.ITEMCODE
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno and a.u_u_bookno not in('')
      and so.qty <> 0;
select * from main;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_picking_ghe_rv`
--

DROP PROCEDURE IF EXISTS `ar_picking_ghe_rv`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_picking_ghe_rv`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
DECLARE v_company VARCHAR(500);
DECLARE v_bpcode VARCHAR(500);
DECLARE v_bpname VARCHAR(500);
DECLARE v_docdate DATE;
DECLARE v_docno VARCHAR(500);
DECLARE v_base_docno VARCHAR(100);
DECLARE v_itemcode VARCHAR(30);
DECLARE v_batch_no VARCHAR(30);
DECLARE v_batch_q VARCHAR(30);
DECLARE v_batch_qty NUMERIC(18,6);
DECLARE v_custrefno VARCHAR(100);
DECLARE v_qty NUMERIC(18,6);
DECLARE v_carton_qty NUMERIC(18,6);
DECLARE v_location VARCHAR(100);
DECLARE v_done INT;
DECLARE v_sbnids VARCHAR(500);
DECLARE v_sbncnt NUMERIC(18,6);
DECLARE v_qtycrtn NUMERIC(18,6);
DECLARE v_balqty NUMERIC(18,6);
DECLARE v_flag INT;
DECLARE v_batch VARCHAR(100);
DECLARE v_batchqty VARCHAR(100);
DECLARE v_position INT;
DECLARE v_qposition INT;
DECLARE v_lineid NUMERIC(18,0);
DECLARE v_check INT;
DECLARE v_endpoint INT;
DECLARE v_qendpoint INT;
DECLARE v_shipto varchar(100);
DECLARE v_cntrno varchar(100);
DECLARE v_sealno varchar(100);
DECLARE v_shipmode VARCHAR(100);
DECLARE v_cntrdate DATE;
DECLARE v_closingtime VARCHAR(100);
DECLARE v_cuft numeric(20,6);
DECLARE v_grossweight numeric(20,6);
DECLARE v_remarks text;
DECLARE v_cntrremark VARCHAR(255);
DECLARE pickinglist_cur CURSOR FOR
  SELECT f.COMPANYNAME, a.bpcode, a.bpname, a.docno, a.docdate, b.itemcode, b.quantity, b.sbnids, b.sbncnt, b.basedocno, b.lineid,
 
         if(b.U_U_QTYPERCRTN > 0, b.U_U_QTYPERCRTN, if(d.U_U_QTYPERCRTN > 0 , d.U_U_QTYPERCRTN, If(d.isinventory = 1, b.QUANTITY, 0))),
         d.u_u_location,
         a.shiptocode,
         a.u_u_cntr,
         a.u_u_seal,
         a.u_u_shipmode,
         a.u_u_cntrdate,
         a.u_u_closingtime,
         if(b.u_u_itemvolume > 0, b.u_u_itemvolume, d.volumesa),
         if(b.u_u_weightsa > 0, b.u_u_weightsa, d.weightsa),
         a.remarks,
         a.u_u_cntrremark
      FROM salesdeliveries a
      left outer join salesdeliveryitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      left outer join companies f on f.COMPANYCODE = pi_company
      left outer join items d on b.itemcode = d.itemcode
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      order by b.lineid;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;
DROP TEMPORARY TABLE IF EXISTS pickinglist ;
CREATE TEMPORARY TABLE  `pickinglist` (
    `company` varchar(500) NULL default '',
    `Flag` INT,
    `bpcode` varchar(500) NULL default '',
    `bpname` varchar(500) NULL default '',
    `docdate` date null,
    `docno` varchar(500) NULL default '',
    `base_docno` varchar(100) NULL default '',
    `itemcode` varchar(30) NULL default '',
    `batch_no` varchar(30) NULL default '',
    `custrefno` varchar(100) NULL default '',
    `qty` NUMERIC(18,6) NULL default '0',
    `carton_qty` NUMERIC(18,6) NULL default '0',
    `location` varchar(100) NULL default '',
    `lineid` NUMERIC(18,0) NULL default '0',
    `shipto` varchar(100),
    `cntrno` varchar(100),
    `sealno` varchar(100),
    `shipmode` varchar(100),
    `cntrdate` date,
    `closingtime` varchar(100),
    `cuft`   numeric(20,6),
    `grossweight` numeric(20,6),
    `remark` text,
    `cntrremark` varchar(255)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  OPEN pickinglist_cur;
  pickingloop: LOOP
    FETCH pickinglist_cur INTO v_company,v_bpcode,v_bpname,v_docno,v_docdate,v_itemcode,v_qty,v_sbnids,v_sbncnt,v_base_docno,v_lineid,v_qtycrtn,
                               v_location,v_shipto,v_cntrno,v_sealno,v_shipmode,v_cntrdate,v_closingtime,v_cuft,v_grossweight,v_remarks,v_cntrremark;
    IF v_done = 1 THEN
       Leave pickingloop;
    END IF;
    SET v_flag = 0;
    IF v_qty > v_sbncnt THEN
      SET v_balqty = v_qty - v_sbncnt;
      SET v_flag = 1;
    END IF;
    SET v_position = 1;
    SET v_qposition = 1;
    SET v_endpoint = 1;
    SET v_qendpoint = 1;
    IF v_sbncnt > 0 THEN
       SET v_batch = Concat(mid(v_sbnids,locate('|',v_sbnids)+1,locate('|',v_sbnids,locate('|',v_sbnids)+1)-locate('|',v_sbnids)-1),'`');
       SET v_batchqty = Concat(mid(v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1,locate('|',v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1)-locate('|',v_sbnids,locate('|',v_sbnids)+1)-1),'`');
       WHILE MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint) > '' DO
            SET v_batch_no = MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint);
            SET v_batch_q  = MID(v_batchqty, v_qposition, locate('`',v_batchqty,v_qposition)-v_qendpoint);
            SET v_batch_qty = CAST(v_batch_q AS SIGNED);
            SET v_position = v_position + Length(v_batch_no) + 1;
            SET v_qposition = v_qposition + Length(v_batch_q) + 1;
            SET v_endpoint = v_position;
            SET v_qendpoint = v_qposition;
            SELECT GROUP_CONCAT(DISTINCT p.u_u_bookno) INTO v_custrefno
                FROM batches a
                left outer join purchasedeliveryitems b on a.company = b.company and a.branch = b.branch and  a.reflineid = b.lineid
                left outer join purchaseorders p on p.company = a.company and p.branch = a.branch and p.docid = b.basedocid
                WHERE a.company = pi_company and a.branch = pi_branch and a.reftype = 'PDN' and a.itemcode = v_itemcode and  a.batch = v_batch_no
                GROUP BY a.batch;
            IF v_custrefno = ',' THEN
               SET v_custrefno = '';
            END IF;                
           INSERT INTO pickinglist (`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                                   `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`,`shipto`,`cntrno`,`sealno`,
                                   `shipmode`,`cntrdate`,`closingtime`,`cuft`,`grossweight`,`remark`,`cntrremark`)
                            VALUES (v_company, 1, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                                   v_batch_no, v_custrefno, v_batch_qty, v_qtycrtn,v_location,v_shipto,
                                   v_cntrno,v_sealno,v_shipmode,v_cntrdate,v_closingtime,v_cuft,v_grossweight,v_remarks,v_cntrremark);
       END WHILE;
    END IF;
    IF v_flag = 1 THEN
       INSERT INTO pickinglist(`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                               `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`,`lineid`,`shipto`,`cntrno`,`sealno`,
                                   `shipmode`,`cntrdate`,`closingtime`,`cuft`,`grossweight`,`remark`,`cntrremark`)
                        VALUES (v_company, 2, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                               '', '', v_balqty, v_qtycrtn,v_location,v_lineid,v_shipto,
                               v_cntrno,v_sealno,v_shipmode,v_cntrdate,v_closingtime,v_cuft,v_grossweight,v_remarks,v_cntrremark);
    END IF;
    SET v_done = 0;
  END LOOP pickingloop;
  CLOSE pickinglist_cur;
  SELECT * FROM pickinglist ORDER BY Flag, base_docno, v_itemcode, v_batch_no;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `ar_picking_ghe_rv2`
--

DROP PROCEDURE IF EXISTS `ar_picking_ghe_rv2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `ar_picking_ghe_rv2`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
DECLARE v_company VARCHAR(500);
DECLARE v_bpcode VARCHAR(500);
DECLARE v_bpname VARCHAR(500);
DECLARE v_docdate DATE;
DECLARE v_docno VARCHAR(500);
DECLARE v_base_docno VARCHAR(100);
DECLARE v_itemcode VARCHAR(30);
DECLARE v_batch_no VARCHAR(30);
DECLARE v_batch_q VARCHAR(30);
DECLARE v_batch_qty NUMERIC(18,6);
DECLARE v_custrefno VARCHAR(100);
DECLARE v_qty NUMERIC(18,6);
DECLARE v_carton_qty NUMERIC(18,6);
DECLARE v_location VARCHAR(100);
DECLARE v_done INT;
DECLARE v_sbnids VARCHAR(254);
DECLARE v_sbncnt NUMERIC(18,6);
DECLARE v_qtycrtn NUMERIC(18,6);
DECLARE v_balqty NUMERIC(18,6);
DECLARE v_flag INT;
DECLARE v_batch VARCHAR(254);
DECLARE v_batchqty VARCHAR(254);
DECLARE v_position INT;
DECLARE v_qposition INT;
DECLARE v_lineid NUMERIC(18,0);
DECLARE v_check INT;
DECLARE v_endpoint INT;
DECLARE v_qendpoint INT;
DECLARE v_warehouse VARCHAR(100);
DECLARE v_stockqty NUMERIC(18,6);

DECLARE v_ubpcode VARCHAR(500);
DECLARE v_ubpname VARCHAR(500);
DECLARE v_udocno VARCHAR(100);
DECLARE v_udocdate DATE;
DECLARE v_usbnids VARCHAR(254);
DECLARE v_ubatch VARCHAR(254);
DECLARE v_ubatchqty VARCHAR(254);
DECLARE v_uendpoint INT;
DECLARE v_uqendpoint INT;
DECLARE v_uposition INT;
DECLARE v_uqposition INT;
DECLARE v_ubatch_no VARCHAR(30);
DECLARE v_ubatch_q VARCHAR(30);
DECLARE v_ubatch_qty NUMERIC(18,6);
DECLARE v_ucheckqty NUMERIC(18,6);
DECLARE v_uavailable NUMERIC(18,6);
DECLARE v_ubalance NUMERIC(18,6);
DECLARE v_uafterdeduct NUMERIC(18,6);
DECLARE v_umissqty NUMERIC(18,6);

DECLARE pickinglist_cur CURSOR FOR
  SELECT f.COMPANYNAME, a.bpcode, a.bpname, a.docno, a.docdate, b.itemcode, b.quantity, b.sbnids, b.sbncnt, b.basedocno, b.lineid,
        if(b.u_u_qtypercrtn > 0 , b.u_u_qtypercrtn, d.u_u_qtypercrtn), d.u_u_location, b.whscode
      FROM salesdeliveries a
      left outer join salesdeliveryitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      left outer join companies f on f.COMPANYCODE = pi_company
      left outer join items d on b.itemcode = d.itemcode
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      order by b.lineid;

DECLARE check_cur CURSOR FOR
  SELECT a.docno, a.docdate, b.sbnids, a.bpcode, a.bpname
      FROM salesdeliveries a
      left outer join salesdeliveryitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCSTATUS = 'D' and
            b.itemcode = v_itemcode and b.whscode = v_warehouse and b.lineid <> v_lineid and b.sbncnt > 0
      order by a.docno, b.lineid;



DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;
DROP TEMPORARY TABLE IF EXISTS pickinglist ;
CREATE TEMPORARY TABLE  `pickinglist` (
    `company` varchar(500) NULL default '',
    `Flag` INT,
    `bpcode` varchar(500) NULL default '',
    `bpname` varchar(500) NULL default '',
    `docdate` date null,
    `docno` varchar(500) NULL default '',
    `base_docno` varchar(100) NULL default '',
    `itemcode` varchar(30) NULL default '',
    `batch_no` varchar(30) NULL default '',
    `custrefno` varchar(100) NULL default '',
    `qty` NUMERIC(18,6) NULL default '0',
    `carton_qty` NUMERIC(18,6) NULL default '0',
    `location` varchar(100) NULL default '',
    `lineid` NUMERIC(18,0) NULL default '0',
    `udocno` varchar(500) NULL default '',
    `udocdate` date null,
    `uqty` NUMERIC(18,6) NULL default '0',
    `ubpcode` varchar(500) NULL default '',
    `ubpname` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

DROP TEMPORARY TABLE IF EXISTS checklist ;
CREATE TEMPORARY TABLE  `checklist` (
    `udocno` varchar(500) NULL default '',
    `udocdate` date null,
    `uqty` NUMERIC(18,6) NULL default '0',
    `ubpcode` varchar(500) NULL default '',
    `ubpname` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  OPEN pickinglist_cur;
  pickingloop: LOOP
    FETCH pickinglist_cur INTO v_company,v_bpcode,v_bpname,v_docno,v_docdate,v_itemcode,v_qty,v_sbnids,v_sbncnt,v_base_docno,v_lineid,v_qtycrtn,v_location,v_warehouse;
    IF v_done = 1 THEN
       Leave pickingloop;
    END IF;
    SET v_flag = 0;
    IF v_qty > v_sbncnt THEN
      SET v_balqty = v_qty - v_sbncnt;
      SET v_flag = 1;
    END IF;
    SET v_position = 1;
    SET v_qposition = 1;
    SET v_endpoint = 1;
    SET v_qendpoint = 1;
    IF v_sbncnt > 0 THEN
       SET v_batch = Concat(mid(v_sbnids,locate('|',v_sbnids)+1,locate('|',v_sbnids,locate('|',v_sbnids)+1)-locate('|',v_sbnids)-1),'`');
       SET v_batchqty = Concat(mid(v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1,locate('|',v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1)-locate('|',v_sbnids,locate('|',v_sbnids)+1)-1),'`');
       WHILE MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint) > '' DO
            SET v_batch_no = MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint);
            SET v_batch_q  = MID(v_batchqty, v_qposition, locate('`',v_batchqty,v_qposition)-v_qendpoint);
            SET v_batch_qty = CAST(v_batch_q AS SIGNED);
            SET v_position = v_position + Length(v_batch_no) + 1;
            SET v_qposition = v_qposition + Length(v_batch_q) + 1;
            SET v_endpoint = v_position;
            SET v_qendpoint = v_qposition;

            SELECT GROUP_CONCAT(DISTINCT p.u_u_bookno) INTO v_custrefno
                FROM batches a
                left outer join purchasedeliveryitems b on a.company = b.company and a.branch = b.branch and  a.reflineid = b.lineid
                left outer join purchaseorders p on p.company = a.company and p.branch = a.branch and p.docid = b.basedocid
                WHERE a.company = pi_company and a.branch = pi_branch and a.reftype = 'PDN' and a.itemcode = v_itemcode and  a.batch = v_batch_no
                GROUP BY a.batch;

            IF v_custrefno = ',' THEN
               SET v_custrefno = '';
            END IF;

            SET v_done = 0;



                SET v_ucheckqty = 0;
                SET v_stockqty = 0;
                SET v_ubalance = 0;
                SET v_uavailable = 0;
                SET v_uafterdeduct = 0;

                DELETE FROM checklist;
                
                OPEN check_cur;
                checkloop: LOOP
                    FETCH check_cur INTO v_udocno,v_udocdate,v_usbnids, v_ubpcode, v_ubpname;
                    IF v_done = 1 THEN
                       Leave checkloop;
                    END IF;

                      SET v_uposition = 1;
                      SET v_uqposition = 1;
                      SET v_uendpoint = 1;
                      SET v_uqendpoint = 1;


                      SET v_ubatch = Concat(mid(v_usbnids,locate('|',v_usbnids)+1,locate('|',v_usbnids,locate('|',v_usbnids)+1)-locate('|',v_usbnids)-1),'`');
                      SET v_ubatchqty = Concat(mid(v_usbnids,locate('|',v_usbnids,locate('|',v_usbnids)+1)+1,locate('|',v_usbnids,locate('|',v_usbnids,locate('|',v_usbnids)+1)+1)-locate('|',v_usbnids,locate('|',v_usbnids)+1)-1),'`');
                      WHILE MID(v_ubatch, v_uposition, locate('`',v_ubatch,v_uposition)-v_uendpoint) > '' DO
                          SET v_ubatch_no = MID(v_ubatch, v_uposition, locate('`',v_ubatch,v_uposition)-v_uendpoint);
                          SET v_ubatch_q  = MID(v_ubatchqty, v_uqposition, locate('`',v_ubatchqty,v_uqposition)-v_uqendpoint);
                          SET v_ubatch_qty = CAST(v_ubatch_q AS SIGNED);
                          SET v_uposition = v_uposition + Length(v_ubatch_no) + 1;
                          SET v_uqposition = v_uqposition + Length(v_ubatch_q) + 1;
                          SET v_uendpoint = v_uposition;
                          SET v_uqendpoint = v_uqposition;

                          IF v_ubatch_no =  v_batch_no THEN

                              SET v_ucheckqty = v_ucheckqty + v_ubatch_qty;
                              INSERT INTO checklist (udocno, udocdate, uqty, ubpcode, ubpname)
                                             VALUES (v_udocno, v_udocdate, v_ubatch_qty, v_ubpcode, v_ubpname);

                          END IF;
                      END WHILE;

                      SET v_done = 0;
                      SET v_stockqty = 0;

                END LOOP checkloop;
                CLOSE check_cur;

                 SELECT SUM(qty) INTO v_stockqty
                   FROM stockcard
                   WHERE itemcode = v_itemcode AND warehouse = v_warehouse AND batch = v_batch_no;

                 IF v_stockqty  IS NULL THEN
                     SET v_stockqty = 0;
                 END IF;

                 IF  v_stockqty >= (v_ucheckqty + v_batch_qty) THEN

                     INSERT INTO pickinglist (`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                                             `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`)
                                      VALUES (v_company, 1, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                                             v_batch_no, v_custrefno, v_batch_qty, v_qtycrtn,v_location);

                 ELSE


                      SET v_ubalance =  (v_ucheckqty + v_batch_qty) - v_stockqty;
                      SET v_uavailable = v_batch_qty - v_ubalance;


                      IF v_stockqty < v_batch_qty THEN
                         SET v_umissqty =  v_batch_qty - v_stockqty;
                      END IF;



                      IF v_stockqty >= v_batch_qty THEN
                          IF v_ubalance > 0 and  v_uavailable > 0 THEN

                               INSERT INTO pickinglist (`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                                                       `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`)
                                                VALUES (v_company, 1, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                                                       v_batch_no, v_custrefno, v_uavailable, v_qtycrtn,v_location);

                               INSERT INTO pickinglist (`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                                                       `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`,`udocno`,`udocdate`,`uqty`,`ubpcode`,`ubpname`)
                                                SELECT v_company, 0, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                                                       v_batch_no, v_custrefno, v_ubalance, v_qtycrtn,v_location, udocno, udocdate, uqty,
                                                       ubpcode, ubpname
                                                  FROM checklist;

                          ELSEIF v_ubalance > 0 and  v_uavailable <= 0 THEN

                               INSERT INTO pickinglist (`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                                                       `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`,`udocno`,`udocdate`,`uqty`,`ubpcode`,`ubpname`)
                                                SELECT v_company, 0, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                                                       v_batch_no, v_custrefno, v_batch_qty, v_qtycrtn,v_location, udocno, udocdate, uqty,
                                                       ubpcode, ubpname
                                                  FROM checklist;


                          END IF;

                      ELSE

                          SET v_uafterdeduct =  (v_batch_qty - v_umissqty);


                          IF  v_umissqty > 0 THEN

                               INSERT INTO pickinglist (`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                                                       `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`)
                                                VALUES (v_company, -1, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                                                       v_batch_no, v_custrefno, v_umissqty, v_qtycrtn,v_location);

                          END IF;

                          IF  v_ucheckqty >=  v_uafterdeduct THEN

                               INSERT INTO pickinglist (`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                                                       `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`,`udocno`,`udocdate`,`uqty`,`ubpcode`,`ubpname`)
                                                SELECT v_company, 0, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                                                       v_batch_no, v_custrefno, v_uafterdeduct, v_qtycrtn,v_location, udocno, udocdate, uqty,
                                                       ubpcode, ubpname
                                                  FROM checklist;

                          ELSEIF v_ucheckqty = 0 THEN

                               INSERT INTO pickinglist (`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                                                       `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`)
                                                VALUES (v_company, 1, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                                                       v_batch_no, v_custrefno, v_uafterdeduct, v_qtycrtn,v_location);

                          ELSE
                               SET v_uavailable = v_uafterdeduct - v_ucheckqty;

                               INSERT INTO pickinglist (`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                                                       `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`)
                                                VALUES (v_company, 1, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                                                       v_batch_no, v_custrefno, v_uavailable, v_qtycrtn,v_location);

                               INSERT INTO pickinglist (`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                                                       `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`,`udocno`,`udocdate`,`uqty`,`ubpcode`,`ubpname`)
                                                SELECT v_company, 0, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                                                       v_batch_no, v_custrefno, v_ucheckqty, v_qtycrtn,v_location, udocno, udocdate, uqty,
                                                       ubpcode, ubpname
                                                  FROM checklist;




                          END IF;

                      END IF;



                 END IF;




       END WHILE;
    END IF;
    IF v_flag = 1 THEN
       INSERT INTO pickinglist(`company`,`Flag`,`bpcode`,`bpname`,`docdate`,`docno`,`base_docno`,`itemcode`,
                               `batch_no`,`custrefno`,`qty`,`carton_qty`,`location`,`lineid`)
                        VALUES (v_company, 2, v_bpcode, v_bpname, v_docdate, v_docno, v_base_docno, v_itemcode,
                               '', '', v_balqty, v_qtycrtn,v_location,v_lineid);
    END IF;
    SET v_done = 0;
  END LOOP pickingloop;
  CLOSE pickinglist_cur;
  SELECT * FROM pickinglist ORDER BY Flag, base_docno, v_itemcode, v_batch_no;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `balancesheet_st`
--

DROP PROCEDURE IF EXISTS `balancesheet_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `balancesheet_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30),
                                 IN pi_leveltype INT, IN pi_upperrpt INT,   IN pi_period01 DATE,
                                 IN pi_period02 DATE, IN pi_period03 DATE,  IN pi_period04 DATE, IN pi_subrpttype VARCHAR(10),
                                 IN pi_exzero INT, IN pi_isratio INT)
BEGIN

DECLARE v_financialyear01 DATE;
DECLARE v_financialyear02 DATE;
DECLARE v_financialyear03 DATE;
DECLARE v_financialyear04 DATE;
DECLARE v_retainedearning NUMERIC(20,6);
DECLARE v_openingbalance  NUMERIC(20,6);
DECLARE v_closingbalance  NUMERIC(20,6);

SELECT financialyear INTO v_financialyear01
    FROM postingperiods
    WHERE YR = CONVERT(pi_period01, SIGNED) LIMIT 1;

SELECT financialyear INTO v_financialyear02
    FROM postingperiods
    WHERE YR = CONVERT(pi_period02, SIGNED) LIMIT 1;

SELECT financialyear INTO v_financialyear03
    FROM postingperiods
    WHERE YR = CONVERT(pi_period03, SIGNED) LIMIT 1;

SELECT financialyear INTO v_financialyear04
    FROM postingperiods
    WHERE YR = CONVERT(pi_period04, SIGNED) LIMIT 1;

  DROP TEMPORARY TABLE IF EXISTS BS_TEMP ;
  CREATE TEMPORARY TABLE  `BS_TEMP` (
    `SEQCODE`      VARCHAR(100),
    `LEVLCODE`     VARCHAR(100),
    `LEVLNAME`     VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `ACCTLEVEL`    INT,
    `CATENAME`     VARCHAR(100),
    `ACCTTYPE`     VARCHAR(100),
    `CATESEQ`      INT,
    `CATEGORY`     VARCHAR(100),
    `SPECIALACCT`  INT,
    `PERIOD01`     NUMERIC(20,6),
    `PERIOD02`     NUMERIC(20,6),
    `PERIOD03`     NUMERIC(20,6),
    `PERIOD04`     NUMERIC(20,6),
    `VARIANCE`     NUMERIC(20,6),
    `IS_DEBIT`     INT,
    `UPPERRPT`     INT
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  CALL chartofaccountcalevel_st(pi_leveltype, 'BS');

    

  
      
     INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                          PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT IF(CL.LEVLCODE = CL.ACCTCODE,IF(AD.U_DEPRECIATION = CL.ACCTCODE, CONCAT(AD.CODE,'A'), CL.ACCTCODE),CL.LEVLCODE),
                        CL.LEVLCODE, CL.LEVLNAME, CL.ACCTCODE, CL.ACCTNAME, CL.ACCTLEVEL, CL.CATENAME, CL.CATESEQ, CL.CATEGORY, CL.SPECIALACCT,
                        CASE WHEN CL.SPECIALACCT = 4 THEN IF(ST.U_STOCKVALUE IS NULL, 0, ST.U_STOCKVALUE)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, ROUND(SUM(JI.GLDEBIT - JI.GLCREDIT),2))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, ROUND(SUM(JI.GLCREDIT - JI.GLDEBIT),2)) END,
                        0,0,0,0, CL.IS_DEBIT, CL.UPPERRPT
                   FROM COA_LEVEL CL
                      LEFT OUTER JOIN JOURNALENTRYITEMS JI ON JI.COMPANY = pi_company AND JI.BRANCH = pi_branch AND JI.GLACCTNO = CL.ACCTCODE AND JI.DOCDATE <= pi_period01
                      LEFT OUTER JOIN U_ASSETDEPRECIATIONMAINT AD ON AD.U_DEPRECIATION = CL.ACCTCODE
                      LEFT OUTER JOIN U_STOCKVALUEMAINTDETAIL ST ON ST.CODE = CL.ACCTCODE AND ST.U_YEAR = YEAR(pi_period01) AND ST.U_MONTH = MONTH(pi_period01)
                   WHERE CL.SPECIALACCT <> 2
                   GROUP BY CL.ACCTCODE;
     

           
    
               SET v_retainedearning = 0;
               SET v_openingbalance  = 0;
               SET v_closingbalance  = 0;
               

               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_closingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(DATE_SUB(v_financialyear01, INTERVAL 1 MONTH)) AND
                         U_MONTH = MONTH(DATE_SUB(v_financialyear01, INTERVAL 1 MONTH));

               IF v_closingbalance IS NULL THEN
                  SET v_closingbalance = 0;
               END IF;
               

               
               SELECT IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) + v_closingbalance
                   INTO v_retainedearning
                   FROM JOURNALENTRYITEMS JI,
                        CHARTOFACCOUNTS COA
                   WHERE JI.COMPANY = pi_company AND
                         JI.BRANCH = pi_branch AND
                         JI.GLACCTNO = COA.ACCTCODE AND
                         JI.DOCDATE < v_financialyear01 AND
                         COA.U_COADRAWER > '399999999999999';

               INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                    PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT CL.LEVLCODE,
                        CL.LEVLCODE, CL.LEVLNAME, CL.ACCTCODE, CL.ACCTNAME, CL.ACCTLEVEL, CL.CATENAME, CL.CATESEQ, CL.CATEGORY, CL.SPECIALACCT,
                        v_retainedearning, 0,0,0,0, CL.IS_DEBIT, CL.UPPERRPT
                   FROM COA_LEVEL CL
                   WHERE CL.SPECIALACCT = 2
                   GROUP BY CL.LEVLCODE;
               

               SET v_openingbalance  = 0;
               SET v_closingbalance  = 0;
               
               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_openingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(v_financialyear01) AND
                         U_MONTH = MONTH(v_financialyear01);

               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_closingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(pi_period01) AND
                         U_MONTH = MONTH(pi_period01);

               IF v_openingbalance IS NULL THEN
                  SET v_openingbalance = 0;
               END IF;

               IF v_closingbalance IS NULL THEN
                  SET v_closingbalance = 0;
               END IF;                         
               

               
               INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                    PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT '9999999999999999999',
                        '9999999999999999999', 'PROFIT & LOSS ACCOUNT', '9999999999999999999', 'PROFIT & LOSS ACCOUNT', 1, 'EQUITY', 60, 'BEQ', 0,
                        IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) - (v_openingbalance - v_closingbalance),
                        0,0,0,0,0,0
                   FROM JOURNALENTRYITEMS JI,
                        CHARTOFACCOUNTS COA
                   WHERE JI.COMPANY = pi_company AND
                         JI.BRANCH = pi_branch AND
                         JI.GLACCTNO = COA.ACCTCODE AND
                         JI.DOCDATE >= v_financialyear01 AND
                         JI.DOCDATE <= pi_period01 AND
                         COA.U_COADRAWER > '399999999999999';
                
    
           
  
      IF pi_subrpttype = 'YM' OR pi_subrpttype = 'QTR' THEN

           INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT,UPPERRPT)
                 SELECT IF(CL.LEVLCODE = CL.ACCTCODE,IF(AD.U_DEPRECIATION = CL.ACCTCODE, CONCAT(AD.CODE,'A'), CL.ACCTCODE),CL.LEVLCODE),
                        CL.LEVLCODE, CL.LEVLNAME, CL.ACCTCODE, CL.ACCTNAME, CL.ACCTLEVEL, CL.CATENAME, CL.CATESEQ, CL.CATEGORY, CL.SPECIALACCT,0,
                        CASE WHEN CL.SPECIALACCT = 4 THEN IF(ST.U_STOCKVALUE IS NULL, 0, ST.U_STOCKVALUE)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, ROUND(SUM(JI.GLDEBIT - JI.GLCREDIT),2))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, ROUND(SUM(JI.GLCREDIT - JI.GLDEBIT),2)) END,
                        0,0,0, CL.IS_DEBIT, CL.UPPERRPT
                   FROM COA_LEVEL CL
                      LEFT OUTER JOIN JOURNALENTRYITEMS JI ON JI.COMPANY = pi_company AND JI.BRANCH = pi_branch AND JI.GLACCTNO = CL.ACCTCODE AND JI.DOCDATE <= pi_period02
                      LEFT OUTER JOIN U_ASSETDEPRECIATIONMAINT AD ON AD.U_DEPRECIATION = CL.ACCTCODE
                      LEFT OUTER JOIN U_STOCKVALUEMAINTDETAIL ST ON ST.CODE = CL.ACCTCODE AND ST.U_YEAR = YEAR(pi_period02) AND ST.U_MONTH = MONTH(pi_period02)
                   WHERE CL.SPECIALACCT <> 2
                   GROUP BY CL.ACCTCODE;

    
               SET v_retainedearning = 0;
               SET v_openingbalance  = 0;
               SET v_closingbalance  = 0;


               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_closingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(DATE_SUB(v_financialyear02, INTERVAL 1 MONTH)) AND
                         U_MONTH = MONTH(DATE_SUB(v_financialyear02, INTERVAL 1 MONTH));

               IF v_closingbalance IS NULL THEN
                  SET v_closingbalance = 0;
               END IF;

               SELECT IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) + v_closingbalance
                   INTO v_retainedearning
                   FROM JOURNALENTRYITEMS JI,
                        CHARTOFACCOUNTS COA
                   WHERE JI.COMPANY = pi_company AND
                         JI.BRANCH = pi_branch AND
                         JI.GLACCTNO = COA.ACCTCODE AND
                         JI.DOCDATE < v_financialyear02 AND
                         COA.U_COADRAWER > '399999999999999';

               INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                    PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT CL.LEVLCODE,
                        CL.LEVLCODE, CL.LEVLNAME, CL.ACCTCODE, CL.ACCTNAME, CL.ACCTLEVEL, CL.CATENAME, CL.CATESEQ, CL.CATEGORY, CL.SPECIALACCT,0,
                        v_retainedearning, 0,0,0, CL.IS_DEBIT, 0
                   FROM COA_LEVEL CL
                   WHERE CL.SPECIALACCT = 2
                   GROUP BY CL.LEVLCODE;

               SET v_openingbalance  = 0;
               SET v_closingbalance  = 0;

               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_openingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(v_financialyear02) AND
                         U_MONTH = MONTH(v_financialyear02);

               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_closingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(pi_period02) AND
                         U_MONTH = MONTH(pi_period02);

               IF v_openingbalance IS NULL THEN
                  SET v_openingbalance = 0;
               END IF;

               IF v_closingbalance IS NULL THEN
                  SET v_closingbalance = 0;
               END IF;

               INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                    PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT '9999999999999999999',
                        '9999999999999999999', 'PROFIT & LOSS ACCOUNT', '9999999999999999999', 'PROFIT & LOSS ACCOUNT', 1, 'EQUITY', 60, 'BEQ', 0,0,
                        IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) - (v_openingbalance - v_closingbalance),
                        0,0,0,0,0
                   FROM JOURNALENTRYITEMS JI,
                        CHARTOFACCOUNTS COA
                   WHERE JI.COMPANY = pi_company AND
                         JI.BRANCH = pi_branch AND
                         JI.GLACCTNO = COA.ACCTCODE AND
                         JI.DOCDATE >= v_financialyear02 AND
                         JI.DOCDATE <= pi_period02 AND
                         COA.U_COADRAWER > '399999999999999';
        
      END IF;

      IF pi_subrpttype = 'QTR' THEN

           INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT IF(CL.LEVLCODE = CL.ACCTCODE,IF(AD.U_DEPRECIATION = CL.ACCTCODE, CONCAT(AD.CODE,'A'), CL.ACCTCODE),CL.LEVLCODE),
                        CL.LEVLCODE, CL.LEVLNAME, CL.ACCTCODE, CL.ACCTNAME, CL.ACCTLEVEL, CL.CATENAME, CL.CATESEQ, CL.CATEGORY, CL.SPECIALACCT,0,0,
                        CASE WHEN CL.SPECIALACCT = 4 THEN IF(ST.U_STOCKVALUE IS NULL, 0, ST.U_STOCKVALUE)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, ROUND(SUM(JI.GLDEBIT - JI.GLCREDIT),2))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, ROUND(SUM(JI.GLCREDIT - JI.GLDEBIT),2)) END,
                        0,0, CL.IS_DEBIT, CL.UPPERRPT
                   FROM COA_LEVEL CL
                      LEFT OUTER JOIN JOURNALENTRYITEMS JI ON JI.COMPANY = pi_company AND JI.BRANCH = pi_branch AND JI.GLACCTNO = CL.ACCTCODE AND JI.DOCDATE <= pi_period03
                      LEFT OUTER JOIN U_ASSETDEPRECIATIONMAINT AD ON AD.U_DEPRECIATION = CL.ACCTCODE
                      LEFT OUTER JOIN U_STOCKVALUEMAINTDETAIL ST ON ST.CODE = CL.ACCTCODE AND ST.U_YEAR = YEAR(pi_period03) AND ST.U_MONTH = MONTH(pi_period03)
                   WHERE CL.SPECIALACCT <> 2
                   GROUP BY CL.ACCTCODE;

    
               SET v_retainedearning = 0;
               SET v_openingbalance  = 0;
               SET v_closingbalance  = 0;


               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_closingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(DATE_SUB(v_financialyear03, INTERVAL 1 MONTH)) AND
                         U_MONTH = MONTH(DATE_SUB(v_financialyear03, INTERVAL 1 MONTH));

               IF v_closingbalance IS NULL THEN
                  SET v_closingbalance = 0;
               END IF;

               SELECT IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) + v_closingbalance
                   INTO v_retainedearning
                   FROM JOURNALENTRYITEMS JI,
                        CHARTOFACCOUNTS COA
                   WHERE JI.COMPANY = pi_company AND
                         JI.BRANCH = pi_branch AND
                         JI.GLACCTNO = COA.ACCTCODE AND
                         JI.DOCDATE < v_financialyear03 AND
                         COA.U_COADRAWER > '399999999999999';

               INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                    PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT CL.LEVLCODE,
                        CL.LEVLCODE, CL.LEVLNAME, CL.ACCTCODE, CL.ACCTNAME, CL.ACCTLEVEL, CL.CATENAME, CL.CATESEQ, CL.CATEGORY, CL.SPECIALACCT,0,0,
                        v_retainedearning, 0,0, CL.IS_DEBIT, 0
                   FROM COA_LEVEL CL
                   WHERE CL.SPECIALACCT = 2
                   GROUP BY CL.LEVLCODE;

               SET v_openingbalance  = 0;
               SET v_closingbalance  = 0;

               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_openingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(v_financialyear03) AND
                         U_MONTH = MONTH(v_financialyear03);

               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_closingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(pi_period03) AND
                         U_MONTH = MONTH(pi_period03);

               IF v_openingbalance IS NULL THEN
                  SET v_openingbalance = 0;
               END IF;

               IF v_closingbalance IS NULL THEN
                  SET v_closingbalance = 0;
               END IF;

               INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                    PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT '9999999999999999999',
                        '9999999999999999999', 'PROFIT & LOSS ACCOUNT', '9999999999999999999', 'PROFIT & LOSS ACCOUNT', 1, 'EQUITY', 60, 'BEQ', 0,0,0,
                        IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) - (v_openingbalance - v_closingbalance),
                        0,0,0,0
                   FROM JOURNALENTRYITEMS JI,
                        CHARTOFACCOUNTS COA
                   WHERE JI.COMPANY = pi_company AND
                         JI.BRANCH = pi_branch AND
                         JI.GLACCTNO = COA.ACCTCODE AND
                         JI.DOCDATE >= v_financialyear03 AND
                         JI.DOCDATE <= pi_period03 AND
                         COA.U_COADRAWER > '399999999999999';
      

           INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT IF(CL.LEVLCODE = CL.ACCTCODE,IF(AD.U_DEPRECIATION = CL.ACCTCODE, CONCAT(AD.CODE,'A'), CL.ACCTCODE),CL.LEVLCODE),
                        CL.LEVLCODE, CL.LEVLNAME, CL.ACCTCODE, CL.ACCTNAME, CL.ACCTLEVEL, CL.CATENAME, CL.CATESEQ, CL.CATEGORY, CL.SPECIALACCT,0,0,0,
                        CASE WHEN CL.SPECIALACCT = 4 THEN IF(ST.U_STOCKVALUE IS NULL, 0, ST.U_STOCKVALUE)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, ROUND(SUM(JI.GLDEBIT - JI.GLCREDIT),2))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, ROUND(SUM(JI.GLCREDIT - JI.GLDEBIT),2)) END,
                        0, CL.IS_DEBIT, CL.UPPERRPT
                   FROM COA_LEVEL CL
                      LEFT OUTER JOIN JOURNALENTRYITEMS JI ON JI.COMPANY = pi_company AND JI.BRANCH = pi_branch AND JI.GLACCTNO = CL.ACCTCODE AND JI.DOCDATE <= pi_period04
                      LEFT OUTER JOIN U_ASSETDEPRECIATIONMAINT AD ON AD.U_DEPRECIATION = CL.ACCTCODE
                      LEFT OUTER JOIN U_STOCKVALUEMAINTDETAIL ST ON ST.CODE = CL.ACCTCODE AND ST.U_YEAR = YEAR(pi_period04) AND ST.U_MONTH = MONTH(pi_period04)
                   WHERE CL.SPECIALACCT <> 2
                   GROUP BY CL.ACCTCODE;

    
               SET v_retainedearning = 0;
               SET v_openingbalance  = 0;
               SET v_closingbalance  = 0;

               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_closingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(DATE_SUB(v_financialyear04, INTERVAL 1 MONTH)) AND
                         U_MONTH = MONTH(DATE_SUB(v_financialyear04, INTERVAL 1 MONTH));

               IF v_closingbalance IS NULL THEN
                  SET v_closingbalance = 0;
               END IF;

               SELECT IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) + v_closingbalance
                   INTO v_retainedearning
                   FROM JOURNALENTRYITEMS JI,
                        CHARTOFACCOUNTS COA
                   WHERE JI.COMPANY = pi_company AND
                         JI.BRANCH = pi_branch AND
                         JI.GLACCTNO = COA.ACCTCODE AND
                         JI.DOCDATE < v_financialyear04 AND
                         COA.U_COADRAWER > '399999999999999';

               INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                    PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT CL.LEVLCODE,
                        CL.LEVLCODE, CL.LEVLNAME, CL.ACCTCODE, CL.ACCTNAME, CL.ACCTLEVEL, CL.CATENAME, CL.CATESEQ, CL.CATEGORY, CL.SPECIALACCT,0,0,0,
                        v_retainedearning, 0, CL.IS_DEBIT, 0
                   FROM COA_LEVEL CL
                   WHERE CL.SPECIALACCT = 2
                   GROUP BY CL.LEVLCODE;

               SET v_openingbalance  = 0;
               SET v_closingbalance  = 0;

               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_openingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(v_financialyear04) AND
                         U_MONTH = MONTH(v_financialyear04);

               SELECT IF(SUM(U_STOCKVALUE) IS NULL, 0, SUM(U_STOCKVALUE)) INTO v_closingbalance
                   FROM u_stockvaluemaintdetail
                   WHERE U_YEAR =  YEAR(pi_period04) AND
                         U_MONTH = MONTH(pi_period04);

               IF v_openingbalance IS NULL THEN
                  SET v_openingbalance = 0;
               END IF;

               IF v_closingbalance IS NULL THEN
                  SET v_closingbalance = 0;
               END IF;

               INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
                                    PERIOD01, PERIOD02, PERIOD03, PERIOD04, `VARIANCE`, IS_DEBIT, UPPERRPT)
                 SELECT '9999999999999999999',
                        '9999999999999999999', 'PROFIT & LOSS ACCOUNT', '9999999999999999999', 'PROFIT & LOSS ACCOUNT', 1, 'EQUITY', 60, 'BEQ', 0,0,0,0,
                        IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) - (v_openingbalance - v_closingbalance),
                        0,0,0
                   FROM JOURNALENTRYITEMS JI,
                        CHARTOFACCOUNTS COA
                   WHERE JI.COMPANY = pi_company AND
                         JI.BRANCH = pi_branch AND
                         JI.GLACCTNO = COA.ACCTCODE AND
                         JI.DOCDATE >= v_financialyear04 AND
                         JI.DOCDATE <= pi_period04 AND
                         COA.U_COADRAWER > '399999999999999';
    

      END IF;

   SELECT SEQCODE, LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT,
          SUM(PERIOD01), SUM(PERIOD02), SUM(PERIOD03), SUM(PERIOD04), SUM(PERIOD01 - PERIOD02), IS_DEBIT, UPPERRPT
       FROM BS_TEMP
       GROUP BY LEVLCODE
       ORDER BY CATESEQ, SEQCODE;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `balance_sheet`
--

DROP PROCEDURE IF EXISTS `balance_sheet`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `balance_sheet`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_date1 VARCHAR(30))
BEGIN
DECLARE v_branch VARCHAR(100);
DECLARE gl_year VARCHAR(50);
SET v_branch = concat('%-', pi_branch,'-%');
  IF month(pi_date1) = 1 then
     set gl_year = year(pi_date1) - 1;
  ELSEIF month(pi_date1) <> 1 then
     set gl_year = year(pi_date1);
  end if;
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `GLDEBIT1` NUMERIC(18,6) NULL default '0',
    `GLCREDIT1` NUMERIC(18,6) NULL default '0',
    `GLDEBIT2` NUMERIC(18,6) NULL default '0',
    `GLCREDIT2` NUMERIC(18,6) NULL default '0',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY,
             BRANCH,
             GLACCTNO,
             GLACCTNAME,
             GLDEBIT1,
             GLCREDIT1,
             GLDEBIT2,
             GLCREDIT2,
             GLDEBIT,
             GLCREDIT)
      SELECT a.COMPANY, a.BRANCH, b.GLACCTNO, b.GLACCTNAME,
             if(DATE_FORMAT(a.DOCDATE, '%y-%m') <= DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m'),
             b.GLDEBIT,0) as GLDEBIT1,
             if(DATE_FORMAT(a.DOCDATE, '%y-%m') <= DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m'),
             b.GLCREDIT,0) as GLCREDIT1,
             if(DATE_FORMAT(a.DOCDATE, '%y-%m') <= DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m'),
             b.GLDEBIT,0) as GLDEBIT2,
             if(DATE_FORMAT(a.DOCDATE, '%y-%m') <= DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m'),
             b.GLCREDIT,0) as GLCREDIT2,
             b.GLDEBIT as GLDEBIT,
             b.GLCREDIT as GLCREDIT
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and DATE_FORMAT(a.DOCDATE, '%y-%m') <= DATE_FORMAT(pi_date1, '%y-%m')
             and (b.GLACCTNO like '1%'
                 or b.GLACCTNO like '2%'
                 or b.GLACCTNO like '3%');
SELECT upper(c.COMPANYNAME) as Company,
       pi_branch as BRANCH,
       UPPER(b.BRANCHNAME) AS BRANCHNAME,
if((A.GLACCTNO like '2%' or A.GLACCTNO like '3%'), 0 - (if (sum(a.GLDEBIT1) is null, 0, sum(a.GLDEBIT1))), (if (sum(a.GLDEBIT1) is null, 0, sum(a.GLDEBIT1)))) AS debit1,
if((A.GLACCTNO like '2%' or A.GLACCTNO like '3%'), 0 - (if (sum(a.GLCREDIT1) is null, 0, sum(a.GLCREDIT1))), (if (sum(a.GLCREDIT1) is null, 0, sum(a.GLCREDIT1)))) AS credit1,
if((A.GLACCTNO like '2%' or A.GLACCTNO like '3%'), 0 - (if (sum(a.GLDEBIT2) is null, 0, sum(a.GLDEBIT2))), (if (sum(a.GLDEBIT2) is null, 0, sum(a.GLDEBIT2)))) AS debit2,
if((A.GLACCTNO like '2%' or A.GLACCTNO like '3%'), 0 - (if (sum(a.GLCREDIT2) is null, 0, sum(a.GLCREDIT2))), (if (sum(a.GLCREDIT2) is null, 0, sum(a.GLCREDIT2)))) AS credit2,
if((A.GLACCTNO like '2%' or A.GLACCTNO like '3%'), 0 - (if (sum(a.GLDEBIT) is null, 0, sum(a.GLDEBIT))), (if (sum(a.GLDEBIT) is null, 0, sum(a.GLDEBIT)))) AS debit,
if((A.GLACCTNO like '2%' or A.GLACCTNO like '3%'), 0 - (if (sum(a.GLCREDIT) is null, 0, sum(a.GLCREDIT))), (if (sum(a.GLCREDIT) is null, 0, sum(a.GLCREDIT)))) AS credit,
case when A.GLACCTNO like '1%' then 1
     when A.GLACCTNO like '2%' then 2
     when A.GLACCTNO like '3%' then 3
else 0
end as drawer_no,
c3.acctcode as level_2_no,
c3.acctname as level_2_name,
c2.acctcode AS level0_code,
c2.acctname AS level0_name,
a.GLACCTNO AS acct_code,
a.GLACCTNAME AS acct_name,
upper(case when A.GLACCTNO like '1%' then 'Assets'
     when A.GLACCTNO like '2%' then 'Liabilities'
     when A.GLACCTNO like '3%' then 'Capital and Reserves'
else ''
end) as drawer,
date(pi_date1) as date1,
date(pi_date1)- interval 1 month as date2,
date(pi_date1)- interval 2 month as date3
FROM je a
left outer join chartofaccounts c1 on a.GLACCTNO = c1.formatcode
left outer join chartofaccounts c2 on c1.parentacct = c2.acctcode
left outer join chartofaccounts c3 on c2.parentacct = c3.acctcode
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
Group by a.GLACCTNO
Order by a.GLACCTNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `bank_trans`
--

DROP PROCEDURE IF EXISTS `bank_trans`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `bank_trans`(IN pi_company VARCHAR(30),
                              IN pi_branch VARCHAR(30),
                              IN pi_account VARCHAR(100),
                              IN pi_suppno VARCHAR(100),
                              IN pi_date1 VARCHAR(100),
                              IN pi_date2 VARCHAR(100))
BEGIN
CREATE TEMPORARY TABLE  `je_opening` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
    `REMARKS` varchar(500) NULL default '',
    `SUPPNO` varchar(500) NULL default '',
    `SUPPNAME` varchar(500) NULL default '',
    `BANKNO` varchar(500) NULL default '',
    `BANKNAME` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je_opening (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, OGLDEBIT, OGLCREDIT, REMARKS,SUPPNO,SUPPNAME,BANKNO,BANKNAME)
    SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             sum(if (b.GLDEBIT is null, 0, ROUND(b.GLDEBIT, 2))) as GLDEBIT,
             sum(if (b.GLCREDIT is null, 0, ROUND(b.GLCREDIT, 2))) as GLCREDIT, b.REMARKS,
             b.SLACCTNO, b.SLACCTNAME, b.BANKACCTNO, c.BANKNAME
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             left outer join banks c
             ON b.BANK = c.BANK
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE < pi_date1
             and (pi_suppno='' or (pi_suppno<>'' and b.BANKACCTNO = pi_suppno))
             and (b.BANKACCTNO <> '')
             group by b.BANKACCTNO;
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
    `REMARKS` varchar(500) NULL default '',
    `SUPPNO` varchar(500) NULL default '',
    `SUPPNAME` varchar(500) NULL default '',
    `BANKNO` varchar(500) NULL default '',
    `BANKNAME` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, REMARKS,SUPPNO,SUPPNAME,BANKNO,BANKNAME)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, ROUND(b.GLDEBIT, 2)),
             if (b.GLCREDIT is null, 0, ROUND(b.GLCREDIT, 2)),
             a.DOCREMARKS,
             b.SLACCTNO, b.SLACCTNAME, b.BANKACCTNO, c.BANKNAME
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             left outer join banks c
             ON b.BANK = c.BANK
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE BETWEEN pi_date1 and pi_date2
             and (pi_suppno='' or (pi_suppno<>'' and b.BANKACCTNO = pi_suppno))
             and (b.BANKACCTNO <> '');
CREATE TEMPORARY TABLE  `parentacct` (
    `ACCTCODE` varchar(100) NULL default '',
    `ACCTNAME` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO parentacct (ACCTCODE, ACCTNAME)
    SELECT if (c.FORMATCODE not in(''), c.FORMATCODE, c.ACCTCODE) as ACCTCODE, c.ACCTNAME
           FROM chartofaccounts c;
SELECT upper(c.COMPANYNAME) as Company, pi_branch as BRANCH, UPPER(b.BRANCHNAME) AS BRANCHNAME,
Date(a.DOCDATE) as posting_date, Date(a.DUEDATE) as due_date, a.DOCTYPE AS series, a.DOCNO AS doc_no,
a.DOCID AS trans_no, a.REMARKS AS remarks,
if (x.FORMATCODE not in(''), x.FORMATCODE, x.ACCTCODE) AS acct_code,
x.ACCTNAME AS acct_name,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS debit, if (a.GLCREDIT is null, 0, a.GLCREDIT) AS credit,
if (d.OGLDEBIT is null, 0, d.OGLDEBIT) as OGLDEBIT, if (d.OGLCREDIT is null, 0, d.OGLCREDIT) as OGLCREDIT,
x.LEVEL AS level, x.PARENTACCT AS parent_code,
DATE(pi_date1) AS date1, DATE(pi_date2) AS date2, DATE(pi_date1) - interval 1 day AS date3, l.ACCTCODE AS level0_code, l.ACCTNAME AS level0_name,
upper(case when x.PARENTACCT like '1%' then '1'
     when x.PARENTACCT like '2%' then '2'
     when x.PARENTACCT like '3%' then '3'
     when x.PARENTACCT like '4%' then '4'
     when x.PARENTACCT like '5%' then '5'
     when x.PARENTACCT like '6%' then '6'
     when x.PARENTACCT like '7%' then '7'
     when x.PARENTACCT like '8%' then '8'
else ''
end) as drawer_no,
upper(case when x.PARENTACCT like '1%' then 'Assets'
     when x.PARENTACCT like '2%' then 'Liabilities'
     when x.PARENTACCT like '3%' then 'Capital and Reserves'
     when x.PARENTACCT like '4%' then 'Turnover'
     when x.PARENTACCT like '5%' then 'Cost of Sales'
     when x.PARENTACCT like '6%' then 'Operating Costs'
     when x.PARENTACCT like '7%' then 'Non-Operating Income and Expenditure'
     when x.PARENTACCT like '8%' then 'Taxation and Extraordinary Items'
else ''
end) as drawer,
if(a.BANKNO is null,d.BANKNO,a.BANKNO) as SUPPNO,
if(a.BANKNAME is null,d.BANKNAME,a.BANKNAME) as SUPPNAME
FROM chartofaccounts x
left outer join je a on a.GLACCTNO = x.FORMATCODE
left outer join je_opening d on d.GLACCTNO = x.FORMATCODE
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
left outer join parentacct l on l.ACCTCODE = x.PARENTACCT
WHERE x.PARENTACCT NOT IN('')
      and (d.BANKNO is not null or a.BANKNO is not null);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `book_of_accounts`
--

DROP PROCEDURE IF EXISTS `book_of_accounts`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `book_of_accounts`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_doctype VARCHAR(30), IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(500) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `SLACCTNO` varchar(100) NULL default '',
    `SLACCTNAME` varchar(500) NULL default '',
    `SLDEBIT` NUMERIC(18,6) NULL default '0',
    `SLCREDIT` NUMERIC(18,6) NULL default '0',
    `DOCTYPE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `REFNO` varchar(100) NULL default '',
    `REMARKS` varchar(2000) NULL default '',
    `LINEID` varchar(100) NULL default '',
    `DOCSTATUS` varchar(100) NULL default '',
    `SLTYPE` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT,
             SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, DOCTYPE, DOCNO, REFNO, REMARKS, LINEID, DOCSTATUS, SLTYPE)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE,
             b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, b.GLDEBIT), if (b.GLCREDIT is null, 0, b.GLCREDIT),
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANKACCTNO
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             b.SUBSIDIARY
             ELSE b.SLACCTNO END,
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANK
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             q.SUBSIDIARYNAME
             ELSE if (b.REFERENCE2 = '' , concat(b.SLACCTNAME, ' ', b.REFERENCE1), concat(b.SLACCTNAME, ' ', b.REFERENCE2)) END,
             CASE
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             ELSE if(b.SLDEBIT = 0,if (b.GLDEBIT is null, 0, b.GLDEBIT),if (b.SLDEBIT is null, 0, b.SLDEBIT)) END,
             CASE
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             ELSE if(b.GLCREDIT = 0,if (b.GLCREDIT is null, 0, b.GLCREDIT), if (b.SLCREDIT is null, 0, b.SLCREDIT)) END,
             b.DOCTYPE, a.DOCNO, b.REFERENCE1, a.DOCREMARKS, b.LINEID,
             IF(a.SBO_POST_FLAG<>0, 'POSTED', 'UNPOSTED'),
             CASE WHEN b.SLTYPE = 'C' THEN ' - CUSTOMER' WHEN b.SLTYPE = 'S' THEN ' - SUPPLIER' ELSE '' END
             FROM journalentries a
             LEFT OUTER JOIN journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             LEFT OUTER JOIN chartofaccountsubsidiaries q on b.SUBSIDIARY = q.SUBSIDIARY
             where a.COMPANY = pi_company and a.BRANCH = pi_branch
             and a.DOCDATE BETWEEN pi_date1 AND pi_date2
             AND (pi_doctype='' or (pi_doctype<>'' AND a.DOCGROUP = pi_doctype));
SELECT upper(c.COMPANYNAME) as COMPANY,
pi_branch as BRANCH,
UPPER(CONCAT(pi_branch, ' - ', b.BRANCHNAME)) AS BRANCHNAME,
Date(a.DOCDATE) as POSTINGDDATE,
Date(a.DUEDATE) as DUEDATE,
DATE(pi_date1) AS DATE1,
DATE(pi_date2) DATE2,
IF(pi_doctype = '', 'ALL', UPPER(d.DOCGROUPNAME)) as DOCTYPENAME,
a.DOCNO,
a.DOCTYPE,
a.REFNO,
a.GLACCTNO AS ACCTCODE,
a.GLACCTNAME AS ACCTNAME,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS DEBIT,
if (a.GLCREDIT is null, 0, a.GLCREDIT) AS CREDIT,
a.SLACCTNO AS SLACCTCODE,
a.SLACCTNAME AS SLACCTNAME,
if (a.SLDEBIT is null, 0, a.SLDEBIT) AS SLDEBIT,
if (a.SLCREDIT is null, 0, a.SLCREDIT) AS SLCREDIT,
UPPER(a.REMARKS) AS REMARKS,
a.DOCSTATUS,
a.SLTYPE
FROM je a
LEFT OUTER JOIN branches b on b.BRANCHCODE = pi_branch
LEFT OUTER JOIN companies c on c.COMPANYCODE = pi_company
LEFT OUTER JOIN docgroups d on d.DOCGROUP = pi_doctype;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `book_of_accounts2`
--

DROP PROCEDURE IF EXISTS `book_of_accounts2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `book_of_accounts2`(IN pi_company VARCHAR(30),
 IN pi_branch VARCHAR(30),
 IN pi_doctype VARCHAR(30),
 IN pi_date1 VARCHAR(30),
 IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(500) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `SLACCTNO` varchar(100) NULL default '',
    `SLACCTNAME` varchar(500) NULL default '',
    `SLDEBIT` NUMERIC(18,6) NULL default '0',
    `SLCREDIT` NUMERIC(18,6) NULL default '0',
    `DOCTYPE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `REFNO` varchar(100) NULL default '',
    `REMARKS` varchar(2000) NULL default '',
    `LINEID` varchar(100) NULL default '',
    `DOCSTATUS` varchar(100) NULL default '',
    `SLTYPE` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT,
             SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, DOCTYPE, DOCNO, REFNO, REMARKS, LINEID,
             DOCSTATUS, SLTYPE)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE,
             b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, b.GLDEBIT), if (b.GLCREDIT is null, 0, b.GLCREDIT),
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANKACCTNO
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             b.SUBSIDIARY
             ELSE b.SLACCTNO END,
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANK
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             q.SUBSIDIARYNAME
             ELSE if (b.REFERENCE2 = '' , concat(b.SLACCTNAME, ' ', b.REFERENCE1),
             concat(b.SLACCTNAME, ' ', b.REFERENCE2)) END,
             CASE
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             ELSE if(b.SLDEBIT = 0,if (b.GLDEBIT is null, 0, b.GLDEBIT),if (b.SLDEBIT is null, 0, b.SLDEBIT)) END,
             CASE
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             ELSE if(b.GLCREDIT = 0,if (b.GLCREDIT is null, 0, b.GLCREDIT), if (b.SLCREDIT is null, 0, b.SLCREDIT)) END,
             b.DOCTYPE, a.DOCNO, b.REFERENCE1, a.DOCREMARKS, b.LINEID,
             IF(a.SBO_POST_FLAG<>0, 'POSTED', 'UNPOSTED'),
             CASE WHEN b.SLTYPE = 'C' THEN ' - CUSTOMER' WHEN b.SLTYPE = 'S' THEN ' - SUPPLIER' ELSE '' END
             FROM journalentries a
             LEFT OUTER JOIN journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             LEFT OUTER JOIN chartofaccountsubsidiaries q on b.SUBSIDIARY = q.SUBSIDIARY
             where a.COMPANY = pi_company and a.BRANCH = pi_branch
             and a.DOCDATE BETWEEN pi_date1 AND pi_date2
             AND (pi_doctype='' or (pi_doctype<>'' AND a.DOCGROUP = pi_doctype));
CREATE TEMPORARY TABLE  `documents_with_vat` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `ISVAT` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO documents_with_vat (COMPANY, BRANCH, DOCNO, ISVAT)
    SELECT a.COMPANY, a.BRANCH, a.DOCNO, 'y'
          FROM journalentryitems a
    WHERE a.COMPANY = pi_company AND a.branch = pi_branch
          and a.docdate BETWEEN pi_date1 AND pi_date2 and a.glacctno in('130050001','130050002')
    GROUP BY a.DOCNO;
SELECT upper(c.COMPANYNAME) as COMPANY,
pi_branch as BRANCH,
UPPER(CONCAT(pi_branch, ' - ', b.BRANCHNAME)) AS BRANCHNAME,
Date(a.DOCDATE) as POSTINGDDATE,
Date(a.DUEDATE) as DUEDATE,
DATE(pi_date1) AS DATE1,
DATE(pi_date2) DATE2,
IF(pi_doctype = '', 'ALL', UPPER(d.DOCGROUPNAME)) as DOCTYPENAME,
a.DOCNO,
a.DOCTYPE,
a.REFNO,
a.GLACCTNO AS ACCTCODE,
a.GLACCTNAME AS ACCTNAME,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS DEBIT,
if (a.GLCREDIT is null, 0, a.GLCREDIT) AS CREDIT,
a.SLACCTNO AS SLACCTCODE,
a.SLACCTNAME AS SLACCTNAME,
if (a.SLDEBIT is null, 0, a.SLDEBIT) AS SLDEBIT,
if (a.SLCREDIT is null, 0, a.SLCREDIT) AS SLCREDIT,
UPPER(a.REMARKS) AS REMARKS,
a.DOCSTATUS,
a.SLTYPE
FROM je a
LEFT OUTER JOIN branches b on b.BRANCHCODE = pi_branch
LEFT OUTER JOIN companies c on c.COMPANYCODE = pi_company
LEFT OUTER JOIN docgroups d on d.DOCGROUP = pi_doctype
LEFT OUTER JOIN documents_with_vat e on a.docno = e.docno and e.company = pi_company and e.branch = pi_branch
where e.isvat in('y');
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `Calibration`
--

DROP PROCEDURE IF EXISTS `Calibration`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `Calibration`(IN pi_company VARCHAR(30),
                                      IN pi_branch VARCHAR(30),
                                      IN pi_date1 VARCHAR(30),
                                      IN pi_date2 VARCHAR(30))
BEGIN
DROP TEMPORARY TABLE  IF EXISTS `main`;
CREATE TEMPORARY TABLE  `main` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `COMPANYNAME` varchar(500) NULL default '',
    `COMPANYTYPE` varchar(500) NULL default '',
    `BRANCHNAME` varchar(500) NULL default '',
    `u_date_from` DATE NULL,
    `u_shift` varchar(100) NULL default '',
    `Biodiesel1` NUMERIC(18,6) NOT NULL default '0',
    `Biodiesel2` NUMERIC(18,6) NOT NULL default '0',
    `Biodiesel3` NUMERIC(18,6) NOT NULL default '0',
    `Biodiesel4` NUMERIC(18,6) NOT NULL default '0',
    `Biodiesel5` NUMERIC(18,6) NOT NULL default '0',
    `Premium1` NUMERIC(18,6) NOT NULL default '0',
    `Premium2` NUMERIC(18,6) NOT NULL default '0',
    `Premium3` NUMERIC(18,6) NOT NULL default '0',
    `Premium4` NUMERIC(18,6) NOT NULL default '0',
    `Premium5` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded1` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded2` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded3` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded4` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded5` NUMERIC(18,6) NOT NULL default '0',
    `Regular1` NUMERIC(18,6) NOT NULL default '0',
    `Regular2` NUMERIC(18,6) NOT NULL default '0',
    `Regular3` NUMERIC(18,6) NOT NULL default '0',
    `Regular4` NUMERIC(18,6) NOT NULL default '0',
    `Regular5` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene1` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene2` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene3` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene4` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene5` NUMERIC(18,6) NOT NULL default '0',
    `U_ATTENDANT1` varchar(100) NULL default '',
    `username` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO main ( COMPANY,
                BRANCH,
                COMPANYNAME,
                COMPANYTYPE,
                BRANCHNAME,
                u_date_from,
                u_shift,
                Biodiesel1,
                Biodiesel2,
                Biodiesel3,
                Biodiesel4,
                Biodiesel5,
                Premium1,
                Premium2,
                Premium3,
                Premium4,
                Premium5,
                Unleaded1,
                Unleaded2,
                Unleaded3,
                Unleaded4,
                Unleaded5,
                Regular1,
                Regular2,
                Regular3,
                Regular4,
                Regular5,
                Kerosene1,
                Kerosene2,
                Kerosene3,
                Kerosene4,
                Kerosene5,
                U_ATTENDANT1,
                username)
    Select
       a.COMPANY,
       a.BRANCH,
       upper(co.companyname) as COMPANYNAME,
       upper(concat('(',co.companytype, ' Group)')) as COMPANYTYPE,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BRANCHNAME,
       b.u_date_from,
       b.u_shift,
       if(a.u_itemcode = 'W0001' and a.u_pump = 1, sum(a.u_adj_calibration), 0) as 'Biodiesel1',
       if(a.u_itemcode = 'W0001' and a.u_pump = 2, sum(a.u_adj_calibration), 0) as 'Biodiesel2',
       if(a.u_itemcode = 'W0001' and a.u_pump = 3, sum(a.u_adj_calibration), 0) as 'Biodiesel3',
       if(a.u_itemcode = 'W0001' and a.u_pump = 4, sum(a.u_adj_calibration), 0) as 'Biodiesel4',
       if(a.u_itemcode = 'W0001' and a.u_pump = 5, sum(a.u_adj_calibration), 0) as 'Biodiesel5',
       if(a.u_itemcode = 'W0002' and a.u_pump = 1, sum(a.u_adj_calibration), 0) as 'Premium1',
       if(a.u_itemcode = 'W0002' and a.u_pump = 2, sum(a.u_adj_calibration), 0) as 'Premium2',
       if(a.u_itemcode = 'W0002' and a.u_pump = 3, sum(a.u_adj_calibration), 0) as 'Premium3',
       if(a.u_itemcode = 'W0002' and a.u_pump = 4, sum(a.u_adj_calibration), 0) as 'Premium4',
       if(a.u_itemcode = 'W0002' and a.u_pump = 5, sum(a.u_adj_calibration), 0) as 'Premium5',
       if(a.u_itemcode = 'W0003' and a.u_pump = 1, sum(a.u_adj_calibration), 0) as 'Unleaded1',
       if(a.u_itemcode = 'W0003' and a.u_pump = 2, sum(a.u_adj_calibration), 0) as 'Unleaded2',
       if(a.u_itemcode = 'W0003' and a.u_pump = 3, sum(a.u_adj_calibration), 0) as 'Unleaded3',
       if(a.u_itemcode = 'W0003' and a.u_pump = 4, sum(a.u_adj_calibration), 0) as 'Unleaded4',
       if(a.u_itemcode = 'W0003' and a.u_pump = 5, sum(a.u_adj_calibration), 0) as 'Unleaded5',
       if(a.u_itemcode = 'W0004' and a.u_pump = 1, sum(a.u_adj_calibration), 0) as 'Regular1',
       if(a.u_itemcode = 'W0004' and a.u_pump = 2, sum(a.u_adj_calibration), 0) as 'Regular2',
       if(a.u_itemcode = 'W0004' and a.u_pump = 3, sum(a.u_adj_calibration), 0) as 'Regular3',
       if(a.u_itemcode = 'W0004' and a.u_pump = 4, sum(a.u_adj_calibration), 0) as 'Regular4',
       if(a.u_itemcode = 'W0004' and a.u_pump = 5, sum(a.u_adj_calibration), 0) as 'Regular5',
       if(a.u_itemcode = 'W0005' and a.u_pump = 1, sum(a.u_adj_calibration), 0) as 'Kerosene1',
       if(a.u_itemcode = 'W0005' and a.u_pump = 2, sum(a.u_adj_calibration), 0) as 'Kerosene2',
       if(a.u_itemcode = 'W0005' and a.u_pump = 3, sum(a.u_adj_calibration), 0) as 'Kerosene3',
       if(a.u_itemcode = 'W0005' and a.u_pump = 4, sum(a.u_adj_calibration), 0) as 'Kerosene4',
       if(a.u_itemcode = 'W0005' and a.u_pump = 5, sum(a.u_adj_calibration), 0) as 'Kerosene5',
       b.U_ATTENDANT1,
       us.username
       from u_dailyshiftsalesreadings a
             left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
             left outer join items i on a.u_itemcode = i.itemcode
             left outer join branches br ON a.BRANCH = br.BRANCHCODE
             left outer join companies co on a.company = co.companycode
             left outer join users us on b.CREATEDBY = us.userid
   where a.company = pi_company and a.branch = pi_branch and a.u_adj_calibration > 0  
         and b.u_date_from between pi_date1 and pi_date2
   group by b.u_date_from, b.u_shift, a.u_itemcode, a.u_pump;

select a.Company,
       a.CompanyName,
       a.CompanyType,
       a.Branch,
       a.BranchName,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       a.u_date_from,
       if(a.u_shift like '1%', 'X', '') as Shift1,
       if(a.u_shift like '2%', 'X', '') as Shift2,
       sum(a.Biodiesel1) as Biodiesel1,
       sum(a.Biodiesel2) as Biodiesel2,
       sum(a.Biodiesel3) as Biodiesel3,
       sum(a.Biodiesel4) as Biodiesel4,
       sum(a.Biodiesel5) as Biodiesel5,
       sum(a.Premium1) as Premium1,
       sum(a.Premium2) as Premium2,
       sum(a.Premium3) as Premium3,
       sum(a.Premium4) as Premium4,
       sum(a.Premium5) as Premium5,
       sum(a.Unleaded1) as Unleaded1,
       sum(a.Unleaded2) as Unleaded2,
       sum(a.Unleaded3) as Unleaded3,
       sum(a.Unleaded4) as Unleaded4,
       sum(a.Unleaded5) as Unleaded5,
       sum(a.Regular1) as Regular1,
       sum(a.Regular2) as Regular2,
       sum(a.Regular3) as Regular3,
       sum(a.Regular4) as Regular4,
       sum(a.Regular5) as Regular5,
       sum(a.Kerosene1) as Kerosene1,
       sum(a.Kerosene2) as Kerosene2,
       sum(a.Kerosene3) as Kerosene3,
       sum(a.Kerosene4) as Kerosene4,
       sum(a.Kerosene5) as Kerosene5,
       U_ATTENDANT1,
       username
       from main a
group by a.u_date_from, a.u_shift;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `cash_flow`
--

DROP PROCEDURE IF EXISTS `cash_flow`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `cash_flow`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
DECLARE v_branch VARCHAR(100);
DECLARE gl_year VARCHAR(50);
SET v_branch = concat('%-', pi_branch,'-%');
  IF month(pi_date1) = 1 then
     set gl_year = year(pi_date1) - 1;
  ELSEIF month(pi_date1) <> 1 then
     set gl_year = year(pi_date1);
  end if;
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY,
             BRANCH,
             GLACCTNO,
             GLACCTNAME,
             GLDEBIT,
             GLCREDIT)
      SELECT a.COMPANY, a.BRANCH, b.GLACCTNO, b.GLACCTNAME,
             b.GLDEBIT as GLDEBIT,
             b.GLCREDIT as GLCREDIT
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and DATE_FORMAT(a.DOCDATE, '%y-%m') <= DATE_FORMAT(pi_date2, '%y-%m')
             and (b.GLACCTNO like '1%');
  INSERT
    INTO je (COMPANY,
             BRANCH,
             GLACCTNO,
             GLACCTNAME,
             GLDEBIT,
             GLCREDIT)
      SELECT a.COMPANY, a.BRANCH, b.GLACCTNO, b.GLACCTNAME,
             b.GLDEBIT as GLDEBIT,
             b.GLCREDIT as GLCREDIT
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and DATE_FORMAT(a.DOCDATE, '%y-%m') <= DATE_FORMAT(pi_date2, '%y-%m')
             and (b.GLACCTNO like '2%');
  INSERT
    INTO je (COMPANY,
             BRANCH,
             GLACCTNO,
             GLACCTNAME,
             GLDEBIT,
             GLCREDIT)
      SELECT a.COMPANY, a.BRANCH, b.GLACCTNO, b.GLACCTNAME,
             b.GLDEBIT as GLDEBIT,
             b.GLCREDIT as GLCREDIT
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and DATE_FORMAT(a.DOCDATE, '%y-%m') between DATE_FORMAT(pi_date1, '%y-%m')
             and DATE_FORMAT(pi_date2, '%y-%m')
             and (b.GLACCTNO like '6%');
SELECT upper(c.COMPANYNAME) as Company,
       pi_branch as BRANCH,
       UPPER(b.BRANCHNAME) AS BRANCHNAME,
if((A.GLACCTNO like '2%'), 0 - (if (sum(a.GLDEBIT) is null, 0, sum(a.GLDEBIT))), (if (sum(a.GLDEBIT) is null, 0, sum(a.GLDEBIT)))) AS debit,
if((A.GLACCTNO like '2%'), 0 - (if (sum(a.GLCREDIT) is null, 0, sum(a.GLCREDIT))), (if (sum(a.GLCREDIT) is null, 0, sum(a.GLCREDIT)))) AS credit,
case when A.GLACCTNO like '1%' then 1
     when A.GLACCTNO like '2%' then 2
     when A.GLACCTNO like '6%' then 6
else 0
end as drawer_no,
c3.acctcode as level_2_no,
c3.acctname as level_2_name,
c2.acctcode AS level0_code,
c2.acctname AS level0_name,
a.GLACCTNO AS acct_code,
a.GLACCTNAME AS acct_name,
upper(case when A.GLACCTNO like '1%' then 'Receivables'
     when A.GLACCTNO like '2%' then 'Creditors'
     when A.GLACCTNO like '6%' then 'Expenses'
else ''
end) as drawer,
date(pi_date1) as date1,
date(pi_date2) as date2,
date(pi_date1)- interval 2 month as date3
FROM je a
left outer join chartofaccounts c1 on a.GLACCTNO = c1.formatcode
left outer join chartofaccounts c2 on c1.parentacct = c2.acctcode
left outer join chartofaccounts c3 on c2.parentacct = c3.acctcode
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
Group by a.GLACCTNO
Order by A.GLACCTNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `cash_in_bank`
--

DROP PROCEDURE IF EXISTS `cash_in_bank`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `cash_in_bank`(IN pi_company VARCHAR(30),
                                IN pi_branch VARCHAR(30),
                                IN pi_account VARCHAR(30),
                                IN pi_suppno VARCHAR(30),
                                IN pi_date1 VARCHAR(30))
BEGIN
  DECLARE v_30me DATE;
  DECLARE v_ly DATE;
  SET v_30me = last_day(date(pi_date1));
  SET v_ly = last_day(v_30me - interval 1 month);
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
    `REMARKS` varchar(500) NULL default '',
    `SUPPNO` varchar(500) NULL default '',
    `SUPPNAME` varchar(500) NULL default '',
    `BANKNO` varchar(500) NULL default '',
    `BANKNAME` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, REMARKS,SUPPNO,SUPPNAME,BANKNO,BANKNAME)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             sum(if (b.GLDEBIT is null, 0, ROUND(b.GLDEBIT, 2))) as GLDEBIT,
             sum(if (b.GLCREDIT is null, 0, ROUND(b.GLCREDIT, 2))) as GLCREDIT, b.REMARKS,
             b.SLACCTNO, b.SLACCTNAME, b.BANKACCTNO, c.BANKNAME
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             left outer join banks c
             ON b.BANK = c.BANK
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE <= pi_date1
             and (b.BANKACCTNO <> '')
             group by b.BANKACCTNO, a.DOCDATE;
SELECT upper(c.COMPANYNAME) as Company, pi_branch as BRANCH, UPPER(b.BRANCHNAME) AS BRANCHNAME,
a.BANKNO AS acct_code,
a.BANKNAME AS acct_name,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS debit,
if (a.GLCREDIT is null, 0, a.GLCREDIT) AS credit,
if(month(a.DOCDATE) = month(pi_date1) and year(a.DOCDATE) = year(pi_date1),
  if (a.GLDEBIT is null, 0, a.GLDEBIT),0) AS debit_m,
if(month(a.DOCDATE) = month(pi_date1) and year(a.DOCDATE) = year(pi_date1),
  if (a.GLCREDIT is null, 0, a.GLCREDIT),0) AS credit_m,
if(a.DOCDATE <= v_ly,
  if (a.GLDEBIT is null, 0, a.GLDEBIT),0) AS OGLDEBIT,
if(a.DOCDATE <= v_ly,
  if (a.GLCREDIT is null, 0, a.GLCREDIT),0) AS OGLCREDIT,
DATE(pi_date1) AS date1
FROM chartofaccounts x
left outer join je a on a.GLACCTNO = x.FORMATCODE
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
WHERE x.PARENTACCT NOT IN('');
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `cash_receipts_book`
--

DROP PROCEDURE IF EXISTS `cash_receipts_book`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `cash_receipts_book`(IN pi_company VARCHAR(30),
                         IN pi_branch VARCHAR(30),
                         IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `cashcards2` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CASHCARD` varchar(30) NULL default '',
    `REFNO` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cashcards2 (COMPANY,BRANCH,DOCID,DOCNO,CASHCARD,REFNO,AMOUNT)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.CASHCARD,a.REFNO,a.AMOUNT as AMOUNT
        from collectionscashcards a
        where a.company = pi_company and a.branch = pi_branch;
CREATE TEMPORARY TABLE  `creditcards2` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREDITCARDNO` varchar(30) NULL default '',
    `CARDEXPIRETEXT` varchar(30) NULL default '',
    `creditcard` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO creditcards2 (COMPANY,BRANCH,DOCID,DOCNO,CREDITCARDNO,CARDEXPIRETEXT,creditcard,AMOUNT)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.CREDITCARDNO,a.CARDEXPIRETEXT,a.creditcard,a.AMOUNT
        from collectionscreditcards a
        where a.company = pi_company and a.branch = pi_branch;
CREATE TEMPORARY TABLE  `cheques` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BANKBRANCH` varchar(30) NULL default '',
    `BANK` varchar(30) NULL default '',
    `CHECKNO` varchar(30) NULL default '',
    `bankacctno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cheques (COMPANY,BRANCH,DOCID,DOCNO,BANK,BANKBRANCH,CHECKNO,checkdate,AMOUNT,bankacctno)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.BANK,a.BANKBRANCH,a.CHECKNO,a.checkdate,a.AMOUNT,a.bankacctno
        from collectionscheques a
        where a.company = pi_company and a.branch = pi_branch;
CREATE TEMPORARY TABLE  `dccr` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCHCODE` varchar(30) NULL default '',
    `BPCODE` varchar(30) NULL default '',
    `BPNAME` varchar(500) NULL default '',
    `ADDRESS` varchar(500) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` DATE NULL,
    `REMARKS` varchar(1000) NULL default '',
    `LASTUPDATEDBY` varchar(30) NULL default '',
    `REFNO` varchar(50) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    `reftype` varchar(100) NULL default '',
    `BRANCHNAME` varchar(30) NULL default '',
    `rebate` NUMERIC(18,6) NULL default '0',
    `penalty` NUMERIC(18,6) NULL default '0',
    `bankname` varchar(500) NULL default '',
    `accountno` varchar(30) NULL default '',
    `checkno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `accountname` varchar(30) NULL default '',
    `chequesamount` NUMERIC(18,6) NULL default '0',
    `ccname` varchar(30) NULL default '',
    `ccno` varchar(30) NULL default '',
    `ccexpiry` varchar(30) NULL default '',
    `creditcardsamount` NUMERIC(18,6) NULL default '0',
    `ccard` varchar(30) NULL default '',
    `ccardrefno` varchar(30) NULL default '',
    `ccardamount` NUMERIC(18,6) NULL default '0',
    `valuedate` DATE NULL,
    `pdc` varchar(30) NULL default '',
    `pdc_applied` varchar(30) NULL default '',
    `pdc_ref` varchar(30) NULL default '',
    `arrangement` varchar(30) NULL default '',
    `xxx` varchar(100) NULL default '',
    `column1` varchar(30) NULL default '',
    `column2` varchar(30) NULL default '',
    `date1` DATE NULL,
    `date2` DATE NULL,
    `si` varchar(30) NULL default '0',
    `date3` DATE NULL
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
 INSERT
    INTO dccr (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    accountname,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount,
    valuedate,
    pdc,
    pdc_applied,
    pdc_ref,
    arrangement,
    xxx,
    column1,
    column2,
    date1,
    date2,
    si,
    date3)
SELECT upper(f.COMPANYNAME) as COMPANY,
        collections.BRANCHCODE,
        collections.BPCODE,
        if(collections.BPNAME = '', collections.ADDRESS, collections.BPNAME) as BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        collections.DOCDATE,
        collections.REMARKS,
        collections.LASTUPDATEDBY,
        case when collections.collfor='RS' then ''
              when collections.collfor='WU' then collections.REFNO
              when collections.collfor='SI' then
              if (collectionsinvoices.reftype like 'NR%', accountslist.REFNO, collectionsinvoices.REFNO)
        else IF(collectionsaccounts.subsidiary = '', collectionsaccounts.REMARKS, 'EXPENSES') end
        as REFNO,
        case when collections.collfor='WU' then collections.WUNETAMOUNT
             when collections.collfor='' then collectionsaccounts.amount
        else (case when collectionsinvoices.AMOUNT is null
        then collections.PAIDAMOUNT else collectionsinvoices.AMOUNT - collectionsinvoices.penaltypaid
        end) end
        as 'AMOUNT',
        IF(collections.pdc = '1', CONCAT(CONVERT(cheques.checkdate,CHAR), ' ', collectionsinvoices.reftype) ,case
              when collections.collfor='RS' then concat(collections.DEPARTMENT , ' - CUSTOMER DEPOSIT')
              when collections.collfor='WU' then 'OTHER CASH PAYMENTS'
              when collections.collfor='SI' then collectionsinvoices.reftype
        else IF(collectionsaccounts.SUBSIDIARY = '', collectionsaccounts.GLACCTNAME, chartofaccountsubsidiaries.SUBSIDIARYNAME) end) as 'reftype',
        upper(branches.BRANCHNAME) as BRANCHNAME, if (collectionsinvoices.rebate is null, 0, collectionsinvoices.rebate) as rebate,
        if (collectionsinvoices.penaltypaid is null, 0, collectionsinvoices.penaltypaid) as penalty,
        if (cheques.DOCNO is null, '', concat(cheques.BANK,' - ',cheques.BANKBRANCH)) as bankname,
        if (cheques.DOCNO is null, '', cheques.bankacctno) as accountno,
        if (cheques.DOCNO is null, '', cheques.CHECKNO) as checkno, cheques.CHECKDATE as checkdate,
        if (cheques.DOCNO is null, '', '') as accountname,
        if (cheques.DOCNO is null, 0, cheques.AMOUNT) as chequesamount,
        if (creditcards2.DOCNO is null, '', creditcards.creditcardname) as ccname,
        if (creditcards2.DOCNO is null, '', creditcards2.CREDITCARDNO) as ccno,
        if (creditcards2.DOCNO is null, '', creditcards2.CARDEXPIRETEXT) as ccexpiry,
        if (creditcards2.DOCNO is null, 0, creditcards2.AMOUNT) as creditcardsamount,
        '' as ccard,
        '' as ccardrefno,
        0 as ccardamount,
        date(if(collections.valuedate = '0000-00-00', null, collections.valuedate)) as valuedate,
        collections.pdc as pdc,
        if(collections.valuedate between pi_date1 and pi_date2 and collections.pdc=1, 1, 0) as pdc_applied,
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then 'APPLIED PDC'
        when collections.pdc = '1' and collections.valuedate = '0000-00-00' then 'UNAPPLIED PDC'
        else 'CRB'
        end as pdc_ref,
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then 2
        when collections.pdc = '1' and collections.valuedate = '0000-00-00' then 3
        else 1
        end as arrangement,
        j.DEPARTMENTNAME as xxx,
        '' as column1,
        case when collectionsinvoices.reftype like 'AR%' then 'AR'
             when collectionsinvoices.reftype like 'NR%' then 'NR'
        else ''
        end as column2,
        DATE(pi_date1) as date1,
        DATE(pi_date2) as date2,
        if(collections.collfor='SI',0,1),
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then collections.valuedate
        else collections.DOCDATE
        end
        FROM collections
        LEFT OUTER JOIN collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN collectionsaccounts ON collections.COMPANY = collectionsaccounts.COMPANY
        AND collections.DOCNO = collectionsaccounts.DOCNO AND collections.BRANCHCODE = collectionsaccounts.BRANCH
        LEFT OUTER JOIN chartofaccountsubsidiaries ON collectionsaccounts.SUBSIDIARY = chartofaccountsubsidiaries.SUBSIDIARY
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN accounts ON collectionsinvoices.COMPANY = accounts.COMPANY
        AND collectionsinvoices.REFNO = accounts.acctno AND collectionsinvoices.BRANCH = accounts.BRANCH
        LEFT OUTER JOIN cheques ON collections.COMPANY = cheques.COMPANY
        AND collections.DOCNO = cheques.DOCNO AND collections.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN creditcards2 ON collections.COMPANY = creditcards2.COMPANY
        AND collections.DOCNO = creditcards2.DOCNO AND collections.BRANCHCODE = creditcards2.BRANCH
        LEFT OUTER JOIN creditcards ON creditcards.creditcard = creditcards2.creditcard
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN companies f ON f.COMPANYCODE = pi_company
        LEFT OUTER JOIN arinvoices ON collectionsinvoices.COMPANY = arinvoices.COMPANY
        AND collectionsinvoices.BRANCH = arinvoices.BRANCH
        AND collectionsinvoices.REFNO = arinvoices.DOCNO
        LEFT OUTER JOIN departments j
                        ON (collections.DEPARTMENT = j.DEPARTMENT or arinvoices.DEPARTMENT = j.DEPARTMENT or accounts.loantype = j.DEPARTMENT or accountslist.loantype = j.DEPARTMENT)
        WHERE collections.COMPANY = pi_company
              AND collections.BRANCHCODE = pi_branch
              AND (collections.docdate between pi_date1 and pi_date2
                  OR (collections.pdc = 1 and collections.valuedate between pi_date1 and pi_date2))
              AND collections.TRXTYPE NOT IN('CM')
              AND collections.DOCSTAT NOT IN('D')
       ORDER BY collections.DOCDATE, collections.DOCNO;
 INSERT
    INTO dccr (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    accountname,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount,
    valuedate,
    pdc,
    pdc_applied,
    pdc_ref,
    arrangement,
    xxx,
    column1,
    column2,
    date1,
    date2,
    si,
    date3)
SELECT upper(f.COMPANYNAME) as COMPANY,
        collections.BRANCHCODE,
        collections.BPCODE,
        if(collections.BPNAME = '', collections.ADDRESS, collections.BPNAME) as BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        collections.DOCDATE,
        collections.REMARKS,
        collections.LASTUPDATEDBY,
        case when collections.collfor='RS' then ''
              when collections.collfor='WU' then collections.REFNO
              when collections.collfor='SI' then
              if (collectionsinvoices.reftype like 'NR%', accountslist.REFNO, collectionsinvoices.REFNO)
        else IF(collectionsaccounts.subsidiary = '', collectionsaccounts.REMARKS, 'EXPENSES') end
        as REFNO,
        if(collections.collfor='WU', collections.WUCHARGESAMOUNT,
        case when collectionsinvoices.AMOUNT is null
        then collections.PAIDAMOUNT else collectionsinvoices.AMOUNT - collectionsinvoices.penaltypaid
        end) as 'AMOUNT',
        IF(collections.pdc = '1', CONCAT(CONVERT(cheques.checkdate,CHAR), ' ', collectionsinvoices.reftype) ,case
              when collections.collfor='RS' then concat(collections.DEPARTMENT , ' - CUSTOMER DEPOSIT')
              when collections.collfor='WU' then 'OTHER CASH PAYMENTS'
              when collections.collfor='SI' then collectionsinvoices.reftype
        else IF(collectionsaccounts.SUBSIDIARY = '', collectionsaccounts.GLACCTNAME, chartofaccountsubsidiaries.SUBSIDIARYNAME) end) as 'reftype',
        upper(branches.BRANCHNAME) as BRANCHNAME, if (collectionsinvoices.rebate is null, 0, collectionsinvoices.rebate) as rebate,
        if (collectionsinvoices.penaltypaid is null, 0, collectionsinvoices.penaltypaid) as penalty,
        if (cheques.DOCNO is null, '', concat(cheques.BANK,' - ',cheques.BANKBRANCH)) as bankname,
        if (cheques.DOCNO is null, '', cheques.bankacctno) as accountno,
        if (cheques.DOCNO is null, '', cheques.CHECKNO) as checkno, cheques.CHECKDATE as checkdate,
        if (cheques.DOCNO is null, '', '') as accountname,
        if (cheques.DOCNO is null, 0, cheques.AMOUNT) as chequesamount,
        if (creditcards2.DOCNO is null, '', creditcards.creditcardname) as ccname,
        if (creditcards2.DOCNO is null, '', creditcards2.CREDITCARDNO) as ccno,
        if (creditcards2.DOCNO is null, '', creditcards2.CARDEXPIRETEXT) as ccexpiry,
        if (creditcards2.DOCNO is null, 0, creditcards2.AMOUNT) as creditcardsamount,
        '' as ccard,
        '' as ccardrefno,
        0 as ccardamount,
        date(if(collections.valuedate = '0000-00-00', null, collections.valuedate)) as valuedate,
        collections.pdc as pdc,
        if(collections.valuedate between pi_date1 and pi_date2 and collections.pdc=1, 1, 0) as pdc_applied,
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then 'APPLIED PDC'
        when collections.pdc = '1' and collections.valuedate = '0000-00-00' then 'UNAPPLIED PDC'
        else 'CRB'
        end as pdc_ref,
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then 2
        when collections.pdc = '1' and collections.valuedate = '0000-00-00' then 3
        else 1
        end as arrangement,
        j.DEPARTMENTNAME as xxx,
        '' as column1,
        case when collectionsinvoices.reftype like 'AR%' then 'AR'
             when collectionsinvoices.reftype like 'NR%' then 'NR'
        else ''
        end as column2,
        DATE(pi_date1) as date1,
        DATE(pi_date2) as date2,
        if(collections.collfor='SI',0,1),
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then collections.valuedate
        else collections.DOCDATE
        end
        FROM collections
        LEFT OUTER JOIN collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN collectionsaccounts ON collections.COMPANY = collectionsaccounts.COMPANY
        AND collections.DOCNO = collectionsaccounts.DOCNO AND collections.BRANCHCODE = collectionsaccounts.BRANCH
        LEFT OUTER JOIN chartofaccountsubsidiaries ON collectionsaccounts.SUBSIDIARY = chartofaccountsubsidiaries.SUBSIDIARY
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN accounts ON collectionsinvoices.COMPANY = accounts.COMPANY
        AND collectionsinvoices.REFNO = accounts.acctno AND collectionsinvoices.BRANCH = accounts.BRANCH
        LEFT OUTER JOIN cheques ON collections.COMPANY = cheques.COMPANY
        AND collections.DOCNO = cheques.DOCNO AND collections.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN creditcards2 ON collections.COMPANY = creditcards2.COMPANY
        AND collections.DOCNO = creditcards2.DOCNO AND collections.BRANCHCODE = creditcards2.BRANCH
        LEFT OUTER JOIN creditcards ON creditcards.creditcard = creditcards2.creditcard
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN companies f ON f.COMPANYCODE = pi_company
        LEFT OUTER JOIN arinvoices ON collectionsinvoices.COMPANY = arinvoices.COMPANY
        AND collectionsinvoices.BRANCH = arinvoices.BRANCH
        AND collectionsinvoices.REFNO = arinvoices.DOCNO
        LEFT OUTER JOIN departments j
                        ON (collections.DEPARTMENT = j.DEPARTMENT or arinvoices.DEPARTMENT = j.DEPARTMENT or accounts.loantype = j.DEPARTMENT or accountslist.loantype = j.DEPARTMENT)
        WHERE collections.COMPANY = pi_company
              AND collections.BRANCHCODE = pi_branch
              AND (collections.docdate between pi_date1 and pi_date2
                  OR (collections.pdc = 1 and collections.valuedate between pi_date1 and pi_date2))
              AND collections.TRXTYPE NOT IN('CM') AND collections.collfor='WU'
              AND collections.DOCSTAT NOT IN('D')
       ORDER BY collections.DOCDATE, collections.DOCNO;
 INSERT
    INTO dccr (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    accountname,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount,
    valuedate,
    pdc,
    pdc_applied,
    pdc_ref,
    arrangement,
    xxx,
    column1,
    column2,
    date1,
    date2,
    si,
    date3)
SELECT upper(f.COMPANYNAME) as COMPANY,
        collections.BRANCHCODE,
        collections.BPCODE,
        if(collections.BPNAME = '', collections.ADDRESS, collections.BPNAME) as BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        collections.DOCDATE,
        collections.REMARKS,
        collections.LASTUPDATEDBY,
        case when collections.collfor='RS' then ''
              when collections.collfor='WU' then collections.REFNO
              when collections.collfor='SI' then
              if (collectionsinvoices.reftype like 'NR%', accountslist.REFNO, collectionsinvoices.REFNO)
        else IF(collectionsaccounts.subsidiary = '', collectionsaccounts.REMARKS, 'EXPENSES') end
        as REFNO,
        0 as 'AMOUNT',
        IF(collections.pdc = '1', CONCAT(CONVERT(cheques.checkdate,CHAR), ' ', collectionsinvoices.reftype) ,case when collections.collfor='RS' then 'CUSTOMER DEPOSIT'
              when collections.collfor='WU' then 'OTHERS CASH PAYMENTS'
              when collections.collfor='SI' then collectionsinvoices.reftype
        else IF(collectionsaccounts.SUBSIDIARY = '', collectionsaccounts.GLACCTNAME, chartofaccountsubsidiaries.SUBSIDIARYNAME) end) as 'reftype',
        upper(branches.BRANCHNAME) as BRANCHNAME, 0 as rebate,
        0 as penalty,
        '' as bankname,
        '' as accountno,
        '' as checkno, null as checkdate,
        '' as accountname,
        0 as chequesamount,
        '' as ccname,
        '' as ccno,
        '' as ccexpiry,
        0 as creditcardsamount,
        Upper(if (cashcards2.DOCNO is null, '', cashcards.CASHCARDNAME)) as ccard,
        if (cashcards2.DOCNO is null, '', cashcards2.REFNO) as ccardrefno,
        if (cashcards2.DOCNO is null, 0, cashcards2.AMOUNT) as ccardamount,
        date(if(collections.valuedate = '0000-00-00', null, collections.valuedate)) as valuedate,
        collections.pdc as pdc,
        if(collections.valuedate between pi_date1 and pi_date2 and collections.pdc=1, 1, 0) as pdc_applied,
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then 'APPLIED PDC'
        when collections.pdc = '1' and collections.valuedate = '0000-00-00' then 'UNAPPLIED PDC'
        else 'CRB'
        end as pdc_ref,
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then 2
        when collections.pdc = '1' and collections.valuedate = '0000-00-00' then 3
        else 1
        end as arrangement,
        j.DEPARTMENTNAME as xxx,
        '' as column1,
        case when collectionsinvoices.reftype like 'AR%' then 'AR'
             when collectionsinvoices.reftype like 'NR%' then 'NR'
        else ''
        end as column2,
        DATE(pi_date1) as date1,
        DATE(pi_date2) as date2,
        if(collections.collfor='SI',0,1),
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then collections.valuedate
        else collections.DOCDATE
        end
        FROM collections
        LEFT OUTER JOIN collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN collectionsaccounts ON collections.COMPANY = collectionsaccounts.COMPANY
        AND collections.DOCNO = collectionsaccounts.DOCNO AND collections.BRANCHCODE = collectionsaccounts.BRANCH
        LEFT OUTER JOIN chartofaccountsubsidiaries ON collectionsaccounts.SUBSIDIARY = chartofaccountsubsidiaries.SUBSIDIARY
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN accounts ON collectionsinvoices.COMPANY = accounts.COMPANY
        AND collectionsinvoices.REFNO = accounts.acctno AND collectionsinvoices.BRANCH = accounts.BRANCH
        LEFT OUTER JOIN cheques ON collections.COMPANY = cheques.COMPANY
        AND collections.DOCNO = cheques.DOCNO AND collections.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN creditcards2 ON collections.COMPANY = creditcards2.COMPANY
        AND collections.DOCNO = creditcards2.DOCNO AND collections.BRANCHCODE = creditcards2.BRANCH
        LEFT OUTER JOIN creditcards ON creditcards.creditcard = creditcards2.creditcard
        LEFT OUTER JOIN cashcards2 ON collectionsinvoices.COMPANY = cashcards2.COMPANY
        AND collectionsinvoices.DOCNO = cashcards2.DOCNO AND collectionsinvoices.BRANCH = cashcards2.BRANCH
        AND collectionsinvoices.REFNO = cashcards2.REFNO
        LEFT OUTER JOIN cashcards ON cashcards2.cashcard = cashcards.cashcard
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN companies f ON f.COMPANYCODE = pi_company
        LEFT OUTER JOIN arinvoices ON collectionsinvoices.COMPANY = arinvoices.COMPANY
        AND collectionsinvoices.BRANCH = arinvoices.BRANCH
        AND collectionsinvoices.REFNO = arinvoices.DOCNO
        LEFT OUTER JOIN departments j
                        ON (collections.DEPARTMENT = j.DEPARTMENT or arinvoices.DEPARTMENT = j.DEPARTMENT or accounts.loantype = j.DEPARTMENT or accountslist.loantype = j.DEPARTMENT)
        WHERE collections.COMPANY = pi_company
              AND collections.BRANCHCODE = pi_branch
              AND (collections.docdate between pi_date1 and pi_date2
                  OR (collections.pdc = 1 and collections.valuedate between pi_date1 and pi_date2))
              AND collections.TRXTYPE NOT IN('CM')
              AND collections.DOCSTAT NOT IN('D')
       ORDER BY collections.DOCDATE, collections.DOCNO;
 INSERT
    INTO dccr (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    accountname,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount,
    valuedate,
    pdc,
    pdc_applied,
    pdc_ref,
    arrangement,
    xxx,
    column1,
    column2,
    date1,
    date2,
    si,
    date3)
SELECT upper(f.COMPANYNAME) as COMPANY,
        collections.BRANCHCODE,
        collections.BPCODE,
        if(collections.BPNAME = '', collections.ADDRESS, collections.BPNAME) as BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        collections.DOCDATE,
        collections.REMARKS,
        collections.LASTUPDATEDBY,
        collectionsinvoices.REFNO as REFNO,
        collectionsinvoices.AMOUNT as 'AMOUNT',
        UPPER(othercharges.CHRGNAME) as 'reftype',
        upper(branches.BRANCHNAME) as BRANCHNAME, 0 as rebate,
        0 as penalty,
        '' as bankname,
        '' as accountno,
        '' as checkno, null as checkdate,
        '' as accountname,
        0 as chequesamount,
        '' as ccname,
        '' as ccno,
        '' as ccexpiry,
        0 as creditcardsamount,
        '' as ccard,
        '' as ccardrefno,
        0 as ccardamount,
        date(if(collections.valuedate = '0000-00-00', null, collections.valuedate)) as valuedate,
        collections.pdc as pdc,
        if(collections.valuedate between pi_date1 and pi_date2 and collections.pdc=1, 1, 0) as pdc_applied,
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then 'APPLIED PDC'
        when collections.pdc = '1' and collections.valuedate = '0000-00-00' then 'UNAPPLIED PDC'
        else 'CRB'
        end as pdc_ref,
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then 2
        when collections.pdc = '1' and collections.valuedate = '0000-00-00' then 3
        else 1
        end as arrangement,
        j.DEPARTMENTNAME as xxx,
        '' as column1,
        '' as column2,
        DATE(pi_date1) as date1,
        DATE(pi_date2) as date2,
        1,
        case
        when collections.pdc = '1' and collections.valuedate between pi_date1 and pi_date2 then collections.valuedate
        else collections.DOCDATE
        end
        FROM collections
        LEFT OUTER JOIN collectionsothercharges as collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN othercharges ON collectionsinvoices.CHRGCODE = othercharges.CHRGCODE
        LEFT OUTER JOIN collectionsaccounts ON collections.COMPANY = collectionsaccounts.COMPANY
        AND collections.DOCNO = collectionsaccounts.DOCNO AND collections.BRANCHCODE = collectionsaccounts.BRANCH
        LEFT OUTER JOIN chartofaccountsubsidiaries ON collectionsaccounts.SUBSIDIARY = chartofaccountsubsidiaries.SUBSIDIARY
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN accounts ON collectionsinvoices.COMPANY = accounts.COMPANY
        AND collectionsinvoices.REFNO = accounts.acctno AND collectionsinvoices.BRANCH = accounts.BRANCH
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN companies f ON f.COMPANYCODE = pi_company
        LEFT OUTER JOIN arinvoices ON collectionsinvoices.COMPANY = arinvoices.COMPANY
        AND collectionsinvoices.BRANCH = arinvoices.BRANCH
        AND collectionsinvoices.REFNO = arinvoices.DOCNO
        LEFT OUTER JOIN departments j
                        ON (collectionsinvoices.DEPARTMENT = j.DEPARTMENT)
        WHERE collections.COMPANY = pi_company
              AND collections.BRANCHCODE = pi_branch
              AND (collections.docdate between pi_date1 and pi_date2
                  OR (collections.pdc = 1 and collections.valuedate between pi_date1 and pi_date2))
              AND collections.TRXTYPE NOT IN('CM')
              AND collections.DOCSTAT NOT IN('D') and collectionsinvoices.AMOUNT <> 0
       ORDER BY collections.DOCDATE, collections.DOCNO;
 INSERT
    INTO dccr (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    accountname,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount,
    valuedate,
    pdc,
    pdc_applied,
    pdc_ref,
    arrangement,
    xxx,
    column1,
    column2,
    date1,
    date2,
    si,
    date3)
SELECT upper(f.COMPANYNAME) as COMPANY,
        docnosx.BRANCH,
        '',
        '' as BPNAME,
        '',
        docnosx.DOCNO,
        docnosx.DOCDATE,
        docnosx.REMARKS,
        docnosx.LASTUPDATEDBY,
        '' as REFNO,
        0 as 'AMOUNT',
        'CANCELLED' as 'reftype',
        upper(branches.BRANCHNAME) as BRANCHNAME, 0 as rebate,
        0 as penalty,
        '' as bankname,
        '' as accountno,
        '' as checkno, null as checkdate,
        '' as accountname,
        0 as chequesamount,
        '' as ccname,
        '' as ccno,
        '' as ccexpiry,
        0 as creditcardsamount,
        '' as ccard,
        '' as ccardrefno,
        0 as ccardamount,
        null as valuedate,
        '' as pdc,
        0 as pdc_applied,
        'CRB' as pdc_ref,
        1 as arrangement,
        '' as xxx,
        '' as column1,
        '' as column2,
        DATE(pi_date1) as date1,
        DATE(pi_date2) as date2,
        0,
        docnosx.DOCDATE
        FROM docnosx
        LEFT OUTER JOIN branches ON docnosx.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies f ON f.COMPANYCODE = pi_company
        WHERE docnosx.COMPANY = pi_company
              AND docnosx.BRANCH = pi_branch
              AND docnosx.docdate between pi_date1 and pi_date2
              AND docnosx.DOCTYPE IN('OFFICIALRECEIPT', 'INCOMINGPAYMENT')
       ORDER BY docnosx.DOCDATE, docnosx.DOCNO;
Select * from dccr ORDER BY DOCDATE, DOCNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `chartofaccountcalevel_st`
--

DROP PROCEDURE IF EXISTS `chartofaccountcalevel_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `chartofaccountcalevel_st`(IN pi_leveltype INT, IN pi_rpttype VARCHAR(10))
BEGIN

DECLARE v_end      BOOLEAN;
DECLARE v_count    NUMERIC(20,0);
DECLARE v_done     INT;
DECLARE v_drawer   VARCHAR(100);
DECLARE v_acctno   VARCHAR(100);
DECLARE v_catename VARCHAR(100);
DECLARE v_acctname VARCHAR(100);
DECLARE v_category VARCHAR(10);

DECLARE COA_CUR2 CURSOR FOR
  SELECT DRAWER, ACCTCODE, ACCTNAME, CATENAME, CATEGORY
    FROM COA_TEMP_02;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;

  DROP TEMPORARY TABLE IF EXISTS COA_TEMP ;
  CREATE TEMPORARY TABLE  `COA_TEMP` (
    `DRAWER`       VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `PARENTACCT`   VARCHAR(100),
    `ACCTLEVEL`    INT,
    `POSTABLE`     INT,
    `CATENAME`     VARCHAR(100),
    `CATEGORY`     VARCHAR(10)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS COA_TEMP_02 ;
  CREATE TEMPORARY TABLE  `COA_TEMP_02` (
    `DRAWER`       VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `PARENTACCT`   VARCHAR(100),
    `ACCTLEVEL`    INT,
    `POSTABLE`     INT,
    `CATENAME`     VARCHAR(100),
    `CATEGORY`      VARCHAR(10)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS COA_LEVEL ;
  CREATE TEMPORARY TABLE  `COA_LEVEL` (
    `DRAWER`       VARCHAR(100),
    `LEVLCODE`     VARCHAR(100),
    `LEVLNAME`     VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `PARENTACCT`   VARCHAR(100),
    `ACCTLEVEL`    INT,
    `POSTABLE`     INT,
    `CATENAME`     VARCHAR(100),
    `CATEGORY`     VARCHAR(10),
    `SPECIALACCT`  INT,
    `IS_DEBIT`     INT,
    `CATESEQ`      INT,
    `UPPERRPT`     INT
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  DROP TEMPORARY TABLE IF EXISTS COA_LEVEL_01 ;
  CREATE TEMPORARY TABLE  `COA_LEVEL_01` (
    `DRAWER`       VARCHAR(100),
    `LEVLCODE`     VARCHAR(100),
    `LEVLNAME`     VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `PARENTACCT`   VARCHAR(100),
    `ACCTLEVEL`    INT,
    `POSTABLE`     INT,
    `CATENAME`     VARCHAR(100),
    `CATEGORY`     VARCHAR(10),
    `SPECIALACCT`  INT,
    `IS_DEBIT`     INT,
    `CATESEQ`      INT,
    `UPPERRPT`     INT
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS COA_LEVEL_02 ;
  CREATE TEMPORARY TABLE  `COA_LEVEL_02` (
    `DRAWER`       VARCHAR(100),
    `LEVLCODE`     VARCHAR(100),
    `LEVLNAME`     VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `PARENTACCT`   VARCHAR(100),
    `ACCTLEVEL`    INT,
    `POSTABLE`     INT,
    `CATENAME`     VARCHAR(100),
    `CATEGORY`     VARCHAR(10),
    `SPECIALACCT`  INT,
    `IS_DEBIT`     INT,
    `CATESEQ`      INT,
    `UPPERRPT`     INT
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  INSERT INTO COA_LEVEL (DRAWER, LEVLCODE, LEVLNAME, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, CATENAME, CATEGORY, SPECIALACCT, IS_DEBIT, CATESEQ, UPPERRPT)
    SELECT COA.U_COADRAWER, COA.ACCTCODE, COA.ACCTNAME, COA.ACCTCODE, COA.ACCTNAME, COA.PARENTACCT, COA.LEVEL, COA.POSTABLE,
           CC.NAME, COA.U_COACATEGORIES, COA.U_SPECIALACCT,
           CASE WHEN CC.CODE = 'BCA' THEN 1
                WHEN CC.CODE = 'BCL' THEN 0
                WHEN CC.CODE = 'BEQ' THEN 0
                WHEN CC.CODE = 'BFA' THEN 1
                WHEN CC.CODE = 'BIA' THEN 1
                WHEN CC.CODE = 'BLA' THEN 1
                WHEN CC.CODE = 'BLL' THEN 0
                WHEN CC.CODE = 'BOL' THEN 0
                WHEN CC.CODE = 'PSL' THEN 0
                WHEN CC.CODE = 'PSA' THEN 1
                WHEN CC.CODE = 'PCS' THEN IF(COA.U_SPECIALACCT = 6, 0, 1)
                WHEN CC.CODE = 'POI' THEN 0
                WHEN CC.CODE = 'PEX' THEN 1
                WHEN CC.CODE = 'PTX' THEN 1
                WHEN CC.CODE = 'PEI' THEN 0
                WHEN CC.CODE = 'PEE' THEN 1
                WHEN CC.CODE = 'PAA' THEN 1
                ELSE 0 END,
           CASE WHEN CC.CODE = 'BCA' THEN 30
                WHEN CC.CODE = 'BCL' THEN 40
                WHEN CC.CODE = 'BEQ' THEN 60
                WHEN CC.CODE = 'BFA' THEN 10
                WHEN CC.CODE = 'BIA' THEN 20
                WHEN CC.CODE = 'BLA' THEN 50
                WHEN CC.CODE = 'BLL' THEN 70
                WHEN CC.CODE = 'BOL' THEN 80
                WHEN CC.CODE = 'PSL' THEN 0
                WHEN CC.CODE = 'PSA' THEN 10
                WHEN CC.CODE = 'PCS' THEN 20
                WHEN CC.CODE = 'POI' THEN 30
                WHEN CC.CODE = 'PEX' THEN 40
                WHEN CC.CODE = 'PTX' THEN 50
                WHEN CC.CODE = 'PEI' THEN 60
                WHEN CC.CODE = 'PEE' THEN 70
                WHEN CC.CODE = 'PAA' THEN 80
                ELSE 0 END,
           CASE WHEN CC.CODE = 'BCA' THEN 1
                WHEN CC.CODE = 'BCL' THEN 1
                WHEN CC.CODE = 'BEQ' THEN 0
                WHEN CC.CODE = 'BFA' THEN 1
                WHEN CC.CODE = 'BIA' THEN 1
                WHEN CC.CODE = 'BLA' THEN 1
                WHEN CC.CODE = 'BLL' THEN 0
                WHEN CC.CODE = 'BOL' THEN 0
                ELSE 0 END
        FROM CHARTOFACCOUNTS COA, U_COACATEGORIES CC
          WHERE COA.U_COACATEGORIES = CC.CODE AND
                COA.LEVEL <= IF(pi_leveltype = 3, CC.U_CTMRPTLEVEL02, IF(pi_leveltype = 2,CC.U_CTMRPTLEVEL01,CC.U_DFTRPTLEVEL)) AND
                COA.POSTABLE = 1 AND CC.U_RPTTYPE = pi_rpttype;

  INSERT INTO COA_TEMP_02 (DRAWER, ACCTCODE, ACCTNAME, CATENAME, CATEGORY)
    SELECT COA.U_COADRAWER, COA.ACCTCODE, COA.ACCTNAME, CC.NAME, COA.U_COACATEGORIES
        FROM CHARTOFACCOUNTS COA, U_COACATEGORIES CC
          WHERE COA.U_COACATEGORIES = CC.CODE AND
                COA.LEVEL = IF(pi_leveltype = 3, CC.U_CTMRPTLEVEL02, IF(pi_leveltype = 2,CC.U_CTMRPTLEVEL01,CC.U_DFTRPTLEVEL)) AND
                COA.POSTABLE = 0 AND CC.U_RPTTYPE = pi_rpttype;

  OPEN COA_CUR2;
  COA2loop: LOOP
    FETCH COA_CUR2 INTO v_drawer, v_acctno, v_acctname, v_catename, v_category;
    IF v_done = 1 THEN
       Leave COA2loop;
    END IF;

        INSERT INTO COA_LEVEL_02 (DRAWER, ACCTCODE, ACCTNAME, CATENAME, CATEGORY)
              VALUES(v_drawer, v_acctno, v_acctname, v_catename, v_category);

        SET v_end = FALSE;

        WHILE NOT v_end DO

            INSERT INTO COA_LEVEL_01 (DRAWER, LEVLCODE, LEVLNAME, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, CATENAME, CATEGORY, SPECIALACCT, IS_DEBIT, CATESEQ, UPPERRPT)
              SELECT C02.DRAWER, v_acctno, v_acctname, C.ACCTCODE, C.ACCTNAME, C.PARENTACCT, C.LEVEL, C.POSTABLE,
                     C02.CATENAME, C.U_COACATEGORIES, C.U_SPECIALACCT,
                     CASE WHEN C.U_COACATEGORIES = 'BCA' THEN 1
                          WHEN C.U_COACATEGORIES = 'BCL' THEN 0
                          WHEN C.U_COACATEGORIES = 'BEQ' THEN 0
                          WHEN C.U_COACATEGORIES = 'BFA' THEN 1
                          WHEN C.U_COACATEGORIES = 'BIA' THEN 1
                          WHEN C.U_COACATEGORIES = 'BLA' THEN 1
                          WHEN C.U_COACATEGORIES = 'BLL' THEN 0
                          WHEN C.U_COACATEGORIES = 'BOL' THEN 0
                          WHEN C.U_COACATEGORIES = 'PSL' THEN 0
                          WHEN C.U_COACATEGORIES = 'PSA' THEN 1
                          WHEN C.U_COACATEGORIES = 'PCS' THEN IF(C.U_SPECIALACCT = 6, 0, 1)
                          WHEN C.U_COACATEGORIES = 'POI' THEN 0
                          WHEN C.U_COACATEGORIES = 'PEX' THEN 1
                          WHEN C.U_COACATEGORIES = 'PTX' THEN 1
                          WHEN C.U_COACATEGORIES = 'PEI' THEN 0
                          WHEN C.U_COACATEGORIES = 'PEE' THEN 1
                          WHEN C.U_COACATEGORIES = 'PAA' THEN 1
                          ELSE 0 END,
                     CASE WHEN C.U_COACATEGORIES = 'BCA' THEN 30
                          WHEN C.U_COACATEGORIES = 'BCL' THEN 40
                          WHEN C.U_COACATEGORIES = 'BEQ' THEN 60
                          WHEN C.U_COACATEGORIES = 'BFA' THEN 10
                          WHEN C.U_COACATEGORIES = 'BIA' THEN 20
                          WHEN C.U_COACATEGORIES = 'BLA' THEN 50
                          WHEN C.U_COACATEGORIES = 'BLL' THEN 70
                          WHEN C.U_COACATEGORIES = 'BOL' THEN 80
                          WHEN C.U_COACATEGORIES = 'PSL' THEN 0
                          WHEN C.U_COACATEGORIES = 'PSA' THEN 10
                          WHEN C.U_COACATEGORIES = 'PCS' THEN 20
                          WHEN C.U_COACATEGORIES = 'POI' THEN 30
                          WHEN C.U_COACATEGORIES = 'PEX' THEN 40
                          WHEN C.U_COACATEGORIES = 'PTX' THEN 50
                          WHEN C.U_COACATEGORIES = 'PEI' THEN 60
                          WHEN C.U_COACATEGORIES = 'PEE' THEN 70
                          WHEN C.U_COACATEGORIES = 'PAA' THEN 80
                          ELSE 0 END,
                     CASE WHEN C.U_COACATEGORIES = 'BCA' THEN 1
                          WHEN C.U_COACATEGORIES = 'BCL' THEN 1
                          WHEN C.U_COACATEGORIES = 'BEQ' THEN 0
                          WHEN C.U_COACATEGORIES = 'BFA' THEN 1
                          WHEN C.U_COACATEGORIES = 'BIA' THEN 1
                          WHEN C.U_COACATEGORIES = 'BLA' THEN 1
                          WHEN C.U_COACATEGORIES = 'BLL' THEN 0
                          WHEN C.U_COACATEGORIES = 'BOL' THEN 0
                          ELSE 0 END
                FROM CHARTOFACCOUNTS C, COA_LEVEL_02 C02
                WHERE C.PARENTACCT = C02.ACCTCODE;

             DELETE FROM COA_LEVEL_02;

             SET v_count = 0;

             SELECT COUNT(*) INTO v_count FROM COA_LEVEL_01;

             IF v_count > 0 THEN
                INSERT INTO COA_LEVEL_02 (DRAWER, LEVLCODE, LEVLNAME, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, CATENAME, CATEGORY, SPECIALACCT, IS_DEBIT, CATESEQ, UPPERRPT)
                  SELECT * FROM COA_LEVEL_01 WHERE POSTABLE = 0;

                INSERT INTO COA_LEVEL (DRAWER, LEVLCODE, LEVLNAME, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, CATENAME, CATEGORY, SPECIALACCT, IS_DEBIT, CATESEQ, UPPERRPT)
                  SELECT * FROM COA_LEVEL_01 WHERE POSTABLE = 1;

                DELETE FROM COA_LEVEL_01;
             ELSE

                SET v_end = TRUE;

             END IF;


        END WHILE;

        SET v_done = 0;

  END LOOP COA2loop;
  CLOSE COA_CUR2;

  

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `chartofaccountdrawer_st`
--

DROP PROCEDURE IF EXISTS `chartofaccountdrawer_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `chartofaccountdrawer_st`(IN pi_accttype VARCHAR(10))
BEGIN

DECLARE v_end      BOOLEAN;
DECLARE v_count    NUMERIC(20,0);
DECLARE v_done     INT;
DECLARE v_drawer   VARCHAR(100);
DECLARE v_acctno   VARCHAR(100);
DECLARE v_accttype VARCHAR(100);

DECLARE COA_CUR CURSOR FOR
  SELECT DRAWER, ACCTCODE, ACCTTYPE
    FROM COA_TYPE;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;

  DROP TEMPORARY TABLE IF EXISTS COA_TYPE ;
  CREATE TEMPORARY TABLE  `COA_TYPE` (
    `DRAWER`       VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTTYPE`     VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS COA_DRAWER ;
  CREATE TEMPORARY TABLE  `COA_DRAWER` (
    `DRAWER`       VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `PARENTACCT`   VARCHAR(100),
    `ACCTLEVEL`    INT,
    `POSTABLE`     INT,
    `ACCTTYPE`     VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS COA_DRAWER_01 ;
  CREATE TEMPORARY TABLE  `COA_DRAWER_01` (
    `DRAWER`       VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `PARENTACCT`   VARCHAR(100),
    `ACCTLEVEL`    INT,
    `POSTABLE`     INT,
    `ACCTTYPE`     VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  DROP TEMPORARY TABLE IF EXISTS COA_DRAWER_02 ;
  CREATE TEMPORARY TABLE  `COA_DRAWER_02` (
    `DRAWER`       VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `PARENTACCT`   VARCHAR(100),
    `ACCTLEVEL`    INT,
    `POSTABLE`     INT,
    `ACCTTYPE`     VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


 IF pi_accttype = 'BS' THEN
     INSERT INTO COA_TYPE (DRAWER, ACCTCODE, ACCTTYPE)
             VALUES('100000000000000', '100000000000000', 'Assets');

     INSERT INTO COA_TYPE (DRAWER, ACCTCODE, ACCTTYPE)
             VALUES('200000000000000', '200000000000000', 'Liabilities');

     INSERT INTO COA_TYPE (DRAWER, ACCTCODE, ACCTTYPE)
             VALUES('300000000000000', '300000000000000', 'Capital and Reserves');
 ELSE

     INSERT INTO COA_TYPE (DRAWER, ACCTCODE, ACCTTYPE)
             VALUES('400000000000000', '400000000000000', 'Turnover');

     INSERT INTO COA_TYPE (DRAWER, ACCTCODE, ACCTTYPE)
             VALUES('500000000000000', '500000000000000', 'Cost of Sales');

     INSERT INTO COA_TYPE (DRAWER, ACCTCODE, ACCTTYPE)
             VALUES('600000000000000', '600000000000000', 'Operating Costs');

     INSERT INTO COA_TYPE (DRAWER, ACCTCODE, ACCTTYPE)
             VALUES('700000000000000', '700000000000000', 'Non-Operating Income and Expenditure');

     INSERT INTO COA_TYPE (DRAWER, ACCTCODE, ACCTTYPE)
             VALUES('800000000000000', '800000000000000', 'Taxation and Extraordinary Items');
 END IF;


  OPEN COA_CUR;
  COAloop: LOOP
    FETCH COA_CUR INTO v_drawer, v_acctno, v_accttype;
    IF v_done = 1 THEN
       Leave COAloop;
    END IF;

        INSERT INTO COA_DRAWER_02 (DRAWER, ACCTCODE, ACCTTYPE)
              VALUES(v_drawer, v_acctno, v_accttype);

        SET v_end = FALSE;

        WHILE NOT v_end DO

            INSERT INTO COA_DRAWER_01 (DRAWER, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, ACCTTYPE)
              SELECT C02.DRAWER, C.ACCTCODE, C.ACCTNAME, C.PARENTACCT, C.LEVEL, C.POSTABLE, C02.ACCTTYPE
                FROM CHARTOFACCOUNTS C, COA_DRAWER_02 C02
                WHERE C.PARENTACCT = C02.ACCTCODE;

             DELETE FROM COA_DRAWER_02;

             SET v_count = 0;

             SELECT COUNT(*) INTO v_count FROM COA_DRAWER_01;

             IF v_count > 0 THEN
                INSERT INTO COA_DRAWER_02 (DRAWER, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, ACCTTYPE)
                  SELECT * FROM COA_DRAWER_01;

                INSERT INTO COA_DRAWER (DRAWER, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, ACCTTYPE)
                  SELECT * FROM COA_DRAWER_01;

                DELETE FROM COA_DRAWER_01;
             ELSE

                SET v_end = TRUE;

             END IF;


        END WHILE;

        SET v_done = 0;

  END LOOP COAloop;
  CLOSE COA_CUR;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `chartofaccountslist`
--

DROP PROCEDURE IF EXISTS `chartofaccountslist`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `chartofaccountslist`(IN pi_acctcode VARCHAR(30))
BEGIN
SELECT c1.acctname AS lev1acctname,
       c1.acctcode AS lev1acctcode,
       c2.acctname as lev2acctname,
       c2.acctcode as lev2acctcode,
       c3.acctname as lev3acctname,
       c3.acctcode as lev3acctcode,
       c4.acctname as lev4acctname,
       c4.acctcode as lev4acctcode,
       c5.acctname as lev5acctname,
       c5.acctcode as lev5acctcode
FROM chartofaccounts AS c1
LEFT JOIN chartofaccounts AS c2 ON c2.parentacct = c1.acctcode
LEFT JOIN chartofaccounts AS c3 ON c3.parentacct = c2.acctcode
LEFT JOIN chartofaccounts AS c4 ON c4.parentacct = c3.acctcode
LEFT JOIN chartofaccounts AS c5 ON c5.parentacct = c4.acctcode
WHERE c1.acctcode = pi_acctcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `check_data_stockcard`
--

DROP PROCEDURE IF EXISTS `check_data_stockcard`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `check_data_stockcard`(IN pi_company VARCHAR(30),
                                         IN pi_branch VARCHAR(30),
                                         IN pi_product VARCHAR(30),
                                         IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `mergetables_sc_details_ob` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_sc_details_ob (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from <= pi_date1 limit 1)
            is null and reftype = 'GT+' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        WHERE a.company = pi_company AND a.refdate < pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        AND a.ITEMCODE = pi_product
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;
  INSERT
    INTO mergetables_sc_details_ob (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from <= pi_date1 limit 1)
            is null and reftype = 'GT-' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        WHERE a.company = pi_company AND a.REFDATE < pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        AND a.ITEMCODE = pi_product
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;
CREATE TEMPORARY TABLE  `mergetables_sc_details_ob_sum` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_sc_details_ob_sum (COMPANY,BRANCH,ITEMCODE,QTY)
    select a.COMPANY, a.BRANCH, a.ITEMCODE, sum(a.qty) from mergetables_sc_details_ob a group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `mergetables_sc_details` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(100) NULL default '',
    `REFTYPE` varchar(100) NULL default '',
    `REFNO` varchar(100) NULL default '',
    `INTRANSIT` NUMERIC(18,6) NULL default '0',
    `DRNO` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_sc_details (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE,REFTYPE,REFNO,INTRANSIT,DRNO)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from = pi_date1 limit 1)
            is null and reftype = 'GT+' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse, a.REFTYPE, a.REFNO,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from = pi_date1 limit 1)
            is null and reftype = 'GT+' and b.u_dr_no not in('OB'), sum(a.QTY), 0), b.u_dr_no
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        WHERE a.company = pi_company AND a.refdate = pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        AND a.ITEMCODE = pi_product
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;
  INSERT
    INTO mergetables_sc_details (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE,REFTYPE,REFNO,INTRANSIT,DRNO)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from = pi_date1 limit 1)
            is null and reftype = 'GT-' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse, a.REFTYPE, a.REFNO,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from = pi_date1 limit 1)
            is null and reftype = 'GT-' and b.u_dr_no not in('OB'), sum(a.QTY), 0), b.u_dr_no
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        WHERE a.company = pi_company AND a.REFDATE = pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        AND a.ITEMCODE = pi_product
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;
select a.COMPANY,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BRANCH,
       date(pi_date1) as DATE1,
       case when a.REFTYPE = 'PDN' then 'GRPO'
            when a.REFTYPE = 'GT+' then 'Stock Transfer'
            when a.REFTYPE = 'GT-' then 'STO Return'
            when a.REFTYPE = 'GR' then 'Goods Receipt'
            when a.REFTYPE = 'GI' then 'Goods Issue'
       else a.REFTYPE
       end as DOCTYPE,
       a.REFNO,
       a.REFDATE,
       a.ITEMCODE,
       i.ITEMDESC,
       if(b.QTY is null, 0, b.QTY) as OB,
       if(a.INTRANSIT is null, 0, a.INTRANSIT) as INTRANSIT,
       a.DRNO,
       if(if(a.QTY is null, 0, a.QTY) > 0, a.QTY, 0) as Stock_IN,
       if(if(a.QTY is null, 0, a.QTY) < 0, a.QTY, 0) as Stock_OUT,
       a.WAREHOUSE
       from mergetables_sc_details a
            left outer join mergetables_sc_details_ob_sum b on a.company = b.company and a.branch = b.branch
            left outer join branches br ON a.BRANCH = br.BRANCHCODE
            left outer join items i ON a.ITEMCODE = i.ITEMCODE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `check_data_summary`
--

DROP PROCEDURE IF EXISTS `check_data_summary`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `check_data_summary`(IN pi_company VARCHAR(30),
                                         IN pi_branch VARCHAR(30),
                                         IN pi_product VARCHAR(30),
                                         IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `mergetables` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from <= pi_date1 limit 1)
            is null and reftype = 'GT+' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        WHERE a.company = pi_company AND a.refdate <= pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        AND a.ITEMCODE = pi_product
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from <= pi_date1 limit 1)
            is null and reftype = 'GT-' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        WHERE a.company = pi_company AND a.REFDATE <= pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        AND a.ITEMCODE = pi_product
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;
CREATE TEMPORARY TABLE  `mergetables_sum` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_sum (COMPANY,BRANCH,ITEMCODE,QTY,WAREHOUSE)
    select a.COMPANY, a.BRANCH, a.ITEMCODE, sum(a.qty), a.WAREHOUSE  from mergetables a group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `mergetables2` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables2 (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.docdate, b.itemcode,
      if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = a.u_dr_no
                                and y.u_date_from <= pi_date1 limit 1)
            is null and a.u_dr_no not in('OB'), 0, sum(b.quantity)), 0, b.whscode
             from stocktransfers a
                  left outer join stocktransferitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate < pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C') and a.u_dr_no not in('')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
  INSERT
    INTO mergetables2 (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.docdate, b.itemcode, sum(b.quantity), 0, b.whscode
             from goodsreceipts a
                  left outer join goodsreceiptitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate < pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
  INSERT
    INTO mergetables2 (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.refdate, a.ITEMCODE, sum(a.qty), 0, a.warehouse
             from stockcard a
      where a.company = pi_company AND a.refdate < pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch) and a.reftype in('PDN')
        AND a.ITEMCODE = pi_product
        GROUP BY a.refdate, a.refno, a.ITEMCODE, a.warehouse;
  INSERT
    INTO mergetables2 (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.docdate, b.itemcode, sum(b.quantity*-1), 0, b.whscode
             from goodsissues a
                  left outer join goodsissueitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate < pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
CREATE TEMPORARY TABLE  `mergetables_sum2` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_sum2 (COMPANY,BRANCH,ITEMCODE,QTY)
    select a.COMPANY, a.BRANCH, a.ITEMCODE, sum(a.qty) from mergetables2 a group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `mergetables3` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables3 (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.docdate, b.itemcode,
      if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = a.u_dr_no
                                and y.u_date_from = pi_date1 limit 1)
            is null and a.u_dr_no not in('OB'), 0, sum(b.quantity)), 0, b.whscode
             from stocktransfers a
                  left outer join stocktransferitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate = pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C') and a.u_dr_no not in('')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
  INSERT
    INTO mergetables3 (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.docdate, b.itemcode, sum(b.quantity), 0, b.whscode
             from goodsreceipts a
                  left outer join goodsreceiptitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate = pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
  INSERT
    INTO mergetables3 (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.docdate, b.itemcode, sum(b.quantity), 0, b.whscode
             from purchasedeliveries a
                  left outer join purchasedeliveryitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate = pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
CREATE TEMPORARY TABLE  `mergetables_sum3` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_sum3 (COMPANY,BRANCH,ITEMCODE,QTY)
    select a.COMPANY, a.BRANCH, a.ITEMCODE, sum(a.qty) from mergetables3 a group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `mergetables4` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables4 (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.docdate, b.itemcode, sum(b.quantity*-1), 0, b.whscode
             from goodsissues a
                  left outer join goodsissueitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate = pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
CREATE TEMPORARY TABLE  `mergetables_sum4` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_sum4 (COMPANY,BRANCH,ITEMCODE,QTY)
    select a.COMPANY, a.BRANCH, a.ITEMCODE, sum(a.qty) from mergetables4 a group by a.ITEMCODE;
select a.COMPANY,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BRANCH,
       date(pi_date1) as DATE1,
       a.ITEMCODE,
       i.ITEMDESC,
       a.WAREHOUSE,
       if(a.QTY is null, 0, a.QTY) as Stockcard_balance,
       if(b.QTY is null, 0, b.QTY) as OB_Transactions,
       if(c.QTY is null, 0, c.QTY) as Transactions_in,
       if(d.QTY is null, 0, d.QTY) as Transactions_out,
       (if(b.QTY is null, 0, b.QTY)+if(c.QTY is null, 0, c.QTY)+if(d.QTY is null, 0, d.QTY)) as Transactions_balance,
       if(if(a.QTY is null, 0, a.QTY) <>
          (if(b.QTY is null, 0, b.QTY)+if(c.QTY is null, 0, c.QTY)+if(d.QTY is null, 0, d.QTY)), 'not ok', 'ok') as Remarks
       from mergetables_sum a
            left outer join mergetables_sum2 b on a.company = b.company and a.branch = b.branch
            left outer join mergetables_sum3 c on a.company = c.company and a.branch = c.branch
            left outer join mergetables_sum4 d on a.company = d.company and a.branch = d.branch
            left outer join branches br ON a.BRANCH = br.BRANCHCODE
            left outer join items i ON a.ITEMCODE = i.ITEMCODE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `check_data_transaction`
--

DROP PROCEDURE IF EXISTS `check_data_transaction`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `check_data_transaction`(IN pi_company VARCHAR(30),
                                         IN pi_branch VARCHAR(30),
                                         IN pi_product VARCHAR(30),
                                         IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `mergetables_ob` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_ob (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.docdate, b.itemcode,
      if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = a.u_dr_no
                                and y.u_date_from <= pi_date1 limit 1)
            is null and a.u_dr_no not in('OB'), 0, sum(b.quantity)), 0, b.whscode
             from stocktransfers a
                  left outer join stocktransferitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate < pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C') and a.u_dr_no not in('')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
  INSERT
    INTO mergetables_ob (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.docdate, b.itemcode, sum(b.quantity), 0, b.whscode
             from goodsreceipts a
                  left outer join goodsreceiptitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate < pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
  INSERT
    INTO mergetables_ob (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.refdate, a.ITEMCODE, sum(a.qty), 0, a.warehouse
             from stockcard a
      where a.company = pi_company AND a.refdate < pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch) and a.reftype in('PDN')
        AND a.ITEMCODE = pi_product
        GROUP BY a.refdate, a.refno, a.ITEMCODE, a.warehouse;
  INSERT
    INTO mergetables_ob (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      Select a.company, pi_branch, a.docdate, b.itemcode, sum(b.quantity*-1), 0, b.whscode
             from goodsissues a
                  left outer join goodsissueitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate < pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
CREATE TEMPORARY TABLE  `mergetables_trans_sum` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_trans_sum (COMPANY,BRANCH,ITEMCODE,QTY)
    select a.COMPANY, a.BRANCH, a.ITEMCODE, sum(a.qty) from mergetables_ob a group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `mergetables_trans_details` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(100) NULL default '',
    `DOCTYPE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `INTRANSIT` NUMERIC(18,6) NULL default '0',
    `DRNO` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_trans_details (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE,DOCTYPE,DOCNO,INTRANSIT,DRNO)
      Select a.company, pi_branch, a.docdate, b.itemcode,
      if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = a.u_dr_no
                                and y.u_date_from = pi_date1 limit 1)
            is null and a.u_dr_no not in('OB'), 0, sum(b.quantity)), 0, b.whscode, 'Stock Transfer', a.docno,
      if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = a.u_dr_no
                                and y.u_date_from = pi_date1 limit 1)
            is null and a.u_dr_no not in('OB'), sum(b.quantity), 0), a.u_dr_no
             from stocktransfers a
                  left outer join stocktransferitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate = pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
  INSERT
    INTO mergetables_trans_details (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE,DOCTYPE,DOCNO)
      Select a.company, pi_branch, a.docdate, b.itemcode, sum(b.quantity), 0, b.whscode, 'Good Receipt', a.docno
             from goodsreceipts a
                  left outer join goodsreceiptitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate = pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
  INSERT
    INTO mergetables_trans_details (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE,DOCTYPE,DOCNO)
      Select a.company, pi_branch, a.docdate, b.itemcode, sum(b.quantity), 0, b.whscode, 'GRPO', a.docno
             from purchasedeliveries a
                  left outer join purchasedeliveryitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate = pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
  INSERT
    INTO mergetables_trans_details (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE,DOCTYPE,DOCNO)
      Select a.company, pi_branch, a.docdate, b.itemcode, sum(b.quantity*-1), 0, b.whscode, 'Goods Issue', a.docno
             from goodsissues a
                  left outer join goodsissueitems b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
      where a.company = pi_company AND a.docdate = pi_date1
        AND b.whscode = CONCAT('UGT-',pi_branch)
        AND b.ITEMCODE = pi_product and docstatus in('O','C')
        GROUP BY a.docdate, a.docno, b.ITEMCODE, b.whscode;
select a.COMPANY,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BRANCH,
       date(pi_date1) as DATE1,
       a.DOCTYPE,
       a.DOCNO,
       a.REFDATE,
       a.ITEMCODE,
       i.ITEMDESC,
       if(b.QTY is null, 0, b.QTY) as OB,
       if(a.INTRANSIT is null, 0, a.INTRANSIT) as INTRANSIT,
       a.DRNO,
       if(if(a.QTY is null, 0, a.QTY) > 0, a.QTY, 0) as Stock_IN,
       if(if(a.QTY is null, 0, a.QTY) < 0, a.QTY, 0) as Stock_OUT,
       a.WAREHOUSE
       from mergetables_trans_details a
            left outer join mergetables_trans_sum b on a.company = b.company and a.branch = b.branch
            left outer join branches br ON a.BRANCH = br.BRANCHCODE
            left outer join items i ON a.ITEMCODE = i.ITEMCODE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `check_details`
--

DROP PROCEDURE IF EXISTS `check_details`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `check_details`(IN pi_company VARCHAR(30),
                                         IN pi_branch VARCHAR(30),
                                         IN pi_product VARCHAR(30),
                                         IN pi_date1 VARCHAR(30),
                                         IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `mergetables` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from < pi_date1 limit 1)
            is null and reftype = 'GT+' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        WHERE a.company = pi_company AND a.refdate < pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        AND a.ITEMCODE = pi_product
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from < pi_date1 limit 1)
            is null and reftype = 'GT-' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        WHERE a.company = pi_company AND a.REFDATE < pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        AND a.ITEMCODE = pi_product
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;
CREATE TEMPORARY TABLE  `mergetables_sum` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_sum (COMPANY,BRANCH,ITEMCODE,QTY)
    select a.COMPANY, a.BRANCH, a.ITEMCODE, sum(a.qty) from mergetables a group by a.ITEMCODE;
select * from mergetables order by REFDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `check_dr_no`
--

DROP PROCEDURE IF EXISTS `check_dr_no`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `check_dr_no`(IN pi_branch VARCHAR(30),IN pi_date1 VARCHAR(30),
                                            IN pi_date2 VARCHAR(30),IN pi_param VARCHAR(30))
BEGIN
DROP TEMPORARY TABLE IF EXISTS `drno`;
CREATE TEMPORARY TABLE  `drno` (
    `countdrno` varchar(30) NULL default '',
    `dr_no` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

insert into drno()
select count(u_dr_no),u_dr_no from stocktransfers
group by u_dr_no
having count(u_dr_no) > 1;

select dr.dr_no,s.branch,s.docno,s.docdate,s.createdby,s.datecreated,s.lastupdatedby,s.lastupdated
from drno dr
left outer join stocktransfers s on dr.dr_no=s.u_dr_no
where (s.docdate between pi_date1 and pi_date2)
and dr.dr_no<>''
and ( (pi_branch='') or (pi_branch<>'' and s.branch=pi_branch) )
and ( (pi_param='') or (pi_param<>'' and s.docno like pi_param) )
order by dr.dr_no,s.branch,s.docno;




END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `check_summary`
--

DROP PROCEDURE IF EXISTS `check_summary`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `check_summary`(IN pi_company VARCHAR(30),
                                         IN pi_branch VARCHAR(30),
                                         IN pi_product VARCHAR(30),
                                         IN pi_date1 VARCHAR(30),
                                         IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `mergetables` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from < pi_date1 limit 1)
            is null and reftype = 'GT+' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        WHERE a.company = pi_company AND a.refdate < pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        AND a.ITEMCODE = pi_product
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from < pi_date1 limit 1)
            is null and reftype = 'GT-' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        WHERE a.company = pi_company AND a.REFDATE < pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        AND a.ITEMCODE = pi_product
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;
CREATE TEMPORARY TABLE  `mergetables_sum` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables_sum (COMPANY,BRANCH,ITEMCODE,QTY)
    select a.COMPANY, a.BRANCH, a.ITEMCODE, sum(a.qty) from mergetables a group by a.ITEMCODE;
select * from mergetables_sum;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `cm_checkbalances`
--

DROP PROCEDURE IF EXISTS `cm_checkbalances`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `cm_checkbalances`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_mode VARCHAR(10))
BEGIN
DECLARE v_DocNo       varchar(30);
DECLARE v_Balance numeric(20,2);
DECLARE v_Done        integer;
DECLARE v_DirectRate        integer;
DECLARE v_Updated        integer;
DECLARE Cursor_cmbalances CURSOR FOR SELECT DocNo, Totalamount - (RC+PY+JV) FROM cmbalances where  SETTLEDAMOUNT<>(RC+PY+JV) or (docstatus='C' and dueamount>0) or (docstatus='O' and dueamount=0);
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;
DROP TEMPORARY TABLE IF EXISTS `cmbalances`;
CREATE TEMPORARY TABLE  `cmbalances` (
    `DOCNO` varchar(30) NULL default '',
    `DOCSTATUS` varchar(5) NULL default '',
    `TOTALAMOUNT` NUMERIC(18,6) NULL default '0',
    `SETTLEDAMOUNT` NUMERIC(18,6) NULL default '0',
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `RC` NUMERIC(18,6) NULL default '0',
    `PY` NUMERIC(18,6) NULL default '0',
    `JV` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
Select directrate into v_DirectRate from companies;

INSERT
    INTO cmbalances (DOCNO,DOCSTATUS,TOTALAMOUNT,SETTLEDAMOUNT,DUEAMOUNT,RC,PY,JV)
select docno,docstatus,totalamount,settledamount,dueamount,
  ifnull((select sum(collectionsinvoices.amount * -1) from collections,collectionsinvoices where collectionsinvoices.company=collections.company and collectionsinvoices.branch=collections.branchcode and collectionsinvoices.docno=collections.docno and collections.company=arcreditmemos.company and collections.branchcode=arcreditmemos.branch and collections.docstat IN ('O','C') and collectionsinvoices.reftype='ARCREDITMEMO' and collectionsinvoices.refno=arcreditmemos.docno),0),
  ifnull((select sum(paymentinvoices.amount) from payments,paymentinvoices where paymentinvoices.company=payments.company and paymentinvoices.branch=payments.branchcode and paymentinvoices.docno=payments.docno and payments.company=arcreditmemos.company and payments.branchcode=arcreditmemos.branch and payments.docstat IN ('O','C') and paymentinvoices.reftype='ARCREDITMEMO' and paymentinvoices.refno=arcreditmemos.docno),0),
  ifnull((select sum(if(v_DirectRate=1,(debit-credit)/currencyrate,(debit-credit)*currencyrate)) from journalvoucheritems where journalvoucheritems.company=arcreditmemos.company and journalvoucheritems.branch=arcreditmemos.branch and journalvoucheritems.reftype='ARCREDITMEMO' and journalvoucheritems.refno=arcreditmemos.docno),0)
from arcreditmemos where company=pi_company and branch=pi_branch and totalamount > 0 and docstatus <>'D';
if pi_mode = 'update' then
  SET v_Updated = 0 ;
  SET v_Done = 0 ;
  BLOCK1: BEGIN
  OPEN Cursor_cmbalances ;
  REPEAT
    FETCH Cursor_cmbalances INTO v_DocNo, v_Balance ;
    IF NOT v_Done THEN
       update arcreditmemos set docstatus=if(v_Balance=0,'C','O'), settledamount=totalamount-v_Balance, dueamount=v_balance where company=pi_company and branch=pi_branch and docno=v_DocNo;
      SET v_Updated = v_Updated + 1;
    END IF ;
  UNTIL v_Done END REPEAT ;
  CLOSE Cursor_cmbalances ;
  END BLOCK1 ;
  select v_Updated;
else
  select DOCNO,TOTALAMOUNT,SETTLEDAMOUNT,DUEAMOUNT,(RC+PY+JV),RC,PY,JV from cmbalances where SETTLEDAMOUNT<>(RC+PY+JV) or (docstatus='C' and dueamount>0) or (docstatus='O' and dueamount=0);
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `com_balance_sheet`
--

DROP PROCEDURE IF EXISTS `com_balance_sheet`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `com_balance_sheet`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30),
IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
DECLARE v_branch VARCHAR(100);
DECLARE gl_year VARCHAR(50);
DECLARE gl_year2 VARCHAR(50);
SET v_branch = concat('%-', pi_branch,'-%');
  IF month(pi_date1) = 1 then
     set gl_year = year(pi_date1) - 1;
  ELSEIF month(pi_date1) <> 1 then
     set gl_year = year(pi_date1);
  end if;
  IF month(pi_date2) = 1 then
     set gl_year2 = year(pi_date2) - 1;
  ELSEIF month(pi_date2) <> 1 then
     set gl_year2 = year(pi_date2);
  end if;
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY,
             BRANCH,
             GLACCTNO,
             GLACCTNAME,
             OGLDEBIT,
             OGLCREDIT,
             GLDEBIT,
             GLCREDIT)
      SELECT a.COMPANY, a.BRANCH, b.GLACCTNO, b.GLACCTNAME,
             if(DATE_FORMAT(a.DOCDATE, '%y-%m') <= DATE_FORMAT(pi_date1, '%y-%m'),
             b.GLDEBIT,0) as OGLDEBIT,
             if(DATE_FORMAT(a.DOCDATE, '%y-%m') <= DATE_FORMAT(pi_date1, '%y-%m'),
             b.GLCREDIT,0) as OGLCREDIT,
             b.GLDEBIT as GLDEBIT,
             b.GLCREDIT as GLCREDIT
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and DATE_FORMAT(a.DOCDATE, '%y-%m') <= DATE_FORMAT(pi_date2, '%y-%m')
             and (b.GLACCTNO like '1%'
                 or b.GLACCTNO like '2%'
                 or b.GLACCTNO like '3%');
SELECT upper(c.COMPANYNAME) as Company,
       pi_branch as BRANCH,
       UPPER(b.BRANCHNAME) AS BRANCHNAME,
if((A.GLACCTNO like '2%' or A.GLACCTNO like '3%'), 0 - (if (sum(a.OGLDEBIT) is null, 0, sum(a.OGLDEBIT))), (if (sum(a.OGLDEBIT) is null, 0, sum(a.OGLDEBIT)))) AS OGLDEBIT,
if((A.GLACCTNO like '2%' or A.GLACCTNO like '3%'), 0 - (if (sum(a.OGLCREDIT) is null, 0, sum(a.OGLCREDIT))), (if (sum(a.OGLCREDIT) is null, 0, sum(a.OGLCREDIT)))) AS OGLCREDIT,
if((A.GLACCTNO like '2%' or A.GLACCTNO like '3%'), 0 - (if (sum(a.GLDEBIT) is null, 0, sum(a.GLDEBIT))), (if (sum(a.GLDEBIT) is null, 0, sum(a.GLDEBIT)))) AS debit,
if((A.GLACCTNO like '2%' or A.GLACCTNO like '3%'), 0 - (if (sum(a.GLCREDIT) is null, 0, sum(a.GLCREDIT))), (if (sum(a.GLCREDIT) is null, 0, sum(a.GLCREDIT)))) AS credit,
case when A.GLACCTNO like '1%' then 1
     when A.GLACCTNO like '2%' then 2
     when A.GLACCTNO like '3%' then 3
else 0
end as drawer_no,
c3.acctcode as level_2_no,
c3.acctname as level_2_name,
c2.acctcode AS level0_code,
c2.acctname AS level0_name,
a.GLACCTNO AS acct_code,
a.GLACCTNAME AS acct_name,
upper(case when A.GLACCTNO like '1%' then 'Assets'
     when A.GLACCTNO like '2%' then 'Liabilities'
     when A.GLACCTNO like '3%' then 'Capital and Reserves'
else ''
end) as drawer,
date(pi_date1) as date1,
date(pi_date2) as date2,
date(pi_date1) as date3
FROM je a
left outer join chartofaccounts c1 on a.GLACCTNO = c1.formatcode
left outer join chartofaccounts c2 on c1.parentacct = c2.acctcode
left outer join chartofaccounts c3 on c2.parentacct = c3.acctcode
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
Group by a.GLACCTNO
Order by a.GLACCTNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `consignment_stock_monitoring`
--

DROP PROCEDURE IF EXISTS `consignment_stock_monitoring`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `consignment_stock_monitoring`(IN pi_company VARCHAR(30),
                                                IN pi_branch VARCHAR(30),
                                                IN pi_date1 VARCHAR(30),
                                                IN pi_date2 VARCHAR(30))
BEGIN
  DECLARE v_no varchar(100);
  DECLARE v_qty NUMERIC(18,6);
  DECLARE v_price NUMERIC(18,6);
  DECLARE v_amount NUMERIC(18,6);
  DECLARE v_salesqty NUMERIC(18,6);
  DECLARE v_Done integer;
  DECLARE v_Ctr integer;
  DECLARE v_company varchar(30);
  DECLARE v_branch varchar(30);
  DECLARE v_refno varchar(30);
  DECLARE v_storef varchar(50);
  DECLARE v_refdate date;
  DECLARE v_fromwhscode varchar(30);
  DECLARE v_itemcode varchar(30);
  DECLARE v_dsrdate date;
  DECLARE v_dsrshift1 varchar(100);
  DECLARE v_dsrshift2 varchar(100);
  DECLARE v_dsrno varchar(100);
  DECLARE v_dsrqty NUMERIC(18,6);
  DECLARE v_currentsalesqty NUMERIC(18,6);
  DECLARE v_dsrprice NUMERIC(18,6);
  DECLARE v_dsramount NUMERIC(18,6);
  DECLARE v_dsrmf NUMERIC(18,6);
  DECLARE v_dsrvat NUMERIC(18,6);
  DECLARE v_dsrtp NUMERIC(18,6);
  DECLARE cur1 CURSOR FOR
  select a.COMPANY, a.BRANCH, a.refno, a.u_storef, a.refdate, a.fromwhscode, a.itemcode, sum(a.qty),sum(a.price),sum(a.amount)
           from transfers a
           group by a.refdate, a.refno, a.ITEMCODE
           having sum(a.qty) <> 0
           order by a.itemcode,a.refdate;
  DECLARE cur2 CURSOR FOR
  SELECT DOCNO, DOCDATE, Shift1, Shift2, SUM(Sales), SUM(Price), SUM(Amount), SUM(MFund), SUM(Vat), SUM(TP)
         FROM dsr
         where item = v_itemcode and sales > 0
         GROUP BY DOCDATE, DOCTIME, Shift1, Shift2, Item
         order by docdate;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;
DROP TEMPORARY TABLE IF EXISTS `mergetable`;
CREATE TEMPORARY TABLE  `mergetable` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `STDOCNO` varchar(100) NULL default '',
    `STOREF` varchar(100) NULL default '',
    `STDOCDATE` DATE NULL,
    `FROMWHSCODE` varchar(100) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `price` NUMERIC(18,6) NULL default '0',
    `amount` NUMERIC(18,6) NULL default '0',
    `DSRDOCNO` varchar(30) NULL default '',
    `DSRDOCDATE` DATE NULL,
    `Shift1` varchar(1) NULL default '',
    `Shift2` varchar(1) NULL default '',
    `DSRSales` NUMERIC(18,6) NULL default '0',
    `DSRPrice` NUMERIC(18,6) NULL default '0',
    `DSRAmount` NUMERIC(18,6) NULL default '0',
    `DSRMFund` NUMERIC(18,6) NULL default '0',
    `DSRVat` NUMERIC(18,6) NULL default '0',
    `DSRTP` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

DROP TEMPORARY TABLE IF EXISTS `transfers`;
CREATE TEMPORARY TABLE  `transfers` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `refno` varchar(50) NULL default '',
    `u_storef` varchar(50) NULL default '',
    `refdate` date null,
    `fromwhscode` varchar(30) NULL default '',
    `itemcode` varchar(100) NULL default '',
    `qty` NUMERIC(18,6) NULL default '0',
    `price` NUMERIC(18,6) NULL default '0',
    `amount` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO transfers (COMPANY,BRANCH,refno,u_storef,refdate,fromwhscode,itemcode,qty,price,amount)
  select a.COMPANY, a.BRANCH, a.refno, b.u_storef, a.refdate, c.fromwhscode, a.itemcode, sum(a.qty),
         sum(b.totalamount)/sum(a.qty), sum(b.totalamount)
           from stockcard a
           left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
           left outer join stocktransfers sto2 on sto2.company = b.company AND sto2.branch = b.branch AND sto2.u_returnrefno = b.docno
           left outer join stocktransferitems c on a.company = c.company and a.branch = c.branch and b.docid = c.docid and a.reflineid=c.lineid
           where a.company = pi_company and a.warehouse = CONCAT('UGT-',pi_branch)
                 AND (b.u_returned='n' or b.u_returned is null)
                 AND (b.u_returnrefno='' or b.u_returnrefno is null)
                 AND (sto2.docno is null or sto2.docno='')
                 and a.REFTYPE in ('GT+','GT-')
                 
                 and a.refdate <= pi_date2
  group by a.refdate, a.ITEMCODE order by a.itemcode,a.refdate;
  INSERT
    INTO transfers (COMPANY,BRANCH,refno,u_storef,refdate,fromwhscode,itemcode,qty,price,amount)
  select a.COMPANY, a.BRANCH, a.refno, '', a.refdate, a.warehouse, a.itemcode, sum(a.qty),
         sum(a.costprice), sum(a.qty*a.costprice)
           from stockcard a
           where a.company = pi_company and a.warehouse = CONCAT('UGT-',pi_branch)
                 and a.REFTYPE in ('PDN')
                 and a.refdate < pi_date1
  group by a.refdate, a.ITEMCODE order by a.itemcode,a.refdate;

DROP TEMPORARY TABLE IF EXISTS `dsr`;
CREATE TEMPORARY TABLE  `dsr` (
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` date NULL ,
    `DOCTIME` TIME NULL ,
    `Shift1` varchar(30) NULL default '',
    `Shift2` varchar(30) NULL default '',
    `Item` varchar(30) NULL default '',
    `Sales` NUMERIC(18,6) NULL default '0',
    `Price` NUMERIC(18,6) NULL default '0',
    `Amount` NUMERIC(18,6) NULL default '0',
    `MFund` NUMERIC(18,6) NULL default '0',
    `Vat` NUMERIC(18,6) NULL default '0',
    `TP` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY (DOCNO,Item)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO dsr (DOCNO,DOCDATE,DOCTIME,Shift1,Shift2,Item,Sales,Price,Amount,MFund,Vat,TP)
Select
       b.DOCNO,
       b.U_DATE_FROM,
       b.U_TIME_FROM,
       if(b.u_shift like '1%', 'X', '') as Shift1,
       if(b.u_shift like '2%', 'X', '') as Shift2,
       a.u_itemcode as Item,
       sum(a.u_sold_liters) as Sales,
       sum(a.u_total)/sum(a.u_sold_liters) as Price,
       sum(a.u_total) as Amount,

      (SELECT u.U_RATE
        FROM u_reservemaintenance u
        WHERE u.company = pi_company and
              u.branch = pi_branch and
              u.u_date <= b.U_DATE_FROM
              
        order by u.u_date desc limit 1) as MFund,
        

       
            

      (SELECT u.U_RATE
        FROM u_reservevat u
        WHERE u.company = pi_company and
              u.branch = pi_branch and
              u.u_date <= b.U_DATE_FROM
              
        order by u.u_date desc limit 1) as Vat,

       
            

       (SELECT u.U_RATE
        FROM u_reservethruput u
        left outer join u_gasstationsetup gs on u.company=gs.company and u.branch = gs.branch
        WHERE u.company = pi_company and
              u.branch = pi_branch and
              u.u_date <= b.U_DATE_FROM and
              gs.U_POST_THRUPUT = 1
              
        order by u.u_date desc limit 1) as tp

      
           
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
                       and b.U_DFLTREADINGTYPE = a.u_readingtype and b.docstatus = 'C'
       left outer join items i on a.u_itemcode = i.itemcode
       where a.company = pi_company and a.branch = pi_branch
         
         and b.u_date_from <= pi_date2
         group by b.u_date_from, b.u_time_from, b.u_shift, a.u_itemcode;

  SET v_Done = 0 ;
  BLOCK1: BEGIN
  OPEN cur1;
  REPEAT
  FETCH cur1 INTO v_company,v_branch,v_refno,v_storef,v_refdate,v_fromwhscode,v_itemcode,v_qty,v_price,v_amount;
  if not v_Done then
    SET v_salesqty=0;
    OPEN cur2;
    REPEAT
      FETCH cur2 INTO v_dsrno, v_dsrdate, v_dsrshift1, v_dsrshift2, v_dsrqty, v_dsrprice, v_dsramount, v_dsrmf, v_dsrvat, v_dsrtp;
      IF NOT v_Done then
        SET v_Ctr = v_Ctr + 1;
        if (v_dsrqty + v_salesqty) <= v_qty then
          set v_currentsalesqty = v_dsrqty;
          set v_salesqty = v_salesqty + v_currentsalesqty;
          update dsr set sales=0 where docno=v_dsrno and item=v_itemcode;
        else
          set v_currentsalesqty = v_qty - v_salesqty;
          set v_salesqty = v_salesqty + v_currentsalesqty;
        SET v_Done = 1 ;
          update dsr set sales=sales-v_currentsalesqty where docno=v_dsrno and item=v_itemcode;
        end if;
        insert into mergetable(COMPANY,BRANCH,STDOCNO,STOREF,STDOCDATE,FROMWHSCODE,ITEMCODE,QTY,price,amount,DSRDOCNO,DSRDOCDATE,Shift1,Shift2,DSRSales,DSRPrice,DSRAmount,DSRMFund,DSRVat,DSRTP)
        values(v_company,v_branch,v_refno,v_storef,v_refdate,v_fromwhscode,v_itemcode,v_qty,v_price,v_amount,v_dsrno,v_dsrdate,v_dsrshift1,v_dsrshift2,v_currentsalesqty*-1,v_dsrprice,(v_currentsalesqty*-1)*v_dsrprice,v_dsrmf,v_dsrvat,v_dsrtp);
      end if;
    UNTIL v_Done END REPEAT ;
    CLOSE cur2;
    SET v_Done = 0 ;
    if v_Ctr = 0 then
        insert into mergetable(COMPANY,BRANCH,STDOCNO,STOREF,STDOCDATE,FROMWHSCODE,ITEMCODE,QTY,price,amount,DSRDOCNO,DSRDOCDATE,Shift1,Shift2,DSRSales,DSRPrice,DSRAmount,DSRMFund,DSRVat,DSRTP)
       values(v_company,v_branch,v_refno,v_storef,v_refdate,v_fromwhscode,v_itemcode,v_qty,v_price,v_amount,'',null,'','',0,0,0,0,0,0);
    end if;
  end if;
    SET v_Ctr = 0 ;
  UNTIL v_Done END REPEAT ;
  CLOSE cur1;
  END BLOCK1 ;
 
CREATE TEMPORARY TABLE  `main` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `COMPANYNAME` varchar(500) NULL default '',
    `COMPANYTYPE` varchar(500) NULL default '',
    `BRANCHNAME` varchar(500) NULL default '',
    `ITEMCODE` varchar(500) NULL default '',
    `STDOCDATE` DATE NULL,
    `STDOCNO` varchar(100) NULL default '',
    `DSRDOCNO` varchar(100) NULL default '',
    `DSRDOCDATE` DATE NULL,
    `Shift1` varchar(1) NULL default '',
    `Shift2` varchar(1) NULL default '',
    `STRef` varchar(50) NULL default '',
    `Biodiesel_STDocno` varchar(50) NULL default '',
    `Biodiesel_STQty` NUMERIC(18,6) NULL default '0',
    `Biodiesel_STDocdate` DATE NULL,
    `Biodiesel_STPrice` NUMERIC(18,6) NULL default '0',
    `Biodiesel_STAmount` NUMERIC(18,6) NULL default '0',
    `Biodiesel_DSRSales` NUMERIC(18,6) NULL default '0',
    `Biodiesel_DSRPrice` NUMERIC(18,6) NULL default '0',
    `Biodiesel_DSRAmount` NUMERIC(18,6) NULL default '0',
    `Premium_STDocno` varchar(50) NULL default '',
    `Premium_STQty` NUMERIC(18,6) NULL default '0',
    `Premium_STDocdate` DATE NULL,
    `Premium_STPrice` NUMERIC(18,6) NULL default '0',
    `Premium_STAmount` NUMERIC(18,6) NULL default '0',
    `Premium_DSRSales` NUMERIC(18,6) NULL default '0',
    `Premium_DSRPrice` NUMERIC(18,6) NULL default '0',
    `Premium_DSRAmount` NUMERIC(18,6) NULL default '0',
    `Unleaded_STDocno` varchar(50) NULL default '',
    `Unleaded_STQty` NUMERIC(18,6) NULL default '0',
    `Unleaded_STDocdate` DATE NULL,
    `Unleaded_STPrice` NUMERIC(18,6) NULL default '0',
    `Unleaded_STAmount` NUMERIC(18,6) NULL default '0',
    `Unleaded_DSRSales` NUMERIC(18,6) NULL default '0',
    `Unleaded_DSRPrice` NUMERIC(18,6) NULL default '0',
    `Unleaded_DSRAmount` NUMERIC(18,6) NULL default '0',
    `Regular_STDocno` varchar(50) NULL default '',
    `Regular_STQty` NUMERIC(18,6) NULL default '0',
    `Regular_STDocdate` DATE NULL,
    `Regular_STPrice` NUMERIC(18,6) NULL default '0',
    `Regular_STAmount` NUMERIC(18,6) NULL default '0',
    `Regular_DSRSales` NUMERIC(18,6) NULL default '0',
    `Regular_DSRPrice` NUMERIC(18,6) NULL default '0',
    `Regular_DSRAmount` NUMERIC(18,6) NULL default '0',
    `Kerosene_STDocno` varchar(50) NULL default '',
    `Kerosene_STQty` NUMERIC(18,6) NULL default '0',
    `Kerosene_STDocdate` DATE NULL,
    `Kerosene_STPrice` NUMERIC(18,6) NULL default '0',
    `Kerosene_STAmount` NUMERIC(18,6) NULL default '0',
    `Kerosene_DSRSales` NUMERIC(18,6) NULL default '0',
    `Kerosene_DSRPrice` NUMERIC(18,6) NULL default '0',
    `Kerosene_DSRAmount` NUMERIC(18,6) NULL default '0',
    `DSRMFund` NUMERIC(18,6) NULL default '0',
    `DSRVat` NUMERIC(18,6) NULL default '0',
    `DSRTP` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO main (
    COMPANY,
    BRANCH,
    COMPANYNAME,
    COMPANYTYPE,
    BRANCHNAME,
    ITEMCODE,
    STDOCDATE,
    STDOCNO,
    DSRDOCNO,
    DSRDOCDATE,
    Shift1,
    Shift2,
    STRef,
    Biodiesel_STDocno,
    Biodiesel_STQty,
    Biodiesel_STDocdate,
    Biodiesel_STPrice,
    Biodiesel_STAmount,
    Biodiesel_DSRSales,
    Biodiesel_DSRPrice,
    Biodiesel_DSRAmount,
    Premium_STDocno,
    Premium_STQty,
    Premium_STDocdate,
    Premium_STPrice,
    Premium_STAmount,
    Premium_DSRSales,
    Premium_DSRPrice,
    Premium_DSRAmount,
    Unleaded_STDocno,
    Unleaded_STQty,
    Unleaded_STDocdate,
    Unleaded_STPrice,
    Unleaded_STAmount,
    Unleaded_DSRSales,
    Unleaded_DSRPrice,
    Unleaded_DSRAmount,
    Regular_STDocno,
    Regular_STQty,
    Regular_STDocdate,
    Regular_STPrice,
    Regular_STAmount,
    Regular_DSRSales,
    Regular_DSRPrice,
    Regular_DSRAmount,
    Kerosene_STDocno,
    Kerosene_STQty,
    Kerosene_STDocdate,
    Kerosene_STPrice,
    Kerosene_STAmount,
    Kerosene_DSRSales,
    Kerosene_DSRPrice,
    Kerosene_DSRAmount,
    DSRMFund,
    DSRVat,
    DSRTP)
    Select
       a.COMPANY,
       pi_branch as BRANCH,
       upper(co.companyname) as COMPANYNAME,
       upper(concat('(',co.companytype, ' Group)')) as COMPANYTYPE,
       upper(concat(pi_branch,' - ',br.BRANCHNAME)) as BRANCHNAME,
       a.ITEMCODE,
       a.STDOCDATE,
       a.STDOCNO,
       a.DSRDOCNO,
       a.DSRDOCDATE,
       a.Shift1,
       a.Shift2,
       a.STOREF as STRef,
       if(a.ITEMCODE = 'W0001', a.STDOCNO, null) as Biodiesel_STDocno,
       if(a.ITEMCODE = 'W0001', a.QTY, 0) as Biodiesel_STQty,
       if(a.ITEMCODE = 'W0001', a.STDOCDATE, null) as Biodiesel_STDocdate,
       if(a.ITEMCODE = 'W0001', sum(a.price), null) as Biodiesel_STPrice,
       if(a.ITEMCODE = 'W0001', sum(a.amount), null) as Biodiesel_STAmount,
       if(a.ITEMCODE = 'W0001', sum(a.DSRSales), 0) as Biodiesel_DSRSales,
       if(a.ITEMCODE = 'W0001', sum(a.DSRPrice), 0) as Biodiesel_DSRPrice,
       if(a.ITEMCODE = 'W0001', sum(a.DSRAmount), 0) as Biodiesel_DSRAmount,
       if(a.ITEMCODE = 'W0002', a.STDOCNO, null) as Premium_STDocno,
       if(a.ITEMCODE = 'W0002', a.QTY, 0) as Premium_STQty,
       if(a.ITEMCODE = 'W0002', a.STDOCDATE, null) as Premium_STDocdate,
       if(a.ITEMCODE = 'W0002', sum(a.price), null) as Premium_STPrice,
       if(a.ITEMCODE = 'W0002', sum(a.amount), null) as Premium_STAmount,
       if(a.ITEMCODE = 'W0002', sum(a.DSRSales), 0) as Premium_DSRSales,
       if(a.ITEMCODE = 'W0002', sum(a.DSRPrice), 0) as Premium_DSRPrice,
       if(a.ITEMCODE = 'W0002', sum(a.DSRAmount), 0) as Premium_DSRAmount,
       if(a.ITEMCODE = 'W0003', a.STDOCNO, null) as Unleaded_STDocno,
       if(a.ITEMCODE = 'W0003', a.QTY, 0) as Unleaded_STQty,
       if(a.ITEMCODE = 'W0003', a.STDOCDATE, null) as Unleaded_STDocdate,
       if(a.ITEMCODE = 'W0003', sum(a.price), null) as Unleaded_STPrice,
       if(a.ITEMCODE = 'W0003', sum(a.amount), null) as Unleaded_STAmount,
       if(a.ITEMCODE = 'W0003', sum(a.DSRSales), 0) as Unleaded_DSRSales,
       if(a.ITEMCODE = 'W0003', sum(a.DSRPrice), 0) as Unleaded_DSRPrice,
       if(a.ITEMCODE = 'W0003', sum(a.DSRAmount), 0) as Unleaded_DSRAmount,
       if(a.ITEMCODE = 'W0004', a.STDOCNO, null) as Regular_STDocno,
       if(a.ITEMCODE = 'W0004', a.QTY, 0) as Regular_STQty,
       if(a.ITEMCODE = 'W0004', a.STDOCDATE, null) as Regular_STDocdate,
       if(a.ITEMCODE = 'W0004', sum(a.price), null) as Regular_STPrice,
       if(a.ITEMCODE = 'W0004', sum(a.amount), null) as Regular_STAmount,
       if(a.ITEMCODE = 'W0004', sum(a.DSRSales), 0) as Regular_DSRSales,
       if(a.ITEMCODE = 'W0004', sum(a.DSRPrice), 0) as Regular_DSRPrice,
       if(a.ITEMCODE = 'W0004', sum(a.DSRAmount), 0) as Regular_DSRAmount,
       if(a.ITEMCODE = 'W0005', a.STDOCNO, null) as Kerosene_STDocno,
       if(a.ITEMCODE = 'W0005', a.QTY, 0) as Kerosene_STQty,
       if(a.ITEMCODE = 'W0005', a.STDOCDATE, null) as Kerosene_STDocdate,
       if(a.ITEMCODE = 'W0005', sum(a.price), null) as Kerosene_STPrice,
       if(a.ITEMCODE = 'W0005', sum(a.amount), null) as Kerosene_STAmount,
       if(a.ITEMCODE = 'W0005', sum(a.DSRSales), 0) as Kerosene_DSRSales,
       if(a.ITEMCODE = 'W0005', sum(a.DSRPrice), 0) as Kerosene_DSRPrice,
       if(a.ITEMCODE = 'W0005', sum(a.DSRAmount), 0) as Kerosene_DSRAmount,
       if(a.DSRMFund is null, 0, a.DSRMFund) as DSRMFund,
       if(a.DSRVat is null, 0, a.DSRVat) as DSRVat,
       if(a.DSRtp is null, 0, a.DSRtp) as DSRtp
       from mergetable a
       left outer join items i on a.ITEMCODE = i.itemcode
       left outer join branches br ON br.BRANCHCODE = pi_branch
       left outer join companies co on co.companycode = pi_company
    where a.DSRDOCDATE between pi_date1 and pi_date2
   group by a.STDOCNO, a.STDOCDATE, a.ITEMCODE, a.DSRDOCNO, a.DSRDOCDATE
   order by a.STDOCNO, a.STDOCDATE, a.ITEMCODE, a.DSRDOCNO, a.DSRDOCDATE;
select
    a.COMPANY,
    a.BRANCH,
    a.COMPANYNAME,
    a.COMPANYTYPE,
    a.BRANCHNAME,
    date(pi_date1) as date1,
    date(pi_date2) as date2,
    a.STDOCDATE,
    a.STDOCNO,
    a.DSRDOCNO,
    a.DSRDOCDATE,
    a.Shift1,
    a.Shift2,
    a.STRef,
    group_concat(a.Biodiesel_STDocno) as Biodiesel_STDocno,
    sum(a.Biodiesel_STQty) as Biodiesel_STQty,
    Biodiesel_STDocdate,
    sum(Biodiesel_STPrice) as Biodiesel_STPrice,
    sum(Biodiesel_STAmount) as Biodiesel_STAmount,
    sum(a.Biodiesel_DSRSales) as Biodiesel_DSRSales,
    sum(a.Biodiesel_DSRPrice) as Biodiesel_DSRPrice,
    sum(a.Biodiesel_DSRAmount) as Biodiesel_DSRAmount,
    group_concat(a.Premium_STDocno) as Premium_STDocno,
    sum(a.Premium_STQty) as Premium_STQty,
    Premium_STDocdate,
    sum(Premium_STPrice)as Premium_STPrice,
    sum(Premium_STAmount) as Premium_STAmount,
    sum(a.Premium_DSRSales) as Premium_DSRSales,
    sum(a.Premium_DSRPrice) as Premium_DSRPrice,
    sum(a.Premium_DSRAmount) as Premium_DSRAmount,
    group_concat(a.Unleaded_STDocno) as Unleaded_STDocno,
    sum(a.Unleaded_STQty) as Unleaded_STQty,
    Unleaded_STDocdate,
    sum(Unleaded_STPrice) as Unleaded_STPrice,
    sum(Unleaded_STAmount) as Unleaded_STAmount,
    sum(a.Unleaded_DSRSales) as Unleaded_DSRSales,
    sum(a.Unleaded_DSRPrice) as Unleaded_DSRPrice,
    sum(a.Unleaded_DSRAmount) as Unleaded_DSRAmount,
    group_concat(a.Regular_STDocno) as Regular_STDocno,
    sum(a.Regular_STQty) as Regular_STQty,
    Regular_STDocdate,
    sum(Regular_STPrice) as Regular_STPrice,
    sum(Regular_STAmount) as Regular_STAmount,
    sum(a.Regular_DSRSales) as Regular_DSRSales,
    sum(a.Regular_DSRPrice) as Regular_DSRPrice,
    sum(a.Regular_DSRAmount) as Regular_DSRAmount,
    group_concat(a.Kerosene_STDocno) as Kerosene_STDocno,
    sum(a.Kerosene_STQty) as Kerosene_STQty,
    Kerosene_STDocdate,
    sum(Kerosene_STPrice) as Kerosene_STPrice,
    sum(Kerosene_STAmount) as Kerosene_STAmount,
    sum(a.Kerosene_DSRSales) as Kerosene_DSRSales,
    sum(a.Kerosene_DSRPrice) as Kerosene_DSRPrice,
    sum(a.Kerosene_DSRAmount) as Kerosene_DSRAmount,
    (sum(a.Biodiesel_DSRAmount)+ sum(a.Premium_DSRAmount)+
    sum(a.Unleaded_DSRAmount)+ sum(a.Regular_DSRAmount)+
    sum(a.Kerosene_DSRAmount)) as StnRemit,
    a.DSRMFund,
    a.DSRVat,
    a.DSRtp,
    (((sum(a.Biodiesel_DSRAmount)+ sum(a.Premium_DSRAmount)+
    sum(a.Unleaded_DSRAmount)+ sum(a.Regular_DSRAmount)+
    sum(a.Kerosene_DSRAmount)) - a.DSRMFund) - a.DSRVat) - a.DSRtp as HORemit
   from main a
   group by a.STDOCDATE, a.DSRDOCNO, a.DSRDOCDATE
   order by a.STDOCDATE, a.DSRDOCNO, a.DSRDOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `consignment_stock_monitoring_old`
--

DROP PROCEDURE IF EXISTS `consignment_stock_monitoring_old`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `consignment_stock_monitoring_old`(IN pi_company VARCHAR(30),
                                                IN pi_branch VARCHAR(30),
                                                IN pi_date1 VARCHAR(30),
                                                IN pi_date2 VARCHAR(30))
BEGIN

  DECLARE v_no varchar(100);
  DECLARE v_qty NUMERIC(18,6);
  DECLARE v_price NUMERIC(18,6);
  DECLARE v_amount NUMERIC(18,6);
  DECLARE v_salesqty NUMERIC(18,6);
  DECLARE v_Done integer;
  DECLARE v_Ctr integer;
  DECLARE v_company varchar(30);
  DECLARE v_branch varchar(30);
  DECLARE v_refno varchar(30);
  DECLARE v_storef varchar(50);
  DECLARE v_refdate date;
  DECLARE v_fromwhscode varchar(30);
  DECLARE v_itemcode varchar(30);
  DECLARE v_dsrdate date;
  DECLARE v_dsrshift1 varchar(100);
  DECLARE v_dsrshift2 varchar(100);
  DECLARE v_dsrno varchar(100);
  DECLARE v_dsrqty NUMERIC(18,6);
  DECLARE v_currentsalesqty NUMERIC(18,6);
  DECLARE v_dsrprice NUMERIC(18,6);
  DECLARE v_dsramount NUMERIC(18,6);
  DECLARE v_dsrmf NUMERIC(18,6);
  DECLARE v_dsrvat NUMERIC(18,6);
  DECLARE v_dsrtp NUMERIC(18,6);
  DECLARE cur1 CURSOR FOR

  select a.COMPANY, a.BRANCH, a.refno, a.u_storef, a.refdate, a.fromwhscode, a.itemcode, sum(a.qty),sum(a.price),sum(a.amount)
           from transfers a
           group by a.refdate, a.refno, a.ITEMCODE
           having sum(a.qty) <> 0
           order by a.itemcode,a.refdate;

  DECLARE cur2 CURSOR FOR

  SELECT DOCNO, DOCDATE, Shift1, Shift2, SUM(Sales), SUM(Price), SUM(Amount), SUM(MFund), SUM(Vat), SUM(TP)
         FROM dsr
         where item = v_itemcode and sales > 0
         GROUP BY DOCDATE, DOCTIME, Shift1, Shift2, Item
         order by docdate;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;

DROP TEMPORARY TABLE IF EXISTS `mergetable`;
CREATE TEMPORARY TABLE  `mergetable` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `STDOCNO` varchar(100) NULL default '',
    `STOREF` varchar(100) NULL default '',
    `STDOCDATE` DATE NULL,
    `FROMWHSCODE` varchar(100) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `price` NUMERIC(18,6) NULL default '0',
    `amount` NUMERIC(18,6) NULL default '0',
    `DSRDOCNO` varchar(30) NULL default '',
    `DSRDOCDATE` DATE NULL,
    `Shift1` varchar(1) NULL default '',
    `Shift2` varchar(1) NULL default '',
    `DSRSales` NUMERIC(18,6) NULL default '0',
    `DSRPrice` NUMERIC(18,6) NULL default '0',
    `DSRAmount` NUMERIC(18,6) NULL default '0',
    `DSRMFund` NUMERIC(18,6) NULL default '0',
    `DSRVat` NUMERIC(18,6) NULL default '0',
    `DSRTP` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;



DROP TEMPORARY TABLE IF EXISTS `transfers`;
CREATE TEMPORARY TABLE  `transfers` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `refno` varchar(50) NULL default '',
    `u_storef` varchar(50) NULL default '',
    `refdate` date null,
    `fromwhscode` varchar(30) NULL default '',
    `itemcode` varchar(100) NULL default '',
    `qty` NUMERIC(18,6) NULL default '0',
    `price` NUMERIC(18,6) NULL default '0',
    `amount` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT
    INTO transfers (COMPANY,BRANCH,refno,u_storef,refdate,fromwhscode,itemcode,qty,price,amount)
  select a.COMPANY, a.BRANCH, a.refno, b.u_storef, a.refdate, c.fromwhscode, a.itemcode, sum(a.qty),
         sum(b.totalamount)/sum(a.qty), sum(b.totalamount)
           from stockcard a
           left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
           left outer join stocktransferitems c on a.company = c.company and a.branch = c.branch and b.docid = c.docid and a.reflineid=c.lineid
           where a.company = pi_company and a.warehouse = CONCAT('UGT-',pi_branch)
                 and a.REFTYPE in ('GT+','GT-')
                 and a.refdate between pi_date1 and pi_date2
  group by a.refdate, a.ITEMCODE order by a.itemcode,a.refdate;

  INSERT
    INTO transfers (COMPANY,BRANCH,refno,u_storef,refdate,fromwhscode,itemcode,qty,price,amount)
  select a.COMPANY, a.BRANCH, a.refno, '', a.refdate, a.warehouse, a.itemcode, sum(a.qty),
         sum(a.costprice), sum(a.qty*a.costprice)
           from stockcard a
           where a.company = pi_company and a.warehouse = CONCAT('UGT-',pi_branch)
                 and a.REFTYPE in ('PDN')
                 and a.refdate < pi_date1
  group by a.refdate, a.ITEMCODE order by a.itemcode,a.refdate;



DROP TEMPORARY TABLE IF EXISTS `dsr`;
CREATE TEMPORARY TABLE  `dsr` (
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` date NULL ,
    `DOCTIME` TIME NULL ,
    `Shift1` varchar(30) NULL default '',
    `Shift2` varchar(30) NULL default '',
    `Item` varchar(30) NULL default '',
    `Sales` NUMERIC(18,6) NULL default '0',
    `Price` NUMERIC(18,6) NULL default '0',
    `Amount` NUMERIC(18,6) NULL default '0',
    `MFund` NUMERIC(18,6) NULL default '0',
    `Vat` NUMERIC(18,6) NULL default '0',
    `TP` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY (DOCNO,Item)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT
    INTO dsr (DOCNO,DOCDATE,DOCTIME,Shift1,Shift2,Item,Sales,Price,Amount,MFund,Vat,TP)
Select
       b.DOCNO,
       b.U_DATE_FROM,
       b.U_TIME_FROM,
       if(b.u_shift like '1%', 'X', '') as Shift1,
       if(b.u_shift like '2%', 'X', '') as Shift2,
       a.u_itemcode as Item,
       sum(a.u_sold_liters) as Sales,
       sum(a.u_total)/sum(a.u_sold_liters) as Price,
       sum(a.u_total) as Amount,
       
       (SELECT U_RESERVE_MAINTENANCE_FUND
            FROM u_gasstationsetup u WHERE company = pi_company and branch = pi_branch limit 1) as MFund,
       
       (SELECT U_RESERVE_VAT_PAYMENTS
            FROM u_gasstationsetup u WHERE company = pi_company and branch = pi_branch limit 1) as Vat,
       
      (SELECT U_RESERVE_THRU_PUT
            FROM u_gasstationsetup u WHERE company = pi_company and branch = pi_branch and U_POST_THRUPUT = 1 limit 1) as tp


       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
                       and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i on a.u_itemcode = i.itemcode
       
       
       
   where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between pi_date1 and pi_date2
   group by b.u_date_from, b.u_time_from, b.u_shift, a.u_itemcode;

  SET v_Done = 0 ;
  BLOCK1: BEGIN
  OPEN cur1;
  REPEAT
  FETCH cur1 INTO v_company,v_branch,v_refno,v_storef,v_refdate,v_fromwhscode,v_itemcode,v_qty,v_price,v_amount;

  if not v_Done then

    SET v_salesqty=0;
    OPEN cur2;
    REPEAT

      FETCH cur2 INTO v_dsrno, v_dsrdate, v_dsrshift1, v_dsrshift2, v_dsrqty, v_dsrprice, v_dsramount, v_dsrmf, v_dsrvat, v_dsrtp;

      IF NOT v_Done then
        SET v_Ctr = v_Ctr + 1;
        if (v_dsrqty + v_salesqty) <= v_qty then
          set v_currentsalesqty = v_dsrqty;
          set v_salesqty = v_salesqty + v_currentsalesqty;
          update dsr set sales=0 where docno=v_dsrno and item=v_itemcode;
        else
          set v_currentsalesqty = v_qty - v_salesqty;
          set v_salesqty = v_salesqty + v_currentsalesqty;
        SET v_Done = 1 ;
          update dsr set sales=sales-v_currentsalesqty where docno=v_dsrno and item=v_itemcode;
        end if;
        insert into mergetable(COMPANY,BRANCH,STDOCNO,STOREF,STDOCDATE,FROMWHSCODE,ITEMCODE,QTY,price,amount,DSRDOCNO,DSRDOCDATE,Shift1,Shift2,DSRSales,DSRPrice,DSRAmount,DSRMFund,DSRVat,DSRTP)
        values(v_company,v_branch,v_refno,v_storef,v_refdate,v_fromwhscode,v_itemcode,v_qty,v_price,v_amount,v_dsrno,v_dsrdate,v_dsrshift1,v_dsrshift2,v_currentsalesqty*-1,v_dsrprice,(v_currentsalesqty*-1)*v_dsrprice,v_dsrmf,v_dsrvat,v_dsrtp);
      end if;

    UNTIL v_Done END REPEAT ;
    CLOSE cur2;


    SET v_Done = 0 ;

    if v_Ctr = 0 then
        insert into mergetable(COMPANY,BRANCH,STDOCNO,STOREF,STDOCDATE,FROMWHSCODE,ITEMCODE,QTY,price,amount,DSRDOCNO,DSRDOCDATE,Shift1,Shift2,DSRSales,DSRPrice,DSRAmount,DSRMFund,DSRVat,DSRTP)
       values(v_company,v_branch,v_refno,v_storef,v_refdate,v_fromwhscode,v_itemcode,v_qty,v_price,v_amount,'',null,'','',0,0,0,0,0,0);
    end if;
  end if;
    SET v_Ctr = 0 ;
  UNTIL v_Done END REPEAT ;
  CLOSE cur1;
  END BLOCK1 ;

 

CREATE TEMPORARY TABLE  `main` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `COMPANYNAME` varchar(500) NULL default '',
    `COMPANYTYPE` varchar(500) NULL default '',
    `BRANCHNAME` varchar(500) NULL default '',

    `ITEMCODE` varchar(500) NULL default '',


    `STDOCDATE` DATE NULL,
    `STDOCNO` varchar(100) NULL default '',
    `DSRDOCNO` varchar(100) NULL default '',
    `DSRDOCDATE` DATE NULL,

    `Shift1` varchar(1) NULL default '',
    `Shift2` varchar(1) NULL default '',

    `STRef` varchar(50) NULL default '',
    `Biodiesel_STDocno` varchar(50) NULL default '',
    `Biodiesel_STQty` NUMERIC(18,6) NULL default '0',
    `Biodiesel_STDocdate` DATE NULL,
    `Biodiesel_STPrice` NUMERIC(18,6) NULL default '0',
    `Biodiesel_STAmount` NUMERIC(18,6) NULL default '0',
    `Biodiesel_DSRSales` NUMERIC(18,6) NULL default '0',
    `Biodiesel_DSRPrice` NUMERIC(18,6) NULL default '0',
    `Biodiesel_DSRAmount` NUMERIC(18,6) NULL default '0',


    `Premium_STDocno` varchar(50) NULL default '',
    `Premium_STQty` NUMERIC(18,6) NULL default '0',
    `Premium_STDocdate` DATE NULL,
    `Premium_STPrice` NUMERIC(18,6) NULL default '0',
    `Premium_STAmount` NUMERIC(18,6) NULL default '0',
    `Premium_DSRSales` NUMERIC(18,6) NULL default '0',
    `Premium_DSRPrice` NUMERIC(18,6) NULL default '0',
    `Premium_DSRAmount` NUMERIC(18,6) NULL default '0',


    `Unleaded_STDocno` varchar(50) NULL default '',
    `Unleaded_STQty` NUMERIC(18,6) NULL default '0',
    `Unleaded_STDocdate` DATE NULL,
    `Unleaded_STPrice` NUMERIC(18,6) NULL default '0',
    `Unleaded_STAmount` NUMERIC(18,6) NULL default '0',
    `Unleaded_DSRSales` NUMERIC(18,6) NULL default '0',
    `Unleaded_DSRPrice` NUMERIC(18,6) NULL default '0',
    `Unleaded_DSRAmount` NUMERIC(18,6) NULL default '0',


    `Regular_STDocno` varchar(50) NULL default '',
    `Regular_STQty` NUMERIC(18,6) NULL default '0',
    `Regular_STDocdate` DATE NULL,
    `Regular_STPrice` NUMERIC(18,6) NULL default '0',
    `Regular_STAmount` NUMERIC(18,6) NULL default '0',
    `Regular_DSRSales` NUMERIC(18,6) NULL default '0',
    `Regular_DSRPrice` NUMERIC(18,6) NULL default '0',
    `Regular_DSRAmount` NUMERIC(18,6) NULL default '0',


    `Kerosene_STDocno` varchar(50) NULL default '',
    `Kerosene_STQty` NUMERIC(18,6) NULL default '0',
    `Kerosene_STDocdate` DATE NULL,
    `Kerosene_STPrice` NUMERIC(18,6) NULL default '0',
    `Kerosene_STAmount` NUMERIC(18,6) NULL default '0',
    `Kerosene_DSRSales` NUMERIC(18,6) NULL default '0',
    `Kerosene_DSRPrice` NUMERIC(18,6) NULL default '0',
    `Kerosene_DSRAmount` NUMERIC(18,6) NULL default '0',

    `DSRMFund` NUMERIC(18,6) NULL default '0',
    `DSRVat` NUMERIC(18,6) NULL default '0',
    `DSRTP` NUMERIC(18,6) NULL default '0'

  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT
    INTO main (
    COMPANY,
    BRANCH,
    COMPANYNAME,
    COMPANYTYPE,
    BRANCHNAME,

    ITEMCODE,


    STDOCDATE,
    STDOCNO,
    DSRDOCNO,
    DSRDOCDATE,

    Shift1,
    Shift2,

    STRef,
    Biodiesel_STDocno,
    Biodiesel_STQty,
    Biodiesel_STDocdate,
    Biodiesel_STPrice,
    Biodiesel_STAmount,
    Biodiesel_DSRSales,
    Biodiesel_DSRPrice,
    Biodiesel_DSRAmount,


    Premium_STDocno,
    Premium_STQty,
    Premium_STDocdate,
    Premium_STPrice,
    Premium_STAmount,
    Premium_DSRSales,
    Premium_DSRPrice,
    Premium_DSRAmount,


    Unleaded_STDocno,
    Unleaded_STQty,
    Unleaded_STDocdate,
    Unleaded_STPrice,
    Unleaded_STAmount,
    Unleaded_DSRSales,
    Unleaded_DSRPrice,
    Unleaded_DSRAmount,


    Regular_STDocno,
    Regular_STQty,
    Regular_STDocdate,
    Regular_STPrice,
    Regular_STAmount,
    Regular_DSRSales,
    Regular_DSRPrice,
    Regular_DSRAmount,


    Kerosene_STDocno,
    Kerosene_STQty,
    Kerosene_STDocdate,
    Kerosene_STPrice,
    Kerosene_STAmount,
    Kerosene_DSRSales,
    Kerosene_DSRPrice,
    Kerosene_DSRAmount,

    DSRMFund,
    DSRVat,
    DSRTP)

    Select
       a.COMPANY,
       pi_branch as BRANCH,
       upper(co.companyname) as COMPANYNAME,
       upper(concat('(',co.companytype, ' Group)')) as COMPANYTYPE,
       upper(concat(pi_branch,' - ',br.BRANCHNAME)) as BRANCHNAME,

       a.ITEMCODE,

       a.STDOCDATE,
       a.STDOCNO,
       a.DSRDOCNO,
       a.DSRDOCDATE,

       a.Shift1,
       a.Shift2,

       a.STOREF as STRef,
       if(a.ITEMCODE = 'W0001', a.STDOCNO, null) as Biodiesel_STDocno,
       if(a.ITEMCODE = 'W0001', a.QTY, 0) as Biodiesel_STQty,
       if(a.ITEMCODE = 'W0001', a.STDOCDATE, null) as Biodiesel_STDocdate,
       if(a.ITEMCODE = 'W0001', sum(a.price), null) as Biodiesel_STPrice,
       if(a.ITEMCODE = 'W0001', sum(a.amount), null) as Biodiesel_STAmount,

       if(a.ITEMCODE = 'W0001', sum(a.DSRSales), 0) as Biodiesel_DSRSales,
       if(a.ITEMCODE = 'W0001', sum(a.DSRPrice), 0) as Biodiesel_DSRPrice,
       if(a.ITEMCODE = 'W0001', sum(a.DSRAmount), 0) as Biodiesel_DSRAmount,



       if(a.ITEMCODE = 'W0002', a.STDOCNO, null) as Premium_STDocno,
       if(a.ITEMCODE = 'W0002', a.QTY, 0) as Premium_STQty,
       if(a.ITEMCODE = 'W0002', a.STDOCDATE, null) as Premium_STDocdate,
       if(a.ITEMCODE = 'W0002', sum(a.price), null) as Premium_STPrice,
       if(a.ITEMCODE = 'W0002', sum(a.amount), null) as Premium_STAmount,

       if(a.ITEMCODE = 'W0002', sum(a.DSRSales), 0) as Premium_DSRSales,
       if(a.ITEMCODE = 'W0002', sum(a.DSRPrice), 0) as Premium_DSRPrice,
       if(a.ITEMCODE = 'W0002', sum(a.DSRAmount), 0) as Premium_DSRAmount,



       if(a.ITEMCODE = 'W0003', a.STDOCNO, null) as Unleaded_STDocno,
       if(a.ITEMCODE = 'W0003', a.QTY, 0) as Unleaded_STQty,
       if(a.ITEMCODE = 'W0003', a.STDOCDATE, null) as Unleaded_STDocdate,
       if(a.ITEMCODE = 'W0003', sum(a.price), null) as Unleaded_STPrice,
       if(a.ITEMCODE = 'W0003', sum(a.amount), null) as Unleaded_STAmount,

       if(a.ITEMCODE = 'W0003', sum(a.DSRSales), 0) as Unleaded_DSRSales,
       if(a.ITEMCODE = 'W0003', sum(a.DSRPrice), 0) as Unleaded_DSRPrice,
       if(a.ITEMCODE = 'W0003', sum(a.DSRAmount), 0) as Unleaded_DSRAmount,



       if(a.ITEMCODE = 'W0004', a.STDOCNO, null) as Regular_STDocno,
       if(a.ITEMCODE = 'W0004', a.QTY, 0) as Regular_STQty,
       if(a.ITEMCODE = 'W0004', a.STDOCDATE, null) as Regular_STDocdate,
       if(a.ITEMCODE = 'W0004', sum(a.price), null) as Regular_STPrice,
       if(a.ITEMCODE = 'W0004', sum(a.amount), null) as Regular_STAmount,

       if(a.ITEMCODE = 'W0004', sum(a.DSRSales), 0) as Regular_DSRSales,
       if(a.ITEMCODE = 'W0004', sum(a.DSRPrice), 0) as Regular_DSRPrice,
       if(a.ITEMCODE = 'W0004', sum(a.DSRAmount), 0) as Regular_DSRAmount,



       if(a.ITEMCODE = 'W0005', a.STDOCNO, null) as Kerosene_STDocno,
       if(a.ITEMCODE = 'W0005', a.QTY, 0) as Kerosene_STQty,
       if(a.ITEMCODE = 'W0005', a.STDOCDATE, null) as Kerosene_STDocdate,
       if(a.ITEMCODE = 'W0005', sum(a.price), null) as Kerosene_STPrice,
       if(a.ITEMCODE = 'W0005', sum(a.amount), null) as Kerosene_STAmount,

       if(a.ITEMCODE = 'W0005', sum(a.DSRSales), 0) as Kerosene_DSRSales,
       if(a.ITEMCODE = 'W0005', sum(a.DSRPrice), 0) as Kerosene_DSRPrice,
       if(a.ITEMCODE = 'W0005', sum(a.DSRAmount), 0) as Kerosene_DSRAmount,


       if(a.DSRMFund is null, 0, a.DSRMFund) as DSRMFund,
       if(a.DSRVat is null, 0, a.DSRVat) as DSRVat,
       if(a.DSRtp is null, 0, a.DSRtp) as DSRtp


       from mergetable a
       left outer join items i on a.ITEMCODE = i.itemcode
       left outer join branches br ON br.BRANCHCODE = pi_branch
       left outer join companies co on co.companycode = pi_company

   group by a.STDOCNO, a.STDOCDATE, a.ITEMCODE, a.DSRDOCNO, a.DSRDOCDATE
   order by a.STDOCNO, a.STDOCDATE, a.ITEMCODE, a.DSRDOCNO, a.DSRDOCDATE;

select
    a.COMPANY,
    a.BRANCH,
    a.COMPANYNAME,
    a.COMPANYTYPE,
    a.BRANCHNAME,
    date(pi_date1) as date1,
    date(pi_date2) as date2,

    a.STDOCDATE,
    a.STDOCNO,
    a.DSRDOCNO,
    a.DSRDOCDATE,

    a.Shift1,
    a.Shift2,

    a.STRef,
    group_concat(a.Biodiesel_STDocno) as Biodiesel_STDocno,
    sum(a.Biodiesel_STQty) as Biodiesel_STQty,
    Biodiesel_STDocdate,
    sum(Biodiesel_STPrice) as Biodiesel_STPrice,
    sum(Biodiesel_STAmount) as Biodiesel_STAmount,
    sum(a.Biodiesel_DSRSales) as Biodiesel_DSRSales,
    sum(a.Biodiesel_DSRPrice) as Biodiesel_DSRPrice,
    sum(a.Biodiesel_DSRAmount) as Biodiesel_DSRAmount,


    group_concat(a.Premium_STDocno) as Premium_STDocno,
    sum(a.Premium_STQty) as Premium_STQty,
    Premium_STDocdate,
    sum(Premium_STPrice)as Premium_STPrice,
    sum(Premium_STAmount) as Premium_STAmount,
    sum(a.Premium_DSRSales) as Premium_DSRSales,
    sum(a.Premium_DSRPrice) as Premium_DSRPrice,
    sum(a.Premium_DSRAmount) as Premium_DSRAmount,


    group_concat(a.Unleaded_STDocno) as Unleaded_STDocno,
    sum(a.Unleaded_STQty) as Unleaded_STQty,
    Unleaded_STDocdate,
    sum(Unleaded_STPrice) as Unleaded_STPrice,
    sum(Unleaded_STAmount) as Unleaded_STAmount,
    sum(a.Unleaded_DSRSales) as Unleaded_DSRSales,
    sum(a.Unleaded_DSRPrice) as Unleaded_DSRPrice,
    sum(a.Unleaded_DSRAmount) as Unleaded_DSRAmount,


    group_concat(a.Regular_STDocno) as Regular_STDocno,
    sum(a.Regular_STQty) as Regular_STQty,
    Regular_STDocdate,
    sum(Regular_STPrice) as Regular_STPrice,
    sum(Regular_STAmount) as Regular_STAmount,
    sum(a.Regular_DSRSales) as Regular_DSRSales,
    sum(a.Regular_DSRPrice) as Regular_DSRPrice,
    sum(a.Regular_DSRAmount) as Regular_DSRAmount,


    group_concat(a.Kerosene_STDocno) as Kerosene_STDocno,
    sum(a.Kerosene_STQty) as Kerosene_STQty,
    Kerosene_STDocdate,
    sum(Kerosene_STPrice) as Kerosene_STPrice,
    sum(Kerosene_STAmount) as Kerosene_STAmount,
    sum(a.Kerosene_DSRSales) as Kerosene_DSRSales,
    sum(a.Kerosene_DSRPrice) as Kerosene_DSRPrice,
    sum(a.Kerosene_DSRAmount) as Kerosene_DSRAmount,

    (sum(a.Biodiesel_DSRAmount)+ sum(a.Premium_DSRAmount)+
    sum(a.Unleaded_DSRAmount)+ sum(a.Regular_DSRAmount)+
    sum(a.Kerosene_DSRAmount)) as StnRemit,

    a.DSRMFund,
    a.DSRVat,
    a.DSRtp,

    (((sum(a.Biodiesel_DSRAmount)+ sum(a.Premium_DSRAmount)+
    sum(a.Unleaded_DSRAmount)+ sum(a.Regular_DSRAmount)+
    sum(a.Kerosene_DSRAmount)) - a.DSRMFund) - a.DSRVat) - a.DSRtp as HORemit

   from main a

   group by a.STDOCDATE, a.DSRDOCNO, a.DSRDOCDATE
   order by a.STDOCDATE, a.DSRDOCNO, a.DSRDOCDATE;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `creditoraging_st`
--

DROP PROCEDURE IF EXISTS `creditoraging_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `creditoraging_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_creditor_fr VARCHAR(30), IN pi_creditor_to VARCHAR(30),
                                  IN pi_date_to DATE, IN pi_currencytype INT, IN pi_rpttype INT)
BEGIN

DECLARE v_now             VARCHAR(30);
DECLARE v_creditor_fr     VARCHAR(30);
DECLARE v_creditor_to     VARCHAR(30);
DECLARE v_localcurrency   VARCHAR(30);
DECLARE v_mth01 DATE;
DECLARE v_mth02 DATE;
DECLARE v_mth03 DATE;
DECLARE v_mth04 DATE;
DECLARE v_mth05 DATE;
DECLARE v_mth06 DATE;
DECLARE v_mth07 DATE;
DECLARE v_mth08 DATE;
DECLARE v_mth09 DATE;
DECLARE v_mth10 DATE;
DECLARE v_mth11 DATE;
DECLARE v_mth12 DATE;
DECLARE v_mth01desc VARCHAR(100);
DECLARE v_mth02desc VARCHAR(100);
DECLARE v_mth03desc VARCHAR(100);
DECLARE v_mth04desc VARCHAR(100);
DECLARE v_mth05desc VARCHAR(100);
DECLARE v_mth06desc VARCHAR(100);
DECLARE v_mth07desc VARCHAR(100);
DECLARE v_mth08desc VARCHAR(100);
DECLARE v_mth09desc VARCHAR(100);
DECLARE v_mth10desc VARCHAR(100);
DECLARE v_mth11desc VARCHAR(100);
DECLARE v_mth12desc VARCHAR(100);

  IF pi_creditor_fr is null THEN
    SET v_creditor_fr = '';
  ELSE
    SET v_creditor_fr = pi_creditor_fr;
  END IF;

  IF pi_creditor_to is null THEN
    SET v_creditor_to = '';
  ELSE
    SET v_creditor_to = pi_creditor_to;
  END IF;

  IF v_creditor_fr > '' and v_creditor_to = '' THEN

    SET v_creditor_to = v_creditor_fr;

  ELSEIF v_creditor_fr = '' and v_creditor_to > '' THEN

    SET v_creditor_fr = v_creditor_to;

  ELSEIF v_creditor_fr = '' and v_creditor_to = '' THEN

    SET v_creditor_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;

SET v_now = CAST(NOW() as char(30));
SET v_mth01 = pi_date_to;
SET v_mth02 = DATE_ADD(pi_date_to, INTERVAL -1  MONTH);
SET v_mth03 = DATE_ADD(pi_date_to, INTERVAL -2  MONTH);
SET v_mth04 = DATE_ADD(pi_date_to, INTERVAL -3  MONTH);
SET v_mth05 = DATE_ADD(pi_date_to, INTERVAL -4  MONTH);
SET v_mth06 = DATE_ADD(pi_date_to, INTERVAL -5  MONTH);
SET v_mth07 = DATE_ADD(pi_date_to, INTERVAL -6  MONTH);
SET v_mth08 = DATE_ADD(pi_date_to, INTERVAL -7  MONTH);
SET v_mth09 = DATE_ADD(pi_date_to, INTERVAL -8  MONTH);
SET v_mth10 = DATE_ADD(pi_date_to, INTERVAL -9  MONTH);
SET v_mth11 = DATE_ADD(pi_date_to, INTERVAL -10 MONTH);
SET v_mth12 = DATE_ADD(pi_date_to, INTERVAL -11 MONTH);

IF pi_rpttype = 0 THEN

  SET v_mth01desc = UPPER(CAST(Date_format(v_mth01,'%b') AS CHAR));
  SET v_mth02desc = UPPER(CAST(Date_format(v_mth02,'%b') AS CHAR));
  SET v_mth03desc = UPPER(CAST(Date_format(v_mth03,'%b') AS CHAR));
  SET v_mth04desc = UPPER(CAST(Date_format(v_mth04,'%b') AS CHAR));
  SET v_mth05desc = UPPER(CAST(Date_format(v_mth05,'%b') AS CHAR));
  SET v_mth06desc = CONCAT(UPPER(CAST(Date_format(v_mth06,'%b') AS CHAR)),'++');


ELSE

  SET v_mth01desc = UPPER(CAST(Date_format(v_mth01,'%b') AS CHAR));
  SET v_mth02desc = UPPER(CAST(Date_format(v_mth02,'%b') AS CHAR));
  SET v_mth03desc = UPPER(CAST(Date_format(v_mth03,'%b') AS CHAR));
  SET v_mth04desc = UPPER(CAST(Date_format(v_mth04,'%b') AS CHAR));
  SET v_mth05desc = UPPER(CAST(Date_format(v_mth05,'%b') AS CHAR));
  SET v_mth06desc = UPPER(CAST(Date_format(v_mth06,'%b') AS CHAR));
  SET v_mth07desc = UPPER(CAST(Date_format(v_mth07,'%b') AS CHAR));
  SET v_mth08desc = UPPER(CAST(Date_format(v_mth08,'%b') AS CHAR));
  SET v_mth09desc = UPPER(CAST(Date_format(v_mth09,'%b') AS CHAR));
  SET v_mth10desc = UPPER(CAST(Date_format(v_mth10,'%b') AS CHAR));
  SET v_mth11desc = UPPER(CAST(Date_format(v_mth11,'%b') AS CHAR));
  SET v_mth12desc = CONCAT(UPPER(CAST(Date_format(v_mth12,'%b') AS CHAR)),'++');

END IF;

    SELECT CURRENCY INTO v_localcurrency
      FROM COMPANIES
      WHERE COMPANYCODE = pi_company LIMIT 1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP4;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP4` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `BALANCE`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP3;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP3` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `BALANCE`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP2;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `GLDEBIT_O`     DECIMAL(20,6),
    `GLCREDIT_O`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS AGING_TEMP;
    CREATE TEMPORARY TABLE `AGING_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `MTH01`        DECIMAL(20,6),
    `MTH02`        DECIMAL(20,6),
    `MTH03`        DECIMAL(20,6),
    `MTH04`        DECIMAL(20,6),
    `MTH05`        DECIMAL(20,6),
    `MTH06`        DECIMAL(20,6),
    `MTH07`        DECIMAL(20,6),
    `MTH08`        DECIMAL(20,6),
    `MTH09`        DECIMAL(20,6),
    `MTH10`        DECIMAL(20,6),
    `MTH11`        DECIMAL(20,6),
    `MTH12`        DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTH01DESC`    VARCHAR(100),
    `MTH02DESC`    VARCHAR(100),
    `MTH03DESC`    VARCHAR(100),
    `MTH04DESC`    VARCHAR(100),
    `MTH05DESC`    VARCHAR(100),
    `MTH06DESC`    VARCHAR(100),
    `MTH07DESC`    VARCHAR(100),
    `MTH08DESC`    VARCHAR(100),
    `MTH09DESC`    VARCHAR(100),
    `MTH10DESC`    VARCHAR(100),
    `MTH11DESC`    VARCHAR(100),
    `MTH12DESC`    VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS AGING_TEMP2;
    CREATE TEMPORARY TABLE `AGING_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `MTH01`        DECIMAL(20,6),
    `MTH02`        DECIMAL(20,6),
    `MTH03`        DECIMAL(20,6),
    `MTH04`        DECIMAL(20,6),
    `MTH05`        DECIMAL(20,6),
    `MTH06`        DECIMAL(20,6),
    `MTH07`        DECIMAL(20,6),
    `MTH08`        DECIMAL(20,6),
    `MTH09`        DECIMAL(20,6),
    `MTH10`        DECIMAL(20,6),
    `MTH11`        DECIMAL(20,6),
    `MTH12`        DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTH01DESC`    VARCHAR(100),
    `MTH02DESC`    VARCHAR(100),
    `MTH03DESC`    VARCHAR(100),
    `MTH04DESC`    VARCHAR(100),
    `MTH05DESC`    VARCHAR(100),
    `MTH06DESC`    VARCHAR(100),
    `MTH07DESC`    VARCHAR(100),
    `MTH08DESC`    VARCHAR(100),
    `MTH09DESC`    VARCHAR(100),
    `MTH10DESC`    VARCHAR(100),
    `MTH11DESC`    VARCHAR(100),
    `MTH12DESC`    VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;



      INSERT INTO STATEMENT_TEMP2 (COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT, GLDEBIT_O, GLCREDIT_O)
        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO CREDITOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount) * -1)),
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)))),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,SUM(CI.amount),0)),
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE)))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT <> 'D' AND  C.DOCTYPE = 'S' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE <= pi_date_to)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'S'           AND
                  JE.SLACCTNO >= v_creditor_fr  AND
                  JE.SLACCTNO <= v_creditor_to  AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  <= pi_date_to    AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO CREDITOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,SUM(YI.amount),0 )),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))))),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,0,SUM(YI.amount) * 1)),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (PAYMENTS Y CROSS JOIN PAYMENTINVOICES YI)
		                      ON ( Y.COMPANY = JE.COMPANY AND Y.BRANCHCODE = JE.BRANCH AND Y.DOCSTAT <> 'D' AND  Y.DOCTYPE = 'S' AND
                               YI.COMPANY = JE.COMPANY AND YI.BRANCH = JE.BRANCH AND YI.DOCNO = Y.DOCNO AND
                               JE.slacctno = YI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', YI.REFNO,
                          MID(concat(YI.REFNO,'/'), 1,locate('/',concat(YI.REFNO,'/'),1) + (locate('/',concat(YI.REFNO,'/'),1)-
                          locate('/',concat(YI.REFNO,'/'),locate('/',concat(YI.REFNO,'/'),1)) -1))) AND Y.DOCDATE <= pi_date_to)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'S'           AND
                  JE.SLACCTNO >= v_creditor_fr  AND
                  JE.SLACCTNO <= v_creditor_to  AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  <= pi_date_to    AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO


            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO CREDITOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),

               IF(pi_currencytype = 0, SUM(JVI.DEBIT), IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.DEBIT_FC),SUM(JVI.DEBIT))),
               IF(pi_currencytype = 0, SUM(JVI.CREDIT),IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.CREDIT_FC),SUM(JVI.CREDIT)))

            FROM JOURNALENTRYITEMS JE

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH  AND JVI.COMPANY = JV.COMPANY AND JV.SBO_POST_FLAG = 1 AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'S' AND JVI.ITEMNO = JE.SLACCTNO AND
                              JV.DOCDATE <= pi_date_to AND JE.DOCNO = if(JE.DOCTYPE <> 'JV', JVI.REFNO,
                          MID(concat(JVI.REFNO,'/'), 1,locate('/',concat(JVI.REFNO,'/'),1) + (locate('/',concat(JVI.REFNO,'/'),1)-
                          locate('/',concat(JVI.REFNO,'/'),locate('/',concat(JVI.REFNO,'/'),1)) -1)))  )
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.SLTYPE   = 'S'           AND
                  JE.SLACCTNO >= v_creditor_fr  AND
                  JE.SLACCTNO <= v_creditor_to  AND
                  JE.DOCDATE  <= pi_date_to    AND
                  JVI.ITEMNO = JE.SLACCTNO    AND
                  JVI.REFNO LIKE CONCAT(JE.DOCNO,if(JE.DOCTYPE <> 'JV','','/%')) AND
                  JVI.ITEMTYPE = 'S'
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION


        SELECT P.COMPANY, P.BRANCHCODE, 'PV', 'B' as LINETYPE, P.BPCODE, P.DOCDATE, null,
               P.docno, 'PAYMENT TO CREDITORS', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM PAYMENTS P
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN PAYMENTINVOICES YI)
                       ON (YI.COMPANY = P.COMPANY AND YI.BRANCH = P.BRANCHCODE AND YI.REFNO = P.DOCNO AND
                           J.COMPANY = YI.COMPANY AND J.BRANCH = YI.BRANCH AND J.DOCTYPE = 'PY' AND J.DOCNO = YI.DOCNO AND
                           J.SLTYPE = 'S' AND J.ISDEBIT = 0 AND J.DOCDATE <= pi_date_to)
                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = P.COMPANY AND JE.BRANCH = P.BRANCHCODE AND JE.DOCNO = P.DOCNO AND
                                                        JE.SLTYPE = 'S' AND JE.SLACCTNO = P.BPCODE AND JE.ISDEBIT = 1
        WHERE P.COMPANY       =  pi_company   AND
              P.BRANCHCODE    =  pi_branch    AND
              P.SBO_POST_FLAG = 1             AND
              P.BPCODE        >=  v_creditor_fr AND
              P.BPCODE        <=  v_creditor_to AND
              P.COLLFOR       <> 'SI'         AND
              P.DOCTYPE       = 'S'           AND
              P.DOCSTAT       <> 'D'          AND
              P.DOCDATE       <= pi_date_to
        GROUP BY P.BPCODE, P.DOCNO

        UNION


         SELECT C.COMPANY, C.BRANCHCODE, 'PY', 'B' as LINETYPE, C.BPCODE, C.DOCDATE, null,
               C.docno, 'PAYMENT COLLECTED', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM COLLECTIONS C
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN PAYMENTINVOICES YI)
                       ON (YI.COMPANY = C.COMPANY AND YI.BRANCH = C.BRANCHCODE AND YI.REFNO = C.DOCNO AND
                           J.COMPANY = YI.COMPANY AND J.BRANCH = YI.BRANCH AND J.DOCTYPE = 'PY' AND J.DOCNO = YI.DOCNO AND
                           J.SLTYPE = 'S' AND J.ISDEBIT = 1 AND J.DOCDATE <= pi_date_to)

                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = C.COMPANY AND JE.BRANCH = C.BRANCHCODE AND JE.DOCNO = C.DOCNO AND
                                                        JE.SLTYPE = 'S' AND JE.SLACCTNO = C.BPCODE AND JE.ISDEBIT = 0
        WHERE C.COMPANY       =  pi_company   AND
              C.BRANCHCODE    =  pi_branch    AND
              C.SBO_POST_FLAG = 1             AND
              C.BPCODE        >=  v_creditor_fr AND
              C.BPCODE        <=  v_creditor_to AND
              C.COLLFOR       <> 'SI'         AND
              C.DOCTYPE       = 'S'           AND
              C.DOCSTAT       <> 'D'          AND
              C.DOCDATE       <= pi_date_to
        GROUP BY C.BPCODE, C.DOCNO

        UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'B' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO CREDITOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(YI.amount * P.CURRENCYRATE) is null,0,sum(YI.amount * P.CURRENCYRATE)),0),
	             IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(YI.amount) is null,0,sum(YI.amount)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(YI.amount * P.CURRENCYRATE) is null,0,sum(YI.amount * P.CURRENCYRATE)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(YI.amount * P.CURRENCYRATE) is null,0,sum(YI.amount * P.CURRENCYRATE)))* -1),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC * -1) - IF(sum(YI.amount) is null,0,sum(YI.amount)))* -1),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(YI.amount * P.CURRENCYRATE) is null,0,sum(YI.amount * P.CURRENCYRATE)))* -1))),
               0,0
            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (PAYMENTS P CROSS JOIN PAYMENTINVOICES YI)
		                      ON ( P.COMPANY = JE.COMPANY AND P.BRANCHCODE = JE.BRANCH AND P.DOCSTAT = 'S' AND
                               YI.COMPANY = JE.COMPANY AND YI.BRANCH = JE.BRANCH AND YI.DOCNO = P.DOCNO AND
                               JE.slacctno = YI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', YI.REFNO,
                          MID(concat(YI.REFNO,'/'), 1,locate('/',concat(YI.REFNO,'/'),1) + (locate('/',concat(YI.REFNO,'/'),1)-
                          locate('/',concat(YI.REFNO,'/'),locate('/',concat(YI.REFNO,'/'),1)) -1))) AND P.DOCDATE <= pi_date_to)


                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'S')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'S'           AND
                  JE.SLACCTNO >= v_creditor_fr  AND
                  JE.SLACCTNO <= v_creditor_to  AND
                  JE.ISDEBIT  = 0             AND
                  JE.DOCDATE  <= pi_date_to    AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

        UNION

        SELECT AP.COMPANY, AP.BRANCH, 'ACM', 'B' as LINETYPE, AP.BPCODE, AP.DOCDATE, AP.DOCDUEDATE, AP.DOCNO, 'CREDIT MEMO', '',
               0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AP.DUEAMOUNT * AP.CURRENCYRATE),
               IF(v_localcurrency <> AP.CURRENCY, JE.GLCREDIT_FC - AP.DUEAMOUNT, JE.GLCREDIT - AP.DUEAMOUNT)),
               0
            FROM APCREDITMEMOS AP
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AP.COMPANY AND JE.BRANCH = AP.BRANCH AND
                                                      JE.DOCTYPE = 'ACM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AP.DOCNO,
                 APCREDITMEMOITEMS API
            WHERE AP.COMPANY = API.COMPANY AND
                  AP.BRANCH  = API.BRANCH AND
                  AP.DOCID   = API.DOCID AND
                  AP.COMPANY = pi_company AND
                  AP.BRANCH  = pi_branch AND
                  AP.BPCODE >= v_creditor_fr AND
                  AP.BPCODE <= v_creditor_to AND
                  AP.DOCDATE <= pi_date_to AND
                  API.BASETYPE = 'APINVOICE' AND
                  JE.DOCNO = AP.DOCNO
            GROUP BY AP.DOCNO

        UNION

        SELECT AP.COMPANY, AP.BRANCH, 'AP', 'B' as LINETYPE, AP.BPCODE, JE.DOCDATE, JE.DOCDUEDATE, API.BASEDOCNO, '', '',
               0,0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AP.DUEAMOUNT * AP.CURRENCYRATE),
               IF(v_localcurrency <> AP.CURRENCY, JE.GLCREDIT_FC - AP.DUEAMOUNT, JE.GLCREDIT - AP.DUEAMOUNT))
            FROM APCREDITMEMOS AP
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AP.COMPANY AND JE.BRANCH = AP.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AP.DOCNO,
                 APCREDITMEMOITEMS API
            WHERE AP.COMPANY = API.COMPANY AND
                  AP.BRANCH  = API.BRANCH AND
                  AP.DOCID   = API.DOCID AND
                  AP.COMPANY = pi_company AND
                  AP.BRANCH  = pi_branch AND
                  AP.BPCODE >= v_creditor_fr AND
                  AP.BPCODE <= v_creditor_to AND
                  AP.DOCDATE <= pi_date_to AND
                  API.BASETYPE = 'APINVOICE' AND
                  JE.DOCNO = AP.DOCNO
            GROUP BY AP.DOCNO;





        INSERT INTO STATEMENT_TEMP4 (COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT)
        SELECT COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2,
            IF((GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)) > 0, (GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)), 0),
            IF((GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)) > 0,  (GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)), 0)
          FROM STATEMENT_TEMP2
          GROUP BY BPCODE, DOCTYPE, DOCNO;

       DELETE FROM STATEMENT_TEMP4 WHERE GLDEBIT = 0 AND GLCREDIT = 0;

       IF pi_rpttype = 0 THEN

         INSERT INTO AGING_TEMP (COMPANY, BRANCH, BPCODE, DOCTYPE, DOCNO, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12, OPENCREDIT,
                             MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC)
         SELECT COMPANY, BRANCH, BPCODE, DOCTYPE, DOCNO,
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth01,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth02,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth03,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth04,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth05,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') <=  DATE_FORMAT(v_mth06,'%Y%m'), GLCREDIT, 0),
                0,
                0,
                0,
                0,
                0,
                0,
                GLDEBIT * -1,
                v_mth01desc,
                v_mth02desc,
                v_mth03desc,
                v_mth04desc,
                v_mth05desc,
                v_mth06desc,
                v_mth07desc,
                v_mth08desc,
                v_mth09desc,
                v_mth10desc,
                v_mth11desc,
                v_mth12desc
             FROM STATEMENT_TEMP4;

       ELSE

         INSERT INTO AGING_TEMP (COMPANY, BRANCH, BPCODE, DOCTYPE, DOCNO, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12, OPENCREDIT,
                             MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC)
         SELECT COMPANY, BRANCH, BPCODE, DOCTYPE, DOCNO,
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth01,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth02,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth03,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth04,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth05,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth06,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth07,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth08,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth09,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth10,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth11,'%Y%m'), GLCREDIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') <=  DATE_FORMAT(v_mth12,'%Y%m'),GLCREDIT, 0),
                GLDEBIT * -1,
                v_mth01desc,
                v_mth02desc,
                v_mth03desc,
                v_mth04desc,
                v_mth05desc,
                v_mth06desc,
                v_mth07desc,
                v_mth08desc,
                v_mth09desc,
                v_mth10desc,
                v_mth11desc,
                v_mth12desc
             FROM STATEMENT_TEMP4  GROUP BY BPCODE, DOCTYPE, DOCNO;

       END IF;


       SELECT UPPER(c.COMPANYNAME) as COMPANY,
              UPPER(concat(e.BARANGAY,' ', e.STREET,' ', e.ZIP, ' ', e.CITY, ' ',(select pr.PROVINCENAME from  provinces pr where pr.province = e.province), ', ', (SELECT cct.COUNTRYNAME FROM COUNTRIES cct WHERE e.country = cct.country ))) as BRANCHCODE,
 	            SU.SUPPNO,
	            SU.SUPPNAME,
	            SU.PHONE1,
	            SU.FAX,
              SU.CURRENCY,
              c.CURRENCY as LOCALCUR,
              CR.CURRENCYNAME,
              CR2.CURRENCYNAME AS LOCALCURRENCY,
	            a.STREET,
	            a.BARANGAY,
	            a.CITY,
	            a.ZIP,
            	p.PROVINCENAME,
	            ct.COUNTRYNAME,
	            CC.NAME,
              e.U_U_TELNO,
              e.U_U_FAXNO,
              e.U_U_EMAIL,
              pt.PAYMENTTERMNAME,
              ST.LINETYPE, ST.BPCODE, ST.DOCDATE, ST.DOCDUEDATE, ST.DOCNO, ST.DESCRIPTION, ST.DESCRIPTION2,
              ST.GLDEBIT,
              ST.GLCREDIT,
              AP.MTH01, AP.MTH02, AP.MTH03, AP.MTH04, AP.MTH05, AP.MTH06, AP.MTH07, AP.MTH08, AP.MTH09, AP.MTH10, AP.MTH11, AP.MTH12, AP.OPENCREDIT,
              AP.MTH01DESC, AP.MTH02DESC, AP.MTH03DESC, AP.MTH04DESC, AP.MTH05DESC, AP.MTH06DESC, AP.MTH07DESC, AP.MTH08DESC, AP.MTH09DESC,
              AP.MTH10DESC, AP.MTH11DESC, AP.MTH12DESC
           FROM STATEMENT_TEMP4 ST
              LEFT OUTER JOIN SUPPLIERS SU        ON SU.SUPPNO = ST.BPCODE
              LEFT OUTER JOIN CURRENCIES CR       ON CR.CURRENCY = SU.CURRENCY
              LEFT OUTER JOIN BRANCHES e          ON ST.BRANCH = e.BRANCHCODE
              LEFT OUTER JOIN COMPANIES c         ON c.COMPANYCODE = ST.COMPANY
              LEFT OUTER JOIN CURRENCIES CR2      ON CR2.CURRENCY = C.CURRENCY
              LEFT OUTER JOIN ADDRESSES a         ON a.COMPANY = ST.company and a.BRANCH = ST.branch and
                                                     a.REFID = SU.SUPPNO and a.REFTYPE = 'SUPPLIER' and a.ADDRESSTYPE = 0 and
                                                     SU.DFLTBILLTO = a.ADDRESSNAME
              LEFT OUTER JOIN COUNTRIES ct        ON a.COUNTRY = ct.COUNTRY
              LEFT OUTER JOIN PROVINCES p         ON a.province = p.province and ct.country = p.country
              LEFT OUTER JOIN SUPPLIERCONTACTS cc ON cc.COMPANY = ST.company  and cc.BRANCH = ST.branch and
                                                     cc.SUPPNO = SU.SUPPNO and cc.CONTACTPERSON = SU.DFLTCONTACTPERSON
              LEFT OUTER JOIN PAYMENTTERMS pt     ON pt.PAYMENTTERM = SU.PAYMENTTERM
              LEFT OUTER JOIN AGING_TEMP AP      ON AP.COMPANY = ST.COMPANY AND AP.BRANCH = ST.BRANCH AND AP.DOCTYPE = ST.DOCTYPE AND AP.DOCNO = ST.DOCNO AND AP.BPCODE = ST.BPCODE
              ORDER BY ST.BPCODE, ST.DOCDATE, ST.DOCNO;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `creditorledger_st`
--

DROP PROCEDURE IF EXISTS `creditorledger_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `creditorledger_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_bpno_fr VARCHAR(30), IN pi_bpno_to VARCHAR(30),
                                   IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_currency INT, IN pi_exzero INT, IN pi_newpage INT)
BEGIN

DECLARE v_bpno_fr VARCHAR(30);
DECLARE v_bpno_to VARCHAR(30);
DECLARE v_selectall   INT;
DECLARE v_now        VARCHAR(30);

SET v_now = CAST(NOW() as char(30));

  IF pi_bpno_fr is null THEN
    SET v_bpno_fr = '';
  ELSE
    SET v_bpno_fr = pi_bpno_fr;
  END IF;

  IF pi_bpno_to is null THEN
    SET v_bpno_to = '';
  ELSE
    SET v_bpno_to = pi_bpno_to;
  END IF;

  IF v_bpno_fr = '' and v_bpno_to = '' THEN
     SET v_selectall = 1;
     SET v_bpno_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZ';
  ELSEIF v_bpno_fr > '' and v_bpno_to = '' THEN
    SET v_selectall = 0;
    SET v_bpno_to = v_bpno_fr;
  ELSEIF v_bpno_fr = '' and v_bpno_to > '' THEN
    SET v_selectall = 0;
    SET v_bpno_fr = v_bpno_to;
  END IF;


  DROP TEMPORARY TABLE IF EXISTS LEDGER_TEMP ;
  CREATE TEMPORARY TABLE `LEDGER_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `CURRENCY`     VARCHAR(30)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2,
                                DESCRIPTION3, GLDEBIT, GLCREDIT, CURRENCY)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, 'A' , JE.DOCDATE, JE.DOCTYPE, JE.DOCNO, JE.SLACCTNO, JE.SLACCTNAME, '',
               CASE WHEN JE.DOCTYPE = 'AR'  THEN 'SALES/DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM'  THEN 'ACCOUNT CREDITED'
                    WHEN JE.DOCTYPE = 'AP'  THEN 'PURCHASE/CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'ACM' THEN 'ACCOUNT DEBITED'
                    WHEN JE.DOCTYPE = 'PY'  THEN 'PAYMENT FOR ACCOUNT'
                    WHEN JE.DOCTYPE = 'RC'  THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'DT'  THEN 'AR DOWNPAYMENT'
                    WHEN JE.DOCTYPE = 'JV'  THEN IF(JE.GLDEBIT > 0, 'ACCOUNT DEBITED', 'ACCOUNT CREDITED')
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.BPREFNO
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPREFNO
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPREFNO
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPREFNO
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.REFNO
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.REFNO
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPREFNO
                    WHEN JE.DOCTYPE = 'JV'  THEN JV.REFERENCE1
                    ELSE '' END,
                IF(JE.DOCTYPE = 'JV', IF(JV.REFERENCE2 > '', JV.REFERENCE2, ''),''),
                IF(pi_currency = 0, JE.GLDEBIT, IF(JE.CURRENCY <> CO.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
                IF(pi_currency = 0, JE.GLCREDIT, IF(JE.CURRENCY <> CO.CURRENCY, JE.GLCREDIT_FC, JE.GLCREDIT)),
                IF(pi_currency = 0, CO.CURRENCY, JE.CURRENCY)
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN ARINVOICES AR            ON AR.COMPANY      = pi_company  AND AR.BRANCH      = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','')       AND AR.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APINVOICES AP            ON AP.COMPANY      = pi_company  AND AP.BRANCH      = pi_branch  AND AP.OBJECTCODE = IF(JE.DOCTYPE = 'AP','APINVOICE','')       AND AP.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN ARCREDITMEMOS CM         ON CM.COMPANY      = pi_company  AND CM.BRANCH      = pi_branch  AND CM.OBJECTCODE = IF(JE.DOCTYPE = 'CM','ARCREDITMEMO','')    AND CM.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APCREDITMEMOS ACM        ON ACM.COMPANY     = pi_company  AND ACM.BRANCH     = pi_branch  AND ACM.OBJECTCODE = IF(JE.DOCTYPE = 'ACM','APCREDITMEMO','')   AND ACM.DOCNO = JE.DOCNO
                LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT ON DT.COMPANY      = pi_company  AND DT.BRANCH      = pi_branch  AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','')   AND DT.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN PAYMENTS PY              ON PY.COMPANY      = pi_company  AND PY.BRANCHCODE  = pi_branch  AND PY.OBJECTCODE = IF(JE.DOCTYPE = 'PY','OUTGOINGPAYMENT','') AND PY.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN COLLECTIONS RC           ON RC.COMPANY      = pi_company  AND RC.BRANCHCODE  = pi_branch  AND RC.OBJECTCODE = IF(JE.DOCTYPE = 'RC','INCOMINGPAYMENT','') AND RC.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN JOURNALVOUCHERS JV       ON JV.COMPANY      = pi_company  AND JV.BRANCH  = pi_branch      AND JV.OBJECTCODE = IF(JE.DOCTYPE = 'JV','JOURNALVOUCHER','')  AND JV.DOCNO  = JE.DOCNO
            WHERE JE.COMPANY = pi_company  AND
                  JE.BRANCH =  pi_branch   AND
                  JE.SLTYPE  = 'S'         AND
                  JE.SLACCTNO >= v_bpno_fr AND
                  JE.SLACCTNO <= v_bpno_to AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to ;



      INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, GLACCTNO, GLACCTNAME, DESCRIPTION, DESCRIPTION2,
                                DESCRIPTION3, GLDEBIT, GLCREDIT, CURRENCY)
          SELECT CO.COMPANYNAME,
                 BR.BRANCHNAME,
                 'A' AS LINETYPE,
                 SU.SUPPNO,
                 SU.SUPPNAME,
                 '*** Balance B/F ***' as DESCRIPTION,
                 '','',
                 IF(pi_currency = 0,
                 IF(SUM(J.GLDEBIT - J.GLCREDIT) > 0, SUM(J.GLDEBIT - J.GLCREDIT), 0),
                 IF(SU.CURRENCY <> CO.CURRENCY,IF(SUM(J.GLDEBIT_FC - J.GLCREDIT_FC) > 0,SUM(J.GLDEBIT_FC - J.GLCREDIT_FC),0),
                 IF(SUM(J.GLDEBIT - J.GLCREDIT) > 0,SUM(J.GLDEBIT - J.GLCREDIT),0))),
                 IF(pi_currency = 0,
                 IF(SUM(J.GLCREDIT - J.GLDEBIT) > 0, SUM(J.GLCREDIT - J.GLDEBIT), 0),
                 IF(SU.CURRENCY <> CO.CURRENCY,IF(SUM(J.GLCREDIT_FC - J.GLDEBIT_FC) > 0,SUM(J.GLCREDIT_FC - J.GLDEBIT_FC),0),
                 IF(SUM(J.GLCREDIT - J.GLDEBIT) > 0,SUM(J.GLCREDIT - J.GLDEBIT),0))),
                 IF(pi_currency = 0, CO.CURRENCY, SU.CURRENCY)

              FROM SUPPLIERS SU
                  LEFT OUTER JOIN COMPANIES CO ON CO.COMPANYCODE = pi_company
                  LEFT OUTER JOIN BRANCHES  BR ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                  LEFT OUTER JOIN JOURNALENTRYITEMS J ON J.COMPANY = pi_company AND J.BRANCH = pi_branch AND
                                                         J.SLTYPE = 'S' AND J.SLACCTNO = SU.SUPPNO AND J.DOCDATE < pi_date_fr
              WHERE SU.SUPPNO >= v_bpno_fr AND
                    SU.SUPPNO <= v_bpno_to
              GROUP BY SU.SUPPNO;


      IF pi_exzero = 1 THEN

        DELETE FROM LEDGER_TEMP WHERE GLDEBIT = 0 AND  GLCREDIT = 0;

      END IF;

  SELECT * FROM LEDGER_TEMP ORDER BY GLACCTNO, LINETYPE, DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `creditortranslist_st`
--

DROP PROCEDURE IF EXISTS `creditortranslist_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `creditortranslist_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_bpno_fr VARCHAR(30), IN pi_bpno_to VARCHAR(30),
                                   IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_exzero INT, IN pi_newpage INT)
BEGIN

DECLARE v_bpno_fr VARCHAR(30);
DECLARE v_bpno_to VARCHAR(30);
DECLARE v_selectall   INT;
DECLARE v_now        VARCHAR(30);
DECLARE v_loccurrency VARCHAR(30);

SELECT CO.CURRENCY INTO v_loccurrency
  FROM COMPANIES CO WHERE CO.COMPANYCODE  = pi_company;

SET v_now = CAST(NOW() as char(30));

  IF pi_bpno_fr is null THEN
    SET v_bpno_fr = '';
  ELSE
    SET v_bpno_fr = pi_bpno_fr;
  END IF;

  IF pi_bpno_to is null THEN
    SET v_bpno_to = '';
  ELSE
    SET v_bpno_to = pi_bpno_to;
  END IF;

  IF v_bpno_fr = '' and v_bpno_to = '' THEN
     SET v_selectall = 1;
     SET v_bpno_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZ';
  ELSEIF v_bpno_fr > '' and v_bpno_to = '' THEN
    SET v_selectall = 0;
    SET v_bpno_to = v_bpno_fr;
  ELSEIF v_bpno_fr = '' and v_bpno_to > '' THEN
    SET v_selectall = 0;
    SET v_bpno_fr = v_bpno_to;
  END IF;


  DROP TEMPORARY TABLE IF EXISTS APTRANSLIST_TEMP ;
  CREATE TEMPORARY TABLE `APTRANSLIST_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `AMOUNT_FC`      DECIMAL(20,6),
    `AMOUNT`     DECIMAL(20,6),
    `CURRENCY`     VARCHAR(30),
    `CURRENCYRATE` DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO APTRANSLIST_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2,
                                    DESCRIPTION3, AMOUNT_FC, AMOUNT, CURRENCY, CURRENCYRATE)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, 'A' , JE.DOCDATE, JE.DOCTYPE, JE.DOCNO, JE.SLACCTNO, JE.SLACCTNAME, '',
               CASE WHEN JE.DOCTYPE = 'AR'  THEN 'SALES/DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM'  THEN 'ACCOUNT CREDITED'
                    WHEN JE.DOCTYPE = 'AP'  THEN 'PURCHASE/CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'ACM' THEN 'ACCOUNT DEBITED'
                    WHEN JE.DOCTYPE = 'PY'  THEN 'PAYMENT FOR ACCOUNT'
                    WHEN JE.DOCTYPE = 'RC'  THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'DT'  THEN 'AR DOWNPAYMENT'
                    WHEN JE.DOCTYPE = 'JV'  THEN IF(JE.GLDEBIT > 0, 'ACCOUNT DEBITED', 'ACCOUNT CREDITED')
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.BPREFNO
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPREFNO
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPREFNO
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPREFNO
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.REFNO
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.REFNO
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPREFNO
                    WHEN JE.DOCTYPE = 'JV'  THEN JV.REFERENCE1
                    ELSE '' END,
                IF(JE.DOCTYPE = 'JV', IF(JV.REFERENCE2 > '', JV.REFERENCE2, ''),''),
                IF(JE.CURRENCY <> CO.CURRENCY, IF(JE.GLDEBIT_FC > 0, JE.GLDEBIT_FC, JE.GLCREDIT_FC * -1),0),
                IF(JE.GLDEBIT > 0, JE.GLDEBIT, JE.GLCREDIT * -1),
                JE.CURRENCY, JE.CURRENCYRATE
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN ARINVOICES AR            ON AR.COMPANY      = pi_company  AND AR.BRANCH      = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','')       AND AR.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APINVOICES AP            ON AP.COMPANY      = pi_company  AND AP.BRANCH      = pi_branch  AND AP.OBJECTCODE = IF(JE.DOCTYPE = 'AP','APINVOICE','')       AND AP.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN ARCREDITMEMOS CM         ON CM.COMPANY      = pi_company  AND CM.BRANCH      = pi_branch  AND CM.OBJECTCODE = IF(JE.DOCTYPE = 'CM','ARCREDITMEMO','')    AND CM.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APCREDITMEMOS ACM        ON ACM.COMPANY     = pi_company  AND ACM.BRANCH     = pi_branch  AND ACM.OBJECTCODE = IF(JE.DOCTYPE = 'ACM','APCREDITMEMO','')   AND ACM.DOCNO = JE.DOCNO
                LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT ON DT.COMPANY      = pi_company  AND DT.BRANCH      = pi_branch  AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','')   AND DT.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN PAYMENTS PY              ON PY.COMPANY      = pi_company  AND PY.BRANCHCODE  = pi_branch  AND PY.OBJECTCODE = IF(JE.DOCTYPE = 'PY','OUTGOINGPAYMENT','') AND PY.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN COLLECTIONS RC           ON RC.COMPANY      = pi_company  AND RC.BRANCHCODE  = pi_branch  AND RC.OBJECTCODE = IF(JE.DOCTYPE = 'RC','INCOMINGPAYMENT','') AND RC.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN JOURNALVOUCHERS JV       ON JV.COMPANY      = pi_company  AND JV.BRANCH  = pi_branch      AND JV.OBJECTCODE = IF(JE.DOCTYPE = 'JV','JOURNALVOUCHER','')  AND JV.DOCNO  = JE.DOCNO
            WHERE JE.COMPANY = pi_company  AND
                  JE.BRANCH =  pi_branch   AND
                  JE.SLTYPE  = 'S'         AND
                  JE.SLACCTNO >= v_bpno_fr AND
                  JE.SLACCTNO <= v_bpno_to AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to ;



  SELECT COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2,
                                DESCRIPTION3, AMOUNT_FC, AMOUNT, CURRENCY, CURRENCYRATE, v_loccurrency AS LCCURRENCY
       FROM APTRANSLIST_TEMP ORDER BY GLACCTNO, LINETYPE, DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_monthly`
--

DROP PROCEDURE IF EXISTS `csv_monthly`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_monthly`(IN pi_company VARCHAR(30),
                              IN pi_branch VARCHAR(30),
                              IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `date1` DATE NULL,
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `month1` NUMERIC(18,6) NULL default '0',
    `month2` NUMERIC(18,6) NULL default '0',
    `month3` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `date1`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `month1`,
    `month2`,
    `month3`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       date(pi_date1) as date1,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month1,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month2,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month3,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
   where a.company = pi_company
         and a.branch = pi_branch
         and DATE_FORMAT(b.u_date_from, '%y-%m') between DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
                                                 and DATE_FORMAT(date(pi_date1), '%y-%m')
   group by b.u_date_from, a.u_itemcode;
select
    a.Company,
    a.CompanyName,
    a.CompanyType,
    a.Branch,
    a.BranchName,
    a.date1,
    a.itemcode,
    a.itemdesc,
    (date(pi_date1)- interval 2 month) as month1_name,
    (date(pi_date1)- interval 1 month) as month2_name,
    date(pi_date1) as month3_name,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and DATE_FORMAT(u_date, '%y-%m') between DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
                                                 and DATE_FORMAT(date(pi_date1), '%y-%m')) as TARGET_LTRS_TOTAL,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')) as TARGET_LTRS_MONTH1,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')) as TARGET_LTRS_MONTH2,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')) as TARGET_LTRS_MONTH3,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m') group by a.Branch) as month1_TOTAL,
    (sum(a.month1)/
    (Select
       sum(a.u_sold_liters) as month1
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m') group by a.Branch))*100 as month1_SALESMIX,
    sum(a.month1) as month1,
    sum(a.month1) - (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')) as month1_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m') group by a.Branch) as month2_TOTAL,
    (sum(a.month2)/
    (Select
       sum(a.u_sold_liters) as month2
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m') group by a.Branch))*100 as month2_SALESMIX,
    sum(a.month2) as month2,
    sum(a.month2) - (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')) as month2_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m') group by a.Branch) as month3_TOTAL,
    (sum(a.month3)/
    (Select
       sum(a.u_sold_liters) as month3
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m') group by a.Branch))*100 as month3_SALESMIX,
    sum(a.month3) as month3,
    sum(a.month3) - (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')) as month3_VARIANCE
    from csv_sum a
 group by itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_monthly_area`
--

DROP PROCEDURE IF EXISTS `csv_monthly_area`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_monthly_area`(IN pi_company VARCHAR(30),
                              IN pi_branchgroup VARCHAR(30),
                              IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `BranchGroup` varchar(30) NULL default '',
    `BranchGroupName` varchar(200) NULL default '',
    `date1` DATE NULL,
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `month1` NUMERIC(18,6) NULL default '0',
    `month2` NUMERIC(18,6) NULL default '0',
    `month3` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `Branchgroup`,
    `BranchgroupName`,
    `date1`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `month1`,
    `month2`,
    `month3`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       area.branchgroup,
       upper(concat(area.branchgroup,' - ',area.branchgroupname)) as BranchGroupName,
       date(pi_date1) as date1,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month1,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month2,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month3,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
       left outer join branchgroups area on area.branchgroup = br.branchgroup
   where a.company = pi_company
         and area.branchgroup = pi_branchgroup
         and DATE_FORMAT(b.u_date_from, '%y-%m') between DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
                                                 and DATE_FORMAT(date(pi_date1), '%y-%m')
   group by b.u_date_from, a.u_itemcode;
select
    a.Company,
    a.CompanyName,
    a.CompanyType,
    a.BranchGroup,
    a.BranchGroupName,
    a.date1,
    a.itemcode,
    a.itemdesc,
    (date(pi_date1)- interval 2 month) as month1_name,
    (date(pi_date1)- interval 1 month) as month2_name,
    date(pi_date1) as month3_name,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and DATE_FORMAT(t0.u_date, '%y-%m') between DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
                                                 and DATE_FORMAT(date(pi_date1), '%y-%m')) as TARGET_LTRS_TOTAL,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')) as TARGET_LTRS_MONTH1,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')) as TARGET_LTRS_MONTH2,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')) as TARGET_LTRS_MONTH3,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m') group by t2.branchgroup) as month1_TOTAL,
    (sum(a.month1)/
    (Select
       sum(t0.u_sold_liters) as month1
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m') group by t2.branchgroup))*100 as month1_SALESMIX,
    sum(a.month1) as month1,
    sum(a.month1) - (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')) as month1_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m') group by t2.branchgroup) as month2_TOTAL,
    (sum(a.month2)/
    (Select
       sum(t0.u_sold_liters) as month2
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m') group by t2.branchgroup))*100 as month2_SALESMIX,
    sum(a.month2) as month2,
    sum(a.month2) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')) as month2_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m') group by t2.branchgroup) as month3_TOTAL,
    (sum(a.month3)/
    (Select
       sum(t0.u_sold_liters) as month3
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m') group by t2.branchgroup))*100 as month3_SALESMIX,
    sum(a.month3) as month3,
    sum(a.month3) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')) as month3_VARIANCE
    from csv_sum a
 group by itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_monthly_area_ver2`
--

DROP PROCEDURE IF EXISTS `csv_monthly_area_ver2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_monthly_area_ver2`(IN pi_company VARCHAR(30),
                              IN pi_branchgroup VARCHAR(30),
                              IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `BranchGroup` varchar(30) NULL default '',
    `BranchGroupName` varchar(200) NULL default '',
    `date1` DATE NULL,
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `month1` NUMERIC(18,6) NULL default '0',
    `month2` NUMERIC(18,6) NULL default '0',
    `month3` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `Branchgroup`,
    `BranchgroupName`,
    `date1`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `month1`,
    `month2`,
    `month3`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       area.branchgroup,
       upper(concat(area.branchgroup,' - ',area.branchgroupname)) as BranchGroupName,
       date(pi_date1) as date1,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month1,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month2,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month3,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
       left outer join branchgroups area on area.branchgroup = br.branchgroup
   where a.company = pi_company
         and area.branchgroup = pi_branchgroup
         and DATE_FORMAT(b.u_date_from, '%y-%m') between DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
                                                 and DATE_FORMAT(date(pi_date1), '%y-%m')
   group by a.Branch, b.u_date_from, a.u_itemcode;
select
    a.Company,
    a.CompanyName,
    a.CompanyType,
    a.Branch,
    a.BranchName,
    a.BranchGroup,
    a.BranchGroupName,
    a.date1,
    a.itemcode,
    a.itemdesc,
    (date(pi_date1)- interval 2 month) as month1_name,
    (date(pi_date1)- interval 1 month) as month2_name,
    date(pi_date1) as month3_name,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and DATE_FORMAT(t0.u_date, '%y-%m') between DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
                                                 and DATE_FORMAT(date(pi_date1), '%y-%m')) as TARGET_LTRS_TOTAL,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')) as TARGET_LTRS_MONTH1,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')) as TARGET_LTRS_MONTH2,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')) as TARGET_LTRS_MONTH3,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m') group by t0.branch) as month1_TOTAL,
    (sum(a.month1)/
    (Select
       sum(t0.u_sold_liters) as month1
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m') group by t0.branch))*100 as month1_SALESMIX,
    sum(a.month1) as month1,
    sum(a.month1) - (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where a.branch = t0.u_branchcode
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')) as month1_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m') group by t0.branch) as month2_TOTAL,
    (sum(a.month2)/
    (Select
       sum(t0.u_sold_liters) as month2
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m') group by t0.branch))*100 as month2_SALESMIX,
    sum(a.month2) as month2,
    sum(a.month2) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where a.branch = t0.u_branchcode                               
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')) as month2_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m') group by t0.branch) as month3_TOTAL,
    (sum(a.month3)/
    (Select
       sum(t0.u_sold_liters) as month3
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m') group by t0.branch))*100 as month3_SALESMIX,
    sum(a.month3) as month3,
    sum(a.month3) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where a.branch = t0.u_branchcode
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')) as month3_VARIANCE
    from csv_sum a
 group by a.Branch, a.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_monthly_geo`
--

DROP PROCEDURE IF EXISTS `csv_monthly_geo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_monthly_geo`(IN pi_company VARCHAR(30),
                              IN pi_island VARCHAR(30),
                              IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `BranchGroup` varchar(30) NULL default '',
    `BranchGroupName` varchar(200) NULL default '',
    `Island` varchar(30) NULL default '',
    `date1` DATE NULL,
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `month1` NUMERIC(18,6) NULL default '0',
    `month2` NUMERIC(18,6) NULL default '0',
    `month3` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `Branchgroup`,
    `BranchgroupName`,
    `Island`,
    `date1`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `month1`,
    `month2`,
    `month3`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       area.branchgroup,
       upper(concat(area.branchgroup,' - ',area.branchgroupname)) as BranchGroupName,
       area.u_island as Island,
       date(pi_date1) as date1,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month1,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month2,
       case when DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as month3,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
       left outer join branchgroups area on area.branchgroup = br.branchgroup
   where a.company = pi_company
         and area.u_island = pi_Island
         and DATE_FORMAT(b.u_date_from, '%y-%m') between DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
                                                 and DATE_FORMAT(date(pi_date1), '%y-%m')
   group by a.Branch, b.u_date_from, a.u_itemcode;
select
    a.Company,
    a.CompanyName,
    a.CompanyType,
    a.Branch,
    a.BranchName,
    a.BranchGroup,
    a.BranchGroupName,
    a.Island,
    a.date1,
    a.itemcode,
    a.itemdesc,
    (date(pi_date1)- interval 2 month) as month1_name,
    (date(pi_date1)- interval 1 month) as month2_name,
    date(pi_date1) as month3_name,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and DATE_FORMAT(t0.u_date, '%y-%m') between DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')
                                                 and DATE_FORMAT(date(pi_date1), '%y-%m')) as TARGET_LTRS_TOTAL,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')) as TARGET_LTRS_MONTH1,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')) as TARGET_LTRS_MONTH2,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')) as TARGET_LTRS_MONTH3,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m') group by t0.branch) as month1_TOTAL,
    (sum(a.month1)/
    (Select
       sum(t0.u_sold_liters) as month1
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m') group by t0.branch))*100 as month1_SALESMIX,
    sum(a.month1) as month1,
    sum(a.month1) - (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where a.branch = t0.u_branchcode
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 2 month, '%y-%m')) as month1_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m') group by t0.branch) as month2_TOTAL,
    (sum(a.month2)/
    (Select
       sum(t0.u_sold_liters) as month2
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m') group by t0.branch))*100 as month2_SALESMIX,
    sum(a.month2) as month2,
    sum(a.month2) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where a.branch = t0.u_branchcode                               
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1)- interval 1 month, '%y-%m')) as month2_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m') group by t0.branch) as month3_TOTAL,
    (sum(a.month3)/
    (Select
       sum(t0.u_sold_liters) as month3
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and DATE_FORMAT(t1.u_date_from, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m') group by t0.branch))*100 as month3_SALESMIX,
    sum(a.month3) as month3,
    sum(a.month3) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where a.branch = t0.u_branchcode
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')) as month3_VARIANCE
    from csv_sum a
 group by a.Branch, a.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_weekly`
--

DROP PROCEDURE IF EXISTS `csv_weekly`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_weekly`(IN pi_company VARCHAR(30),
                              IN pi_branch VARCHAR(30),
                              IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `date1` DATE NULL,
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `day_1_7` NUMERIC(18,6) NULL default '0',
    `day_8_14` NUMERIC(18,6) NULL default '0',
    `day_15_21` NUMERIC(18,6) NULL default '0',
    `day_22_31` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `date1`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `day_1_7`,
    `day_8_14`,
    `day_15_21`,
    `day_22_31`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       date(pi_date1) as date1,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when day(b.u_date_from) between 1 and 7 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_1_7,
       case when day(b.u_date_from) between 8 and 14 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_8_14,
       case when day(b.u_date_from) between 15 and 21 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_15_21,
       case when day(b.u_date_from) between 22 and 31 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_22_31,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
   where a.company = pi_company
         and a.branch = pi_branch
         and DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m')
   group by b.u_date_from, a.u_itemcode;
select
    a.Company,
    a.CompanyName,
    a.CompanyType,
    a.Branch,
    a.BranchName,
    a.date1,
    a.itemcode,
    a.itemdesc,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m')) as TARGET_LTRS_TOTAL,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m')) as TARGET_LTRS_MONTHLY,
    ((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30)*7 as TARGET_LTRS_WEEKLY,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30 as TARGET_LTRS_DAILY,
    ((((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m')
    )/30)*7)/
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))*100) as TARGET_SALESMIX,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',1))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',7)) group by a.Branch) as DAY_1_7_TOTAL,
    (sum(a.day_1_7)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',1))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',7)) group by a.Branch))*100 as DAY_1_7_SALESMIX,
    sum(a.day_1_7) as DAY_1_7,
    sum(a.day_1_7) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30)*7) as DAY_1_7_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',8))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',14)) group by a.Branch) as DAY_8_14_TOTAL,
    (sum(a.day_8_14)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',8))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',14)) group by a.Branch))*100 as DAY_8_14_SALESMIX,
    sum(a.day_8_14) as DAY_8_14,
    sum(a.day_8_14) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30)*7) as DAY_8_14_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',15))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',21)) group by a.Branch) as DAY_15_21_TOTAL,
    (sum(a.day_15_21)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',15))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',21)) group by a.Branch))*100 as DAY_15_21_SALESMIX,
    sum(a.day_15_21) as DAY_15_21,
    sum(a.day_15_21) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30)*7) as DAY_15_21_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',22))
                           and last_day(date(pi_date1)) group by a.Branch)as DAY_22_31_TOTAL,
    (sum(a.day_22_31)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',22))
                           and last_day(date(pi_date1)) group by a.Branch))*100 as DAY_22_31_SALESMIX,
    sum(a.day_22_31) as DAY_22_31,
    sum(a.day_22_31) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and DATE_FORMAT(u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30)*7) as DAY_22_31_VARIANCE
    from csv_sum a
 group by itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_weekly_area`
--

DROP PROCEDURE IF EXISTS `csv_weekly_area`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_weekly_area`(IN pi_company VARCHAR(30),
                              IN pi_branchgroup VARCHAR(30),
                              IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `BranchGroup` varchar(30) NULL default '',
    `BranchGroupName` varchar(200) NULL default '',
    `date1` DATE NULL,
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `day_1_7` NUMERIC(18,6) NULL default '0',
    `day_8_14` NUMERIC(18,6) NULL default '0',
    `day_15_21` NUMERIC(18,6) NULL default '0',
    `day_22_31` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `BranchGroup`,
    `BranchGroupName`,
    `date1`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `day_1_7`,
    `day_8_14`,
    `day_15_21`,
    `day_22_31`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       area.branchgroup,
       upper(concat(area.branchgroup,' - ',area.branchgroupname)) as BranchGroupName,
       date(pi_date1) as date1,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when day(b.u_date_from) between 1 and 7 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_1_7,
       case when day(b.u_date_from) between 8 and 14 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_8_14,
       case when day(b.u_date_from) between 15 and 21 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_15_21,
       case when day(b.u_date_from) between 22 and 31 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_22_31,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
       left outer join branchgroups area on area.branchgroup = br.branchgroup
   where a.company = pi_company
         and area.branchgroup = pi_branchgroup
         and DATE_FORMAT(b.u_date_from, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m')
   group by b.u_date_from, a.u_itemcode;
select
    a.Company,
    a.CompanyName,
    a.CompanyType,
    a.BranchGroup,
    a.BranchGroupName,
    a.date1,
    a.itemcode,
    a.itemdesc,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m')) as TARGET_LTRS_TOTAL,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m')) as TARGET_LTRS_MONTHLY,
    ((select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30)*7 as TARGET_LTRS_WEEKLY,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30 as TARGET_LTRS_DAILY,
    ((((select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m')
    )/30)*7)/
    (select sum(z0.u_amount) from u_targetvolume z0
                          left outer join branches z1 on z1.branchcode = z0.u_branchcode
                          where z1.branchgroup = pi_branchgroup
                                and DATE_FORMAT(z0.u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))*100) as TARGET_SALESMIX,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
       where t0.company = pi_company and t2.branchgroup = pi_branchgroup
       and t1.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',1))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',7)) group by t2.Branchgroup) as DAY_1_7_TOTAL,
    (sum(a.day_1_7)/
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and  t2.branchgroup = pi_branchgroup
         and t1.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',1))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',7)) group by t2.Branchgroup))*100 as DAY_1_7_SALESMIX,
    sum(a.day_1_7) as DAY_1_7,
    sum(a.day_1_7) - (((select sum(t0.u_amount) from u_targetvolume t0
                        left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30)*7) as DAY_1_7_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and t1.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',8))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',14)) group by t2.branchgroup) as DAY_8_14_TOTAL,
    (sum(a.day_8_14)/
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
     left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and t1.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',8))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',14)) group by t2.branchgroup))*100 as DAY_8_14_SALESMIX,
    sum(a.day_8_14) as DAY_8_14,
    sum(a.day_8_14) - (((select sum(t0.u_amount) from u_targetvolume t0
                         left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30)*7) as DAY_8_14_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and t1.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',15))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',21)) group by t2.branchgroup) as DAY_15_21_TOTAL,
    (sum(a.day_15_21)/
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
      left outer join branches t3 on t3.branchcode = t0.branch
     where t0.company = pi_company and t3.branchgroup = pi_branchgroup
         and t1.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',15))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',21)) group by t3.branchgroup))*100 as DAY_15_21_SALESMIX,
    sum(a.day_15_21) as DAY_15_21,
    sum(a.day_15_21) - (((select sum(t0.u_amount) from u_targetvolume t0
                         left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30)*7) as DAY_15_21_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
      left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and t1.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',22))
                           and last_day(date(pi_date1)) group by t2.branchgroup)as DAY_22_31_TOTAL,
    (sum(a.day_22_31)/
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
     left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and t1.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',22))
                           and last_day(date(pi_date1)) group by t2.branchgroup))*100 as DAY_22_31_SALESMIX,
    sum(a.day_22_31) as DAY_22_31,
    sum(a.day_22_31) - (((select sum(t0.u_amount) from u_targetvolume t0
                       left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and DATE_FORMAT(t0.u_date, '%y-%m') = DATE_FORMAT(pi_date1, '%y-%m'))/30)*7) as DAY_22_31_VARIANCE
    from csv_sum a
 group by itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_weekly_area_ver2`
--

DROP PROCEDURE IF EXISTS `csv_weekly_area_ver2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_weekly_area_ver2`(IN pi_company VARCHAR(30),IN pi_branchGroup VARCHAR(30),
                              IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `BranchGroup` varchar(30) NULL default '',
    `BranchGroupName` varchar(200) NULL default '',
    `date1` DATE NULL,
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `day_1_7` NUMERIC(18,6) NULL default '0',
    `day_8_14` NUMERIC(18,6) NULL default '0',
    `day_15_21` NUMERIC(18,6) NULL default '0',
    `day_22_31` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `BranchGroup`,
    `BranchGroupName`,
    `date1`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `day_1_7`,
    `day_8_14`,
    `day_15_21`,
    `day_22_31`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       area.BranchGroup,
       upper(concat(Area.BRANCHGroup,' - ',Area.BRANCHgroupNAME)) as BranchGroupName,
       date(pi_date1) as date1,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when day(b.u_date_from) between 1 and 7 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_1_7,
       case when day(b.u_date_from) between 8 and 14 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_8_14,
       case when day(b.u_date_from) between 15 and 21 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_15_21,
       case when day(b.u_date_from) between 22 and 31 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_22_31,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
        left outer join branchgroups area on area.branchgroup = br.branchgroup
   where a.company = pi_company and area.branchgroup = pi_branchgroup
         and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
         and DATE_FORMAT(pi_date2, '%Y-%m-%d')
   group by a.Branch, b.u_date_from, a.u_itemcode;
select
    t0.Company,
    t0.CompanyName,
    t0.CompanyType,
    t0.Branch,
    t0.BranchName,
    t0.BranchGroup,
    t0.BranchGroupName,
    t0.date1,
    t0.itemcode,
    t0.itemdesc,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d')) as TARGET_LTRS_TOTAL,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d')) as TARGET_LTRS_MONTHLY,
      ((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30)*7 as TARGET_LTRS_WEEKLY,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30 as TARGET_LTRS_DAILY,
    ((((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d')
    )/30)*7)/
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))*100) as TARGET_SALESMIX,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',1))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',7)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch) as DAY_1_7_TOTAL,
    (sum(t0.day_1_7)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',1))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',7)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch))*100 as DAY_1_7_SALESMIX,
    sum(t0.day_1_7) as DAY_1_7,
    sum(t0.day_1_7) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30)*7) as DAY_1_7_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',8))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',14)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch) as DAY_8_14_TOTAL,
    (sum(t0.day_8_14)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',8))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',14)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch))*100 as DAY_8_14_SALESMIX,
    sum(t0.day_8_14) as DAY_8_14,
    sum(t0.day_8_14) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30)*7) as DAY_8_14_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',15))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',21)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch) as DAY_15_21_TOTAL,
    (sum(t0.day_15_21)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',15))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',21)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch))*100 as DAY_15_21_SALESMIX,
    sum(t0.day_15_21) as DAY_15_21,
    sum(t0.day_15_21) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30)*7) as DAY_15_21_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',22))
                           and last_day(date(pi_date1)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch)as DAY_22_31_TOTAL,
    (sum(t0.day_22_31)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',22))
                           and last_day(date(pi_date1)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch))*100 as DAY_22_31_SALESMIX,
    sum(t0.day_22_31) as DAY_22_31,
    sum(t0.day_22_31) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30)*7) as DAY_22_31_VARIANCE
    from csv_sum t0
 group by t0.Branch, t0.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_weekly_geo`
--

DROP PROCEDURE IF EXISTS `csv_weekly_geo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_weekly_geo`(IN pi_company VARCHAR(30),IN pi_island VARCHAR(30),
                              IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `BranchGroup` varchar(30) NULL default '',
    `BranchGroupName` varchar(200) NULL default '',
    `Island` varchar(30) NULL default '',
    `date1` DATE NULL,
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `day_1_7` NUMERIC(18,6) NULL default '0',
    `day_8_14` NUMERIC(18,6) NULL default '0',
    `day_15_21` NUMERIC(18,6) NULL default '0',
    `day_22_31` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `BranchGroup`,
    `BranchGroupName`,
    `Island`,
    `date1`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `day_1_7`,
    `day_8_14`,
    `day_15_21`,
    `day_22_31`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       area.BranchGroup,
       upper(concat(Area.BRANCHGroup,' - ',Area.BRANCHgroupNAME)) as BranchGroupName,
       area.u_island as Island,
       date(pi_date1) as date1,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when day(b.u_date_from) between 1 and 7 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_1_7,
       case when day(b.u_date_from) between 8 and 14 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_8_14,
       case when day(b.u_date_from) between 15 and 21 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_15_21,
       case when day(b.u_date_from) between 22 and 31 then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as day_22_31,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
        left outer join branchgroups area on area.branchgroup = br.branchgroup
   where a.company = pi_company and area.u_island = pi_Island
         and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
         and DATE_FORMAT(pi_date2, '%Y-%m-%d')
   group by a.Branch, b.u_date_from, a.u_itemcode;
select
    t0.Company,
    t0.CompanyName,
    t0.CompanyType,
    t0.Branch,
    t0.BranchName,
    t0.BranchGroup,
    t0.BranchGroupName,
    t0.Island,
    t0.date1,
    t0.itemcode,
    t0.itemdesc,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d')) as TARGET_LTRS_TOTAL,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d')) as TARGET_LTRS_MONTHLY,
      ((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30)*7 as TARGET_LTRS_WEEKLY,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30 as TARGET_LTRS_DAILY,
    ((((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d')
    )/30)*7)/
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))*100) as TARGET_SALESMIX,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',1))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',7)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch) as DAY_1_7_TOTAL,
    (sum(t0.day_1_7)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',1))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',7)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch))*100 as DAY_1_7_SALESMIX,
    sum(t0.day_1_7) as DAY_1_7,
    sum(t0.day_1_7) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30)*7) as DAY_1_7_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',8))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',14)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch) as DAY_8_14_TOTAL,
    (sum(t0.day_8_14)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',8))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',14)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch))*100 as DAY_8_14_SALESMIX,
    sum(t0.day_8_14) as DAY_8_14,
    sum(t0.day_8_14) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30)*7) as DAY_8_14_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',15))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',21)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch) as DAY_15_21_TOTAL,
    (sum(t0.day_15_21)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',15))
                           and date(concat(year(pi_date1),'-',month(pi_date1),'-',21)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch))*100 as DAY_15_21_SALESMIX,
    sum(t0.day_15_21) as DAY_15_21,
    sum(t0.day_15_21) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30)*7) as DAY_15_21_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',22))
                           and last_day(date(pi_date1)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch)as DAY_22_31_TOTAL,
    (sum(t0.day_22_31)/
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = t0.company and a.branch = t0.branch
         and b.u_date_from between date(concat(year(pi_date1),'-',month(pi_date1),'-',22))
                           and last_day(date(pi_date1)
                           and DATE_FORMAT(b.u_date_from, '%Y-%m-%d') <= DATE_FORMAT(pi_date2, '%Y-%m-%d')) group by a.Branch))*100 as DAY_22_31_SALESMIX,
    sum(t0.day_22_31) as DAY_22_31,
    sum(t0.day_22_31) - (((select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = t0.branch
                                and u_item = t0.itemcode
                                and DATE_FORMAT(u_date, '%Y-%m-%d') between DATE_FORMAT(pi_date1, '%Y-%m-%d')
                                and DATE_FORMAT(pi_date2, '%Y-%m-%d'))/30)*7) as DAY_22_31_VARIANCE
    from csv_sum t0
 group by t0.Branch, t0.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_yearly`
--

DROP PROCEDURE IF EXISTS `csv_yearly`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_yearly`(IN pi_company VARCHAR(30),
                              IN pi_branch VARCHAR(30),
                              IN pi_year NUMERIC(18,6))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `year1` NUMERIC(18,6) NULL default '0',
    `year2` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `year1`,
    `year2`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when year(b.u_date_from) = (pi_year-1)
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as year1,
       case when year(b.u_date_from) = pi_year
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as year2,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
   where a.company = pi_company
         and a.branch = pi_branch
         and year(b.u_date_from) between (pi_year-1) and pi_year
   group by b.u_date_from, a.u_itemcode;
select
    a.Company,
    a.CompanyName,
    a.CompanyType,
    a.Branch,
    a.BranchName,
    a.itemcode,
    a.itemdesc,
    (pi_year-1) as year1_name,
    pi_year as year2_name,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and year(u_date) between (pi_year-1) and pi_year) as TARGET_LTRS_TOTAL,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and year(u_date) = (pi_year-1)) as TARGET_LTRS_YEAR1,
    (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and year(u_date) = pi_year) as TARGET_LTRS_YEAR2,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and year(b.u_date_from) = (pi_year-1) group by a.Branch) as year1_TOTAL,
    (sum(a.year1)/
    (Select
       sum(a.u_sold_liters) as year1
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and year(b.u_date_from) = (pi_year-1) group by a.Branch))*100 as year1_SALESMIX,
    sum(a.year1) as year1,
    sum(a.year1) - (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and year(u_date) = (pi_year-1)) as year1_VARIANCE,
    (Select
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and year(b.u_date_from) = pi_year group by a.Branch) as year2_TOTAL,
    (sum(a.year2)/
    (Select
       sum(a.u_sold_liters) as year2
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
     where a.company = pi_company and a.branch = pi_branch
         and year(b.u_date_from) = pi_year group by a.Branch))*100 as year2_SALESMIX,
    sum(a.year2) as year2,
    sum(a.year2) - (select sum(u_amount) from u_targetvolume
                          where u_BRANCHCODE = pi_branch
                                and u_item = a.itemcode
                                and year(u_date) = pi_year) as year2_VARIANCE
    from csv_sum a
 group by itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_yearly_area`
--

DROP PROCEDURE IF EXISTS `csv_yearly_area`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_yearly_area`(IN pi_company VARCHAR(30),
                              IN pi_branchgroup VARCHAR(30),
                              IN pi_year NUMERIC(18,6))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `BranchGroup` varchar(30) NULL default '',
    `BranchGroupName` varchar(200) NULL default '',
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `year1` NUMERIC(18,6) NULL default '0',
    `year2` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `BranchGroup`,
    `BranchGroupName`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `year1`,
    `year2`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       area.branchgroup,
       upper(concat(area.branchgroup,' - ',area.branchgroupname)) as BranchGroupName,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when year(b.u_date_from) = (pi_year-1)
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as year1,
       case when year(b.u_date_from) = pi_year
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as year2,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
       left outer join branchgroups area on area.branchgroup = br.branchgroup
   where a.company = pi_company
         and area.branchgroup = pi_branchgroup
         and year(b.u_date_from) between (pi_year-1) and pi_year
   group by b.u_date_from, a.u_itemcode;
select
    a.Company,
    a.CompanyName,
    a.CompanyType,
    a.BranchGroup,
    a.BranchGroupName,
    a.itemcode,
    a.itemdesc,
    (pi_year-1) as year1_name,
    pi_year as year2_name,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and year(t0.u_date) between (pi_year-1) and pi_year) as TARGET_LTRS_TOTAL,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = (pi_year-1)) as TARGET_LTRS_YEAR1,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = pi_year) as TARGET_LTRS_YEAR2,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and  t2.branchgroup = pi_branchgroup
         and year(t1.u_date_from) = (pi_year-1) group by  t2.branchgroup) as year1_TOTAL,
    (sum(a.year1)/
    (Select
       sum(t0.u_sold_liters) as year1
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and year(t1.u_date_from) = (pi_year-1) group by t2.branchgroup ))*100 as year1_SALESMIX,
    sum(a.year1) as year1,
    sum(a.year1) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = (pi_year-1)) as year1_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and year(t1.u_date_from) = pi_year group by t2.branchgroup) as year2_TOTAL,
    (sum(a.year2)/
    (Select
       sum(t0.u_sold_liters) as year2
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and t2.branchgroup = pi_branchgroup
         and year(t1.u_date_from) = pi_year group by t2.branchgroup))*100 as year2_SALESMIX,
    sum(a.year2) as year2,
    sum(a.year2) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t1.branchgroup = pi_branchgroup
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = pi_year) as year2_VARIANCE
    from csv_sum a
 group by itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_yearly_area_ver2`
--

DROP PROCEDURE IF EXISTS `csv_yearly_area_ver2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_yearly_area_ver2`(IN pi_company VARCHAR(30),
                              IN pi_branchgroup VARCHAR(30),
                              IN pi_year NUMERIC(18,6))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `BranchGroup` varchar(30) NULL default '',
    `BranchGroupName` varchar(200) NULL default '',
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `year1` NUMERIC(18,6) NULL default '0',
    `year2` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `BranchGroup`,
    `BranchGroupName`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `year1`,
    `year2`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       area.branchgroup,
       upper(concat(area.branchgroup,' - ',area.branchgroupname)) as BranchGroupName,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when year(b.u_date_from) = (pi_year-1)
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as year1,
       case when year(b.u_date_from) = pi_year
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as year2,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
       left outer join branchgroups area on area.branchgroup = br.branchgroup
   where a.company = pi_company
         and area.branchgroup = pi_branchgroup
         and year(b.u_date_from) between (pi_year-1) and pi_year
   group by a.Branch, b.u_date_from, a.u_itemcode;
select
    a.Company,
    a.CompanyName,
    a.CompanyType,
    a.Branch,
    a.BranchName,
    a.BranchGroup,
    a.BranchGroupName,
    a.itemcode,
    a.itemdesc,
    (pi_year-1) as year1_name,
    pi_year as year2_name,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and year(t0.u_date) between (pi_year-1) and pi_year) as TARGET_LTRS_TOTAL,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = (pi_year-1)) as TARGET_LTRS_YEAR1,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = pi_year) as TARGET_LTRS_YEAR2,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and  a.branch = t0.branch
         and year(t1.u_date_from) = (pi_year-1) group by  t0.branch) as year1_TOTAL,
    (sum(a.year1)/
    (Select
       sum(t0.u_sold_liters) as year1
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and year(t1.u_date_from) = (pi_year-1) group by t0.branch ))*100 as year1_SALESMIX,
    sum(a.year1) as year1,
    sum(a.year1) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = (pi_year-1)) as year1_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and year(t1.u_date_from) = pi_year group by t0.branch) as year2_TOTAL,
    (sum(a.year2)/
    (Select
       sum(t0.u_sold_liters) as year2
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and year(t1.u_date_from) = pi_year group by t0.branch))*100 as year2_SALESMIX,
    sum(a.year2) as year2,
    sum(a.year2) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = pi_year) as year2_VARIANCE
    from csv_sum a
 group by a.Branch, a.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `csv_yearly_geo`
--

DROP PROCEDURE IF EXISTS `csv_yearly_geo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `csv_yearly_geo`(IN pi_company VARCHAR(30),
                              IN pi_island VARCHAR(30),
                              IN pi_year NUMERIC(18,6))
BEGIN
CREATE TEMPORARY TABLE  `csv_sum` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `BranchGroup` varchar(30) NULL default '',
    `BranchGroupName` varchar(200) NULL default '',
    `Island` varchar(30) NULL default '',
    `u_date_from` DATE NULL,
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(100) NULL default '',
    `year1` NUMERIC(18,6) NULL default '0',
    `year2` NUMERIC(18,6) NULL default '0',
    `total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO csv_sum (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `BranchGroup`,
    `BranchGroupName`,
    `Island`,
    `u_date_from`,
    `itemcode`,
    `itemdesc`,
    `year1`,
    `year2`,
    `total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       area.branchgroup,
       upper(concat(area.branchgroup,' - ',area.branchgroupname)) as BranchGroupName,
       area.u_island as Island,
       b.u_date_from,
       a.u_itemcode as itemcode,
       i.itemdesc as itemdesc,
       case when year(b.u_date_from) = (pi_year-1)
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as year1,
       case when year(b.u_date_from) = pi_year
            then if(sum(a.u_sold_liters) is null,0,sum(a.u_sold_liters)) else 0 end as year2,
       sum(a.u_sold_liters) as total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co ON a.company = co.companycode
       left outer join branchgroups area on area.branchgroup = br.branchgroup
   where a.company = pi_company
         and area.u_island = pi_Island
         and year(b.u_date_from) between (pi_year-1) and pi_year
   group by a.Branch, b.u_date_from, a.u_itemcode;
select
    a.Company,
    a.CompanyName,
    a.CompanyType,
    a.Branch,
    a.BranchName,
    a.BranchGroup,
    a.BranchGroupName,
    a.Island,
    a.itemcode,
    a.itemdesc,
    (pi_year-1) as year1_name,
    pi_year as year2_name,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and year(t0.u_date) between (pi_year-1) and pi_year) as TARGET_LTRS_TOTAL,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = (pi_year-1)) as TARGET_LTRS_YEAR1,
    (select sum(t0.u_amount) from u_targetvolume t0
                          left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = pi_year) as TARGET_LTRS_YEAR2,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and  a.branch = t0.branch
         and year(t1.u_date_from) = (pi_year-1) group by  t0.branch) as year1_TOTAL,
    (sum(a.year1)/
    (Select
       sum(t0.u_sold_liters) as year1
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and year(t1.u_date_from) = (pi_year-1) group by t0.branch ))*100 as year1_SALESMIX,
    sum(a.year1) as year1,
    sum(a.year1) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = (pi_year-1)) as year1_VARIANCE,
    (Select
       sum(t0.u_sold_liters) as total
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and year(t1.u_date_from) = pi_year group by t0.branch) as year2_TOTAL,
    (sum(a.year2)/
    (Select
       sum(t0.u_sold_liters) as year2
       from u_dailyshiftsalesreadings t0
       left outer join u_dailyshiftsales t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
                                           and t1.U_DFLTREADINGTYPE = t0.u_readingtype
       left outer join branches t2 on t2.branchcode = t0.branch
     where t0.company = pi_company and a.branch = t0.branch
         and year(t1.u_date_from) = pi_year group by t0.branch))*100 as year2_SALESMIX,
    sum(a.year2) as year2,
    sum(a.year2) - (select sum(t0.u_amount) from u_targetvolume t0
                      left outer join branches t1 on t1.branchcode = t0.u_branchcode
                          where t0.u_BRANCHCODE = a.branch
                                and t0.u_item = a.itemcode
                                and year(t0.u_date) = pi_year) as year2_VARIANCE
    from csv_sum a
 group by a.Branch, a.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `customer_checkbalances`
--

DROP PROCEDURE IF EXISTS `customer_checkbalances`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `customer_checkbalances`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_mode VARCHAR(10))
BEGIN
DECLARE v_Company       varchar(30);
DECLARE v_Branch       varchar(30);
DECLARE v_CustNo       varchar(30);
DECLARE v_Balance numeric(20,2);
DECLARE v_Done        integer;
DECLARE v_Updated        integer;
DECLARE Cursor_bpbalances CURSOR FOR SELECT Company, Branch, CustNo, (AR+CM+DP+ADV+JV) FROM bpbalances where BALANCE<>(AR+CM+DP+ADV+JV);
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;
DROP TEMPORARY TABLE IF EXISTS `bpbalances`;
CREATE TEMPORARY TABLE  `bpbalances` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `CUSTNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `AR` NUMERIC(18,6) NULL default '0',
    `CM` NUMERIC(18,6) NULL default '0',
    `DP` NUMERIC(18,6) NULL default '0',
    `ADV` NUMERIC(18,6) NULL default '0',
    `JV` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`CUSTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO bpbalances (COMPANY,BRANCH,CUSTNO,BALANCE,AR,CM,DP,ADV,JV)
select company,branch,custno,balance,
  ifnull((select sum(dueamount) from arinvoices where arinvoices.company=customers.company and arinvoices.branch=customers.branch and arinvoices.docstatus IN ('O','C') and arinvoices.bpcode=customers.custno),0),
  ifnull((select sum(dueamount *-1) from arcreditmemos where arcreditmemos.company=customers.company and arcreditmemos.branch=customers.branch and arcreditmemos.docstatus IN ('O','C') and arcreditmemos.bpcode=customers.custno),0),
  ifnull((select sum(balanceamount* -1) from collections where collections.company=customers.company and collections.collfor='DP' and collections.branchcode=customers.branch and collections.docstat IN ('O','C') and collections.bpcode=customers.custno),0),
  ifnull((select sum(balanceamount) from payments where payments.company=customers.company and payments.collfor='DP' and payments.branchcode=customers.branch and payments.docstat IN ('O','C') and payments.bpcode=customers.custno),0),
  ifnull((select sum(balanceamount) from journalvoucheritems where journalvoucheritems.company=customers.company and journalvoucheritems.branch=customers.branch and journalvoucheritems.itemtype='C' and journalvoucheritems.itemno=customers.custno and journalvoucheritems.reftype=''),0)
from customers where (pi_company='' or (pi_company<>'' and customers.company=pi_company)) and (pi_branch='' or (pi_branch<>'' and customers.branch=pi_branch)) order by company, branch, custno;
if pi_mode = 'update' then
  SET v_Updated = 0 ;
  SET v_Done = 0 ;
  BLOCK1: BEGIN
  OPEN Cursor_bpbalances ;
  REPEAT
    FETCH Cursor_bpbalances INTO v_Company, v_Branch, v_CustNo, v_Balance ;
    IF NOT v_Done THEN
       update customers set balance=v_Balance where company=v_Company and branch=v_Branch and custno=v_CustNo;
       SET v_Updated = v_Updated + 1;
    END IF ;
  UNTIL v_Done END REPEAT ;
  CLOSE Cursor_bpbalances ;
  END BLOCK1 ;
  

  select 1;
elseif pi_mode = 'balanced' then
  select COMPANY, BRANCH, CUSTNO,BALANCE,(AR+CM+DP+ADV+JV),AR,CM,DP,ADV,JV from bpbalances where BALANCE=(AR+CM+DP+ADV+JV);
elseif pi_mode = 'unbalanced' then
  select COMPANY, BRANCH, CUSTNO,BALANCE-(AR+CM+DP+ADV+JV),BALANCE,(AR+CM+DP+ADV+JV),AR,CM,DP,ADV,JV from bpbalances where BALANCE<>(AR+CM+DP+ADV+JV);
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `customer_ledger`
--

DROP PROCEDURE IF EXISTS `customer_ledger`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `customer_ledger`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_source VARCHAR(30),
IN pi_date VARCHAR(30))
BEGIN
  DECLARE v_advms DATE;
  DECLARE v_advme DATE;
  DECLARE v_30ms DATE;
  DECLARE v_60ms DATE;
  DECLARE v_90ms DATE;
  DECLARE v_30me DATE;
  DECLARE v_60me DATE;
  DECLARE v_90me DATE;
  DECLARE v_MONTH_END INT;
  DECLARE filter varchar(30);
  SET v_30ms = date(concat(substring(pi_date,1,7),'-01'));
  SET v_advms = v_30ms + interval 1 month;
  SET v_60ms = v_30ms - interval 1 month;
  SET v_90ms = v_30ms - interval 2 month;
  SET v_30me = date(pi_date);
  SET v_advme = v_30me + interval 1 month;
  SET v_60me = v_30me - interval 1 month;
  SET v_90me = v_30me - interval 2 month;
  SET v_MONTH_END = concat('-',substring(v_60me,9,2)+1);
CREATE TEMPORARY TABLE  `payments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `SOURCE` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` varchar(10) NULL default '',
    `REMARKS` varchar(1000) NULL default '',
    `REFTYPE` varchar(50) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company, a.branch, a.docno, c.DOCNO, c.DOCDATE,
        if(c.pdc = 1, concat('PDC - ', 'Bank :', d.bank,  ' Cheque No. :', d.checkno, ' Cheque Date:', d.checkdate),C.REMARKS), 1, b.amount - b.penaltypaid as AMOUNT
        from arinvoices a
             left outer join collectionsinvoices b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join collections c on c.company = b.company and c.branchcode = b.branch and c.docno = b.docno
             left outer join collectionscheques d on d.company = b.company and d.branch = b.branch and d.docno = b.docno
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        AND a.DOCNO = pi_source;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company,a.branch,a.docno, c.DOCNO, c.DOCDATE, C.REMARKS, 1, b.credit - b.debit as AMOUNT
        from arinvoices a
             left outer join journalvoucheritems b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join journalvouchers c on c.company = b.company and c.branch = b.branch and c.docid = b.docid
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        AND a.DOCNO = pi_source
        and c.docdate <= pi_date;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
    select a.COMPANY, a.BRANCH, if(a.BASEDOCNO = '', b.BASEDOCNO, a.BASEDOCNO), a.DOCNO, a.DOCDATE, 'Sales Return', 1, a.BASEAMOUNT
           from arcreditmemos a
                left outer join arcreditmemoitems b on a.docid = b.docid and a.company = b.company
                and a.branch = b.branch
           WHERE a.company = pi_company AND a.branch = pi_branch
                 AND if(a.BASEDOCNO = '', b.BASEDOCNO = pi_source, a.BASEDOCNO = pi_source) AND a.DOCDATE <= pi_date
           GROUP by a.DOCNO;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company, a.branch, a.docno, c.DOCNO, c.DOCDATE, e.CHRGNAME, 0, b.amount as AMOUNT
        from arinvoices a
             left outer join collectionsothercharges b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join collections c on c.company = b.company and c.branchcode = b.branch and c.docno = b.docno
             left outer join othercharges e on b.CHRGCODE = e.CHRGCODE
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        AND a.DOCNO = pi_source;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company, a.branch, a.docno, c.DOCNO, c.DOCDATE, e.cashcardname, 0, 0-(b.amount) as AMOUNT
        from arinvoices a
             left outer join collectionscashcards b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join collections c on c.company = b.company and c.branchcode = b.branch and c.docno = b.docno
             left outer join cashcards e on b.cashcard = e.cashcard
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        AND a.DOCNO = pi_source;
select
      upper(c.COMPANYNAME) as COMPANY,
      upper(concat(d.BRANCHCODE, ' ',d.BRANCHNAME)) as BRANCH,
      a.BPCODE,
      a.BPNAME,
      a.BILLTOADDRESS,
      pi_source as SOURCE,
      a.DOCDATE,
      '' as DUE,
      '' as DEPT,
      '' as ZONE,
      '' as SUB,
      '' as GP,
      f.CREDITLIMIT as CREDITLIMIT,
      sp.SALESPERSONNAME as SALESMAN,
      f.PHONE1 as PHONE,
      '' as ITEMCODE,
      '' as ITEMDESC,
      0 as QUANTITY,
      0 as UNITPRICE,
      0 as PRICE,
      '' as WHSCODE,
      a.DOCDUEDATE as FDD,
      a.DOCDUEDATE as LDD,
      a.TOTALAMOUNT as AMOUNTDUE,
      date(b.DOCDATE) as DOCDATE2,
      b.DOCNO,
      if (b.REMARKS is null or b.REMARKS = '', 'Payment', b.REMARKS) as PARTICULARS,
      if(b.AMOUNT is null, 1, b.REFTYPE) as REFTYPE,
      if(b.AMOUNT is null, 0, b.AMOUNT) as AMOUNT,
      date(pi_date) as date1
      from arinvoices a
      left outer join payments b on a.company = b.company and a.branch = b.branch and a.docno = b.source
      LEFT OUTER JOIN companies c on a.company = c.companycode
      LEFT OUTER JOIN branches d ON a.BRANCH = d.BRANCHCODE
      LEFT OUTER JOIN customers f on a.BPCODE = f.CUSTNO
      LEFT OUTER JOIN salespersons sp on f.SALESPERSON = sp.SALESPERSON
      where a.company = pi_company
            and a.branch = pi_branch AND a.DOCNO = pi_source
            AND a.DOCSTATUS NOT IN('D')
            and a.docdate <= pi_date
      order by b.DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `customer_ledger2`
--

DROP PROCEDURE IF EXISTS `customer_ledger2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `customer_ledger2`(IN pi_company VARCHAR(30),
                                    IN pi_branch VARCHAR(30),
                                    IN pi_bpcode VARCHAR(30),
                                    IN pi_date1 VARCHAR(30),
                                    IN pi_date2 VARCHAR(30))
BEGIN

CREATE TEMPORARY TABLE  `trans_opening` (
    `POSTDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCNO` varchar(30) NULL default '',
    `DOCSTATUS` varchar(30) NULL default '',
    `DEBIT` NUMERIC(18,6) NOT NULL default '0',
    `CREDIT` NUMERIC(18,6) NOT NULL default '0',
    `OBJECTCODE` varchar(30) NULL default '',
    `TRXTYPE` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE)
    select A.POSTDATE, A.DOCDATE, A.DOCNO, '' AS DOCSTATUS, A.TOTALAMOUNT AS DEBIT, 0 AS CREDIT, A.OBJECTCODE, A.TRXTYPE
           from ARINVOICES A
                WHERE A.COMPANY=pi_company AND A.BRANCH=pi_branch AND A.TRXTYPE<>'POS'
                      and a.bpcode = pi_bpcode
                      and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1;


  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '' AS DOCSTATUS, A.TOTALAMOUNT AS DEBIT, A.TOTALAMOUNT AS CREDIT, A.OBJECTCODE, A.TRXTYPE
           from ARINVOICES A
                WHERE A.COMPANY=pi_company AND A.BRANCH=pi_branch AND A.TRXTYPE='POS'
                      and a.bpcode = pi_bpcode
                      and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1;


  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE)
		select A.DUEDATE, A.DUEDATE, B.REFNO, '' AS DOCSTATUS, A.AMOUNT AS DEBIT, 0 AS CREDIT, 'PENALTY', ''
               from NOTESRECEIVABLES A, ACCOUNTS B
               WHERE b.company=a.company and b.branch=a.branch and b.acctno=a.acctno and
                     a.rectype IN ('P') AND A.COMPANY=pi_company AND A.BRANCH=pi_branch
                     and b.custno = pi_bpcode
                     and DATE_FORMAT(A.DUEDATE, '%Y-%m-%d') < pi_date1;


  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', 0, A.TOTALAMOUNT + A.BASEAMOUNT, A.OBJECTCODE, A.TRXTYPE
               from ARCREDITMEMOS A
               WHERE A.COMPANY=pi_company AND A.BRANCH=pi_branch
                     and a.bpcode = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1;


  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', SUM(IF(B.DEBIT>0,B.GROSSAMOUNT,0)), SUM(IF(B.CREDIT>0,B.GROSSAMOUNT,0)), A.OBJECTCODE, ''
               from JOURNALVOUCHERS A, JOURNALVOUCHERITEMS B
               WHERE B.COMPANY=A.COMPANY
                    AND B.BRANCH=A.BRANCH AND B.DOCID=A.DOCID AND A.COMPANY=pi_company AND A.BRANCH=pi_branch AND B.ITEMTYPE='C'
                    AND B.REFTYPE<>'OUTDOWNPAYMENT'
                    and b.itemno = pi_bpcode
                    and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', SUM(CASE WHEN B.AMOUNT>0 THEN B.AMOUNT ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE ABS(B.AMOUNT) END) AS CREDIT, A.OBJECTCODE, A.TRXTYPE
               from PAYMENTS A, PAYMENTINVOICES B
               WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                     AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT')
                     AND B.ISADVANCES=0 AND A.CLEARED IN (1,-1)
                     and a.bpcode = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE)
		select A.POSTDATE, A.CANCELLEDDATE, A.DOCNO, 'CN', SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE B.AMOUNT END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN B.AMOUNT ELSE 0 END) AS CREDIT, A.OBJECTCODE, A.TRXTYPE
               from PAYMENTS A, PAYMENTINVOICES B
               WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                     AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                     AND A.CLEARED IN (-1)
                     and a.bpcode = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE (ABS(B.AMOUNT) + B.REBATE) END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN (B.AMOUNT + B.REBATE) ELSE 0 END) AS CREDIT, A.OBJECTCODE, A.TRXTYPE
               from COLLECTIONS A, COLLECTIONSINVOICES B
               WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                     AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                     AND A.CLEARED IN (1,-99)
                     and a.custno = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE)
		select A.POSTDATE, A.CANCELLEDDATE, A.DOCNO, 'CN', SUM(CASE WHEN B.AMOUNT>0 THEN (B.AMOUNT + B.REBATE) ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE (ABS(B.AMOUNT) + B.REBATE) END) AS CREDIT, A.OBJECTCODE, A.TRXTYPE
               from COLLECTIONS A, COLLECTIONSINVOICES B
               WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                     AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                     AND A.CLEARED IN (-99)
                     and a.custno = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
                     AND A.DOCSTAT='CN'
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE)
		select A.POSTDATE, A.CANCELLEDDATE, A.DOCNO, 'BC', SUM(CASE WHEN B.AMOUNT>0 THEN (B.AMOUNT + B.REBATE) ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE (ABS(B.AMOUNT) + B.REBATE) END) AS CREDIT, A.OBJECTCODE, A.TRXTYPE
               from COLLECTIONS A, COLLECTIONSINVOICES B
               WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                     AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                     AND A.CLEARED IN (-99)
                     and a.custno = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
                     AND A.DOCSTAT='BC'
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


CREATE TEMPORARY TABLE  `trans_opening_sum` (
    `bpcode` varchar(30) NULL default '',
    `total` NUMERIC(18,6) NOT NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  INSERT
    INTO trans_opening_sum (bpcode,total)
    select pi_bpcode, if(sum(x.debit-x.credit)is null,0,sum(x.debit-x.credit)) from trans_opening x;







CREATE TEMPORARY TABLE  `trans` (
    `POSTDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCNO` varchar(30) NULL default '',
    `DOCSTATUS` varchar(30) NULL default '',
    `DEBIT` NUMERIC(18,6) NOT NULL default '0',
    `CREDIT` NUMERIC(18,6) NOT NULL default '0',
    `OBJECTCODE` varchar(30) NULL default '',
    `TRXTYPE` varchar(30) NULL default '',
    `bpcode` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE,bpcode)
    select A.POSTDATE, A.DOCDATE, A.DOCNO, '' AS DOCSTATUS, A.TOTALAMOUNT AS DEBIT, 0 AS CREDIT, A.OBJECTCODE, A.TRXTYPE,
           pi_bpcode
           from ARINVOICES A
                WHERE A.COMPANY=pi_company AND A.BRANCH=pi_branch AND A.TRXTYPE<>'POS'
                      and a.bpcode = pi_bpcode
                      and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2;


  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '' AS DOCSTATUS, A.TOTALAMOUNT AS DEBIT, A.TOTALAMOUNT AS CREDIT, A.OBJECTCODE, A.TRXTYPE,
           pi_bpcode
           from ARINVOICES A
                WHERE A.COMPANY=pi_company AND A.BRANCH=pi_branch AND A.TRXTYPE='POS'
                      and a.bpcode = pi_bpcode
                      and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2;


  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE,bpcode)
		select A.DUEDATE, A.DUEDATE, B.REFNO, '' AS DOCSTATUS, A.AMOUNT AS DEBIT, 0 AS CREDIT, 'PENALTY', '',
           pi_bpcode
               from NOTESRECEIVABLES A, ACCOUNTS B
               WHERE b.company=a.company and b.branch=a.branch and b.acctno=a.acctno and
                     a.rectype IN ('P') AND A.COMPANY=pi_company AND A.BRANCH=pi_branch
                     and b.custno = pi_bpcode
                     and DATE_FORMAT(A.DUEDATE, '%Y-%m-%d') between pi_date1 and pi_date2;


  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', 0, A.TOTALAMOUNT + A.BASEAMOUNT, A.OBJECTCODE, A.TRXTYPE,
           pi_bpcode
               from ARCREDITMEMOS A
               WHERE A.COMPANY=pi_company AND A.BRANCH=pi_branch
                     and a.bpcode = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2;


  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', SUM(IF(B.DEBIT>0,B.GROSSAMOUNT,0)), SUM(IF(B.CREDIT>0,B.GROSSAMOUNT,0)), A.OBJECTCODE, '',
           pi_bpcode
               from JOURNALVOUCHERS A, JOURNALVOUCHERITEMS B
               WHERE B.COMPANY=A.COMPANY
                    AND B.BRANCH=A.BRANCH AND B.DOCID=A.DOCID AND A.COMPANY=pi_company AND A.BRANCH=pi_branch AND B.ITEMTYPE='C'
                    AND B.REFTYPE<>'OUTDOWNPAYMENT'
                    and b.itemno = pi_bpcode
                    and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', SUM(CASE WHEN B.AMOUNT>0 THEN B.AMOUNT ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE ABS(B.AMOUNT) END) AS CREDIT, A.OBJECTCODE, A.TRXTYPE,
           pi_bpcode
               from PAYMENTS A, PAYMENTINVOICES B
               WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                     AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT')
                     AND B.ISADVANCES=0 AND A.CLEARED IN (1,-1)
                     and a.bpcode = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE,bpcode)
		select A.POSTDATE, A.CANCELLEDDATE, A.DOCNO, 'CN', SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE B.AMOUNT END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN B.AMOUNT ELSE 0 END) AS CREDIT, A.OBJECTCODE, A.TRXTYPE,
           pi_bpcode
               from PAYMENTS A, PAYMENTINVOICES B
               WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                     AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                     AND A.CLEARED IN (-1)
                     and a.bpcode = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE (ABS(B.AMOUNT) + B.REBATE) END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN (B.AMOUNT + B.REBATE) ELSE 0 END) AS CREDIT, A.OBJECTCODE, A.TRXTYPE,
           pi_bpcode
               from COLLECTIONS A, COLLECTIONSINVOICES B
               WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                     AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                     AND A.CLEARED IN (1,-99)
                     and a.custno = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE,bpcode)
		select A.POSTDATE, A.CANCELLEDDATE, A.DOCNO, 'CN', SUM(CASE WHEN B.AMOUNT>0 THEN (B.AMOUNT + B.REBATE) ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE (ABS(B.AMOUNT) + B.REBATE) END) AS CREDIT, A.OBJECTCODE, A.TRXTYPE,
           pi_bpcode
               from COLLECTIONS A, COLLECTIONSINVOICES B
               WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                     AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                     AND A.CLEARED IN (-99)
                     and a.custno = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
                     AND A.DOCSTAT='CN'
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,TRXTYPE,bpcode)
		select A.POSTDATE, A.CANCELLEDDATE, A.DOCNO, 'BC', SUM(CASE WHEN B.AMOUNT>0 THEN (B.AMOUNT + B.REBATE) ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE (ABS(B.AMOUNT) + B.REBATE) END) AS CREDIT, A.OBJECTCODE, A.TRXTYPE,
           pi_bpcode
               from COLLECTIONS A, COLLECTIONSINVOICES B
               WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                     AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                     AND A.CLEARED IN (-99)
                     and a.custno = pi_bpcode
                     and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
                     AND A.DOCSTAT='BC'
               GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;


CREATE TEMPORARY TABLE  `trans_sum` (
    `bpcode` varchar(30) NULL default '',
    `totaldebit` NUMERIC(18,6) NOT NULL default '0',
    `totalcredit` NUMERIC(18,6) NOT NULL default '0',
    `total` NUMERIC(18,6) NOT NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  INSERT
    INTO trans_sum (bpcode,totaldebit,totalcredit,total)
    select pi_bpcode, sum(x.debit), sum(x.credit), if(sum(x.debit-x.credit)is null,0,sum(x.debit-x.credit))
           from trans x
    group by pi_bpcode;

select

      upper(c.companyname) as COMPANY,
      upper(concat(d.BRANCHCODE, ' - ',d.BRANCHNAME)) as BRANCH,
      upper(ct.custno) as BPCODE,
      upper(ct.custname) as BPNAME,
      (select upper(concat(if(ax.BARANGAY is null or ax.BARANGAY = '','' , concat(ax.BARANGAY,', '))
                 , if(ax.STREET is null or ax.STREET = '','' , concat(ax.STREET,', '))
                 , if(ax.ZIP is null or ax.ZIP = '','' , concat(ax.ZIP,', '))
                 , if(ax.CITY is null or ax.CITY = '','' , concat(ax.CITY,', '))
                 , if(ax3.PROVINCENAME is null or ax3.PROVINCENAME = '','' , concat(ax3.PROVINCENAME,', '))
                 , if(ax2.COUNTRYNAME is null or ax2.COUNTRYNAME = '','' , ax2.COUNTRYNAME)))
           from addresses ax
                LEFT OUTER JOIN countries ax2 on ax.country = ax2.country
                LEFT OUTER JOIN provinces ax3 on ax.province = ax3.province
     where ax.refid = a.BPCODE and ax.reftype = 'CUSTOMER' and ax.addresstype = 0 limit 1) as BPADDRESS,
      upper(sp.SALESPERSONNAME) as SALESPERSON,
      ct.CREDITLIMIT as CREDITLIMIT,
      date(pi_date1) as date1,
      date(pi_date2) as date2,
      a.POSTDATE,
      a.DOCDATE,
      a.DOCNO,
      a.DOCSTATUS,
      b.total as OB,
      if(a.DEBIT is null,0,a.DEBIT) as DEBIT,
      if(a.CREDIT is null,0,a.CREDIT) as CREDIT,
      if(ax.totaldebit is null,0,ax.totaldebit) as totaldebit,
      if(ax.totalcredit is null,0,ax.totalcredit*-1) as totalcredit,
      b.total + if(ax.total is null,0,ax.total) as total,
      a.OBJECTCODE,
      a.TRXTYPE

from customers ct
     LEFT OUTER JOIN companies c ON c.companycode = pi_company
     LEFT OUTER JOIN branches d ON d.BRANCHCODE = pi_branch
     LEFT OUTER JOIN salespersons sp on ct.SALESPERSON = sp.SALESPERSON
     LEFT OUTER JOIN trans a ON ct.custno = a.bpcode
     LEFT OUTER JOIN trans_opening_sum b ON ct.custno = b.bpcode
     LEFT OUTER JOIN trans_sum ax ON ct.custno = ax.bpcode

where ct.custno = pi_bpcode
order by POSTDATE, DOCNO;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `customer_ledger_all`
--

DROP PROCEDURE IF EXISTS `customer_ledger_all`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `customer_ledger_all`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_source VARCHAR(30),
IN pi_date VARCHAR(30))
BEGIN
  DECLARE v_advms DATE;
  DECLARE v_advme DATE;
  DECLARE v_30ms DATE;
  DECLARE v_60ms DATE;
  DECLARE v_90ms DATE;
  DECLARE v_30me DATE;
  DECLARE v_60me DATE;
  DECLARE v_90me DATE;
  DECLARE v_MONTH_END INT;
  DECLARE filter varchar(30);
  SET v_30ms = date(concat(substring(pi_date,1,7),'-01'));
  SET v_advms = v_30ms + interval 1 month;
  SET v_60ms = v_30ms - interval 1 month;
  SET v_90ms = v_30ms - interval 2 month;
  SET v_30me = date(pi_date);
  SET v_advme = v_30me + interval 1 month;
  SET v_60me = v_30me - interval 1 month;
  SET v_90me = v_30me - interval 2 month;
  SET v_MONTH_END = concat('-',substring(v_60me,9,2)+1);
CREATE TEMPORARY TABLE  `payments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `SOURCE` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` varchar(10) NULL default '',
    `REMARKS` varchar(1000) NULL default '',
    `REFTYPE` varchar(50) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company, a.branch, a.docno, c.DOCNO, c.DOCDATE,
        if(c.pdc = 1, concat('PDC - ', 'Bank :', d.bank,  ' Cheque No. :', d.checkno, ' Cheque Date:', d.checkdate),C.REMARKS), 1, b.amount - b.penaltypaid as AMOUNT
        from arinvoices a
             left outer join collectionsinvoices b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join collections c on c.company = b.company and c.branchcode = b.branch and c.docno = b.docno
             left outer join collectionscheques d on d.company = b.company and d.branch = b.branch and d.docno = b.docno
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        AND a.bpcode = pi_source;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company,a.branch,a.docno, c.DOCNO, c.DOCDATE, C.REMARKS, 1, b.credit - b.debit as AMOUNT
        from arinvoices a
             left outer join journalvoucheritems b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join journalvouchers c on c.company = b.company and c.branch = b.branch and c.docid = b.docid
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        AND a.bpcode = pi_source
        and c.docdate <= pi_date;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
    select a.COMPANY, a.BRANCH, if(a.BASEDOCNO = '', b.BASEDOCNO, a.BASEDOCNO), a.DOCNO, a.DOCDATE, 'Sales Return', 1, a.BASEAMOUNT
           from arcreditmemos a
                left outer join arcreditmemoitems b on a.docid = b.docid and a.company = b.company
                and a.branch = b.branch
           WHERE a.company = pi_company AND a.branch = pi_branch
                 AND a.bpcode = pi_source AND a.DOCDATE <= pi_date
           GROUP by a.DOCNO;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company, a.branch, a.docno, c.DOCNO, c.DOCDATE, e.CHRGNAME, 0, b.amount as AMOUNT
        from arinvoices a
             left outer join collectionsothercharges b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join collections c on c.company = b.company and c.branchcode = b.branch and c.docno = b.docno
             left outer join othercharges e on b.CHRGCODE = e.CHRGCODE
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        AND a.bpcode = pi_source;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company, a.branch, a.docno, c.DOCNO, c.DOCDATE, e.cashcardname, 0, 0-(b.amount) as AMOUNT
        from arinvoices a
             left outer join collectionscashcards b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join collections c on c.company = b.company and c.branchcode = b.branch and c.docno = b.docno
             left outer join cashcards e on b.cashcard = e.cashcard
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        AND a.bpcode = pi_source;
CREATE TEMPORARY TABLE  `payments_sum` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `SOURCE` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` varchar(10) NULL default '',
    `REMARKS` varchar(1000) NULL default '',
    `REFTYPE` varchar(50) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO payments_sum (COMPANY,BRANCH,SOURCE,AMOUNT)
      Select COMPANY,BRANCH,SOURCE,sum(AMOUNT) from payments group by SOURCE;
CREATE TEMPORARY TABLE  `acct_bal` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `BPCODE` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO acct_bal (COMPANY,BRANCH,BPCODE,AMOUNT)
      Select a.company, a.branch, a.bpcode, sum(a.totalamount) - sum(if(b.AMOUNT is null, 0, b.AMOUNT))
      from arinvoices a
           left outer join payments_sum b on a.company = b.company and a.branch = b.branch and a.docno = b.source
           where a.company = pi_company
            and a.branch = pi_branch
            AND a.bpcode = pi_source
            and a.trxtype<>'POS' and a.accttype='' AND a.DOCSTATUS NOT IN('D')
            and a.docdate <= pi_date group by a.bpcode;
select
      upper(c.COMPANYNAME) as COMPANY,
      upper(concat(d.BRANCHCODE, ' ',d.BRANCHNAME)) as BRANCH,
      a.BPCODE,
      a.BPNAME,
      a.BILLTOADDRESS,
      a.docno as SOURCE,
      a.DOCDATE,
      '' as DUE,
      '' as DEPT,
      '' as ZONE,
      '' as SUB,
      '' as GP,
      f.CREDITLIMIT as CREDITLIMIT,
      sp.SALESPERSONNAME as SALESMAN,
      f.PHONE1 as PHONE,
      '' as ITEMCODE,
      '' as ITEMDESC,
      0 as QUANTITY,
      0 as UNITPRICE,
      ab.amount as PRICE,
      '' as WHSCODE,
      a.DOCDUEDATE as FDD,
      a.DOCDUEDATE as LDD,
      a.TOTALAMOUNT as AMOUNTDUE,
      date(b.DOCDATE) as DOCDATE2,
      b.DOCNO,
      if (b.REMARKS is null or b.REMARKS = '', 'Payment', b.REMARKS) as PARTICULARS,
      if(b.AMOUNT is null, 1, b.REFTYPE) as REFTYPE,
      if(b.AMOUNT is null, 0, b.AMOUNT) as AMOUNT,
      date(pi_date) as date1
      from arinvoices a
      left outer join payments b on a.company = b.company and a.branch = b.branch and a.docno = b.source
      LEFT OUTER JOIN companies c on a.company = c.companycode
      LEFT OUTER JOIN branches d ON a.BRANCH = d.BRANCHCODE
      LEFT OUTER JOIN customers f on a.BPCODE = f.CUSTNO
      LEFT OUTER JOIN salespersons sp on f.SALESPERSON = sp.SALESPERSON
      LEFT OUTER JOIN payments_sum spy on a.company = spy.company and a.branch = spy.branch and a.docno = spy.source
      LEFT OUTER JOIN acct_bal ab on a.bpcode = ab.bpcode
      where a.company = pi_company
            and a.branch = pi_branch AND a.bpcode = pi_source
            and a.totalamount - if(spy.amount is null, 0, spy.amount) <> 0
            and a.trxtype<>'POS' and a.accttype='' AND a.DOCSTATUS NOT IN('D')
            and a.docdate <= pi_date
      order by b.DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `daily_chargesales`
--

DROP PROCEDURE IF EXISTS `daily_chargesales`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `daily_chargesales`(IN pi_company VARCHAR(30),
                                            IN pi_branch VARCHAR(30),
                                            IN pi_date1 VARCHAR(30),
                                            IN pi_date2 VARCHAR(30))
BEGIN
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       b.u_date_from,
       if(b.u_shift like '1%', 'X', '') as Shift1,
       if(b.u_shift like '2%', 'X', '') as Shift2,
       a.u_custno as bpcode,
       a.u_custname as bpname,
       a.u_plateno as plateno,
       a.u_refno as invoiceno,
       a.u_itemcode as itemcode,
       a.u_itemdesc as itemdesc,
       a.u_amount as amount,
       a.u_grossamount as grossamount,
       a.u_liters as liters,
       a.u_discamount as discamount
       from u_dailyshiftsaleschargesales a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co on a.company = co.companycode
   where a.company = pi_company and a.branch = pi_branch and (b.u_date_from between pi_date1 and pi_date2) and a.u_discamount > 0
   order by b.u_date_from;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `daily_chargesales_customer`
--

DROP PROCEDURE IF EXISTS `daily_chargesales_customer`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `daily_chargesales_customer`(IN pi_company VARCHAR(30),
                                            IN pi_branch VARCHAR(30),
                                            IN pi_date1 VARCHAR(30),
                                            IN pi_date2 VARCHAR(30),
                                            IN pi_customer VARCHAR(30))
BEGIN
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       b.u_date_from,
       if(b.u_shift like '1%', 'X', '') as Shift1,
       if(b.u_shift like '2%', 'X', '') as Shift2,
       a.u_custno as bpcode,
       a.u_custname as bpname,
       a.u_plateno as plateno,
       a.u_refno as invoiceno,
       a.u_itemcode as itemcode,
       a.u_itemdesc as itemdesc,
       a.u_amount as amount,
       a.u_grossamount as grossamount,
       a.u_liters as liters,
       a.u_discamount as discamount
       from u_dailyshiftsaleschargesales a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co on a.company = co.companycode
   where a.company = pi_company and
         a.branch = pi_branch and
         b.u_date_from between pi_date1 and pi_date2 and
         a.u_custno = pi_customer and
         a.u_discamount > 0
   order by b.u_date_from;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `daily_lube_sales`
--

DROP PROCEDURE IF EXISTS `daily_lube_sales`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `daily_lube_sales`(IN pi_company VARCHAR(30),
                                    IN pi_branch VARCHAR(30),
                                    IN pi_date1 VARCHAR(30),
                                    IN pi_product VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `UGT` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO UGT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.ITEMCODE, sum(a.QTY*-1) as QTY,
        sum((a.QTY*ROUND(a.COSTPRICE, 2))*-1) as COST, a.warehouse AS WAREHOUSE
        from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.refdate > pi_date1
        AND a.warehouse in ('UGT-LUBS')
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        group by a.REFDATE, a.ITEMCODE, a.warehouse;
  INSERT
    INTO UGT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REF2DATE as REFDATE,a.ITEMCODE,
        sum(a.QTY) as QTY, sum(ROUND(a.STOCKVALUE, 2)) as COST, a.warehouse AS WAREHOUSE
        from stockcardissuance a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.REF2DATE > pi_date1
        AND a.warehouse in ('UGT-LUBS')
        AND REF2TYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        group by a.REF2DATE, a.ITEMCODE, a.warehouse;
  INSERT
    INTO UGT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.ITEMCODE,
        sum(a.QTY) as QTY, sum(ROUND(a.STOCKVALUE, 2)) as COST, a.warehouse AS WAREHOUSE
        from stockcardcosting a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
        AND a.warehouse in ('UGT-LUBS')
        group by a.REFDATE, a.ITEMCODE, a.warehouse;
CREATE TEMPORARY TABLE  `UGT_SUM` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO UGT_SUM (COMPANY,BRANCH,ITEMCODE,QTY)
    Select COMPANY,BRANCH,ITEMCODE,Sum(QTY) From UGT Group by ITEMCODE;
CREATE TEMPORARY TABLE  `FORECOURT` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO FORECOURT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.ITEMCODE, sum(a.QTY*-1) as QTY,
        sum((a.QTY*ROUND(a.COSTPRICE, 2))*-1) as COST, a.warehouse AS WAREHOUSE
        from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.refdate > pi_date1
        AND a.warehouse in ('FORECOURT')
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        group by a.REFDATE, a.ITEMCODE, a.warehouse;
  INSERT
    INTO FORECOURT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REF2DATE as REFDATE,a.ITEMCODE,
        sum(a.QTY) as QTY, sum(ROUND(a.STOCKVALUE, 2)) as COST, a.warehouse AS WAREHOUSE
        from stockcardissuance a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.REF2DATE > pi_date1
        AND a.warehouse in ('FORECOURT')
        AND REF2TYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        group by a.REF2DATE, a.ITEMCODE, a.warehouse;
  INSERT
    INTO FORECOURT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.ITEMCODE,
        sum(a.QTY) as QTY, sum(ROUND(a.STOCKVALUE, 2)) as COST, a.warehouse AS WAREHOUSE
        from stockcardcosting a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
        AND a.warehouse in ('FORECOURT')
        group by a.REFDATE, a.ITEMCODE, a.warehouse;
CREATE TEMPORARY TABLE  `FORECOURT_SUM` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO FORECOURT_SUM (COMPANY,BRANCH,ITEMCODE,QTY)
    Select COMPANY,BRANCH,ITEMCODE,Sum(QTY) From FORECOURT Group by ITEMCODE;
CREATE TEMPORARY TABLE  `GRPO` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `U_SHIFT` varchar(30) NULL default '',
    `U_TIME` varchar(30) NULL default '',
    `U_ATTENDANT` varchar(100) NULL default '',
    `username` varchar(100) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO GRPO (COMPANY,BRANCH,U_SHIFT,U_TIME,U_ATTENDANT,username,ITEMCODE,QTY)
    Select a.COMPANY,a.BRANCH,b.U_SHIFT,b.U_TIME,b.U_ATTENDANT,i.username,a.ITEMCODE,Sum(QTY)
            from stockcard a
                 LEFT OUTER JOIN purchasedeliveries b ON a.COMPANY = b.COMPANY AND a.BRANCH = b.BRANCH AND a.REFNO = b.DOCNO
                 left outer join users i on b.CREATEDBY = i.userid
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
             AND a.refdate = pi_date1
             AND a.warehouse in ('UGT-LUBS')
             AND REFTYPE IN ('PDN')
    Group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `STO` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `U_SHIFT` varchar(30) NULL default '',
    `U_TIME` varchar(30) NULL default '',
    `U_ATTENDANT` varchar(100) NULL default '',
    `username` varchar(100) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO STO (COMPANY,BRANCH,U_SHIFT,U_TIME,U_ATTENDANT,username,ITEMCODE,QTY)
    Select a.COMPANY,a.BRANCH,b.U_SHIFT,b.U_TIME,b.U_ATTENDANT,i.username,a.ITEMCODE,Sum(QTY*-1)
            from stockcard a
                  LEFT OUTER JOIN stocktransfers b ON a.COMPANY = b.COMPANY AND a.BRANCH = b.BRANCH AND a.REFNO = b.DOCNO
                  left outer join users i on b.CREATEDBY = i.userid
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
             AND a.refdate = pi_date1
             AND a.warehouse in ('UGT-LUBS')
             AND REFTYPE IN ('GT-')
    Group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `STI` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `U_SHIFT` varchar(30) NULL default '',
    `U_TIME` varchar(30) NULL default '',
    `U_ATTENDANT` varchar(100) NULL default '',
    `username` varchar(100) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO STI (COMPANY,BRANCH,U_SHIFT,U_TIME,U_ATTENDANT,username,ITEMCODE,QTY)
    Select a.COMPANY,a.BRANCH,b.U_SHIFT,b.U_TIME,b.U_ATTENDANT,i.username,a.ITEMCODE,Sum(QTY)
            from stockcard a
                  LEFT OUTER JOIN stocktransfers b ON a.COMPANY = b.COMPANY AND a.BRANCH = b.BRANCH AND a.REFNO = b.DOCNO
                  left outer join users i on b.CREATEDBY = i.userid
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
             AND a.refdate = pi_date1
             AND a.warehouse in ('FORECOURT')
             AND REFTYPE IN ('GT+')
    Group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `CASH_SALES` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `U_SHIFT` varchar(30) NULL default '',
    `U_TIME` varchar(30) NULL default '',
    `U_ATTENDANT` varchar(100) NULL default '',
    `username` varchar(100) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `UNITPRICE` NUMERIC(18,6) NULL default '0',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO CASH_SALES (COMPANY,BRANCH,U_SHIFT,U_TIME,U_ATTENDANT,username,ITEMCODE,QTY,UNITPRICE,AMOUNT)
    Select a.company, a.branch,a.U_SHIFT,a.U_TIME,a.U_ATTENDANT,i.username, b.itemcode, sum(b.quantity), sum(b.linetotal)/sum(b.quantity), sum(b.linetotal)
       from arinvoices a
            left outer join arinvoiceitems b on a.DOCID = b.DOCID and a.COMPANY = b.COMPANY and a.BRANCH = b.BRANCH
            left outer join users i on a.CREATEDBY = i.userid
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
             AND a.docdate = pi_date1
             AND b.whscode in ('FORECOURT')
             AND a.trxtype = 'POS'
             AND a.docstatus not in('D')
    Group by a.docno, b.itemcode;
CREATE TEMPORARY TABLE  `CHARGE_SALES` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `UNITPRICE` NUMERIC(18,6) NULL default '0',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO CHARGE_SALES (COMPANY,BRANCH,ITEMCODE,QTY,UNITPRICE,AMOUNT)
    Select a.company, a.branch, b.itemcode, sum(b.quantity), sum(b.linetotal)/sum(b.quantity), sum(b.linetotal)
       from arinvoices a
            left outer join arinvoiceitems b on a.DOCID = b.DOCID and a.COMPANY = b.COMPANY and a.BRANCH = b.BRANCH
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
             AND a.docdate = pi_date1
             AND b.whscode in ('FORECOURT')
             AND a.trxtype not in('POS')
             AND a.docstatus not in('D')
    Group by a.docno, b.itemcode;
Select
      pi_company as Company,
      upper(co.companyname) as CompanyName,
      upper(concat('(',co.companytype, ' Group)')) as CompanyType,
      pi_branch as Branch,
      upper(concat(pi_branch,' - ',br.BRANCHNAME)) as BranchName,
      date(pi_date1) as date1,
      if(pi_product = '', 'ALL', CONCAT(i.ItemCode,' - ', i.ItemDesc)) AS H_Item,
      case
      when sto.U_SHIFT <> '' and sti.U_SHIFT = '' and cs.U_SHIFT = '' and gr.U_SHIFT = '' then sto.U_SHIFT
      when sto.U_SHIFT = '' and sti.U_SHIFT <> '' and cs.U_SHIFT = '' and gr.U_SHIFT = '' then sti.U_SHIFT
      when sto.U_SHIFT = '' and sti.U_SHIFT = '' and cs.U_SHIFT <> '' and gr.U_SHIFT = '' then cs.U_SHIFT
      when sto.U_SHIFT = '' and sti.U_SHIFT = '' and cs.U_SHIFT = '' and gr.U_SHIFT <> '' then gr.U_SHIFT
      else cs.U_SHIFT
      end
      as U_SHIFT,
      case
      when sto.U_TIME <> '' and sti.U_TIME = '' and cs.U_TIME = '' and gr.U_TIME = '' then sto.U_TIME
      when sto.U_TIME = '' and sti.U_TIME <> '' and cs.U_TIME = '' and gr.U_TIME = '' then sti.U_TIME
      when sto.U_TIME = '' and sti.U_TIME = '' and cs.U_TIME <> '' and gr.U_TIME = '' then cs.U_TIME
      when sto.U_TIME = '' and sti.U_TIME = '' and cs.U_TIME = '' and gr.U_TIME <> '' then gr.U_TIME
      else cs.U_TIME
      end
      as U_TIME,
      case
      when sto.U_ATTENDANT <> '' and sti.U_ATTENDANT = '' and cs.U_ATTENDANT = '' and gr.U_ATTENDANT = '' then sto.U_ATTENDANT
      when sto.U_ATTENDANT = '' and sti.U_ATTENDANT <> '' and cs.U_ATTENDANT = '' and gr.U_ATTENDANT = '' then sti.U_ATTENDANT
      when sto.U_ATTENDANT = '' and sti.U_ATTENDANT = '' and cs.U_ATTENDANT <> '' and gr.U_ATTENDANT = '' then cs.U_ATTENDANT
      when sto.U_ATTENDANT = '' and sti.U_ATTENDANT = '' and cs.U_ATTENDANT = '' and gr.U_ATTENDANT <> '' then gr.U_ATTENDANT
      else cs.U_ATTENDANT
      end
      as U_ATTENDANT,
      case
      when sto.username <> '' and sti.username = '' and cs.username = '' and gr.username = '' then sto.username
      when sto.username = '' and sti.username <> '' and cs.username = '' and gr.username = '' then sti.username
      when sto.username = '' and sti.username = '' and cs.username <> '' and gr.username = '' then cs.username
      when sto.username = '' and sti.username = '' and cs.username = '' and gr.username <> '' then gr.username
      else cs.username
      end
      as username,
      i.ItemCode,
      i.ItemDesc,
      (if(ugt.QTY is null, 0, ugt.QTY) + if(sto.QTY is null, 0, sto.QTY))-if(gr.QTY is null, 0, gr.QTY) as OB_UGT,
      if(gr.QTY is null, 0, gr.QTY) as GRPO,
      if(sto.QTY is null, 0, sto.QTY) as STO,
      if(ugt.QTY is null, 0, ugt.QTY) as UGT_Close,
      ((if(fc.QTY is null, 0, fc.QTY) - if(sti.QTY is null, 0, sti.QTY)) + if(cs.QTY is null, 0, cs.QTY)) + if(cs2.QTY is null, 0, cs2.QTY) as OB_FC,
      if(sti.QTY is null, 0, sti.QTY) as STI,
      if(cs.QTY is null, 0, cs.QTY) as Sold,
      if(cs.UNITPRICE is null, 0, cs.UNITPRICE) as UnitPrice,
      if(cs.AMOUNT is null, 0, cs.AMOUNT) as Amount,
      if(cs2.QTY is null, 0, cs2.QTY) as Sold2,
      if(cs2.UNITPRICE is null, 0, cs2.UNITPRICE) as UnitPrice2,
      if(cs2.AMOUNT is null, 0, cs2.AMOUNT) as Amount2,
      if(fc.QTY is null, 0, fc.QTY) as FC_Close
      From items i
          Left outer join UGT_SUM ugt on i.itemcode = ugt.ITEMCODE
          Left outer join FORECOURT_SUM fc on i.itemcode = fc.ITEMCODE
          Left outer join GRPO gr on i.itemcode = gr.ITEMCODE
          Left outer join STO sto on i.itemcode = sto.ITEMCODE
          Left outer join STI sti on i.itemcode = sti.ITEMCODE
          Left outer join CASH_SALES cs on i.itemcode = cs.ITEMCODE
          Left outer join CHARGE_SALES cs2 on i.itemcode = cs2.ITEMCODE
          Left outer join branches br ON br.BRANCHCODE = pi_branch
          Left outer join companies co on co.companycode = pi_company
Where (ugt.QTY <> 0 or gr.QTY <> 0 or sto.QTY <> 0
   or fc.QTY <> 0 or sti.QTY <> 0 or cs.QTY <> 0 or cs2.QTY <> 0)
   and (pi_product='' or (pi_product<>'' AND i.ItemCode = pi_product))
Group by i.ItemCode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `daily_station_ar_summary`
--

DROP PROCEDURE IF EXISTS `daily_station_ar_summary`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `daily_station_ar_summary`(IN pi_company VARCHAR(30),
                                            IN pi_branch VARCHAR(30),
                                            IN pi_date1 VARCHAR(30),
                                            IN pi_date2 VARCHAR(30))
BEGIN
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       b.u_date_from,
       if(b.u_shift like '1%', 'X', '') as Shift1,
       if(b.u_shift like '2%', 'X', '') as Shift2,
       a.u_custno as bpcode,
       a.u_custname as bpname,
       sum(if(a.u_grossamount=0,a.u_amount,a.u_grossamount)) as amount
       
       from u_dailyshiftsaleschargesales a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co on a.company = co.companycode
   where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between pi_date1 and pi_date2
   group by b.u_date_from, b.u_time_from, b.u_shift, a.u_custno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `daily_walkinsales`
--

DROP PROCEDURE IF EXISTS `daily_walkinsales`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `daily_walkinsales`(IN pi_company VARCHAR(30),
                                            IN pi_branch VARCHAR(30),
                                            IN pi_date1 VARCHAR(30),
                                            IN pi_date2 VARCHAR(30))
BEGIN
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       b.u_date_from,
       if(b.u_shift like '1%', 'X', '') as Shift1,
       if(b.u_shift like '2%', 'X', '') as Shift2,
       a.u_custno as bpcode,
       a.u_custname as bpname,
       a.u_plateno as plateno,
       a.u_refno as invoiceno,
       a.u_itemcode as itemcode,
       a.u_itemdesc as itemdesc,
       a.u_amount as amount,
       a.u_grossamount as grossamount,
       a.u_liters as liters,
       a.u_discamount as discamount
       from u_dailyshiftsaleswalkin a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co on a.company = co.companycode
   where a.company = pi_company and a.branch = pi_branch and (b.u_date_from between pi_date1 and pi_date2) and a.u_discamount > 0
   order by b.u_date_from;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `daily_walkinsales_customer`
--

DROP PROCEDURE IF EXISTS `daily_walkinsales_customer`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `daily_walkinsales_customer`(IN pi_company VARCHAR(30),
                                            IN pi_branch VARCHAR(30),
                                            IN pi_date1 VARCHAR(30),
                                            IN pi_date2 VARCHAR(30),
                                            IN pi_customer VARCHAR(30))
BEGIN
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       b.u_date_from,
       if(b.u_shift like '1%', 'X', '') as Shift1,
       if(b.u_shift like '2%', 'X', '') as Shift2,
       a.u_custno as bpcode,
       a.u_custname as bpname,
       a.u_plateno as plateno,
       a.u_refno as invoiceno,
       a.u_itemcode as itemcode,
       a.u_itemdesc as itemdesc,
       a.u_amount as amount,
       a.u_grossamount as grossamount,
       a.u_liters as liters,
       a.u_discamount as discamount
       from u_dailyshiftsaleswalkin a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co on a.company = co.companycode
   where a.company = pi_company and
         a.branch = pi_branch and
         b.u_date_from between pi_date1 and pi_date2 and
         a.u_custno = pi_customer
         and a.u_discamount > 0
   order by b.u_date_from;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `debtoraging_st`
--

DROP PROCEDURE IF EXISTS `debtoraging_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `debtoraging_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_debtor_fr VARCHAR(30), IN pi_debtor_to VARCHAR(30),
                                  IN pi_date_to DATE, IN pi_currencytype INT, IN pi_rpttype INT)
BEGIN

DECLARE v_now           VARCHAR(30);
DECLARE v_debtor_fr     VARCHAR(30);
DECLARE v_debtor_to     VARCHAR(30);
DECLARE v_localcurrency VARCHAR(30);
DECLARE v_mth01 DATE;
DECLARE v_mth02 DATE;
DECLARE v_mth03 DATE;
DECLARE v_mth04 DATE;
DECLARE v_mth05 DATE;
DECLARE v_mth06 DATE;
DECLARE v_mth07 DATE;
DECLARE v_mth08 DATE;
DECLARE v_mth09 DATE;
DECLARE v_mth10 DATE;
DECLARE v_mth11 DATE;
DECLARE v_mth12 DATE;
DECLARE v_mth01desc VARCHAR(100);
DECLARE v_mth02desc VARCHAR(100);
DECLARE v_mth03desc VARCHAR(100);
DECLARE v_mth04desc VARCHAR(100);
DECLARE v_mth05desc VARCHAR(100);
DECLARE v_mth06desc VARCHAR(100);
DECLARE v_mth07desc VARCHAR(100);
DECLARE v_mth08desc VARCHAR(100);
DECLARE v_mth09desc VARCHAR(100);
DECLARE v_mth10desc VARCHAR(100);
DECLARE v_mth11desc VARCHAR(100);
DECLARE v_mth12desc VARCHAR(100);

  IF pi_debtor_fr is null THEN
    SET v_debtor_fr = '';
  ELSE
    SET v_debtor_fr = pi_debtor_fr;
  END IF;

  IF pi_debtor_to is null THEN
    SET v_debtor_to = '';
  ELSE
    SET v_debtor_to = pi_debtor_to;
  END IF;

  IF v_debtor_fr > '' and v_debtor_to = '' THEN

    SET v_debtor_to = v_debtor_fr;

  ELSEIF v_debtor_fr = '' and v_debtor_to > '' THEN

    SET v_debtor_fr = v_debtor_to;

  ELSEIF v_debtor_fr = '' and v_debtor_to = '' THEN

    SET v_debtor_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;

SET v_now = CAST(NOW() as char(30));
SET v_mth01 = pi_date_to;
SET v_mth02 = DATE_ADD(pi_date_to, INTERVAL -1  MONTH);
SET v_mth03 = DATE_ADD(pi_date_to, INTERVAL -2  MONTH);
SET v_mth04 = DATE_ADD(pi_date_to, INTERVAL -3  MONTH);
SET v_mth05 = DATE_ADD(pi_date_to, INTERVAL -4  MONTH);
SET v_mth06 = DATE_ADD(pi_date_to, INTERVAL -5  MONTH);
SET v_mth07 = DATE_ADD(pi_date_to, INTERVAL -6  MONTH);
SET v_mth08 = DATE_ADD(pi_date_to, INTERVAL -7  MONTH);
SET v_mth09 = DATE_ADD(pi_date_to, INTERVAL -8  MONTH);
SET v_mth10 = DATE_ADD(pi_date_to, INTERVAL -9  MONTH);
SET v_mth11 = DATE_ADD(pi_date_to, INTERVAL -10 MONTH);
SET v_mth12 = DATE_ADD(pi_date_to, INTERVAL -11 MONTH);

IF pi_rpttype = 0 THEN

  SET v_mth01desc = UPPER(CAST(Date_format(v_mth01,'%b') AS CHAR));
  SET v_mth02desc = UPPER(CAST(Date_format(v_mth02,'%b') AS CHAR));
  SET v_mth03desc = UPPER(CAST(Date_format(v_mth03,'%b') AS CHAR));
  SET v_mth04desc = UPPER(CAST(Date_format(v_mth04,'%b') AS CHAR));
  SET v_mth05desc = UPPER(CAST(Date_format(v_mth05,'%b') AS CHAR));
  SET v_mth06desc = CONCAT(UPPER(CAST(Date_format(v_mth06,'%b') AS CHAR)),'++');


ELSE

  SET v_mth01desc = UPPER(CAST(Date_format(v_mth01,'%b') AS CHAR));
  SET v_mth02desc = UPPER(CAST(Date_format(v_mth02,'%b') AS CHAR));
  SET v_mth03desc = UPPER(CAST(Date_format(v_mth03,'%b') AS CHAR));
  SET v_mth04desc = UPPER(CAST(Date_format(v_mth04,'%b') AS CHAR));
  SET v_mth05desc = UPPER(CAST(Date_format(v_mth05,'%b') AS CHAR));
  SET v_mth06desc = UPPER(CAST(Date_format(v_mth06,'%b') AS CHAR));
  SET v_mth07desc = UPPER(CAST(Date_format(v_mth07,'%b') AS CHAR));
  SET v_mth08desc = UPPER(CAST(Date_format(v_mth08,'%b') AS CHAR));
  SET v_mth09desc = UPPER(CAST(Date_format(v_mth09,'%b') AS CHAR));
  SET v_mth10desc = UPPER(CAST(Date_format(v_mth10,'%b') AS CHAR));
  SET v_mth11desc = UPPER(CAST(Date_format(v_mth11,'%b') AS CHAR));
  SET v_mth12desc = CONCAT(UPPER(CAST(Date_format(v_mth12,'%b') AS CHAR)),'++');

END IF;

    SELECT CURRENCY INTO v_localcurrency
      FROM COMPANIES
      WHERE COMPANYCODE = pi_company LIMIT 1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP4;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP4` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `BALANCE`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP3;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP3` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `BALANCE`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP2;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `GLDEBIT_O`     DECIMAL(20,6),
    `GLCREDIT_O`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS AGING_TEMP;
    CREATE TEMPORARY TABLE `AGING_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `MTH01`        DECIMAL(20,6),
    `MTH02`        DECIMAL(20,6),
    `MTH03`        DECIMAL(20,6),
    `MTH04`        DECIMAL(20,6),
    `MTH05`        DECIMAL(20,6),
    `MTH06`        DECIMAL(20,6),
    `MTH07`        DECIMAL(20,6),
    `MTH08`        DECIMAL(20,6),
    `MTH09`        DECIMAL(20,6),
    `MTH10`        DECIMAL(20,6),
    `MTH11`        DECIMAL(20,6),
    `MTH12`        DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTH01DESC`    VARCHAR(100),
    `MTH02DESC`    VARCHAR(100),
    `MTH03DESC`    VARCHAR(100),
    `MTH04DESC`    VARCHAR(100),
    `MTH05DESC`    VARCHAR(100),
    `MTH06DESC`    VARCHAR(100),
    `MTH07DESC`    VARCHAR(100),
    `MTH08DESC`    VARCHAR(100),
    `MTH09DESC`    VARCHAR(100),
    `MTH10DESC`    VARCHAR(100),
    `MTH11DESC`    VARCHAR(100),
    `MTH12DESC`    VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS AGING_TEMP2;
    CREATE TEMPORARY TABLE `AGING_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `MTH01`        DECIMAL(20,6),
    `MTH02`        DECIMAL(20,6),
    `MTH03`        DECIMAL(20,6),
    `MTH04`        DECIMAL(20,6),
    `MTH05`        DECIMAL(20,6),
    `MTH06`        DECIMAL(20,6),
    `MTH07`        DECIMAL(20,6),
    `MTH08`        DECIMAL(20,6),
    `MTH09`        DECIMAL(20,6),
    `MTH10`        DECIMAL(20,6),
    `MTH11`        DECIMAL(20,6),
    `MTH12`        DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTH01DESC`    VARCHAR(100),
    `MTH02DESC`    VARCHAR(100),
    `MTH03DESC`    VARCHAR(100),
    `MTH04DESC`    VARCHAR(100),
    `MTH05DESC`    VARCHAR(100),
    `MTH06DESC`    VARCHAR(100),
    `MTH07DESC`    VARCHAR(100),
    `MTH08DESC`    VARCHAR(100),
    `MTH09DESC`    VARCHAR(100),
    `MTH10DESC`    VARCHAR(100),
    `MTH11DESC`    VARCHAR(100),
    `MTH12DESC`    VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;



      INSERT INTO STATEMENT_TEMP2 (COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT, GLDEBIT_O, GLCREDIT_O)
        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount) * -1)),
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)))),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,SUM(CI.amount),0)),
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE)))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT <> 'D' AND  C.DOCTYPE = 'C' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE <= pi_date_to)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  <= pi_date_to    AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,SUM(YI.amount),0 )),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))))),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,0,SUM(YI.amount) * 1)),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (PAYMENTS Y CROSS JOIN PAYMENTINVOICES YI)
		                      ON ( Y.COMPANY = JE.COMPANY AND Y.BRANCHCODE = JE.BRANCH AND Y.DOCSTAT <> 'D' AND  Y.DOCTYPE = 'C' AND
                               YI.COMPANY = JE.COMPANY AND YI.BRANCH = JE.BRANCH AND YI.DOCNO = Y.DOCNO AND
                               JE.slacctno = YI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', YI.REFNO,
                          MID(concat(YI.REFNO,'/'), 1,locate('/',concat(YI.REFNO,'/'),1) + (locate('/',concat(YI.REFNO,'/'),1)-
                          locate('/',concat(YI.REFNO,'/'),locate('/',concat(YI.REFNO,'/'),1)) -1))) AND Y.DOCDATE <= pi_date_to)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  <= pi_date_to    AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO


            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),

               IF(pi_currencytype = 0, SUM(JVI.DEBIT), IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.DEBIT_FC),SUM(JVI.DEBIT))),
               IF(pi_currencytype = 0, SUM(JVI.CREDIT),IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.CREDIT_FC),SUM(JVI.CREDIT)))

            FROM JOURNALENTRYITEMS JE

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH  AND JVI.COMPANY = JV.COMPANY AND JV.SBO_POST_FLAG = 1 AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.ITEMNO = JE.SLACCTNO AND
                              JV.DOCDATE <= pi_date_to AND JE.DOCNO = if(JE.DOCTYPE <> 'JV', JVI.REFNO,
                          MID(concat(JVI.REFNO,'/'), 1,locate('/',concat(JVI.REFNO,'/'),1) + (locate('/',concat(JVI.REFNO,'/'),1)-
                          locate('/',concat(JVI.REFNO,'/'),locate('/',concat(JVI.REFNO,'/'),1)) -1)))  )
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.DOCDATE  <= pi_date_to    AND
                  JVI.ITEMNO = JE.SLACCTNO    AND
                  JVI.REFNO LIKE CONCAT(JE.DOCNO,if(JE.DOCTYPE <> 'JV','','/%')) AND
                  JVI.ITEMTYPE = 'C'
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION


        SELECT C.COMPANY, C.BRANCHCODE, 'RC', 'B' as LINETYPE, C.CUSTNO, C.DOCDATE, null,
               C.docno, 'PAYMENT COLLECTED', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM COLLECTIONS C
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN COLLECTIONSINVOICES CI)
                       ON (CI.COMPANY = C.COMPANY AND CI.BRANCH = C.BRANCHCODE AND CI.REFNO = C.DOCNO AND
                           J.COMPANY = CI.COMPANY AND J.BRANCH = CI.BRANCH AND J.DOCTYPE = 'RC' AND J.DOCNO = CI.DOCNO AND
                           J.SLTYPE = 'C' AND J.DOCDATE <= pi_date_to AND J.ISDEBIT = 1)
                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = C.COMPANY AND JE.BRANCH = C.BRANCHCODE AND JE.DOCNO = C.DOCNO AND
                                                        JE.SLTYPE = 'C' AND JE.SLACCTNO = C.CUSTNO AND JE.ISDEBIT = 0
        WHERE C.COMPANY       =  pi_company   AND
              C.BRANCHCODE    =  pi_branch    AND
              C.DOCTYPE       = 'C'           AND
              C.DOCSTAT       <> 'D'          AND
              C.COLLFOR       <> 'SI'         AND
              C.DOCDATE       <= pi_date_to   AND
              C.SBO_POST_FLAG = 1             AND
              C.CUSTNO        >=  v_debtor_fr AND
              C.CUSTNO        <=  v_debtor_to
        GROUP BY C.CUSTNO, C.DOCNO

        UNION


         SELECT P.COMPANY, P.BRANCHCODE, 'PY', 'B' as LINETYPE, P.BPCODE, P.DOCDATE, null,
               P.docno, 'PAYMENT TO DEBTOR', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM PAYMENTS P
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN COLLECTIONSINVOICES CI)
                       ON (CI.COMPANY = P.COMPANY AND CI.BRANCH = P.BRANCHCODE AND CI.REFNO = P.DOCNO AND
                           J.COMPANY = CI.COMPANY AND J.BRANCH = CI.BRANCH AND J.DOCTYPE = 'RC' AND J.DOCNO = CI.DOCNO AND
                           J.SLTYPE = 'C' AND J.DOCDATE <= pi_date_to AND J.ISDEBIT = 0)

                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = P.COMPANY AND JE.BRANCH = P.BRANCHCODE AND JE.DOCNO = P.DOCNO AND
                                                        JE.SLTYPE = 'C' AND JE.SLACCTNO = P.BPCODE AND JE.ISDEBIT = 1
        WHERE P.COMPANY       =  pi_company   AND
              P.BRANCHCODE    =  pi_branch    AND
              P.DOCTYPE       = 'C'           AND
              P.DOCSTAT       <> 'D'          AND
              P.COLLFOR       <> 'SI'         AND
              P.DOCDATE       <= pi_date_to   AND
              P.SBO_POST_FLAG = 1             AND
              P.BPCODE        >=  v_debtor_fr AND
              P.BPCODE        <=  v_debtor_to
        GROUP BY P.BPCODE, P.DOCNO

        UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'B' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)),0),
	             IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(CI.amount) is null,0,sum(CI.amount)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)))* -1),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC * -1) - IF(sum(CI.amount) is null,0,sum(CI.amount)))* -1),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)))* -1))),
               0,0
            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT = 'C' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE <= pi_date_to)


                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.ISDEBIT  = 0             AND
                  JE.DOCDATE  <= pi_date_to    AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

        UNION

        SELECT AR.COMPANY, AR.BRANCH, 'CM', 'B' as LINETYPE, AR.BPCODE, AR.DOCDATE, AR.DOCDUEDATE, AR.DOCNO, 'CREDIT MEMO', '',
               0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AR.DUEAMOUNT * AR.CURRENCYRATE),
               IF(v_localcurrency <> AR.CURRENCY, JE.GLCREDIT_FC - AR.DUEAMOUNT, JE.GLCREDIT - AR.DUEAMOUNT)),
               0
            FROM ARCREDITMEMOS AR
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AR.COMPANY AND JE.BRANCH = AR.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AR.DOCNO,
                 ARCREDITMEMOITEMS ARI
            WHERE AR.COMPANY  = ARI.COMPANY AND
                  AR.BRANCH   = ARI.BRANCH  AND
                  AR.DOCID    = ARI.DOCID   AND
                  AR.COMPANY  = pi_company  AND
                  AR.BRANCH   = pi_branch   AND
                  AR.DOCNO    = JE.DOCNO    AND
                  AR.DOCDATE <= pi_date_to  AND
                  AR.BPCODE  >= v_debtor_fr AND
                  AR.BPCODE  <= v_debtor_to AND
                  ARI.BASETYPE = 'ARINVOICE'
            GROUP BY AR.DOCNO

        UNION

        SELECT AR.COMPANY, AR.BRANCH, 'AR', 'B' as LINETYPE, AR.BPCODE, JE.DOCDATE, JE.DOCDUEDATE, ARI.BASEDOCNO, 'SALES / DEBIT MEMO', '',
               0,0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AR.DUEAMOUNT * AR.CURRENCYRATE),
               IF(v_localcurrency <> AR.CURRENCY, JE.GLCREDIT_FC - AR.DUEAMOUNT, JE.GLCREDIT - AR.DUEAMOUNT))
            FROM ARCREDITMEMOS AR
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AR.COMPANY AND JE.BRANCH = AR.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AR.DOCNO,
                 ARCREDITMEMOITEMS ARI
            WHERE AR.COMPANY  = ARI.COMPANY AND
                  AR.BRANCH   = ARI.BRANCH  AND
                  AR.DOCID    = ARI.DOCID   AND
                  AR.COMPANY  = pi_company  AND
                  AR.BRANCH   = pi_branch   AND
                  AR.DOCNO    = JE.DOCNO    AND
                  AR.DOCDATE <= pi_date_to  AND
                  AR.BPCODE  >= v_debtor_fr AND
                  AR.BPCODE  <= v_debtor_to AND
                  ARI.BASETYPE = 'ARINVOICE'
            GROUP BY AR.DOCNO;





        INSERT INTO STATEMENT_TEMP4 (COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT)
        SELECT COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2,
            IF((GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)) > 0, (GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)), 0),
            IF((GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)) > 0,  (GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)), 0)
          FROM STATEMENT_TEMP2
          GROUP BY BPCODE, DOCTYPE, DOCNO;

       DELETE FROM STATEMENT_TEMP4 WHERE GLDEBIT = 0 AND GLCREDIT = 0;

       IF pi_rpttype = 0 THEN

         INSERT INTO AGING_TEMP (COMPANY, BRANCH, BPCODE, DOCTYPE, DOCNO, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12, OPENCREDIT,
                             MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC)
         SELECT COMPANY, BRANCH, BPCODE, DOCTYPE, DOCNO,
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth01,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth02,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth03,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth04,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth05,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') <=  DATE_FORMAT(v_mth06,'%Y%m'), GLDEBIT, 0),
                0,
                0,
                0,
                0,
                0,
                0,
                GLCREDIT * -1,
                v_mth01desc,
                v_mth02desc,
                v_mth03desc,
                v_mth04desc,
                v_mth05desc,
                v_mth06desc,
                v_mth07desc,
                v_mth08desc,
                v_mth09desc,
                v_mth10desc,
                v_mth11desc,
                v_mth12desc
             FROM STATEMENT_TEMP4;

       ELSE

         INSERT INTO AGING_TEMP (COMPANY, BRANCH, BPCODE, DOCTYPE, DOCNO, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12, OPENCREDIT,
                             MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC)
         SELECT COMPANY, BRANCH, BPCODE, DOCTYPE, DOCNO,
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth01,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth02,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth03,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth04,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth05,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth06,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth07,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth08,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth09,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth10,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth11,'%Y%m'), GLDEBIT, 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') <=  DATE_FORMAT(v_mth12,'%Y%m'),GLDEBIT, 0),
                GLCREDIT * -1,
                v_mth01desc,
                v_mth02desc,
                v_mth03desc,
                v_mth04desc,
                v_mth05desc,
                v_mth06desc,
                v_mth07desc,
                v_mth08desc,
                v_mth09desc,
                v_mth10desc,
                v_mth11desc,
                v_mth12desc
             FROM STATEMENT_TEMP4  GROUP BY BPCODE, DOCTYPE, DOCNO;

       END IF;


       SELECT UPPER(c.COMPANYNAME) as COMPANY,
              UPPER(concat(e.BARANGAY,' ', e.STREET,' ', e.ZIP, ' ', e.CITY, ' ',(select pr.PROVINCENAME from  provinces pr where pr.province = e.province), ', ', (SELECT cct.COUNTRYNAME FROM COUNTRIES cct WHERE e.country = cct.country ))) as BRANCHCODE,
 	            cu.CUSTNO,
	            cu.CUSTNAME,
	            cu.PHONE1,
	            cu.FAX,
              cu.CURRENCY,
              c.CURRENCY as LOCALCUR,
              CR.CURRENCYNAME,
              CR2.CURRENCYNAME AS LOCALCURRENCY,
	            a.STREET,
	            a.BARANGAY,
	            a.CITY,
	            a.ZIP,
            	p.PROVINCENAME,
	            ct.COUNTRYNAME,
	            CC.NAME,
              e.U_U_TELNO,
              e.U_U_FAXNO,
              e.U_U_EMAIL,
              pt.PAYMENTTERMNAME,
              ST.LINETYPE, ST.BPCODE, ST.DOCDATE, ST.DOCDUEDATE, ST.DOCNO, ST.DESCRIPTION, ST.DESCRIPTION2,
              ST.GLDEBIT,
              ST.GLCREDIT,
              AP.MTH01, AP.MTH02, AP.MTH03, AP.MTH04, AP.MTH05, AP.MTH06, AP.MTH07, AP.MTH08, AP.MTH09, AP.MTH10, AP.MTH11, AP.MTH12, AP.OPENCREDIT,
              AP.MTH01DESC, AP.MTH02DESC, AP.MTH03DESC, AP.MTH04DESC, AP.MTH05DESC, AP.MTH06DESC, AP.MTH07DESC, AP.MTH08DESC, AP.MTH09DESC,
              AP.MTH10DESC, AP.MTH11DESC, AP.MTH12DESC
           FROM STATEMENT_TEMP4 ST
              LEFT OUTER JOIN CUSTOMERS CU        ON CU.COMPANY = ST.COMPANY AND CU.BRANCH = ST.BRANCH AND CU.CUSTNO = ST.BPCODE
              LEFT OUTER JOIN CURRENCIES CR       ON CR.CURRENCY = CU.CURRENCY
              LEFT OUTER JOIN BRANCHES e          ON ST.BRANCH = e.BRANCHCODE
              LEFT OUTER JOIN COMPANIES c         ON c.COMPANYCODE = ST.COMPANY
              LEFT OUTER JOIN CURRENCIES CR2      ON CR2.CURRENCY = C.CURRENCY
              LEFT OUTER JOIN ADDRESSES a         ON a.COMPANY = ST.company and a.BRANCH = ST.branch and
                                                     a.REFID = CU.CUSTNO and a.REFTYPE = 'CUSTOMER' and a.ADDRESSTYPE = 0 and
                                                     CU.DFLTBILLTO = a.ADDRESSNAME
              LEFT OUTER JOIN COUNTRIES ct        ON a.COUNTRY = ct.COUNTRY
              LEFT OUTER JOIN PROVINCES p         ON a.province = p.province and ct.country = p.country
              LEFT OUTER JOIN CUSTOMERCONTACTS cc ON cc.COMPANY = ST.company  and cc.BRANCH = ST.branch and
                                                     cc.CUSTNO = CU.CUSTNO and cc.CONTACTPERSON = CU.DFLTCONTACTPERSON
              LEFT OUTER JOIN PAYMENTTERMS pt     ON pt.PAYMENTTERM = CU.PAYMENTTERM
              LEFT OUTER JOIN AGING_TEMP AP      ON AP.COMPANY = ST.COMPANY AND AP.BRANCH = ST.BRANCH AND AP.DOCTYPE = ST.DOCTYPE AND AP.DOCNO = ST.DOCNO AND AP.BPCODE = ST.BPCODE
              ORDER BY ST.BPCODE, ST.DOCDATE, ST.DOCNO;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `debtorledger_st`
--

DROP PROCEDURE IF EXISTS `debtorledger_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `debtorledger_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_bpno_fr VARCHAR(30), IN pi_bpno_to VARCHAR(30),
                                   IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_currency INT, IN pi_exzero INT, IN pi_newpage INT)
BEGIN

DECLARE v_bpno_fr VARCHAR(30);
DECLARE v_bpno_to VARCHAR(30);
DECLARE v_selectall   INT;
DECLARE v_now        VARCHAR(30);

SET v_now = CAST(NOW() as char(30));

  IF pi_bpno_fr is null THEN
    SET v_bpno_fr = '';
  ELSE
    SET v_bpno_fr = pi_bpno_fr;
  END IF;

  IF pi_bpno_to is null THEN
    SET v_bpno_to = '';
  ELSE
    SET v_bpno_to = pi_bpno_to;
  END IF;

  IF v_bpno_fr = '' and v_bpno_to = '' THEN
     SET v_selectall = 1;
     SET v_bpno_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZ';
  ELSEIF v_bpno_fr > '' and v_bpno_to = '' THEN
    SET v_selectall = 0;
    SET v_bpno_to = v_bpno_fr;
  ELSEIF v_bpno_fr = '' and v_bpno_to > '' THEN
    SET v_selectall = 0;
    SET v_bpno_fr = v_bpno_to;
  END IF;


  DROP TEMPORARY TABLE IF EXISTS LEDGER_TEMP ;
  CREATE TEMPORARY TABLE `LEDGER_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `CURRENCY`     VARCHAR(30)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2,
                                DESCRIPTION3, GLDEBIT, GLCREDIT, CURRENCY)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, 'A' , JE.DOCDATE, JE.DOCTYPE, JE.DOCNO, JE.SLACCTNO, JE.SLACCTNAME, '',
               CASE WHEN JE.DOCTYPE = 'AR'  THEN 'SALES/DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM'  THEN 'ACCOUNT CREDITED'
                    WHEN JE.DOCTYPE = 'AP'  THEN 'PURCHASE/CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'ACM' THEN 'ACCOUNT DEBITED'
                    WHEN JE.DOCTYPE = 'PY'  THEN 'PAYMENT FOR ACCOUNT'
                    WHEN JE.DOCTYPE = 'RC'  THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'DT'  THEN 'AR DOWNPAYMENT'
                    WHEN JE.DOCTYPE = 'JV'  THEN IF(JE.GLDEBIT > 0, 'ACCOUNT DEBITED', 'ACCOUNT CREDITED')
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.BPREFNO
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPREFNO
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPREFNO
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPREFNO
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.REFNO
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.REFNO
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPREFNO
                    WHEN JE.DOCTYPE = 'JV'  THEN JV.REFERENCE1
                    ELSE '' END,
                IF(JE.DOCTYPE = 'JV', IF(JV.REFERENCE2 > '', JV.REFERENCE2, ''),''),
                IF(pi_currency = 0, JE.GLDEBIT, IF(JE.CURRENCY <> CO.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
                IF(pi_currency = 0, JE.GLCREDIT, IF(JE.CURRENCY <> CO.CURRENCY, JE.GLCREDIT_FC, JE.GLCREDIT)),
                IF(pi_currency = 0, CO.CURRENCY, JE.CURRENCY)
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN ARINVOICES AR            ON AR.COMPANY      = pi_company  AND AR.BRANCH      = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','')       AND AR.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APINVOICES AP            ON AP.COMPANY      = pi_company  AND AP.BRANCH      = pi_branch  AND AP.OBJECTCODE = IF(JE.DOCTYPE = 'AP','APINVOICE','')       AND AP.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN ARCREDITMEMOS CM         ON CM.COMPANY      = pi_company  AND CM.BRANCH      = pi_branch  AND CM.OBJECTCODE = IF(JE.DOCTYPE = 'CM','ARCREDITMEMO','')    AND CM.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APCREDITMEMOS ACM        ON ACM.COMPANY     = pi_company  AND ACM.BRANCH     = pi_branch  AND ACM.OBJECTCODE = IF(JE.DOCTYPE = 'ACM','APCREDITMEMO','')   AND ACM.DOCNO = JE.DOCNO
                LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT ON DT.COMPANY      = pi_company  AND DT.BRANCH      = pi_branch  AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','')   AND DT.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN PAYMENTS PY              ON PY.COMPANY      = pi_company  AND PY.BRANCHCODE  = pi_branch  AND PY.OBJECTCODE = IF(JE.DOCTYPE = 'PY','OUTGOINGPAYMENT','') AND PY.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN COLLECTIONS RC           ON RC.COMPANY      = pi_company  AND RC.BRANCHCODE  = pi_branch  AND RC.OBJECTCODE = IF(JE.DOCTYPE = 'RC','INCOMINGPAYMENT','') AND RC.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN JOURNALVOUCHERS JV       ON JV.COMPANY      = pi_company  AND JV.BRANCH  = pi_branch      AND JV.OBJECTCODE = IF(JE.DOCTYPE = 'JV','JOURNALVOUCHER','')  AND JV.DOCNO  = JE.DOCNO
            WHERE JE.COMPANY = pi_company  AND
                  JE.BRANCH =  pi_branch   AND
                  JE.SLTYPE  = 'C'         AND
                  JE.SLACCTNO >= v_bpno_fr AND
                  JE.SLACCTNO <= v_bpno_to AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to ;



      INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, GLACCTNO, GLACCTNAME, DESCRIPTION, DESCRIPTION2,
                                DESCRIPTION3, GLDEBIT, GLCREDIT, CURRENCY)
          SELECT CO.COMPANYNAME,
                 BR.BRANCHNAME,
                 'A' AS LINETYPE,
                 CU.CUSTNO,
                 CU.CUSTNAME,
                 '*** Balance B/F ***' as DESCRIPTION,
                 '','',
                 IF(pi_currency = 0,
                 IF(SUM(J.GLDEBIT - J.GLCREDIT) > 0, SUM(J.GLDEBIT - J.GLCREDIT), 0),
                 IF(CU.CURRENCY <> CO.CURRENCY,IF(SUM(J.GLDEBIT_FC - J.GLCREDIT_FC) > 0,SUM(J.GLDEBIT_FC - J.GLCREDIT_FC),0),
                 IF(SUM(J.GLDEBIT - J.GLCREDIT) > 0,SUM(J.GLDEBIT - J.GLCREDIT),0))),
                 IF(pi_currency = 0,
                 IF(SUM(J.GLCREDIT - J.GLDEBIT) > 0, SUM(J.GLCREDIT - J.GLDEBIT), 0),
                 IF(CU.CURRENCY <> CO.CURRENCY,IF(SUM(J.GLCREDIT_FC - J.GLDEBIT_FC) > 0,SUM(J.GLCREDIT_FC - J.GLDEBIT_FC),0),
                 IF(SUM(J.GLCREDIT - J.GLDEBIT) > 0,SUM(J.GLCREDIT - J.GLDEBIT),0))),
                 IF(pi_currency = 0, CO.CURRENCY, CU.CURRENCY)

              FROM CUSTOMERS CU
                  LEFT OUTER JOIN COMPANIES CO ON CO.COMPANYCODE = pi_company
                  LEFT OUTER JOIN BRANCHES  BR ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                  LEFT OUTER JOIN JOURNALENTRYITEMS J ON J.COMPANY = pi_company AND J.BRANCH = pi_branch AND
                                                         J.SLTYPE = 'C' AND J.SLACCTNO = CU.CUSTNO AND J.DOCDATE < pi_date_fr
              WHERE CU.CUSTNO >= v_bpno_fr AND
                    CU.CUSTNO <= v_bpno_to
              GROUP BY CU.CUSTNO;


      IF pi_exzero = 1 THEN

        DELETE FROM LEDGER_TEMP WHERE GLDEBIT = 0 AND  GLCREDIT = 0;
        
      END IF;

  SELECT * FROM LEDGER_TEMP ORDER BY GLACCTNO, LINETYPE, DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `debtorstatement_group_st`
--

DROP PROCEDURE IF EXISTS `debtorstatement_group_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `debtorstatement_group_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_parentdebtor VARCHAR(30),
                                      IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_currencytype INT, IN pi_rpttype INT)
BEGIN

DECLARE v_now           VARCHAR(30);
DECLARE v_debtor        VARCHAR(30);
DECLARE v_localcurrency VARCHAR(30);
DECLARE v_mth01 DATE;
DECLARE v_mth02 DATE;
DECLARE v_mth03 DATE;
DECLARE v_mth04 DATE;
DECLARE v_mth05 DATE;
DECLARE v_mth06 DATE;
DECLARE v_mth07 DATE;
DECLARE v_mth08 DATE;
DECLARE v_mth09 DATE;
DECLARE v_mth10 DATE;
DECLARE v_mth11 DATE;
DECLARE v_mth12 DATE;
DECLARE v_mth01desc VARCHAR(100);
DECLARE v_mth02desc VARCHAR(100);
DECLARE v_mth03desc VARCHAR(100);
DECLARE v_mth04desc VARCHAR(100);
DECLARE v_mth05desc VARCHAR(100);
DECLARE v_mth06desc VARCHAR(100);
DECLARE v_mth07desc VARCHAR(100);
DECLARE v_mth08desc VARCHAR(100);
DECLARE v_mth09desc VARCHAR(100);
DECLARE v_mth10desc VARCHAR(100);
DECLARE v_mth11desc VARCHAR(100);
DECLARE v_mth12desc VARCHAR(100);
DECLARE v_done      INT;




SET v_now = CAST(NOW() as char(30));
SET v_mth01 = pi_date_to;
SET v_mth02 = DATE_ADD(pi_date_to, INTERVAL -1  MONTH);
SET v_mth03 = DATE_ADD(pi_date_to, INTERVAL -2  MONTH);
SET v_mth04 = DATE_ADD(pi_date_to, INTERVAL -3  MONTH);
SET v_mth05 = DATE_ADD(pi_date_to, INTERVAL -4  MONTH);
SET v_mth06 = DATE_ADD(pi_date_to, INTERVAL -5  MONTH);
SET v_mth07 = DATE_ADD(pi_date_to, INTERVAL -6  MONTH);
SET v_mth08 = DATE_ADD(pi_date_to, INTERVAL -7  MONTH);
SET v_mth09 = DATE_ADD(pi_date_to, INTERVAL -8  MONTH);
SET v_mth10 = DATE_ADD(pi_date_to, INTERVAL -9  MONTH);
SET v_mth11 = DATE_ADD(pi_date_to, INTERVAL -10 MONTH);
SET v_mth12 = DATE_ADD(pi_date_to, INTERVAL -11 MONTH);

IF pi_rpttype = 0 THEN

  SET v_mth01desc = UPPER(CAST(Date_format(v_mth01,'%b') AS CHAR));
  SET v_mth02desc = UPPER(CAST(Date_format(v_mth02,'%b') AS CHAR));
  SET v_mth03desc = UPPER(CAST(Date_format(v_mth03,'%b') AS CHAR));
  SET v_mth04desc = UPPER(CAST(Date_format(v_mth04,'%b') AS CHAR));
  SET v_mth05desc = UPPER(CAST(Date_format(v_mth05,'%b') AS CHAR));
  SET v_mth06desc = CONCAT(UPPER(CAST(Date_format(v_mth06,'%b') AS CHAR)),'++');


ELSE

  SET v_mth01desc = UPPER(CAST(Date_format(v_mth01,'%b') AS CHAR));
  SET v_mth02desc = UPPER(CAST(Date_format(v_mth02,'%b') AS CHAR));
  SET v_mth03desc = UPPER(CAST(Date_format(v_mth03,'%b') AS CHAR));
  SET v_mth04desc = UPPER(CAST(Date_format(v_mth04,'%b') AS CHAR));
  SET v_mth05desc = UPPER(CAST(Date_format(v_mth05,'%b') AS CHAR));
  SET v_mth06desc = UPPER(CAST(Date_format(v_mth06,'%b') AS CHAR));
  SET v_mth07desc = UPPER(CAST(Date_format(v_mth07,'%b') AS CHAR));
  SET v_mth08desc = UPPER(CAST(Date_format(v_mth08,'%b') AS CHAR));
  SET v_mth09desc = UPPER(CAST(Date_format(v_mth09,'%b') AS CHAR));
  SET v_mth10desc = UPPER(CAST(Date_format(v_mth10,'%b') AS CHAR));
  SET v_mth11desc = UPPER(CAST(Date_format(v_mth11,'%b') AS CHAR));
  SET v_mth12desc = CONCAT(UPPER(CAST(Date_format(v_mth12,'%b') AS CHAR)),'++');

END IF;

    SELECT CURRENCY INTO v_localcurrency
      FROM COMPANIES
      WHERE COMPANYCODE = pi_company LIMIT 1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP4;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP4` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `PARENTBPCODE` VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `BALANCE`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP3;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP3` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `PARENTBPCODE` VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `BALANCE`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `PARENTBPCODE` VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP1;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP1` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `PARENTBPCODE` VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `BALANCE`     DECIMAL(20,6),
    `GLDEBIT_O`     DECIMAL(20,6),
    `GLCREDIT_O`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP2;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `PARENTBPCODE` VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `BALANCE`     DECIMAL(20,6),
    `GLDEBIT_O`     DECIMAL(20,6),
    `GLCREDIT_O`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS AGING_TEMP;
    CREATE TEMPORARY TABLE `AGING_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `MTH01`        DECIMAL(20,6),
    `MTH02`        DECIMAL(20,6),
    `MTH03`        DECIMAL(20,6),
    `MTH04`        DECIMAL(20,6),
    `MTH05`        DECIMAL(20,6),
    `MTH06`        DECIMAL(20,6),
    `MTH07`        DECIMAL(20,6),
    `MTH08`        DECIMAL(20,6),
    `MTH09`        DECIMAL(20,6),
    `MTH10`        DECIMAL(20,6),
    `MTH11`        DECIMAL(20,6),
    `MTH12`        DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTH01DESC`    VARCHAR(100),
    `MTH02DESC`    VARCHAR(100),
    `MTH03DESC`    VARCHAR(100),
    `MTH04DESC`    VARCHAR(100),
    `MTH05DESC`    VARCHAR(100),
    `MTH06DESC`    VARCHAR(100),
    `MTH07DESC`    VARCHAR(100),
    `MTH08DESC`    VARCHAR(100),
    `MTH09DESC`    VARCHAR(100),
    `MTH10DESC`    VARCHAR(100),
    `MTH11DESC`    VARCHAR(100),
    `MTH12DESC`    VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS AGING_TEMP2;
    CREATE TEMPORARY TABLE `AGING_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `MTH01`        DECIMAL(20,6),
    `MTH02`        DECIMAL(20,6),
    `MTH03`        DECIMAL(20,6),
    `MTH04`        DECIMAL(20,6),
    `MTH05`        DECIMAL(20,6),
    `MTH06`        DECIMAL(20,6),
    `MTH07`        DECIMAL(20,6),
    `MTH08`        DECIMAL(20,6),
    `MTH09`        DECIMAL(20,6),
    `MTH10`        DECIMAL(20,6),
    `MTH11`        DECIMAL(20,6),
    `MTH12`        DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTH01DESC`    VARCHAR(100),
    `MTH02DESC`    VARCHAR(100),
    `MTH03DESC`    VARCHAR(100),
    `MTH04DESC`    VARCHAR(100),
    `MTH05DESC`    VARCHAR(100),
    `MTH06DESC`    VARCHAR(100),
    `MTH07DESC`    VARCHAR(100),
    `MTH08DESC`    VARCHAR(100),
    `MTH09DESC`    VARCHAR(100),
    `MTH10DESC`    VARCHAR(100),
    `MTH11DESC`    VARCHAR(100),
    `MTH12DESC`    VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO STATEMENT_TEMP1 (COMPANY, BRANCH, DOCTYPE, LINETYPE, PARENTBPCODE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT, GLDEBIT_O, GLCREDIT_O)
        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, pi_parentdebtor, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount) * -1)),
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)))),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,SUM(CI.amount),0)),
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE)))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT <> 'D' AND  C.DOCTYPE = 'C' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE < pi_date_fr)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = JE.SLACCTNO
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  < pi_date_fr    AND
                  CU.PARENTBPCODE = pi_parentdebtor AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, pi_parentdebtor, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,SUM(YI.amount),0 )),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))))),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,0,SUM(YI.amount) * 1)),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (PAYMENTS Y CROSS JOIN PAYMENTINVOICES YI)
		                      ON ( Y.COMPANY = JE.COMPANY AND Y.BRANCHCODE = JE.BRANCH AND Y.DOCSTAT <> 'D' AND  Y.DOCTYPE = 'C' AND
                               YI.COMPANY = JE.COMPANY AND YI.BRANCH = JE.BRANCH AND YI.DOCNO = Y.DOCNO AND
                               JE.slacctno = YI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', YI.REFNO,
                          MID(concat(YI.REFNO,'/'), 1,locate('/',concat(YI.REFNO,'/'),1) + (locate('/',concat(YI.REFNO,'/'),1)-
                          locate('/',concat(YI.REFNO,'/'),locate('/',concat(YI.REFNO,'/'),1)) -1))) AND Y.DOCDATE < pi_date_fr)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = JE.SLACCTNO
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  < pi_date_fr     AND
                  CU.PARENTBPCODE = pi_parentdebtor AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO


            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, pi_parentdebtor, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),

               IF(pi_currencytype = 0, SUM(JVI.DEBIT), IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.DEBIT_FC),SUM(JVI.DEBIT))),
               IF(pi_currencytype = 0, SUM(JVI.CREDIT),IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.CREDIT_FC),SUM(JVI.CREDIT)))

            FROM JOURNALENTRYITEMS JE

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH  AND JVI.COMPANY = JV.COMPANY AND JV.SBO_POST_FLAG = 1 AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.ITEMNO = JE.SLACCTNO AND
                              JV.DOCDATE < pi_date_fr AND JE.DOCNO = if(JE.DOCTYPE <> 'JV', JVI.REFNO,
                          MID(concat(JVI.REFNO,'/'), 1,locate('/',concat(JVI.REFNO,'/'),1) + (locate('/',concat(JVI.REFNO,'/'),1)-
                          locate('/',concat(JVI.REFNO,'/'),locate('/',concat(JVI.REFNO,'/'),1)) -1)))  )
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = JE.SLACCTNO
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.SLTYPE   = 'C'           AND
                  JE.DOCDATE  < pi_date_fr    AND
                  JVI.ITEMNO = JE.SLACCTNO    AND
                  JVI.REFNO LIKE CONCAT(JE.DOCNO,if(JE.DOCTYPE <> 'JV','','/%')) AND
                  JVI.ITEMTYPE = 'C'          AND
                  CU.PARENTBPCODE = pi_parentdebtor
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION


        SELECT C.COMPANY, C.BRANCHCODE, 'RC', 'B' as LINETYPE, pi_parentdebtor, C.CUSTNO, C.DOCDATE, null,
               C.docno, 'PAYMENT COLLECTED', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM COLLECTIONS C
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN COLLECTIONSINVOICES CI)
                       ON (CI.COMPANY = C.COMPANY AND CI.BRANCH = C.BRANCHCODE AND CI.REFNO = C.DOCNO AND
                           J.COMPANY = CI.COMPANY AND J.BRANCH = CI.BRANCH AND J.DOCTYPE = 'RC' AND J.DOCNO = CI.DOCNO AND
                           J.SLTYPE = 'C' AND J.DOCDATE < pi_date_fr AND J.ISDEBIT = 1)
                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = C.COMPANY AND JE.BRANCH = C.BRANCHCODE AND JE.DOCNO = C.DOCNO AND
                                                        JE.SLTYPE = 'C' AND JE.SLACCTNO = C.CUSTNO AND JE.ISDEBIT = 0
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = C.CUSTNO
        WHERE C.COMPANY       =  pi_company   AND
              C.BRANCHCODE    =  pi_branch    AND
              C.DOCTYPE       = 'C'           AND
              C.DOCSTAT       <> 'D'          AND
              C.COLLFOR       <> 'SI'         AND
              C.DOCDATE       < pi_date_fr    AND
              C.SBO_POST_FLAG = 1             AND
              CU.PARENTBPCODE = pi_parentdebtor
        GROUP BY C.CUSTNO, C.DOCNO

        UNION


         SELECT P.COMPANY, P.BRANCHCODE, 'PY', 'B' as LINETYPE, pi_parentdebtor, P.BPCODE, P.DOCDATE, null,
               P.docno, 'PAYMENT TO DEBTOR', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM PAYMENTS P
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN COLLECTIONSINVOICES CI)
                       ON (CI.COMPANY = P.COMPANY AND CI.BRANCH = P.BRANCHCODE AND CI.REFNO = P.DOCNO AND
                           J.COMPANY = CI.COMPANY AND J.BRANCH = CI.BRANCH AND J.DOCTYPE = 'RC' AND J.DOCNO = CI.DOCNO AND
                           J.SLTYPE = 'C' AND J.DOCDATE < pi_date_fr AND J.ISDEBIT = 0)

                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = P.COMPANY AND JE.BRANCH = P.BRANCHCODE AND JE.DOCNO = P.DOCNO AND
                                                        JE.SLTYPE = 'C' AND JE.SLACCTNO = P.BPCODE AND JE.ISDEBIT = 1
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = P.BPCODE
        WHERE P.COMPANY       =  pi_company   AND
              P.BRANCHCODE    =  pi_branch    AND
              P.DOCTYPE       = 'C'           AND
              P.DOCSTAT       <> 'D'          AND
              P.COLLFOR       <> 'SI'         AND
              P.DOCDATE       < pi_date_fr    AND
              P.SBO_POST_FLAG = 1             AND
              CU.PARENTBPCODE = pi_parentdebtor
        GROUP BY P.BPCODE, P.DOCNO

        UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'B' as LINETYPE, pi_parentdebtor, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)),0),
	             IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(CI.amount) is null,0,sum(CI.amount)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)))* -1),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC * -1) - IF(sum(CI.amount) is null,0,sum(CI.amount)))* -1),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)))* -1))),
               0,0
            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT = 'C' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE < pi_date_fr)


                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C')
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = JE.SLACCTNO
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.ISDEBIT  = 0             AND
                  JE.DOCDATE  < pi_date_fr    AND
                  CU.PARENTBPCODE = pi_parentdebtor AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

        UNION

        SELECT AR.COMPANY, AR.BRANCH, 'CM', 'B' as LINETYPE, pi_parentdebtor, AR.BPCODE, AR.DOCDATE, AR.DOCDUEDATE, AR.DOCNO, 'CREDIT MEMO', '',
               0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AR.DUEAMOUNT * AR.CURRENCYRATE),
               IF(v_localcurrency <> AR.CURRENCY, JE.GLCREDIT_FC - AR.DUEAMOUNT, JE.GLCREDIT - AR.DUEAMOUNT)),
               0
            FROM ARCREDITMEMOS AR
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AR.COMPANY AND JE.BRANCH = AR.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AR.DOCNO
              LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = AR.COMPANY AND CU.BRANCH = AR.BRANCH AND CU.CUSTNO = AR.BPCODE,
                 ARCREDITMEMOITEMS ARI
            WHERE AR.COMPANY   = ARI.COMPANY AND
                  AR.BRANCH    = ARI.BRANCH  AND
                  AR.DOCID     = ARI.DOCID   AND
                  AR.COMPANY   = pi_company  AND
                  AR.BRANCH    = pi_branch   AND
                  AR.DOCNO     = JE.DOCNO    AND
                  AR.DOCDATE   < pi_date_fr  AND
                  ARI.BASETYPE = 'ARINVOICE' AND
                  CU.PARENTBPCODE = pi_parentdebtor
            GROUP BY AR.DOCNO

        UNION

        SELECT AR.COMPANY, AR.BRANCH, 'AR', 'B' as LINETYPE, pi_parentdebtor, AR.BPCODE, JE.DOCDATE, JE.DOCDUEDATE, ARI.BASEDOCNO, 'SALES / DEBIT MEMO', '',
               0,0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AR.DUEAMOUNT * AR.CURRENCYRATE),
               IF(v_localcurrency <> AR.CURRENCY, JE.GLCREDIT_FC - AR.DUEAMOUNT, JE.GLCREDIT - AR.DUEAMOUNT))
            FROM ARCREDITMEMOS AR
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AR.COMPANY AND JE.BRANCH = AR.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AR.DOCNO
              LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = AR.COMPANY AND CU.BRANCH = AR.BRANCH AND CU.CUSTNO = AR.BPCODE,
                 ARCREDITMEMOITEMS ARI
            WHERE AR.COMPANY   = ARI.COMPANY AND
                  AR.BRANCH    = ARI.BRANCH  AND
                  AR.DOCID     = ARI.DOCID   AND
                  AR.COMPANY   = pi_company  AND
                  AR.BRANCH    = pi_branch   AND
                  AR.DOCNO     = JE.DOCNO    AND
                  AR.DOCDATE   < pi_date_fr  AND
                  ARI.BASETYPE = 'ARINVOICE' AND
                  CU.PARENTBPCODE = pi_parentdebtor
            GROUP BY AR.DOCNO;





      INSERT INTO STATEMENT_TEMP3 (COMPANY, BRANCH, DOCTYPE, LINETYPE, PARENTBPCODE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT)
        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, pi_parentdebtor, JE.SLACCTNO, JE.DOCDATE, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE),
               JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF (pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC,JE.GLDEBIT)),
               IF (pi_currencytype = 0, JE.GLCREDIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT))
            FROM JOURNALENTRYITEMS JE
                  LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = JE.SLACCTNO
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   =  pi_branch    AND
                  JE.SLTYPE   = 'C'           AND
                  JE.DOCDATE  >= pi_date_fr   AND
                  JE.DOCDATE  <= pi_date_to   AND
                  CU.PARENTBPCODE = pi_parentdebtor;





      INSERT INTO STATEMENT_TEMP (COMPANY, BRANCH, DOCTYPE, LINETYPE, PARENTBPCODE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT)
        SELECT COMPANY, BRANCH, DOCTYPE, LINETYPE, PARENTBPCODE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2,
               IF(SUM(GLDEBIT - GLCREDIT) >= 0, SUM(GLDEBIT - GLCREDIT), 0), IF(SUM(GLDEBIT - GLCREDIT) <= 0, SUM(GLCREDIT - GLDEBIT), 0)
          FROM STATEMENT_TEMP3
          GROUP BY BPCODE, DOCTYPE, DOCNO

        UNION

        SELECT COMPANY, BRANCH, DOCTYPE, LINETYPE, pi_parentdebtor, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2,
            IF((GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)) > 0, (GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)), 0),
            IF((GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)) > 0,  (GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)), 0)
          FROM STATEMENT_TEMP1
          WHERE DOCDATE < pi_date_fr
          GROUP BY BPCODE, DOCTYPE, DOCNO;





      INSERT INTO STATEMENT_TEMP2 (COMPANY, BRANCH, DOCTYPE, LINETYPE, PARENTBPCODE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT, GLDEBIT_O, GLCREDIT_O)
        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, pi_parentdebtor, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount) * -1)),
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)))),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,SUM(CI.amount),0)),
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE)))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT <> 'D' AND  C.DOCTYPE = 'C' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE <= pi_date_to)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = JE.SLACCTNO
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  <= pi_date_to   AND
                  CU.PARENTBPCODE = pi_parentdebtor AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, pi_parentdebtor, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,SUM(YI.amount),0 )),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))))),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,0,SUM(YI.amount) * 1)),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (PAYMENTS Y CROSS JOIN PAYMENTINVOICES YI)
		                      ON ( Y.COMPANY = JE.COMPANY AND Y.BRANCHCODE = JE.BRANCH AND Y.DOCSTAT <> 'D' AND  Y.DOCTYPE = 'C' AND
                               YI.COMPANY = JE.COMPANY AND YI.BRANCH = JE.BRANCH AND YI.DOCNO = Y.DOCNO AND
                               JE.slacctno = YI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', YI.REFNO,
                          MID(concat(YI.REFNO,'/'), 1,locate('/',concat(YI.REFNO,'/'),1) + (locate('/',concat(YI.REFNO,'/'),1)-
                          locate('/',concat(YI.REFNO,'/'),locate('/',concat(YI.REFNO,'/'),1)) -1))) AND Y.DOCDATE <= pi_date_to)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = JE.SLACCTNO
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  <= pi_date_to   AND
                  CU.PARENTBPCODE = pi_parentdebtor AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO


            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, pi_parentdebtor, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),

               IF(pi_currencytype = 0, SUM(JVI.DEBIT), IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.DEBIT_FC),SUM(JVI.DEBIT))),
               IF(pi_currencytype = 0, SUM(JVI.CREDIT),IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.CREDIT_FC),SUM(JVI.CREDIT)))

            FROM JOURNALENTRYITEMS JE

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH  AND JVI.COMPANY = JV.COMPANY AND JV.SBO_POST_FLAG = 1 AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.ITEMNO = JE.SLACCTNO AND
                              JV.DOCDATE <= pi_date_to AND JE.DOCNO = if(JE.DOCTYPE <> 'JV', JVI.REFNO,
                          MID(concat(JVI.REFNO,'/'), 1,locate('/',concat(JVI.REFNO,'/'),1) + (locate('/',concat(JVI.REFNO,'/'),1)-
                          locate('/',concat(JVI.REFNO,'/'),locate('/',concat(JVI.REFNO,'/'),1)) -1)))  )
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = JE.SLACCTNO
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.SLTYPE   = 'C'           AND
                  JE.DOCDATE  <= pi_date_to   AND
                  JVI.ITEMNO = JE.SLACCTNO    AND
                  JVI.REFNO LIKE CONCAT(JE.DOCNO,if(JE.DOCTYPE <> 'JV','','/%')) AND
                  JVI.ITEMTYPE = 'C'          AND
                  CU.PARENTBPCODE = pi_parentdebtor
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION


        SELECT C.COMPANY, C.BRANCHCODE, 'RC', 'B' as LINETYPE, pi_parentdebtor, C.CUSTNO, C.DOCDATE, null,
               C.docno, 'PAYMENT COLLECTED', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM COLLECTIONS C
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN COLLECTIONSINVOICES CI)
                       ON (CI.COMPANY = C.COMPANY AND CI.BRANCH = C.BRANCHCODE AND CI.REFNO = C.DOCNO AND
                           J.COMPANY = CI.COMPANY AND J.BRANCH = CI.BRANCH AND J.DOCTYPE = 'RC' AND J.DOCNO = CI.DOCNO AND
                           J.SLTYPE = 'C' AND J.DOCDATE <= pi_date_to AND J.ISDEBIT = 1)
                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = C.COMPANY AND JE.BRANCH = C.BRANCHCODE AND JE.DOCNO = C.DOCNO AND
                                                        JE.SLTYPE = 'C' AND JE.SLACCTNO = C.CUSTNO AND JE.ISDEBIT = 0
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = C.CUSTNO
        WHERE C.COMPANY       =  pi_company   AND
              C.BRANCHCODE    =  pi_branch    AND
              C.DOCTYPE       = 'C'           AND
              C.DOCSTAT       <> 'D'          AND
              C.COLLFOR       <> 'SI'         AND
              C.DOCDATE       <= pi_date_to   AND
              C.SBO_POST_FLAG = 1             AND
              CU.PARENTBPCODE = pi_parentdebtor
        GROUP BY C.CUSTNO, C.DOCNO

        UNION


         SELECT P.COMPANY, P.BRANCHCODE, 'PY', 'B' as LINETYPE, pi_parentdebtor, P.BPCODE, P.DOCDATE, null,
               P.docno, 'PAYMENT TO DEBTOR', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM PAYMENTS P
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN COLLECTIONSINVOICES CI)
                       ON (CI.COMPANY = P.COMPANY AND CI.BRANCH = P.BRANCHCODE AND CI.REFNO = P.DOCNO AND
                           J.COMPANY = CI.COMPANY AND J.BRANCH = CI.BRANCH AND J.DOCTYPE = 'RC' AND J.DOCNO = CI.DOCNO AND
                           J.SLTYPE = 'C' AND J.DOCDATE <= pi_date_to AND J.ISDEBIT = 0)

                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = P.COMPANY AND JE.BRANCH = P.BRANCHCODE AND JE.DOCNO = P.DOCNO AND
                                                        JE.SLTYPE = 'C' AND JE.SLACCTNO = P.BPCODE AND JE.ISDEBIT = 1
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = P.BPCODE
        WHERE P.COMPANY       =  pi_company   AND
              P.BRANCHCODE    =  pi_branch    AND
              P.DOCTYPE       = 'C'           AND
              P.DOCSTAT       <> 'D'          AND
              P.COLLFOR       <> 'SI'         AND
              P.DOCDATE       <= pi_date_to   AND
              P.SBO_POST_FLAG = 1             AND
              CU.PARENTBPCODE = pi_parentdebtor
        GROUP BY P.BPCODE, P.DOCNO

        UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'B' as LINETYPE, pi_parentdebtor, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)),0),
	             IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(CI.amount) is null,0,sum(CI.amount)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)))* -1),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC * -1) - IF(sum(CI.amount) is null,0,sum(CI.amount)))* -1),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)))* -1))),
               0,0
            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT = 'C' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE <= pi_date_to)


                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C')
                LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = JE.COMPANY AND CU.BRANCH = JE.BRANCH AND CU.CUSTNO = JE.SLACCTNO
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.ISDEBIT  = 0             AND
                  JE.DOCDATE  <= pi_date_to   AND
                  CU.PARENTBPCODE = pi_parentdebtor AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

        UNION

        SELECT AR.COMPANY, AR.BRANCH, 'CM', 'B' as LINETYPE, pi_parentdebtor, AR.BPCODE, AR.DOCDATE, AR.DOCDUEDATE, AR.DOCNO, 'CREDIT MEMO', '',
               0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AR.DUEAMOUNT * AR.CURRENCYRATE),
               IF(v_localcurrency <> AR.CURRENCY, JE.GLCREDIT_FC - AR.DUEAMOUNT, JE.GLCREDIT - AR.DUEAMOUNT)),
               0
            FROM ARCREDITMEMOS AR
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AR.COMPANY AND JE.BRANCH = AR.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AR.DOCNO
              LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = AR.COMPANY AND CU.BRANCH = AR.BRANCH AND CU.CUSTNO = AR.BPCODE,
                 ARCREDITMEMOITEMS ARI
            WHERE AR.COMPANY   = ARI.COMPANY AND
                  AR.BRANCH    = ARI.BRANCH  AND
                  AR.DOCID     = ARI.DOCID   AND
                  AR.COMPANY   = pi_company  AND
                  AR.BRANCH    = pi_branch   AND
                  AR.DOCNO     = JE.DOCNO    AND
                  AR.DOCDATE   <= pi_date_to AND
                  ARI.BASETYPE = 'ARINVOICE' AND
                  CU.PARENTBPCODE = pi_parentdebtor
            GROUP BY AR.DOCNO

        UNION

        SELECT AR.COMPANY, AR.BRANCH, 'AR', 'B' as LINETYPE, pi_parentdebtor, AR.BPCODE, JE.DOCDATE, JE.DOCDUEDATE, ARI.BASEDOCNO, 'SALES / DEBIT MEMO', '',
               0,0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AR.DUEAMOUNT * AR.CURRENCYRATE),
               IF(v_localcurrency <> AR.CURRENCY, JE.GLCREDIT_FC - AR.DUEAMOUNT, JE.GLCREDIT - AR.DUEAMOUNT))
            FROM ARCREDITMEMOS AR
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AR.COMPANY AND JE.BRANCH = AR.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AR.DOCNO
              LEFT OUTER JOIN CUSTOMERS CU ON CU.COMPANY = AR.COMPANY AND CU.BRANCH = AR.BRANCH AND CU.CUSTNO = AR.BPCODE,
                 ARCREDITMEMOITEMS ARI
            WHERE AR.COMPANY   = ARI.COMPANY AND
                  AR.BRANCH    = ARI.BRANCH  AND
                  AR.DOCID     = ARI.DOCID   AND
                  AR.COMPANY   = pi_company  AND
                  AR.BRANCH    = pi_branch   AND
                  AR.DOCNO     = JE.DOCNO    AND
                  AR.DOCDATE   <= pi_date_to AND
                  ARI.BASETYPE = 'ARINVOICE' AND
                  CU.PARENTBPCODE = pi_parentdebtor
            GROUP BY AR.DOCNO;


      INSERT INTO STATEMENT_TEMP4 (COMPANY, BRANCH, DOCTYPE, LINETYPE, PARENTBPCODE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT)
        SELECT COMPANY, BRANCH, DOCTYPE, LINETYPE, pi_parentdebtor, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2,
            IF((GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)) > 0, (GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)), 0),
            IF((GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)) > 0,  (GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)), 0)
          FROM STATEMENT_TEMP2
          GROUP BY BPCODE, DOCTYPE, DOCNO;


 


       DELETE FROM STATEMENT_TEMP WHERE GLDEBIT = 0 AND GLCREDIT = 0;

       IF pi_rpttype = 0 THEN

         INSERT INTO AGING_TEMP (COMPANY, BRANCH, BPCODE, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12,OPENCREDIT,
                             MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC)
         SELECT COMPANY, BRANCH, PARENTBPCODE,
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth01,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth02,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth03,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth04,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth05,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') <=  DATE_FORMAT(v_mth06,'%Y%m'), SUM(GLDEBIT), 0),
                0,
                0,
                0,
                0,
                0,
                0,
                SUM(GLCREDIT) * -1,
                v_mth01desc,
                v_mth02desc,
                v_mth03desc,
                v_mth04desc,
                v_mth05desc,
                v_mth06desc,
                v_mth07desc,
                v_mth08desc,
                v_mth09desc,
                v_mth10desc,
                v_mth11desc,
                v_mth12desc
             FROM STATEMENT_TEMP4 GROUP BY YEAR(DOCDATE), MONTH(DOCDATE);

       ELSE

         INSERT INTO AGING_TEMP (COMPANY, BRANCH, BPCODE, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12,OPENCREDIT,
                             MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC)
         SELECT COMPANY, BRANCH, PARENTBPCODE,
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth01,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth02,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth03,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth04,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth05,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth06,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth07,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth08,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth09,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth10,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth11,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') <=  DATE_FORMAT(v_mth12,'%Y%m'), SUM(GLDEBIT), 0),
                SUM(GLCREDIT) * -1,
                v_mth01desc,
                v_mth02desc,
                v_mth03desc,
                v_mth04desc,
                v_mth05desc,
                v_mth06desc,
                v_mth07desc,
                v_mth08desc,
                v_mth09desc,
                v_mth10desc,
                v_mth11desc,
                v_mth12desc
             FROM STATEMENT_TEMP4 GROUP BY YEAR(DOCDATE), MONTH(DOCDATE);

       END IF;

       INSERT INTO AGING_TEMP2 (COMPANY, BRANCH, BPCODE, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12, OPENCREDIT,
                           MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC)
       SELECT COMPANY, BRANCH, BPCODE,
              SUM(MTH01), SUM(MTH02), SUM(MTH03), SUM(MTH04), SUM(MTH05), SUM(MTH06), SUM(MTH07), SUM(MTH08),SUM(MTH09), SUM(MTH10), SUM(MTH11), SUM(MTH12), SUM(OPENCREDIT),
              MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC
           FROM AGING_TEMP GROUP BY BPCODE;



       SELECT UPPER(c.COMPANYNAME) as COMPANY,
              UPPER(concat(e.BARANGAY,' ', e.STREET,' ', e.ZIP, ' ', e.CITY, ' ',(select pr.PROVINCENAME from  provinces pr where pr.province = e.province), ', ', (SELECT cct.COUNTRYNAME FROM COUNTRIES cct WHERE e.country = cct.country ))) as BRANCHCODE,
 	            ST.PARENTBPCODE AS CUSTNO,
	            cu.CUSTNAME,
	            cu.PHONE1,
	            cu.FAX,
              cu.CURRENCY,
              c.CURRENCY as LOCALCUR,
              CR.CURRENCYNAME,
              CR2.CURRENCYNAME AS LOCALCURRENCY,
	            a.STREET,
	            a.BARANGAY,
	            a.CITY,
	            a.ZIP,
            	p.PROVINCENAME,
	            ct.COUNTRYNAME,
	            CC.NAME,
              e.U_U_TELNO,
              e.U_U_FAXNO,
              e.U_U_EMAIL,
              pt.PAYMENTTERMNAME,
              ST.LINETYPE, ST.BPCODE, ST.DOCDATE, ST.DOCDUEDATE, ST.DOCNO, ST.DESCRIPTION, ST.DESCRIPTION2, ST.GLDEBIT, ST.GLCREDIT,
              AP.MTH01, AP.MTH02, AP.MTH03, AP.MTH04, AP.MTH05, AP.MTH06, AP.MTH07, AP.MTH08, AP.MTH09, AP.MTH10, AP.MTH11, AP.MTH12, AP.OPENCREDIT,
              AP.MTH01DESC, AP.MTH02DESC, AP.MTH03DESC, AP.MTH04DESC, AP.MTH05DESC, AP.MTH06DESC, AP.MTH07DESC, AP.MTH08DESC, AP.MTH09DESC,
              AP.MTH10DESC, AP.MTH11DESC, AP.MTH12DESC
           FROM STATEMENT_TEMP ST
              LEFT OUTER JOIN CUSTOMERS CU        ON CU.COMPANY = ST.COMPANY AND CU.BRANCH = ST.BRANCH AND CU.CUSTNO = ST.PARENTBPCODE
              LEFT OUTER JOIN CURRENCIES CR       ON CR.CURRENCY = CU.CURRENCY
              LEFT OUTER JOIN BRANCHES e          ON ST.BRANCH = e.BRANCHCODE
              LEFT OUTER JOIN COMPANIES c         ON c.COMPANYCODE = ST.COMPANY
              LEFT OUTER JOIN CURRENCIES CR2      ON CR2.CURRENCY = C.CURRENCY
              LEFT OUTER JOIN ADDRESSES a         ON a.COMPANY = ST.company and a.BRANCH = ST.branch and
                                                     a.REFID = CU.CUSTNO and a.REFTYPE = 'CUSTOMER' and a.ADDRESSTYPE = 0 and
                                                     CU.DFLTBILLTO = a.ADDRESSNAME
              LEFT OUTER JOIN COUNTRIES ct        ON a.COUNTRY = ct.COUNTRY
              LEFT OUTER JOIN PROVINCES p         ON a.province = p.province and ct.country = p.country
              LEFT OUTER JOIN CUSTOMERCONTACTS cc ON cc.COMPANY = ST.company  and cc.BRANCH = ST.branch and
                                                     cc.CUSTNO = CU.CUSTNO and cc.CONTACTPERSON = CU.DFLTCONTACTPERSON
              LEFT OUTER JOIN PAYMENTTERMS pt     ON pt.PAYMENTTERM = CU.PAYMENTTERM
              LEFT OUTER JOIN AGING_TEMP2 AP      ON AP.COMPANY = ST.COMPANY AND AP.BRANCH = ST.BRANCH AND AP.BPCODE = ST.PARENTBPCODE
              ORDER BY ST.DOCDATE, ST.BPCODE;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `debtorstatement_st`
--

DROP PROCEDURE IF EXISTS `debtorstatement_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `debtorstatement_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_debtor_fr VARCHAR(30), IN pi_debtor_to VARCHAR(30),
                                      IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_currencytype INT, IN pi_rpttype INT)
BEGIN

DECLARE v_now           VARCHAR(30);
DECLARE v_debtor_fr     VARCHAR(30);
DECLARE v_debtor_to     VARCHAR(30);
DECLARE v_localcurrency VARCHAR(30);
DECLARE v_mth01 DATE;
DECLARE v_mth02 DATE;
DECLARE v_mth03 DATE;
DECLARE v_mth04 DATE;
DECLARE v_mth05 DATE;
DECLARE v_mth06 DATE;
DECLARE v_mth07 DATE;
DECLARE v_mth08 DATE;
DECLARE v_mth09 DATE;
DECLARE v_mth10 DATE;
DECLARE v_mth11 DATE;
DECLARE v_mth12 DATE;
DECLARE v_mth01desc VARCHAR(100);
DECLARE v_mth02desc VARCHAR(100);
DECLARE v_mth03desc VARCHAR(100);
DECLARE v_mth04desc VARCHAR(100);
DECLARE v_mth05desc VARCHAR(100);
DECLARE v_mth06desc VARCHAR(100);
DECLARE v_mth07desc VARCHAR(100);
DECLARE v_mth08desc VARCHAR(100);
DECLARE v_mth09desc VARCHAR(100);
DECLARE v_mth10desc VARCHAR(100);
DECLARE v_mth11desc VARCHAR(100);
DECLARE v_mth12desc VARCHAR(100);

  IF pi_debtor_fr is null THEN
    SET v_debtor_fr = '';
  ELSE
    SET v_debtor_fr = pi_debtor_fr;
  END IF;

  IF pi_debtor_to is null THEN
    SET v_debtor_to = '';
  ELSE
    SET v_debtor_to = pi_debtor_to;
  END IF;

  IF v_debtor_fr > '' and v_debtor_to = '' THEN

    SET v_debtor_to = v_debtor_fr;

  ELSEIF v_debtor_fr = '' and v_debtor_to > '' THEN

    SET v_debtor_fr = v_debtor_to;

  ELSEIF v_debtor_fr = '' and v_debtor_to = '' THEN

    SET v_debtor_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;

SET v_now = CAST(NOW() as char(30));
SET v_mth01 = pi_date_to;
SET v_mth02 = DATE_ADD(pi_date_to, INTERVAL -1  MONTH);
SET v_mth03 = DATE_ADD(pi_date_to, INTERVAL -2  MONTH);
SET v_mth04 = DATE_ADD(pi_date_to, INTERVAL -3  MONTH);
SET v_mth05 = DATE_ADD(pi_date_to, INTERVAL -4  MONTH);
SET v_mth06 = DATE_ADD(pi_date_to, INTERVAL -5  MONTH);
SET v_mth07 = DATE_ADD(pi_date_to, INTERVAL -6  MONTH);
SET v_mth08 = DATE_ADD(pi_date_to, INTERVAL -7  MONTH);
SET v_mth09 = DATE_ADD(pi_date_to, INTERVAL -8  MONTH);
SET v_mth10 = DATE_ADD(pi_date_to, INTERVAL -9  MONTH);
SET v_mth11 = DATE_ADD(pi_date_to, INTERVAL -10 MONTH);
SET v_mth12 = DATE_ADD(pi_date_to, INTERVAL -11 MONTH);

IF pi_rpttype = 0 THEN

  SET v_mth01desc = UPPER(CAST(Date_format(v_mth01,'%b') AS CHAR));
  SET v_mth02desc = UPPER(CAST(Date_format(v_mth02,'%b') AS CHAR));
  SET v_mth03desc = UPPER(CAST(Date_format(v_mth03,'%b') AS CHAR));
  SET v_mth04desc = UPPER(CAST(Date_format(v_mth04,'%b') AS CHAR));
  SET v_mth05desc = UPPER(CAST(Date_format(v_mth05,'%b') AS CHAR));
  SET v_mth06desc = CONCAT(UPPER(CAST(Date_format(v_mth06,'%b') AS CHAR)),'++');


ELSE

  SET v_mth01desc = UPPER(CAST(Date_format(v_mth01,'%b') AS CHAR));
  SET v_mth02desc = UPPER(CAST(Date_format(v_mth02,'%b') AS CHAR));
  SET v_mth03desc = UPPER(CAST(Date_format(v_mth03,'%b') AS CHAR));
  SET v_mth04desc = UPPER(CAST(Date_format(v_mth04,'%b') AS CHAR));
  SET v_mth05desc = UPPER(CAST(Date_format(v_mth05,'%b') AS CHAR));
  SET v_mth06desc = UPPER(CAST(Date_format(v_mth06,'%b') AS CHAR));
  SET v_mth07desc = UPPER(CAST(Date_format(v_mth07,'%b') AS CHAR));
  SET v_mth08desc = UPPER(CAST(Date_format(v_mth08,'%b') AS CHAR));
  SET v_mth09desc = UPPER(CAST(Date_format(v_mth09,'%b') AS CHAR));
  SET v_mth10desc = UPPER(CAST(Date_format(v_mth10,'%b') AS CHAR));
  SET v_mth11desc = UPPER(CAST(Date_format(v_mth11,'%b') AS CHAR));
  SET v_mth12desc = CONCAT(UPPER(CAST(Date_format(v_mth12,'%b') AS CHAR)),'++');

END IF;

    SELECT CURRENCY INTO v_localcurrency
      FROM COMPANIES
      WHERE COMPANYCODE = pi_company LIMIT 1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP4;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP4` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `BALANCE`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP3;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP3` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `BALANCE`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP2;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `GLDEBIT_O`     DECIMAL(20,6),
    `GLCREDIT_O`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP1;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP1` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `GLDEBIT_O`     DECIMAL(20,6),
    `GLCREDIT_O`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS STATEMENT_TEMP;
    CREATE TEMPORARY TABLE `STATEMENT_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `DOCTYPE`      VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCDUEDATE`   DATE,
    `DOCNO`        VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS AGING_TEMP;
    CREATE TEMPORARY TABLE `AGING_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `MTH01`        DECIMAL(20,6),
    `MTH02`        DECIMAL(20,6),
    `MTH03`        DECIMAL(20,6),
    `MTH04`        DECIMAL(20,6),
    `MTH05`        DECIMAL(20,6),
    `MTH06`        DECIMAL(20,6),
    `MTH07`        DECIMAL(20,6),
    `MTH08`        DECIMAL(20,6),
    `MTH09`        DECIMAL(20,6),
    `MTH10`        DECIMAL(20,6),
    `MTH11`        DECIMAL(20,6),
    `MTH12`        DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTH01DESC`    VARCHAR(100),
    `MTH02DESC`    VARCHAR(100),
    `MTH03DESC`    VARCHAR(100),
    `MTH04DESC`    VARCHAR(100),
    `MTH05DESC`    VARCHAR(100),
    `MTH06DESC`    VARCHAR(100),
    `MTH07DESC`    VARCHAR(100),
    `MTH08DESC`    VARCHAR(100),
    `MTH09DESC`    VARCHAR(100),
    `MTH10DESC`    VARCHAR(100),
    `MTH11DESC`    VARCHAR(100),
    `MTH12DESC`    VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

    DROP TEMPORARY TABLE IF EXISTS AGING_TEMP2;
    CREATE TEMPORARY TABLE `AGING_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `MTH01`        DECIMAL(20,6),
    `MTH02`        DECIMAL(20,6),
    `MTH03`        DECIMAL(20,6),
    `MTH04`        DECIMAL(20,6),
    `MTH05`        DECIMAL(20,6),
    `MTH06`        DECIMAL(20,6),
    `MTH07`        DECIMAL(20,6),
    `MTH08`        DECIMAL(20,6),
    `MTH09`        DECIMAL(20,6),
    `MTH10`        DECIMAL(20,6),
    `MTH11`        DECIMAL(20,6),
    `MTH12`        DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTH01DESC`    VARCHAR(100),
    `MTH02DESC`    VARCHAR(100),
    `MTH03DESC`    VARCHAR(100),
    `MTH04DESC`    VARCHAR(100),
    `MTH05DESC`    VARCHAR(100),
    `MTH06DESC`    VARCHAR(100),
    `MTH07DESC`    VARCHAR(100),
    `MTH08DESC`    VARCHAR(100),
    `MTH09DESC`    VARCHAR(100),
    `MTH10DESC`    VARCHAR(100),
    `MTH11DESC`    VARCHAR(100),
    `MTH12DESC`    VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;



      INSERT INTO STATEMENT_TEMP1 (COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT, GLDEBIT_O, GLCREDIT_O)
        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount) * -1)),
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)))),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,SUM(CI.amount),0)),
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE)))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT <> 'D' AND  C.DOCTYPE = 'C' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE < pi_date_fr)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  < pi_date_fr    AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,SUM(YI.amount),0 )),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))))),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,0,SUM(YI.amount) * 1)),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (PAYMENTS Y CROSS JOIN PAYMENTINVOICES YI)
		                      ON ( Y.COMPANY = JE.COMPANY AND Y.BRANCHCODE = JE.BRANCH AND Y.DOCSTAT <> 'D' AND  Y.DOCTYPE = 'C' AND
                               YI.COMPANY = JE.COMPANY AND YI.BRANCH = JE.BRANCH AND YI.DOCNO = Y.DOCNO AND
                               JE.slacctno = YI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', YI.REFNO,
                          MID(concat(YI.REFNO,'/'), 1,locate('/',concat(YI.REFNO,'/'),1) + (locate('/',concat(YI.REFNO,'/'),1)-
                          locate('/',concat(YI.REFNO,'/'),locate('/',concat(YI.REFNO,'/'),1)) -1))) AND Y.DOCDATE < pi_date_fr)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  < pi_date_fr    AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO


            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),

               IF(pi_currencytype = 0, SUM(JVI.DEBIT), IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.DEBIT_FC),SUM(JVI.DEBIT))),
               IF(pi_currencytype = 0, SUM(JVI.CREDIT),IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.CREDIT_FC),SUM(JVI.CREDIT)))

            FROM JOURNALENTRYITEMS JE

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH  AND JVI.COMPANY = JV.COMPANY AND JV.SBO_POST_FLAG = 1 AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.ITEMNO = JE.SLACCTNO AND
                              JV.DOCDATE < pi_date_fr AND JE.DOCNO = if(JE.DOCTYPE <> 'JV', JVI.REFNO,
                          MID(concat(JVI.REFNO,'/'), 1,locate('/',concat(JVI.REFNO,'/'),1) + (locate('/',concat(JVI.REFNO,'/'),1)-
                          locate('/',concat(JVI.REFNO,'/'),locate('/',concat(JVI.REFNO,'/'),1)) -1)))  )
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.DOCDATE  <  pi_date_fr   AND
                  JVI.ITEMNO = JE.SLACCTNO    AND
                  JVI.REFNO LIKE CONCAT(JE.DOCNO,if(JE.DOCTYPE <> 'JV','','/%')) AND
                  JVI.ITEMTYPE = 'C'
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION


        SELECT C.COMPANY, C.BRANCHCODE, 'RC', 'B' as LINETYPE, C.CUSTNO, C.DOCDATE, null,
               C.docno, 'PAYMENT COLLECTED', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM COLLECTIONS C
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN COLLECTIONSINVOICES CI)
                       ON (CI.COMPANY = C.COMPANY AND CI.BRANCH = C.BRANCHCODE AND CI.REFNO = C.DOCNO AND
                           J.COMPANY = CI.COMPANY AND J.BRANCH = CI.BRANCH AND J.DOCTYPE = 'RC' AND J.DOCNO = CI.DOCNO AND
                           J.SLTYPE = 'C' AND J.DOCDATE < pi_date_fr AND J.ISDEBIT = 1)
                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = C.COMPANY AND JE.BRANCH = C.BRANCHCODE AND JE.DOCNO = C.DOCNO AND
                                                        JE.SLTYPE = 'C' AND JE.SLACCTNO = C.CUSTNO AND JE.ISDEBIT = 0
        WHERE C.COMPANY       =  pi_company   AND
              C.BRANCHCODE    =  pi_branch    AND
              C.DOCTYPE       = 'C'           AND
              C.DOCSTAT       <> 'D'          AND
              C.COLLFOR       <> 'SI'         AND
              C.DOCDATE       <  pi_date_fr   AND
              C.SBO_POST_FLAG = 1             AND
              C.CUSTNO        >=  v_debtor_fr AND
              C.CUSTNO        <=  v_debtor_to
        GROUP BY C.CUSTNO, C.DOCNO

        UNION


         SELECT P.COMPANY, P.BRANCHCODE, 'PY', 'B' as LINETYPE, P.BPCODE, P.DOCDATE, null,
               P.docno, 'PAYMENT TO DEBTOR', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM PAYMENTS P
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN COLLECTIONSINVOICES CI)
                       ON (CI.COMPANY = P.COMPANY AND CI.BRANCH = P.BRANCHCODE AND CI.REFNO = P.DOCNO AND
                           J.COMPANY = CI.COMPANY AND J.BRANCH = CI.BRANCH AND J.DOCTYPE = 'RC' AND J.DOCNO = CI.DOCNO AND
                           J.SLTYPE = 'C' AND J.DOCDATE < pi_date_fr AND J.ISDEBIT = 0)

                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = P.COMPANY AND JE.BRANCH = P.BRANCHCODE AND JE.DOCNO = P.DOCNO AND
                                                        JE.SLTYPE = 'C' AND JE.SLACCTNO = P.BPCODE AND JE.ISDEBIT = 1
        WHERE P.COMPANY       =  pi_company   AND
              P.BRANCHCODE    =  pi_branch    AND
              P.DOCTYPE       = 'C'           AND
              P.DOCSTAT       <> 'D'          AND
              P.COLLFOR       <> 'SI'         AND
              P.DOCDATE       <  pi_date_fr   AND
              P.SBO_POST_FLAG = 1             AND
              P.BPCODE        >=  v_debtor_fr AND
              P.BPCODE        <=  v_debtor_to
        GROUP BY P.BPCODE, P.DOCNO

        UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'B' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)),0),
	             IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(CI.amount) is null,0,sum(CI.amount)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)))* -1),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC * -1) - IF(sum(CI.amount) is null,0,sum(CI.amount)))* -1),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)))* -1))),
               0,0
            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT = 'C' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE < pi_date_fr)


                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.ISDEBIT  = 0             AND
                  JE.DOCDATE  <  pi_date_fr    AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

        UNION

        SELECT AR.COMPANY, AR.BRANCH, 'CM', 'B' as LINETYPE, AR.BPCODE, AR.DOCDATE, AR.DOCDUEDATE, AR.DOCNO, 'CREDIT MEMO', '',
               0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AR.DUEAMOUNT * AR.CURRENCYRATE),
               IF(v_localcurrency <> AR.CURRENCY, JE.GLCREDIT_FC - AR.DUEAMOUNT, JE.GLCREDIT - AR.DUEAMOUNT)),
               0
            FROM ARCREDITMEMOS AR
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AR.COMPANY AND JE.BRANCH = AR.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AR.DOCNO,
                 ARCREDITMEMOITEMS ARI
            WHERE AR.COMPANY = ARI.COMPANY AND
                  AR.BRANCH  = ARI.BRANCH  AND
                  AR.DOCID   = ARI.DOCID   AND
                  AR.COMPANY = pi_company  AND
                  AR.BRANCH  = pi_branch   AND
                  AR.DOCNO = JE.DOCNO      AND
                  AR.DOCDATE < pi_date_fr  AND
                  AR.BPCODE >= v_debtor_fr AND
                  AR.BPCODE <= v_debtor_to AND
                  ARI.BASETYPE = 'ARINVOICE'
            GROUP BY AR.DOCNO

        UNION

        SELECT AR.COMPANY, AR.BRANCH, 'AR', 'B' as LINETYPE, AR.BPCODE, JE.DOCDATE, JE.DOCDUEDATE, ARI.BASEDOCNO, 'SALES / DEBIT MEMO', '',
               0,0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AR.DUEAMOUNT * AR.CURRENCYRATE),
               IF(v_localcurrency <> AR.CURRENCY, JE.GLCREDIT_FC - AR.DUEAMOUNT, JE.GLCREDIT - AR.DUEAMOUNT))
            FROM ARCREDITMEMOS AR
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AR.COMPANY AND JE.BRANCH = AR.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AR.DOCNO,
                 ARCREDITMEMOITEMS ARI
            WHERE AR.COMPANY = ARI.COMPANY AND
                  AR.BRANCH  = ARI.BRANCH  AND
                  AR.DOCID   = ARI.DOCID   AND
                  AR.COMPANY = pi_company  AND
                  AR.BRANCH  = pi_branch   AND
                  AR.DOCNO = JE.DOCNO      AND
                  AR.DOCDATE < pi_date_fr  AND
                  AR.BPCODE >= v_debtor_fr AND
                  AR.BPCODE <= v_debtor_to AND
                  ARI.BASETYPE = 'ARINVOICE'
            GROUP BY AR.DOCNO;





      INSERT INTO STATEMENT_TEMP3 (COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT)
        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.DOCDATE, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE),
               JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF (pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC,JE.GLDEBIT)),
               IF (pi_currencytype = 0, JE.GLCREDIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT))
            FROM JOURNALENTRYITEMS JE
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   =  pi_branch    AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.DOCDATE  >= pi_date_fr   AND
                  JE.DOCDATE  <= pi_date_to  ;




      INSERT INTO STATEMENT_TEMP (COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT)
        SELECT COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2,
               IF(SUM(GLDEBIT - GLCREDIT) >= 0, SUM(GLDEBIT - GLCREDIT), 0), IF(SUM(GLDEBIT - GLCREDIT) <= 0, SUM(GLCREDIT - GLDEBIT), 0)
          FROM STATEMENT_TEMP3
          GROUP BY BPCODE, DOCTYPE, DOCNO




        UNION

        SELECT COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2,
            IF((GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)) > 0, (GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)), 0),
            IF((GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)) > 0,  (GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)), 0)
          FROM STATEMENT_TEMP1
          WHERE DOCDATE < pi_date_fr
          GROUP BY BPCODE, DOCTYPE, DOCNO;




      INSERT INTO STATEMENT_TEMP2 (COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT, GLDEBIT_O, GLCREDIT_O)
        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount) * -1)),
               if(SUM(CI.amount) IS NULL, 0, if(SUM(CI.amount)>0,SUM(CI.amount * JE.CURRENCYRATE),0)))),
               IF(pi_currencytype = 0,
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,SUM(CI.amount),0)),
               if(SUM(CI.amount) IS NULL,0,if(SUM(CI.amount)>0,0,SUM(CI.amount * JE.CURRENCYRATE)))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT <> 'D' AND  C.DOCTYPE = 'C' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE <= pi_date_to)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  <= pi_date_to   AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,SUM(YI.amount),0 )),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,0,SUM(YI.amount * JE.CURRENCYRATE))))),
               IF(pi_currencytype = 0,
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0)),
               IF(v_localcurrency <> JE.CURRENCY, if(SUM(YI.amount) IS NULL,0,if(SUM(YI.amount)>0,0,SUM(YI.amount) * 1)),
               if(SUM(YI.amount) IS NULL, 0, if(SUM(YI.amount) > 0,SUM(YI.amount * JE.CURRENCYRATE),0))))

            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (PAYMENTS Y CROSS JOIN PAYMENTINVOICES YI)
		                      ON ( Y.COMPANY = JE.COMPANY AND Y.BRANCHCODE = JE.BRANCH AND Y.DOCSTAT <> 'D' AND  Y.DOCTYPE = 'C' AND
                               YI.COMPANY = JE.COMPANY AND YI.BRANCH = JE.BRANCH AND YI.DOCNO = Y.DOCNO AND
                               JE.slacctno = YI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', YI.REFNO,
                          MID(concat(YI.REFNO,'/'), 1,locate('/',concat(YI.REFNO,'/'),1) + (locate('/',concat(YI.REFNO,'/'),1)-
                          locate('/',concat(YI.REFNO,'/'),locate('/',concat(YI.REFNO,'/'),1)) -1))) AND Y.DOCDATE  <= pi_date_to)

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.REFNO > '')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.DOCTYPE  <> 'PY'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.ISDEBIT  = 1             AND
                  JE.DOCDATE  <= pi_date_to   AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO


            UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'A' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF(pi_currencytype = 0, JE.GLDEBIT, IF(v_localcurrency <> JE.CURRENCY, JE.GLDEBIT_FC, JE.GLDEBIT)),
	             IF(pi_currencytype = 0, JE.GLCREDIT,IF(v_localcurrency <> JE.CURRENCY, JE.GLCREDIT_FC,JE.GLCREDIT)),

               IF(pi_currencytype = 0, SUM(JVI.DEBIT), IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.DEBIT_FC),SUM(JVI.DEBIT))),
               IF(pi_currencytype = 0, SUM(JVI.CREDIT),IF(v_localcurrency <> JE.CURRENCY, SUM(JVI.CREDIT_FC),SUM(JVI.CREDIT)))

            FROM JOURNALENTRYITEMS JE

                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH  AND JVI.COMPANY = JV.COMPANY AND JV.SBO_POST_FLAG = 1 AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C' AND JVI.ITEMNO = JE.SLACCTNO AND
                              JV.DOCDATE <= pi_date_to AND JE.DOCNO = if(JE.DOCTYPE <> 'JV', JVI.REFNO,
                          MID(concat(JVI.REFNO,'/'), 1,locate('/',concat(JVI.REFNO,'/'),1) + (locate('/',concat(JVI.REFNO,'/'),1)-
                          locate('/',concat(JVI.REFNO,'/'),locate('/',concat(JVI.REFNO,'/'),1)) -1)))  )
            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.DOCDATE  <= pi_date_to   AND
                  JVI.ITEMNO = JE.SLACCTNO    AND
                  JVI.REFNO LIKE CONCAT(JE.DOCNO,if(JE.DOCTYPE <> 'JV','','/%')) AND
                  JVI.ITEMTYPE = 'C'
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

            UNION


        SELECT C.COMPANY, C.BRANCHCODE, 'RC', 'B' as LINETYPE, C.CUSTNO, C.DOCDATE, null,
               C.docno, 'PAYMENT COLLECTED', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM COLLECTIONS C
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN COLLECTIONSINVOICES CI)
                       ON (CI.COMPANY = C.COMPANY AND CI.BRANCH = C.BRANCHCODE AND CI.REFNO = C.DOCNO AND
                           J.COMPANY = CI.COMPANY AND J.BRANCH = CI.BRANCH AND J.DOCTYPE = 'RC' AND J.DOCNO = CI.DOCNO AND
                           J.SLTYPE = 'C' AND J.DOCDATE <= pi_date_to AND J.ISDEBIT = 1)
                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = C.COMPANY AND JE.BRANCH = C.BRANCHCODE AND JE.DOCNO = C.DOCNO AND
                                                        JE.SLTYPE = 'C' AND JE.SLACCTNO = C.CUSTNO AND JE.ISDEBIT = 0
        WHERE C.COMPANY       =  pi_company   AND
              C.BRANCHCODE    =  pi_branch    AND
              C.DOCTYPE       = 'C'           AND
              C.DOCSTAT       <> 'D'          AND
              C.COLLFOR       <> 'SI'         AND
              C.DOCDATE       <=  pi_date_to  AND
              C.SBO_POST_FLAG = 1             AND
              C.CUSTNO        >=  v_debtor_fr AND
              C.CUSTNO        <=  v_debtor_to
        GROUP BY C.CUSTNO, C.DOCNO

        UNION


         SELECT P.COMPANY, P.BRANCHCODE, 'PY', 'B' as LINETYPE, P.BPCODE, P.DOCDATE, null,
               P.docno, 'PAYMENT TO DEBTOR', '',
	             IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(J.GLCREDIT_FC) is null,0,sum(J.GLCREDIT_FC)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(J.GLCREDIT) is null,0,sum(J.GLCREDIT)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC ) - IF(sum(J.GLDEBIT_FC) is null,0,sum(J.GLDEBIT_FC))) ),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT ) - IF(sum(J.GLDEBIT) is null,0,sum(J.GLDEBIT))) ))),
               0,0
            FROM PAYMENTS P
                LEFT JOIN (JOURNALENTRYITEMS J CROSS JOIN COLLECTIONSINVOICES CI)
                       ON (CI.COMPANY = P.COMPANY AND CI.BRANCH = P.BRANCHCODE AND CI.REFNO = P.DOCNO AND
                           J.COMPANY = CI.COMPANY AND J.BRANCH = CI.BRANCH AND J.DOCTYPE = 'RC' AND J.DOCNO = CI.DOCNO AND
                           J.SLTYPE = 'C' AND J.DOCDATE <= pi_date_to AND J.ISDEBIT = 0)

                LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = P.COMPANY AND JE.BRANCH = P.BRANCHCODE AND JE.DOCNO = P.DOCNO AND
                                                        JE.SLTYPE = 'C' AND JE.SLACCTNO = P.BPCODE AND JE.ISDEBIT = 1
        WHERE P.COMPANY       =  pi_company   AND
              P.BRANCHCODE    =  pi_branch    AND
              P.DOCTYPE       = 'C'           AND
              P.DOCSTAT       <> 'D'          AND
              P.COLLFOR       <> 'SI'         AND
              P.DOCDATE       <=  pi_date_to  AND
              P.SBO_POST_FLAG = 1             AND
              P.BPCODE        >=  v_debtor_fr AND
              P.BPCODE        <=  v_debtor_to
        GROUP BY P.BPCODE, P.DOCNO

        UNION

        SELECT JE.COMPANY, JE.BRANCH, JE.DOCTYPE, 'B' as LINETYPE, JE.SLACCTNO, JE.docdate, IF(JE.doctype in('CM','JV','RC','PY'),Null,JE.DOCDUEDATE), JE.DOCNO,
               CASE WHEN JE.DOCTYPE = 'RC' THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'AR' THEN 'SALES / DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM' THEN 'CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'JV' THEN 'JOURNAL VOUCHER'
                    WHEN JE.DOCTYPE = 'PY' THEN 'PAYMENT TO DEBTOR'
                    WHEN JE.DOCTYPE = 'DT' THEN 'AR DOWNPAYMENT'
                    ELSE '' END,
               '',
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)),0),
	             IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,JE.GLDEBIT_FC - IF(sum(CI.amount) is null,0,sum(CI.amount)),0),
               IF(JE.GLDEBIT > 0,JE.GLDEBIT - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)),0))),
               IF (pi_currencytype = 0,
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)))* -1),
               IF(v_localcurrency <> JE.CURRENCY, IF(JE.GLDEBIT_FC > 0,0, ((JE.GLCREDIT_FC * -1) - IF(sum(CI.amount) is null,0,sum(CI.amount)))* -1),
               IF(JE.GLDEBIT > 0,0, ((JE.GLCREDIT * -1) - IF(sum(CI.amount * C.CURRENCYRATE) is null,0,sum(CI.amount * C.CURRENCYRATE)))* -1))),
               0,0
            FROM JOURNALENTRYITEMS JE
	              LEFT JOIN  (COLLECTIONS C CROSS JOIN COLLECTIONSINVOICES CI)
		                      ON ( C.COMPANY = JE.COMPANY AND C.BRANCHCODE = JE.BRANCH AND C.DOCSTAT = 'C' AND
                               CI.COMPANY = JE.COMPANY AND CI.BRANCH = JE.BRANCH AND CI.DOCNO = C.DOCNO AND
                               JE.slacctno = CI.bpcode and JE.DOCNO = if(JE.DOCTYPE <> 'JV', CI.REFNO,
                          MID(concat(CI.REFNO,'/'), 1,locate('/',concat(CI.REFNO,'/'),1) + (locate('/',concat(CI.REFNO,'/'),1)-
                          locate('/',concat(CI.REFNO,'/'),locate('/',concat(CI.REFNO,'/'),1)) -1))) AND C.DOCDATE <= pi_date_to)


                LEFT JOIN (JOURNALVOUCHERS JV CROSS JOIN JOURNALVOUCHERITEMS JVI)
                          ON (JV.COMPANY = JE.COMPANY AND JV.BRANCH = JE.BRANCH AND JV.DOCNO = JE.DOCNO AND JVI.COMPANY = JV.COMPANY AND
                              JVI.BRANCH = JV.BRANCH AND JVI.DOCID = JV.DOCID AND JVI.ITEMTYPE = 'C')

            WHERE JE.COMPANY  = pi_company    AND
                  JE.BRANCH   = pi_branch     AND
                  JE.DOCTYPE  <> 'RC'         AND
                  JE.SLTYPE   = 'C'           AND
                  JE.SLACCTNO >= v_debtor_fr  AND
                  JE.SLACCTNO <= v_debtor_to  AND
                  JE.ISDEBIT  = 0             AND
                  JE.DOCDATE  <= pi_date_to    AND
                  JVI.ITEMTYPE IS NULL
            GROUP BY JE.SLACCTNO, JE.DOCTYPE, JE.DOCNO

        UNION

        SELECT AR.COMPANY, AR.BRANCH, 'CM', 'B' as LINETYPE, AR.BPCODE, AR.DOCDATE, AR.DOCDUEDATE, AR.DOCNO, 'CREDIT MEMO', '',
               0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AR.DUEAMOUNT * AR.CURRENCYRATE),
               IF(v_localcurrency <> AR.CURRENCY, JE.GLCREDIT_FC - AR.DUEAMOUNT, JE.GLCREDIT - AR.DUEAMOUNT)),
               0
            FROM ARCREDITMEMOS AR
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AR.COMPANY AND JE.BRANCH = AR.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AR.DOCNO,
                 ARCREDITMEMOITEMS ARI
            WHERE AR.COMPANY = ARI.COMPANY  AND
                  AR.BRANCH  = ARI.BRANCH   AND
                  AR.DOCID   = ARI.DOCID    AND
                  AR.COMPANY = pi_company   AND
                  AR.BRANCH  = pi_branch    AND
                  AR.DOCNO = JE.DOCNO       AND
                  AR.DOCDATE <= pi_date_to  AND
                  AR.BPCODE >= v_debtor_fr  AND
                  AR.BPCODE <= v_debtor_to  AND
                  ARI.BASETYPE = 'ARINVOICE'
            GROUP BY AR.DOCNO

        UNION

        SELECT AR.COMPANY, AR.BRANCH, 'AR', 'B' as LINETYPE, AR.BPCODE, JE.DOCDATE, JE.DOCDUEDATE, ARI.BASEDOCNO, 'SALES / DEBIT MEMO', '',
               0,0,0,
               IF (pi_currencytype = 0, JE.GLCREDIT - (AR.DUEAMOUNT * AR.CURRENCYRATE),
               IF(v_localcurrency <> AR.CURRENCY, JE.GLCREDIT_FC - AR.DUEAMOUNT, JE.GLCREDIT - AR.DUEAMOUNT))
            FROM ARCREDITMEMOS AR
              LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = AR.COMPANY AND JE.BRANCH = AR.BRANCH AND
                                                      JE.DOCTYPE = 'CM' AND JE.SLTYPE = 'C' AND JE.DOCNO = AR.DOCNO,
                 ARCREDITMEMOITEMS ARI
            WHERE AR.COMPANY = ARI.COMPANY AND
                  AR.BRANCH  = ARI.BRANCH  AND
                  AR.DOCID   = ARI.DOCID   AND
                  AR.COMPANY = pi_company  AND
                  AR.BRANCH  = pi_branch   AND
                  AR.DOCNO = JE.DOCNO      AND
                  AR.DOCDATE <= pi_date_to AND
                  AR.BPCODE >= v_debtor_fr AND
                  AR.BPCODE <= v_debtor_to AND
                  ARI.BASETYPE = 'ARINVOICE'
            GROUP BY AR.DOCNO;


        INSERT INTO STATEMENT_TEMP4 (COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2, GLDEBIT, GLCREDIT)
        SELECT COMPANY, BRANCH, DOCTYPE, LINETYPE, BPCODE, DOCDATE, DOCDUEDATE, DOCNO, DESCRIPTION, DESCRIPTION2,
            IF((GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)) > 0, (GLDEBIT +  SUM(GLDEBIT_O)) - (GLCREDIT + SUM(GLCREDIT_O)), 0),
            IF((GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)) > 0,  (GLCREDIT + SUM(GLCREDIT_O)) - (GLDEBIT +  SUM(GLDEBIT_O)), 0)
          FROM STATEMENT_TEMP2
          GROUP BY BPCODE, DOCTYPE, DOCNO;







       DELETE FROM STATEMENT_TEMP WHERE GLDEBIT = 0 AND GLCREDIT = 0;

       IF pi_rpttype = 0 THEN

         INSERT INTO AGING_TEMP (COMPANY, BRANCH, BPCODE, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12, OPENCREDIT,
                             MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC)
         SELECT COMPANY, BRANCH, BPCODE,
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth01,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth02,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth03,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth04,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth05,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') <=  DATE_FORMAT(v_mth06,'%Y%m'), SUM(GLDEBIT), 0),
                0,
                0,
                0,
                0,
                0,
                0,
                SUM(GLCREDIT) * -1,
                v_mth01desc,
                v_mth02desc,
                v_mth03desc,
                v_mth04desc,
                v_mth05desc,
                v_mth06desc,
                v_mth07desc,
                v_mth08desc,
                v_mth09desc,
                v_mth10desc,
                v_mth11desc,
                v_mth12desc
             FROM STATEMENT_TEMP4 GROUP BY BPCODE, YEAR(DOCDATE), MONTH(DOCDATE);

       ELSE

         INSERT INTO AGING_TEMP (COMPANY, BRANCH, BPCODE, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12, OPENCREDIT,
                             MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC)
         SELECT COMPANY, BRANCH, BPCODE,
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth01,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth02,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth03,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth04,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth05,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth06,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth07,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth08,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth09,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth10,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') =  DATE_FORMAT(v_mth11,'%Y%m'), SUM(GLDEBIT), 0),
                IF(DATE_FORMAT(DOCDATE,'%Y%m') <=  DATE_FORMAT(v_mth12,'%Y%m'),SUM(GLDEBIT), 0),
                SUM(GLCREDIT) * -1,
                v_mth01desc,
                v_mth02desc,
                v_mth03desc,
                v_mth04desc,
                v_mth05desc,
                v_mth06desc,
                v_mth07desc,
                v_mth08desc,
                v_mth09desc,
                v_mth10desc,
                v_mth11desc,
                v_mth12desc
             FROM STATEMENT_TEMP4 GROUP BY BPCODE, YEAR(DOCDATE), MONTH(DOCDATE);

       END IF;

       INSERT INTO AGING_TEMP2 (COMPANY, BRANCH, BPCODE, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12, OPENCREDIT,
                           MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC)
       SELECT COMPANY, BRANCH, BPCODE,
              SUM(MTH01), SUM(MTH02), SUM(MTH03), SUM(MTH04), SUM(MTH05), SUM(MTH06), SUM(MTH07), SUM(MTH08),SUM(MTH09), SUM(MTH10), SUM(MTH11), SUM(MTH12), SUM(OPENCREDIT),
              MTH01DESC, MTH02DESC, MTH03DESC, MTH04DESC, MTH05DESC, MTH06DESC, MTH07DESC, MTH08DESC, MTH09DESC, MTH10DESC, MTH11DESC, MTH12DESC
           FROM AGING_TEMP GROUP BY BPCODE;



       SELECT UPPER(c.COMPANYNAME) as COMPANY,
              UPPER(concat(e.BARANGAY,' ', e.STREET,' ', e.ZIP, ' ', e.CITY, ' ',(select pr.PROVINCENAME from  provinces pr where pr.province = e.province), ', ', (SELECT cct.COUNTRYNAME FROM COUNTRIES cct WHERE e.country = cct.country ))) as BRANCHCODE,
 	            cu.CUSTNO,
	            cu.CUSTNAME,
	            cu.PHONE1,
	            cu.FAX,
              cu.CURRENCY,
              c.CURRENCY as LOCALCUR,
              CR.CURRENCYNAME,
              CR2.CURRENCYNAME AS LOCALCURRENCY,
	            a.STREET,
	            a.BARANGAY,
	            a.CITY,
	            a.ZIP,
            	p.PROVINCENAME,
	            ct.COUNTRYNAME,
	            CC.NAME,
              e.U_U_TELNO,
              e.U_U_FAXNO,
              e.U_U_EMAIL,
              pt.PAYMENTTERMNAME,
              ST.LINETYPE, ST.BPCODE, ST.DOCDATE, ST.DOCDUEDATE, ST.DOCNO, ST.DESCRIPTION, ST.DESCRIPTION2,
              ST.GLDEBIT,
              ST.GLCREDIT,
              AP.MTH01, AP.MTH02, AP.MTH03, AP.MTH04, AP.MTH05, AP.MTH06, AP.MTH07, AP.MTH08, AP.MTH09, AP.MTH10, AP.MTH11, AP.MTH12, AP.OPENCREDIT,
              AP.MTH01DESC, AP.MTH02DESC, AP.MTH03DESC, AP.MTH04DESC, AP.MTH05DESC, AP.MTH06DESC, AP.MTH07DESC, AP.MTH08DESC, AP.MTH09DESC,
              AP.MTH10DESC, AP.MTH11DESC, AP.MTH12DESC
           FROM STATEMENT_TEMP ST
              LEFT OUTER JOIN CUSTOMERS CU        ON CU.COMPANY = ST.COMPANY AND CU.BRANCH = ST.BRANCH AND CU.CUSTNO = ST.BPCODE
              LEFT OUTER JOIN CURRENCIES CR       ON CR.CURRENCY = CU.CURRENCY
              LEFT OUTER JOIN BRANCHES e          ON ST.BRANCH = e.BRANCHCODE
              LEFT OUTER JOIN COMPANIES c         ON c.COMPANYCODE = ST.COMPANY
              LEFT OUTER JOIN CURRENCIES CR2      ON CR2.CURRENCY = C.CURRENCY
              LEFT OUTER JOIN ADDRESSES a         ON a.COMPANY = ST.company and a.BRANCH = ST.branch and
                                                     a.REFID = CU.CUSTNO and a.REFTYPE = 'CUSTOMER' and a.ADDRESSTYPE = 0 and
                                                     CU.DFLTBILLTO = a.ADDRESSNAME
              LEFT OUTER JOIN COUNTRIES ct        ON a.COUNTRY = ct.COUNTRY
              LEFT OUTER JOIN PROVINCES p         ON a.province = p.province and ct.country = p.country
              LEFT OUTER JOIN CUSTOMERCONTACTS cc ON cc.COMPANY = ST.company  and cc.BRANCH = ST.branch and
                                                     cc.CUSTNO = CU.CUSTNO and cc.CONTACTPERSON = CU.DFLTCONTACTPERSON
              LEFT OUTER JOIN PAYMENTTERMS pt     ON pt.PAYMENTTERM = CU.PAYMENTTERM
              LEFT OUTER JOIN AGING_TEMP2 AP      ON AP.COMPANY = ST.COMPANY AND AP.BRANCH = ST.BRANCH AND AP.BPCODE = ST.BPCODE
              ORDER BY ST.BPCODE, ST.DOCDATE, ST.DOCNO;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `debtortranslist_st`
--

DROP PROCEDURE IF EXISTS `debtortranslist_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `debtortranslist_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_bpno_fr VARCHAR(30), IN pi_bpno_to VARCHAR(30),
                                   IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_exzero INT, IN pi_newpage INT)
BEGIN

DECLARE v_bpno_fr VARCHAR(30);
DECLARE v_bpno_to VARCHAR(30);
DECLARE v_selectall   INT;
DECLARE v_now        VARCHAR(30);
DECLARE v_loccurrency VARCHAR(30);

SELECT CO.CURRENCY INTO v_loccurrency
  FROM COMPANIES CO WHERE CO.COMPANYCODE  = pi_company;

SET v_now = CAST(NOW() as char(30));

  IF pi_bpno_fr is null THEN
    SET v_bpno_fr = '';
  ELSE
    SET v_bpno_fr = pi_bpno_fr;
  END IF;

  IF pi_bpno_to is null THEN
    SET v_bpno_to = '';
  ELSE
    SET v_bpno_to = pi_bpno_to;
  END IF;

  IF v_bpno_fr = '' and v_bpno_to = '' THEN
     SET v_selectall = 1;
     SET v_bpno_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZ';
  ELSEIF v_bpno_fr > '' and v_bpno_to = '' THEN
    SET v_selectall = 0;
    SET v_bpno_to = v_bpno_fr;
  ELSEIF v_bpno_fr = '' and v_bpno_to > '' THEN
    SET v_selectall = 0;
    SET v_bpno_fr = v_bpno_to;
  END IF;


  DROP TEMPORARY TABLE IF EXISTS ARTRANSLIST_TEMP ;
  CREATE TEMPORARY TABLE `ARTRANSLIST_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `AMOUNT_FC`      DECIMAL(20,6),
    `AMOUNT`     DECIMAL(20,6),
    `CURRENCY`     VARCHAR(30),
    `CURRENCYRATE` DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO ARTRANSLIST_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2,
                                DESCRIPTION3, AMOUNT_FC, AMOUNT, CURRENCY, CURRENCYRATE)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, 'A' , JE.DOCDATE, JE.DOCTYPE, JE.DOCNO, JE.SLACCTNO, JE.SLACCTNAME, '',
               CASE WHEN JE.DOCTYPE = 'AR'  THEN 'SALES/DEBIT MEMO'
                    WHEN JE.DOCTYPE = 'CM'  THEN 'ACCOUNT CREDITED'
                    WHEN JE.DOCTYPE = 'AP'  THEN 'PURCHASE/CREDIT MEMO'
                    WHEN JE.DOCTYPE = 'ACM' THEN 'ACCOUNT DEBITED'
                    WHEN JE.DOCTYPE = 'PY'  THEN 'PAYMENT FOR ACCOUNT'
                    WHEN JE.DOCTYPE = 'RC'  THEN 'PAYMENT COLLECTED'
                    WHEN JE.DOCTYPE = 'DT'  THEN 'AR DOWNPAYMENT'
                    WHEN JE.DOCTYPE = 'JV'  THEN IF(JE.GLDEBIT > 0, 'ACCOUNT DEBITED', 'ACCOUNT CREDITED')
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.BPREFNO
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPREFNO
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPREFNO
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPREFNO
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.REFNO
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.REFNO
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPREFNO
                    WHEN JE.DOCTYPE = 'JV'  THEN JV.REFERENCE1
                    ELSE '' END,
                IF(JE.DOCTYPE = 'JV', IF(JV.REFERENCE2 > '', JV.REFERENCE2, ''),''),
                IF(JE.CURRENCY <> CO.CURRENCY, IF(JE.GLDEBIT_FC > 0, JE.GLDEBIT_FC, JE.GLCREDIT_FC * -1),0),
                IF(JE.GLDEBIT > 0, JE.GLDEBIT, JE.GLCREDIT * -1),
                JE.CURRENCY, JE.CURRENCYRATE
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN ARINVOICES AR            ON AR.COMPANY      = pi_company  AND AR.BRANCH      = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','')       AND AR.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APINVOICES AP            ON AP.COMPANY      = pi_company  AND AP.BRANCH      = pi_branch  AND AP.OBJECTCODE = IF(JE.DOCTYPE = 'AP','APINVOICE','')       AND AP.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN ARCREDITMEMOS CM         ON CM.COMPANY      = pi_company  AND CM.BRANCH      = pi_branch  AND CM.OBJECTCODE = IF(JE.DOCTYPE = 'CM','ARCREDITMEMO','')    AND CM.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APCREDITMEMOS ACM        ON ACM.COMPANY     = pi_company  AND ACM.BRANCH     = pi_branch  AND ACM.OBJECTCODE = IF(JE.DOCTYPE = 'ACM','APCREDITMEMO','')   AND ACM.DOCNO = JE.DOCNO
                LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT ON DT.COMPANY      = pi_company  AND DT.BRANCH      = pi_branch  AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','')   AND DT.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN PAYMENTS PY              ON PY.COMPANY      = pi_company  AND PY.BRANCHCODE  = pi_branch  AND PY.OBJECTCODE = IF(JE.DOCTYPE = 'PY','OUTGOINGPAYMENT','') AND PY.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN COLLECTIONS RC           ON RC.COMPANY      = pi_company  AND RC.BRANCHCODE  = pi_branch  AND RC.OBJECTCODE = IF(JE.DOCTYPE = 'RC','INCOMINGPAYMENT','') AND RC.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN JOURNALVOUCHERS JV       ON JV.COMPANY      = pi_company  AND JV.BRANCH  = pi_branch      AND JV.OBJECTCODE = IF(JE.DOCTYPE = 'JV','JOURNALVOUCHER','')  AND JV.DOCNO  = JE.DOCNO
            WHERE JE.COMPANY = pi_company  AND
                  JE.BRANCH =  pi_branch   AND
                  JE.SLTYPE  = 'C'         AND
                  JE.SLACCTNO >= v_bpno_fr AND
                  JE.SLACCTNO <= v_bpno_to AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to ;




  SELECT COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2,
                                DESCRIPTION3, AMOUNT_FC, AMOUNT, CURRENCY, CURRENCYRATE, v_loccurrency AS LCCURRENCY
       FROM ARTRANSLIST_TEMP ORDER BY GLACCTNO, LINETYPE, DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `DSR_JV_list`
--

DROP PROCEDURE IF EXISTS `DSR_JV_list`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `DSR_JV_list`(IN pi_company varchar(200),
                               IN pi_branch varchar(200),
                               IN pi_date1 varchar(200),
                               IN pi_date2 varchar(200),
                               IN pi_status varchar(200))
BEGIN
SELECT upper(concat(c.companyname, ' (',c.companytype, ' Group)')) as Company,
       upper(concat(b.BRANCHCODE,' - ',b.BRANCHNAME)) as Branch,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       a.docno,
       a.u_date_from as DSR_Date,
       a.docstatus,
       a.u_brjvdocno as Branch_JV,
       a.u_hojvdocno as HO_JV,
       a.u_hogidocno as HO_GI
       FROM u_dailyshiftsales a
       LEFT OUTER JOIN branches b ON a.BRANCH = b.BRANCHCODE
       LEFT OUTER JOIN companies c on a.company = c.companycode
Where a.company = pi_company and a.branch = pi_branch
      and a.u_date_from between pi_date1 and pi_date2
      and (pi_status='' or (pi_status<>'' AND a.docstatus = pi_status));
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `DSR_report`
--

DROP PROCEDURE IF EXISTS `DSR_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `DSR_report`(IN pi_company varchar(200),
                              IN pi_branch varchar(200),
                              IN pi_docno varchar(200))
BEGIN
SELECT
        a.COMPANY,
        upper(co.companyname) as COMPANYNAME,
        upper(co.COMPANYTYPE) as COMPANYTYPE,
        a.BRANCH,
        upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BRANCHNAME,
        a.DOCNO, a.DOCID, a.DOCSTATUS, a.U_DFLTREADINGTYPE,
        a.U_SHIFT, a.U_DATE_FROM, a.U_TIME_FROM, a.U_DATE_TO, a.U_TIME_TO,
        U_ATTENDANT1, U_ATTENDANT2, U_ATTENDANT3, U_ATTENDANT4
        FROM u_dailyshiftsales a
        LEFT OUTER JOIN branches br ON a.BRANCH = br.BRANCHCODE
        LEFT OUTER JOIN companies co on a.company = co.companycode
        WHERE a.COMPANY = pi_company AND a.BRANCH = pi_branch
        AND a.docno =  pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `early_registration`
--

DROP PROCEDURE IF EXISTS `early_registration`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `early_registration`(IN pi_company VARCHAR(30),
                                      IN pi_branch VARCHAR(30),
                                      IN pi_date1 VARCHAR(30),
                                      IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `main` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `COMPANYNAME` varchar(500) NULL default '',
    `COMPANYTYPE` varchar(500) NULL default '',
    `BRANCHNAME` varchar(500) NULL default '',
    `u_date_from` DATE NULL,
    `u_shift` varchar(100) NULL default '',
    `Biodiesel1` NUMERIC(18,6) NOT NULL default '0',
    `Biodiesel2` NUMERIC(18,6) NOT NULL default '0',
    `Biodiesel3` NUMERIC(18,6) NOT NULL default '0',
    `Biodiesel4` NUMERIC(18,6) NOT NULL default '0',
    `Biodiesel5` NUMERIC(18,6) NOT NULL default '0',
    `Premium1` NUMERIC(18,6) NOT NULL default '0',
    `Premium2` NUMERIC(18,6) NOT NULL default '0',
    `Premium3` NUMERIC(18,6) NOT NULL default '0',
    `Premium4` NUMERIC(18,6) NOT NULL default '0',
    `Premium5` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded1` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded2` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded3` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded4` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded5` NUMERIC(18,6) NOT NULL default '0',
    `Regular1` NUMERIC(18,6) NOT NULL default '0',
    `Regular2` NUMERIC(18,6) NOT NULL default '0',
    `Regular3` NUMERIC(18,6) NOT NULL default '0',
    `Regular4` NUMERIC(18,6) NOT NULL default '0',
    `Regular5` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene1` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene2` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene3` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene4` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene5` NUMERIC(18,6) NOT NULL default '0',
    `U_ATTENDANT1` varchar(100) NULL default '',
    `username` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO main ( COMPANY,
                BRANCH,
                COMPANYNAME,
                COMPANYTYPE,
                BRANCHNAME,
                u_date_from,
                u_shift,
                Biodiesel1,
                Biodiesel2,
                Biodiesel3,
                Biodiesel4,
                Biodiesel5,
                Premium1,
                Premium2,
                Premium3,
                Premium4,
                Premium5,
                Unleaded1,
                Unleaded2,
                Unleaded3,
                Unleaded4,
                Unleaded5,
                Regular1,
                Regular2,
                Regular3,
                Regular4,
                Regular5,
                Kerosene1,
                Kerosene2,
                Kerosene3,
                Kerosene4,
                Kerosene5,
                U_ATTENDANT1,
                username)
    Select
       a.COMPANY,
       a.BRANCH,
       upper(co.companyname) as COMPANYNAME,
       upper(concat('(',co.companytype, ' Group)')) as COMPANYTYPE,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BRANCHNAME,
       b.u_date_from,
       b.u_shift,
       if(a.u_itemcode = 'W0001' and a.u_pump = 1, sum(a.u_amount), 0) as 'Biodiesel1',
       if(a.u_itemcode = 'W0001' and a.u_pump = 2, sum(a.u_amount), 0) as 'Biodiesel2',
       if(a.u_itemcode = 'W0001' and a.u_pump = 3, sum(a.u_amount), 0) as 'Biodiesel3',
       if(a.u_itemcode = 'W0001' and a.u_pump = 4, sum(a.u_amount), 0) as 'Biodiesel4',
       if(a.u_itemcode = 'W0001' and a.u_pump = 5, sum(a.u_amount), 0) as 'Biodiesel5',
       if(a.u_itemcode = 'W0002' and a.u_pump = 1, sum(a.u_amount), 0) as 'Premium1',
       if(a.u_itemcode = 'W0002' and a.u_pump = 2, sum(a.u_amount), 0) as 'Premium2',
       if(a.u_itemcode = 'W0002' and a.u_pump = 3, sum(a.u_amount), 0) as 'Premium3',
       if(a.u_itemcode = 'W0002' and a.u_pump = 4, sum(a.u_amount), 0) as 'Premium4',
       if(a.u_itemcode = 'W0002' and a.u_pump = 5, sum(a.u_amount), 0) as 'Premium5',
       if(a.u_itemcode = 'W0003' and a.u_pump = 1, sum(a.u_amount), 0) as 'Unleaded1',
       if(a.u_itemcode = 'W0003' and a.u_pump = 2, sum(a.u_amount), 0) as 'Unleaded2',
       if(a.u_itemcode = 'W0003' and a.u_pump = 3, sum(a.u_amount), 0) as 'Unleaded3',
       if(a.u_itemcode = 'W0003' and a.u_pump = 4, sum(a.u_amount), 0) as 'Unleaded4',
       if(a.u_itemcode = 'W0003' and a.u_pump = 5, sum(a.u_amount), 0) as 'Unleaded5',
       if(a.u_itemcode = 'W0004' and a.u_pump = 1, sum(a.u_amount), 0) as 'Regular1',
       if(a.u_itemcode = 'W0004' and a.u_pump = 2, sum(a.u_amount), 0) as 'Regular2',
       if(a.u_itemcode = 'W0004' and a.u_pump = 3, sum(a.u_amount), 0) as 'Regular3',
       if(a.u_itemcode = 'W0004' and a.u_pump = 4, sum(a.u_amount), 0) as 'Regular4',
       if(a.u_itemcode = 'W0004' and a.u_pump = 5, sum(a.u_amount), 0) as 'Regular5',
       if(a.u_itemcode = 'W0005' and a.u_pump = 1, sum(a.u_amount), 0) as 'Kerosene1',
       if(a.u_itemcode = 'W0005' and a.u_pump = 2, sum(a.u_amount), 0) as 'Kerosene2',
       if(a.u_itemcode = 'W0005' and a.u_pump = 3, sum(a.u_amount), 0) as 'Kerosene3',
       if(a.u_itemcode = 'W0005' and a.u_pump = 4, sum(a.u_amount), 0) as 'Kerosene4',
       if(a.u_itemcode = 'W0005' and a.u_pump = 5, sum(a.u_amount), 0) as 'Kerosene5',
       b.U_ATTENDANT1,
       us.username
       from u_dailyshiftsalesearlyregs a
             left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
             left outer join items i on a.u_itemcode = i.itemcode
             left outer join branches br ON a.BRANCH = br.BRANCHCODE
             left outer join companies co on a.company = co.companycode
             left outer join users us on b.CREATEDBY = us.userid
   where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between pi_date1 and pi_date2
   group by b.u_date_from, b.u_shift, a.u_itemcode, a.u_pump;
select a.Company,
       a.CompanyName,
       a.CompanyType,
       a.Branch,
       a.BranchName,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       a.u_date_from,
       if(a.u_shift like '1%', 'X', '') as Shift1,
       if(a.u_shift like '2%', 'X', '') as Shift2,
       sum(a.Biodiesel1) as Biodiesel1,
       sum(a.Biodiesel2) as Biodiesel2,
       sum(a.Biodiesel3) as Biodiesel3,
       sum(a.Biodiesel4) as Biodiesel4,
       sum(a.Biodiesel5) as Biodiesel5,
       sum(a.Premium1) as Premium1,
       sum(a.Premium2) as Premium2,
       sum(a.Premium3) as Premium3,
       sum(a.Premium4) as Premium4,
       sum(a.Premium5) as Premium5,
       sum(a.Unleaded1) as Unleaded1,
       sum(a.Unleaded2) as Unleaded2,
       sum(a.Unleaded3) as Unleaded3,
       sum(a.Unleaded4) as Unleaded4,
       sum(a.Unleaded5) as Unleaded5,
       sum(a.Regular1) as Regular1,
       sum(a.Regular2) as Regular2,
       sum(a.Regular3) as Regular3,
       sum(a.Regular4) as Regular4,
       sum(a.Regular5) as Regular5,
       sum(a.Kerosene1) as Kerosene1,
       sum(a.Kerosene2) as Kerosene2,
       sum(a.Kerosene3) as Kerosene3,
       sum(a.Kerosene4) as Kerosene4,
       sum(a.Kerosene5) as Kerosene5,
       U_ATTENDANT1,
       username
       from main a
group by a.u_date_from, a.u_shift;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_crame`
--

DROP PROCEDURE IF EXISTS `esp_crame`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_crame`(IN docno varchar(30), IN u_date varchar(30))
BEGIN
SELECT a.docno,a.u_date,a.u_pc_inspector,a.u_position,a.u_supplier,b.u_bpcode,b.u_bpname,c.billtoaddress, b.u_admin_ctrl,
d.itemdesc,e.serialno
from u_crame a
       left outer join u_crameitems b on a.docid=b.docid
       left outer join salesdeliveries c on b.u_bpcode=c.bpcode and b.u_bpname=c.bpname
       left outer join salesdeliveryitems d on b.u_admin_ctrl=d.u_controlno
       left outer join documentserials e on d.itemcode=e.itemcode and d.docid=e.docid and d.lineid=e.lineid
       left outer join items i on d.itemcode=i.itemcode
       where docno=a.docno and
             u_date=a.u_date and
             i.itemgroup=2
       group by e.serialno order by b.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_daily_collections`
--

DROP PROCEDURE IF EXISTS `esp_daily_collections`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_daily_collections`(  IN pi_company varchar(20),
                                      IN pi_branch varchar(20),
                                      IN pi_date1 varchar(20),
                                      IN pi_userid varchar(20))
BEGIN
SELECT a.COMPANY, a.BRANCHCODE, a.DOCNO, a.COLLFOR, a.BPNAME,
	IFNULL((SELECT NAME FROM customercontacts
		WHERE custno = a.bpcode AND company = pi_company     AND branch = pi_branch
		LIMIT 1), '') AS Contact_Person,
	IFNULL(IF(b.AMOUNT IS NULL AND a.TFAMOUNT <> 0, a.TFBANK, b.BANK), '') AS BANK,
	IFNULL(IF(b.AMOUNT IS NULL AND a.TFAMOUNT <> 0, a.TFBANKBRANCH, b.BANKBRANCH), '') AS BANKBRANCH,
	IFNULL(IF(b.AMOUNT IS NULL AND a.TFAMOUNT <> 0, a.TFBANKACCTNO, b.CHECKNO), '') AS CHECKNO_ACCTNO,
	IF((SELECT SUM(AMOUNT * -1) FROM collectionsinvoices WHERE a.company = company AND a.branchcode = branch AND a.docno = docno AND REFTYPE in('DOWNPAYMENT')) IS NULL, 0,
	(SELECT SUM(AMOUNT * -1) FROM collectionsinvoices WHERE a.company = company AND a.branchcode = branch AND a.docno = docno AND REFTYPE in('DOWNPAYMENT'))) AS Previous_DP,
	IFNULL(c.DISCAMOUNT, 0) AS DISCOUNT,
	a.collectedamount AS CASH_AMOUNT,
	IFNULL(b.AMOUNT, 0) AS CHECK_AMOUNT,
	CASE WHEN (b.AMOUNT = 0 OR b.amount IS NULL) THEN a.TFAMOUNT 
		ELSE 0
		END AS BANK_AMOUNT,
	IF(c.REFNO IS NULL, a.u_sodocno, c.REFNO) AS REFNO,
  a.createdby as 'userid',
  if(pi_userid<>'',u.username,'') as 'username',
  a.u_ospr as 'ospr'
FROM collections a
	LEFT JOIN collectionscheques b ON a.company = b.company AND a.branchcode = b.branch AND a.docno = b.docno
	LEFT JOIN collectionsinvoices c ON a.company = c.company AND a.branchcode = c.branch AND a.docno = c.docno AND c.REFTYPE NOT IN ('DOWNPAYMENT')
	
  LEFT JOIN users u on u.userid=a.createdby
WHERE a.docdate = pi_date1 AND a.company = pi_company AND a.branchcode = pi_branch
      AND a.docstat IN ('O', 'C') and ((pi_userid='') or (a.createdby = pi_userid and pi_userid<>''))
UNION
SELECT a.COMPANY, a.BRANCH, a.DOCNO, 'SI', a.BPNAME,
	IFNULL((SELECT NAME FROM customercontacts
		WHERE custno = a.bpcode AND company = pi_company AND branch = pi_branch
		LIMIT 1), '') AS Contact_Person,
	'' AS BANK,
	'' AS BANKBRANCH,
	'' AS CHECKNO_ACCTNO,
	0 AS Previous_DP,
	IFNULL(a.DISCAMOUNT, 0) AS DISCOUNT,
	a.CASHAMOUNT AS CASH_AMOUNT,
	0 AS CHECK_AMOUNT,
	0 AS BANK_AMOUNT,
	a.DOCNO AS REFNO,
  a.createdby as 'userid',
  if(pi_userid<>'',u.username,'') as 'username',
  a.u_ospr as 'ospr'
FROM arinvoices a
LEFT JOIN users u on u.userid=a.createdby
WHERE a.docdate = pi_date1 AND a.company = pi_company AND a.branch = pi_branch
      AND a.docstatus IN ('O', 'C') and a.bpcode='esp-cash' and ((pi_userid='') or (a.createdby = pi_userid and pi_userid<>''))
GROUP BY a.docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_dc`
--

DROP PROCEDURE IF EXISTS `esp_dc`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_dc`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_date varchar(20))
BEGIN
	SELECT
		
		c.docdate AS 'date',
		
		IFNULL(c.custname, '') AS 'name_of_client',
		IFNULL(cc.bankbranch, '') AS 'bank_branch', IFNULL(cc.checkno, '') AS 'check_no',
		IFNULL(c.cashamount, 0) AS 'in_cash', IFNULL(cc.amount, 0) AS 'in_checks'
	FROM collections AS c
		LEFT JOIN collectionscheques AS cc
			ON c.company = cc.company AND c.branchcode = cc.branch AND c.docno = cc.docno
	WHERE c.company = pi_company AND c.branchcode = pi_branch
		AND c.docdate = pi_date;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_ds`
--

DROP PROCEDURE IF EXISTS `esp_ds`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_ds`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_date varchar(20))
BEGIN
	SELECT 
		
		so.docdate AS 'date',
		so.bpname AS 'customer_name',
		
		so.docno AS 'so_no', soi.itemdesc AS 'particulars', soi.price AS 'cash_sales'
	FROM salesorders AS so
		LEFT JOIN salesorderitems AS soi
			ON so.company = soi.company AND so.branch = soi.branch AND so.docid = soi.docid
	WHERE so.company = pi_company AND so.branch = pi_branch
		AND so.docdate = pi_date;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_dscr`
--

DROP PROCEDURE IF EXISTS `esp_dscr`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_dscr`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_date varchar(20))
BEGIN
	SELECT 
		
		so.docdate AS 'date',
		
		so.docno AS 'so_no', soi.itemdesc AS 'particulars', soi.price AS 'cash_sales',
		so.bpname AS 'name_of_client',
		IFNULL(cc.bankbranch, '') AS 'bank_branch', IFNULL(cc.checkno, '') AS 'check_no',
		IFNULL(c.cashamount, 0) AS 'in_cash', IFNULL(cc.amount, 0) AS 'in_checks'
	FROM salesorders AS so
		LEFT JOIN salesorderitems AS soi
			ON so.company = soi.company AND so.branch = soi.branch AND so.docid = soi.docid
		LEFT JOIN collections AS c
			ON so.company = c.company AND so.branch = c.branchcode AND so.bpcode = c.bpcode
			LEFT JOIN collectionscheques AS cc
				ON c.company = cc.company AND c.branchcode = cc.branch AND c.docno = cc.docno
	WHERE so.company = pi_company AND so.branch = pi_branch;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_fed_dup`
--

DROP PROCEDURE IF EXISTS `esp_fed_dup`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_fed_dup`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_date1 varchar(20), pi_date2 varchar(20))
BEGIN
	
	DROP TABLE IF EXISTS tbl_fd;
	CREATE TABLE tbl_fd(
    company varchar(100),
    branch varchar(50),
    docno varchar(20),
    docdate dateTime,
    bpcode varchar(20),
    bpname varchar(50),
		itemcode varchar(20),
    itemdesc varchar(50),
		price decimal(25, 10),
    u_custname varchar(50),
		u_fedno varchar(200),
    u_sbrno varchar(200),
    u_serialno varchar(200),
    u_itemdesc varchar(100),
		pi_date1 date,
    pi_date2 date,
		duplicates decimal(1));
	INSERT INTO tbl_fd()
		SELECT UPPER(co.companyname) as 'companyname',UPPER(br.branchname) as 'branchname',
      a.docno, a.docdate, a.bpcode, a.bpname, b.itemcode, b.itemdesc,
			b.price, b.u_custname, b.u_fedno, b.u_sbrno, b.u_serialno, b.u_itemdesc, date(pi_date1), date(pi_date2),
			0
		FROM purchaseorders a
			LEFT JOIN purchaseorderitems b
				ON a.docid=b.docid and a.branch=b.branch and a.company=b.company
      LEFT JOIN branches br on br.branchcode=a.branch and br.companycode=a.company
      LEFT JOIN companies co on co.companycode=a.company
		WHERE a.company = pi_company AND a.branch = pi_branch
			AND a.docdate BETWEEN pi_date1 AND pi_date2
			AND a.bpcode='V00000004';
	
	DROP TABLE IF EXISTS tbl_fd_dup;
	CREATE TABLE tbl_fd_dup(
		itemcode varchar(20),
    itemdesc varchar(100),
    u_custname varchar(50),
    u_serialno varchar(30),
    u_itemdesc varchar(100),
    rec decimal(25));
	INSERT INTO tbl_fd_dup()
		SELECT x.itemcode,x.itemdesc,x.u_custname, x.u_serialno, x.u_itemdesc, COUNT(*) as c
		FROM tbl_fd x
		GROUP BY x.u_custname,x.itemcode,x.itemdesc,x.u_serialno, x.u_itemdesc
		HAVING c > 1;
  
	UPDATE tbl_fd AS fd
  inner join tbl_fd_dup as fdd
  ON fd.u_custname=fdd.u_custname and fd.itemdesc=fdd.itemdesc and fd.u_serialno=fdd.u_serialno and fd.u_itemdesc=fdd.u_itemdesc
	SET fd.duplicates = 1
	WHERE 
		
		
		IFNULL(fd.u_serialno,'') <> ''
    
    AND IFNULL(fd.u_itemdesc,'') <> '';
  
	SELECT * FROM tbl_fd order by u_custname,itemdesc,u_itemdesc,u_serialno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_fed_summary`
--

DROP PROCEDURE IF EXISTS `esp_fed_summary`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_fed_summary`(IN pi_date1 varchar(30), IN pi_date2 varchar(30))
BEGIN
select a.docno,a.docdate,a.bpcode,a.bpname, b.itemcode,b.itemdesc,b.price,b.u_custname,b.u_fedno,b.u_sbrno,pi_date1,pi_date2
       from apinvoices a
       left outer join apinvoiceitems b on a.docid=b.docid where a.docdate between pi_date1 and pi_date2 and a.bpname='FED';
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_outstanding_inventory`
--

DROP PROCEDURE IF EXISTS `esp_outstanding_inventory`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_outstanding_inventory`(IN pi_itemgroup varchar(30), IN pi_warehouse varchar(30),IN pi_pricelist varchar(30))
BEGIN
select a.itemcode as ITEMCODE,c.itemdesc as DESCRIPTION,a.instockqty as INSTOCK,c.itemclass as ITEMCLASS,
       b.itemgroupname as ITEMGROUP, d.warehousename,e.price
       from stockcardsummary a
       left outer join items c on a.itemcode=c.itemcode
       left outer join itemgroups b on c.itemgroup=b.itemgroup
       left outer join warehouses d on a.warehouse=d.warehouse
       left outer join itempricelists e on a.itemcode=e.itemcode
       where a.instockqty>0 and pi_itemgroup=c.itemgroup
       and pi_warehouse=a.warehouse
       and pi_pricelist=e.pricelist
       order by a.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_plas`
--

DROP PROCEDURE IF EXISTS `esp_plas`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_plas`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_customername varchar(50), IN pi_date varchar(20))
BEGIN
	SELECT 
		
		IFNULL(poi.u_custname, '') AS 'customer_name', po.docdate AS 'date',
		
		IFNULL(poi.itemdesc, '') AS 'description', 
		IFNULL(poi.quantity, 0) AS 'quantity', IFNULL(poi.unitprice, 0) AS 'unit_price',
		IFNULL(poi.discamount, 0) AS 'discount', IFNULL(poi.price, 0) AS 'net_price',
		po.bpname AS 'dealer_other',
		
		u.username AS 'prepared_by'
	FROM purchaseorders AS po
		LEFT JOIN purchaseorderitems AS poi
			ON po.company = poi.company AND po.branch = poi.branch AND po.docid = poi.docid
		LEFT JOIN users AS u
			ON po.createdby = u.userid
	WHERE po.company = pi_company AND po.branch = pi_branch
		AND poi.u_custname = pi_customername
		AND po.docdate <= pi_date;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_po_customers`
--

DROP PROCEDURE IF EXISTS `esp_po_customers`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_po_customers`(IN pi_customers varchar(150))
BEGIN
select a.docdate,a.bpname,b.u_custname,b.itemdesc,b.quantity,b.unitprice,b.discperc,
       b.price,i.username,c.custno
       from purchaseorders a
       left outer join purchaseorderitems b on a.docid=b.docid
       left outer join users i on b.CREATEDBY = i.userid
       left outer join customers c on b.u_custname=c.custname
       where pi_customers=b.u_custname
       group by b.u_custname;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_processing`
--

DROP PROCEDURE IF EXISTS `esp_processing`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_processing`(IN pi_bpcode varchar(30))
BEGIN
select a.docno as DOCNO,a.docdate as DOCDATE,a.bpcode as BPCODE,a.bpname as BPNAME,b.itemcode as SVCFEECODE,b.itemdesc as SVCFEE,
       b.u_custname as CUSTNAME,b.u_fedno as FEDNO, b.u_sbrno as SBRNO, b.u_serialno as SERIALNO, c.custno as CUSTNO,
       b.price as PRICE,d.itemcode as ITEMCODE,d.itemname as ITEMDESC, e.username from purchaseorders a
       left outer join purchaseorderitems b on a.docid=b.docid
       left outer join customers c on c.custname=b.u_custname
       left outer join serials d on d.itemcode=b.u_serialno
       left outer join users e on a.createdby=e.userid
       where a.docstatus<>'CN' and  pi_bpcode=c.custno order by b.u_custname;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_receiving_report`
--

DROP PROCEDURE IF EXISTS `esp_receiving_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_receiving_report`(IN pi_date1 varchar(20), IN pi_date2 varchar(20))
BEGIN
select a.docno, a.bpcode, a.bpname, b.itemcode, b.itemdesc,a.docdate,
       b.quantity, b.unitprice, b.discperc,b.price,b.u_custname,
       c.serialno,DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2
        from apinvoices a
       left outer join apinvoiceitems b on a.docid=b.docid
       left outer join serials c on b.itemcode=c.itemcode and a.docno=c.refno
       left outer join items d on b.itemcode=d.itemcode
       where a.docdate between pi_date1 and pi_date2 and d.itemgroup='2';
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_sales_deliveries`
--

DROP PROCEDURE IF EXISTS `esp_sales_deliveries`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_sales_deliveries`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.BPCODE as bpcode, a.BPNAME as bpname, a.DOCDATE as docdate,a.DOCNO as docno,
       h.SERIALNO as serialno, d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc,
       if(h.ITEMCODE IS NULL , d.QUANTITY, 1) as qty,
       d.price as unitprice,
       if(h.ITEMCODE IS NULL , d.QUANTITY, 1) * d.price as linetotal,
       a.TOTALAMOUNT as total_amount, a.REMARKS as remarks, i.username as created_by,
       j.paidamount as down_payment
       from salesdeliveries a
            left outer join salesdeliveryitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join documentserials h on a.DOCID = h.DOCID and a.COMPANY = h.COMPANY and a.BRANCH = h.BRANCH
                                                 and d.OBJECTCODE = h.OBJECTCODE and d.ITEMCODE = h.ITEMCODE
            left outer join users i on d.CREATEDBY = i.userid
            left outer join collections j on  a.bpcode=j.custno and a.docdate=j.docdate
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
 group by a.DOCNO, d.ITEMCODE, h.SERIALNO,j.paidamount;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_sales_orders`
--

DROP PROCEDURE IF EXISTS `esp_sales_orders`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_sales_orders`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.BPCODE as bpcode, a.BPNAME as bpname, a.DOCDATE as docdate,a.DOCNO as docno,
       d.ITEMDESC as itemdesc,
       d.QUANTITY as qty,
       d.price as unitprice,
       d.QUANTITY * d.price as linetotal,
       a.TOTALAMOUNT as total_amount, a.REMARKS as remarks, i.username as created_by,
       j.paidamount as down_payment
       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join users i on d.CREATEDBY = i.userid
            left outer join collections j on  a.bpcode=j.custno and a.docdate<=j.docdate
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
 group by a.DOCNO, d.ITEMCODE,j.paidamount;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_sm`
--

DROP PROCEDURE IF EXISTS `esp_sm`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_sm`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_customercode varchar(20),
	IN pi_date varchar(20))
BEGIN
	SELECT 
		
		sd.bpcode AS 'customer_code', sd.bpname AS 'customer_name', sd.docdate AS 'date',
		
		IFNULL(sc.serialno, '') AS 'serial_no', sdi.itemdesc AS 'description',
		IFNULL(bli.u_released_date, '') AS 'release_date', 
		IFNULL(bli.u_approval_date, '') AS 'license_date',
		
		u.username AS 'prepared_by'
	FROM salesdeliveries AS sd
		LEFT JOIN salesdeliveryitems AS sdi
			ON sd.company = sdi.company AND sd.branch = sdi.branch AND sd.docid = sdi.docid
			LEFT JOIN stockcard AS sc
				ON sdi.company = sc.company AND sdi.branch = sc.branch AND sdi.itemcode = sc.itemcode
					AND sc.reftype = 'dn'
			LEFT JOIN u_bplicenses AS bl
				ON sd.company = bl.company AND sd.branch = bl.branch AND sd.bpcode = bl.u_bpcode
				LEFT JOIN u_bplicenseitems AS bli
					ON bl.company = bli.company AND bl.branch = bli.branch AND bl.docid = bli.docid
						AND sdi.itemcode = bli.u_itemcode
		LEFT JOIN users AS u
			ON sd.createdby = u.userid
	WHERE sd.company = pi_company AND sd.branch = pi_branch
		AND sd.bpcode = pi_customercode
		AND sd.docdate <= pi_date;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_soa`
--

DROP PROCEDURE IF EXISTS `esp_soa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_soa`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_bpcode varchar(20))
BEGIN
	DROP TEMPORARY TABLE IF EXISTS tmp_downpayments;
	CREATE TEMPORARY TABLE tmp_downpayments(
		company varchar(20) default '', branch varchar(20) default '',
		so_docno varchar(25) default '', downpayment decimal(25, 10) default 0);
	INSERT INTO tmp_downpayments()
		SELECT co.company, co.branchcode AS 'branch',
			IFNULL(co.u_sodocno, ''), SUM(IFNULL(co.paidamount, 0))
		FROM collections AS co
		WHERE co.company = pi_company AND co.branchcode = pi_branch
			AND (co.u_sodocno IS NOT NULL AND co.u_sodocno <> '') 
			AND co.collfor = 'dp'
		GROUP BY IFNULL(co.u_sodocno, '');
	
	SELECT 
		
		NOW() AS 'date',
		ari.bpcode AS 'customer_code', ari.bpname AS 'customer_name', ari.billtoaddress AS 'address', 
		c.phone1, c.phone2, c.mobile, c.fax, c.datebirth AS 'birth_date', ari.docdate AS 'doc_date',
		
		ari.bprefno AS 'so_bprefno', arid.basetype AS 'base_type',
		SUBSTRING_INDEX(arid.basedocno, '-', 1) AS 'base_branch', SUBSTRING(arid.basedocno, -10) AS 'base_docno', 
		arid.u_controlno AS 'admin_control_no', ari.docno AS 'control_no',
		arid.itemcode AS 'item_code', arid.itemdesc AS 'item_description', IFNULL(ds.serialno, '') AS 'serial_no',
		
		IFNULL(sdd.u_itemdesc, '') AS 'fr_itemdesc', IFNULL(sdd.u_serialno, '') AS 'fr_serialno',
		
		arid.linetotal AS 'price', ari.settledamount AS 'less',
		IFNULL(dp.downpayment, 0) AS 'down_payment'
	FROM arinvoices AS ari
		LEFT JOIN arinvoiceitems AS arid
			ON ari.company = arid.company AND ari.branch = arid.branch AND ari.docid = arid.docid
			LEFT JOIN salesdeliveries as sd
				ON arid.company = sd.company and arid.branch = sd.branch
					AND arid.basedocno = sd.docno AND ari.bpcode = sd.bpcode
				LEFT JOIN salesdeliveryitems AS sdd
					ON sd.company = sdd.company AND sd.branch = sdd.branch AND sd.docid = sdd.docid
						AND arid.itemcode = sdd.itemcode
					LEFT JOIN documentserials AS ds
						ON sdd.company = ds.company AND sdd.branch = ds.branch
							AND sdd.docid = ds.docid AND sdd.itemcode = ds.itemcode
			LEFT JOIN tmp_downpayments AS dp
				ON sd.company = dp.company AND sd.branch = dp.branch
					AND SUBSTRING(sd.remarks, 22, 14) = dp.so_docno
		LEFT JOIN customers AS c
			ON ari.company = c.company AND arid.branch = c.branch AND ari.bpcode = c.custno		
	WHERE ari.company = pi_company AND ari.branch = pi_branch
		AND ((ari.bpcode = pi_bpcode AND pi_bpcode <> '') OR pi_bpcode = '')
		
		
	ORDER BY ari.docno, ari.docdate;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_soa_custbal`
--

DROP PROCEDURE IF EXISTS `esp_soa_custbal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_soa_custbal`( IN pi_company varchar(20),
                                       IN pi_branch varchar(20),
                                       IN pi_bpcode varchar(20),
                                       IN pi_date1 varchar(20),
                                       IN pi_date2 varchar(20))
BEGIN
	SELECT  ar.company,UPPER(c.companyname) as 'companyname',
          ar.branch,UPPEr(b.branchname) as 'branchname',ar.docno,ar.docdate,ar.bpcode,ar.bpname,
          ari.itemcode,ari.itemdesc,ari.quantity,ari.unitprice,ari.linetotal,
          ar.totalamount,
  (SELECT so.docno
                          FROM arinvoices arx
                          LEFT JOIN arinvoiceitems arix on arx.company = arix.company and arx.branch = arix.branch and arx.docid = arix.docid
                          LEFT JOIN salesdeliveries sd on arix.company = sd.company and
                                                          arix.branch = sd.branch and
                                                          arix.basedocno = sd.docno AND
                                                          arx.bpcode = sd.bpcode
                          LEFT JOIN salesdeliveryitems sdi on sd.company = sdi.company AND sd.branch = sdi.branch AND sd.docid = sdi.docid
                          LEFT JOIN salesorders so on sdi.company = so.company and
                                                      sdi.branch = so.branch and
                                                      sdi.basedocno = so.docno AND
                                                      arx.bpcode=so.bpcode
		                      WHERE arx.company=pi_company and
                                arx.branch=pi_branch and
                                arx.docno=ar.docno and
                                arx.bpcode=ar.bpcode and
                                (arx.docdate between pi_date1 and pi_date2)
                                group by so.docno) as 'sodocno',
  IF( ( SELECT sum(co.paidamount)
		FROM collections AS co
		WHERE co.company = pi_company AND
          co.branchcode = pi_branch and
          co.custno=ar.bpcode and
          co.collfor = 'DP' and
          co.u_sodocno in (SELECT so.docno
                          FROM arinvoices arx
                          LEFT JOIN arinvoiceitems arix on arx.company = arix.company and arx.branch = arix.branch and arx.docid = arix.docid
                          LEFT JOIN salesdeliveries sd on arix.company = sd.company and
                                                          arix.branch = sd.branch and
                                                          arix.basedocno = sd.docno AND
                                                          arx.bpcode = sd.bpcode
                          LEFT JOIN salesdeliveryitems sdi on sd.company = sdi.company AND sd.branch = sdi.branch AND sd.docid = sdi.docid
                          LEFT JOIN salesorders so on sdi.company = so.company and
                                                      sdi.branch = so.branch and
                                                      sdi.basedocno = so.docno AND
                                                      arx.bpcode=so.bpcode
		                      WHERE arx.company=pi_company and
                                arx.branch=pi_branch and
                                arx.docstatus in ('O','C') and
                                arx.docno=ar.docno and
                                arx.bpcode=ar.bpcode and
                                (arx.docdate between pi_date1 and pi_date2)
                                group by so.docno) group by co.custno) is null,0,( SELECT sum(co.paidamount)
		FROM collections AS co
		WHERE co.company = pi_company AND
          co.branchcode = pi_branch and
          co.custno=ar.bpcode and
          co.collfor = 'DP' and
          co.u_sodocno in (SELECT so.docno
                          FROM arinvoices arx
                          LEFT JOIN arinvoiceitems arix on arx.company = arix.company and arx.branch = arix.branch and arx.docid = arix.docid
                          LEFT JOIN salesdeliveries sd on arix.company = sd.company and
                                                          arix.branch = sd.branch and
                                                          arix.basedocno = sd.docno AND
                                                          arx.bpcode = sd.bpcode
                          LEFT JOIN salesdeliveryitems sdi on sd.company = sdi.company AND sd.branch = sdi.branch AND sd.docid = sdi.docid
                          LEFT JOIN salesorders so on sdi.company = so.company and
                                                      sdi.branch = so.branch and
                                                      sdi.basedocno = so.docno AND
                                                      arx.bpcode=so.bpcode
		                      WHERE arx.company=pi_company and
                                arx.branch=pi_branch and
                                arx.docstatus in ('O','C') and
                                arx.docno=ar.docno and
                                arx.bpcode=ar.bpcode and
                                (arx.docdate between pi_date1 and pi_date2)
                                group by so.docno) group by co.custno) ) as 'totalsodownpayment',
    IF( (SELECT sum(a.paidamount)
         FROM collections a
	       LEFT JOIN collectionsinvoices c ON a.company = c.company AND a.branchcode = c.branch AND a.docno = c.docno AND c.REFTYPE NOT IN ('DOWNPAYMENT')
         WHERE a.company = pi_company AND
               a.branchcode = pi_branch and
               a.custno=ar.bpcode and
               c.refno=ar.docno) is null,0,(SELECT sum(a.paidamount)
         FROM collections a
	       LEFT JOIN collectionsinvoices c ON a.company = c.company AND a.branchcode = c.branch AND a.docno = c.docno AND c.REFTYPE NOT IN ('DOWNPAYMENT')
         WHERE a.company = pi_company AND
               a.branchcode = pi_branch and
               a.custno=ar.bpcode and
               c.refno=ar.docno) ) as 'totalarpayment',
   (IF( ( SELECT sum(co.paidamount)
		FROM collections AS co
		WHERE co.company = pi_company AND
          co.branchcode = pi_branch and
          co.custno=ar.bpcode and
          co.collfor = 'DP' and
          co.u_sodocno in (SELECT so.docno
                          FROM arinvoices arx
                          LEFT JOIN arinvoiceitems arix on arx.company = arix.company and arx.branch = arix.branch and arx.docid = arix.docid
                          LEFT JOIN salesdeliveries sd on arix.company = sd.company and
                                                          arix.branch = sd.branch and
                                                          arix.basedocno = sd.docno AND
                                                          arx.bpcode = sd.bpcode
                          LEFT JOIN salesdeliveryitems sdi on sd.company = sdi.company AND sd.branch = sdi.branch AND sd.docid = sdi.docid
                          LEFT JOIN salesorders so on sdi.company = so.company and
                                                      sdi.branch = so.branch and
                                                      sdi.basedocno = so.docno AND
                                                      arx.bpcode=so.bpcode
		                      WHERE arx.company=pi_company and
                                arx.branch=pi_branch and
                                arx.docstatus in ('O','C') and
                                arx.docno=ar.docno and
                                arx.bpcode=ar.bpcode and
                                (arx.docdate between pi_date1 and pi_date2)
                                group by so.docno) group by co.custno) is null,0,( SELECT sum(co.paidamount)
		FROM collections AS co
		WHERE co.company = pi_company AND
          co.branchcode = pi_branch and
          co.custno=ar.bpcode and
          co.collfor = 'DP' and
          co.u_sodocno in (SELECT so.docno
                          FROM arinvoices arx
                          LEFT JOIN arinvoiceitems arix on arx.company = arix.company and arx.branch = arix.branch and arx.docid = arix.docid
                          LEFT JOIN salesdeliveries sd on arix.company = sd.company and
                                                          arix.branch = sd.branch and
                                                          arix.basedocno = sd.docno AND
                                                          arx.bpcode = sd.bpcode
                          LEFT JOIN salesdeliveryitems sdi on sd.company = sdi.company AND sd.branch = sdi.branch AND sd.docid = sdi.docid
                          LEFT JOIN salesorders so on sdi.company = so.company and
                                                      sdi.branch = so.branch and
                                                      sdi.basedocno = so.docno AND
                                                      arx.bpcode=so.bpcode
		                      WHERE arx.company=pi_company and
                                arx.branch=pi_branch and
                                arx.docstatus in ('O','C') and
                                arx.docno=ar.docno and
                                arx.bpcode=ar.bpcode and
                                (arx.docdate between pi_date1 and pi_date2)
                                group by so.docno) group by co.custno) ) ) +
    (IF( (SELECT sum(a.paidamount)
         FROM collections a
	       LEFT JOIN collectionsinvoices c ON a.company = c.company AND a.branchcode = c.branch AND a.docno = c.docno AND c.REFTYPE NOT IN ('DOWNPAYMENT')
         WHERE a.company = pi_company AND
               a.branchcode = pi_branch and
               a.custno=ar.bpcode and
               c.refno=ar.docno) is null,0,(SELECT sum(a.paidamount)
         FROM collections a
	       LEFT JOIN collectionsinvoices c ON a.company = c.company AND a.branchcode = c.branch AND a.docno = c.docno AND c.REFTYPE NOT IN ('DOWNPAYMENT')
         WHERE a.company = pi_company AND
               a.branchcode = pi_branch and
               a.custno=ar.bpcode and
               c.refno=ar.docno) ) ) as totaldownpayment,
          ar.settledamount,
          ar.dueamount,date(pi_date1) as 'pi_date1',
          date(pi_date2) as 'pi_date2'
	FROM arinvoices ar
  LEFT OUTER JOIN arinvoiceitems ari ON ar.company = ari.company AND ar.branch = ari.branch AND ar.docid = ari.docid
  LEFT OUTER JOIN companies c ON ar.company=c.companycode
  LEFT OUTER JOIN branches b ON ar.branch=b.branchcode and ar.company=b.companycode
	WHERE ar.docstatus in ('O','C')
		AND ar.company = pi_company AND ar.branch = pi_branch
    AND ar.docdate BETWEEN pi_date1 and pi_date2
		AND ((ar.bpcode = pi_bpcode AND pi_bpcode <> '') OR pi_bpcode = '')
	ORDER BY ar.docno, ar.docdate,ar.bpcode, ari.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_soa_payments`
--

DROP PROCEDURE IF EXISTS `esp_soa_payments`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_soa_payments`(  IN pi_company varchar(20),
                                      IN pi_branch varchar(20),
                                      IN pi_bpcode varchar(20),
                                      IN pi_docno varchar(20))
BEGIN
DECLARE OBAL DECIMAL(25, 10);
DECLARE SOBAL DECIMAL(25, 10);
DECLARE RECCOUNT DECIMAL(25, 10);
SET pi_docno='';
SET OBAL = (SELECT SUM(x.totalamount) as 'amount' from arinvoices x
            where x.company = pi_company AND x.branch = pi_branch and x.bpcode=pi_bpcode and x.docstatus in ('O')
             GROUP BY x.bpcode);
SET SOBAL = (SELECT SUM(x.totalamount) as 'amount' from salesorders x
            where x.company = pi_company AND x.branch = pi_branch and x.bpcode=pi_bpcode and x.docstatus in ('O')
             GROUP BY x.bpcode);
DROP TEMPORARY TABLE IF EXISTS tmp_so;
	CREATE TEMPORARY TABLE tmp_so(
		company varchar(20) default '',
    branch varchar(20) default '',
		docno varchar(25) default '');
    
    INSERT INTO tmp_so()
  	SELECT ar.company,
           ar.branch,
			     so.docno
		FROM arinvoices ar
    LEFT JOIN arinvoiceitems ari on ar.company = ari.company and ar.branch = ari.branch and ar.docid = ari.docid
    LEFT JOIN salesdeliveries sd on ari.company = sd.company and ari.branch = sd.branch and ari.basedocno = sd.docno AND sd.bpcode = pi_bpcode
    LEFT JOIN salesdeliveryitems sdi on sd.company = sdi.company AND sd.branch = sdi.branch AND sd.docid = sdi.docid
    LEFT JOIN salesorders so on sdi.company = so.company and sdi.branch = so.branch and sdi.basedocno = so.docno AND so.bpcode = pi_bpcode
		WHERE ar.company=pi_company and
          ar.branch=pi_branch and
          ar.bpcode=pi_bpcode and
          (pi_docno='' OR (pi_docno<>'' and ar.docno=pi_docno)) and
          ar.docstatus in ('O')
    group by so.docno;
DROP TEMPORARY TABLE IF EXISTS tmp_downpayments;
	CREATE TEMPORARY TABLE tmp_downpayments(
    isorderby numeric(2),
    company varchar(20) default '',
    branch varchar(20) default '',
    bpcode varchar(30) default '',
    orno varchar(30) default '',
    ordate DATE default null,
    refdocno varchar(30) default '',
    refdoctype varchar(5) default '',
    downpayment decimal(25, 10) default 0,
    obal decimal(25, 10) default 0,
    remarks varchar(100) default '',
    ospr varchar(100) default '');
  
  INSERT INTO tmp_downpayments()
	SELECT 0,co.company,
           co.branchcode,
           co.custno,
           co.docno,
           co.docdate,
			     co.u_sodocno,'SO',
           co.paidamount as 'amount',
           OBAL,
           co.remarks,
           (select x.u_ospr from salesorders x where x.docno=co.u_sodocno) as 'ospr'
		FROM collections AS co
		WHERE co.company = pi_company AND
          co.branchcode = pi_branch and
          co.custno=pi_bpcode and
          co.collfor = 'DP' and
          co.u_sodocno in (select so.docno from tmp_so so);
   
  INSERT INTO tmp_downpayments()
		SELECT 1,a.company,
           a.branchcode,
           a.custno,
           a.docno,
           a.docdate,
			     c.refno,'AR',
           a.paidamount,
           OBAL,
           a.remarks,
           (select ax.u_ospr from arinvoices ax where ax.docno=c.refno) as 'ospr'
	FROM collections a
	LEFT JOIN collectionscheques b ON a.company = b.company AND a.branchcode = b.branch AND a.docno = b.docno
	LEFT JOIN collectionsinvoices c ON a.company = c.company AND a.branchcode = c.branch AND a.docno = c.docno AND c.REFTYPE NOT IN ('DOWNPAYMENT')
  WHERE a.company = pi_company AND a.branchcode = pi_branch and a.custno=pi_bpcode and c.refno in (SELECT x.docno from arinvoices x
            where x.company = pi_company AND x.branch = pi_branch and x.bpcode=pi_bpcode and x.docstatus in ('O'));
SET RECCOUNT = (select count(*) from tmp_downpayments);
IF RECCOUNT <= 0 THEN
      INSERT INTO tmp_downpayments()
	    SELECT 0,co.company,
           co.branch,
           '' as custno,
           '' as docno,
           null as docdate,
			     '' as u_sodocno,
           '' as REFTYPE,
           0 as 'amount',
           SOBAL,
           '' as remarks,
           '' as ospr
		  FROM salesorders AS co
		  WHERE co.company = pi_company AND
            co.branch = pi_branch LIMIT 1;
    END IF;
select * from tmp_downpayments ORDER BY orno,ordate,isorderby;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_soa_sd`
--

DROP PROCEDURE IF EXISTS `esp_soa_sd`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_soa_sd`( IN pi_company varchar(20),
                                                          IN pi_branch varchar(20),
                                                          IN pi_docno varchar(30),
                                                          IN pi_bpcode varchar(20))
BEGIN
	DROP TEMPORARY TABLE IF EXISTS tmp_downpayments;
	CREATE TEMPORARY TABLE tmp_downpayments(
		company varchar(20) default '',
    branch varchar(20) default '',
		so_docno varchar(25) default '',
    downpayment decimal(25, 10) default 0,
    remarks varchar(100) default '');
	INSERT INTO tmp_downpayments()
		SELECT co.company, co.branchcode AS 'branch',
			IFNULL(co.u_sodocno, ''), SUM(IFNULL(co.paidamount, 0)),co.remarks AS 'remarks'
		FROM collections AS co
		WHERE co.company = pi_company AND
          co.branchcode = pi_branch and
          (pi_bpcode='' or (pi_bpcode<>'' and co.custno = pi_bpcode))
			AND (co.u_sodocno IS NOT NULL AND co.u_sodocno <> '')
			
		GROUP BY IFNULL(co.u_sodocno, '');
	SELECT
		NOW() AS 'date',ari.docno as docno,
		ari.bpcode AS 'customer_code', ari.bpname AS 'customer_name', ari.billtoaddress AS 'address',
		c.phone1, c.phone2, c.mobile, c.fax, c.datebirth AS 'birth_date',
    ari.docdate AS 'doc_date',
		ari.bprefno AS 'so_bprefno', arid.basetype AS 'base_type',
		SUBSTRING_INDEX(arid.basedocno, '-', 1) AS 'base_branch',
    SUBSTRING(arid.basedocno, -10) AS 'base_docno',
		arid.u_controlno AS 'admin_control_no',
    ari.docno AS 'control_no',
		arid.itemcode AS 'item_code',
    arid.itemdesc AS 'item_description',
    IFNULL(ds.serialno, '') AS 'serial_no',
		IFNULL(arid.u_itemdesc, '') AS 'fr_itemdesc',
    IFNULL(arid.u_serialno, '') AS 'fr_serialno',
		arid.linetotal AS 'price',
    ari.settledamount AS 'less',
		IFNULL(dp.downpayment, 0) AS 'down_payment',
    '' AS 'REMARKS',
    ari.u_transaction_type AS 'transaction type',
    ari.createdby,
    us.username,
    ari.salesperson,
    sp.salespersonname
	FROM salesdeliveries AS ari
    LEFT JOIN salesdeliveryitems AS arid ON ari.company = arid.company AND ari.branch = arid.branch AND ari.docid = arid.docid
    LEFT JOIN documentserials AS ds ON arid.company = ds.company AND
                                       arid.branch = ds.branch AND
                                       arid.docid = ds.docid AND
                                       arid.lineid = ds.lineid AND
                                       arid.itemcode = ds.itemcode AND
                                       ds.objectcode='SALESDELIVERY'
    LEFT JOIN tmp_downpayments AS dp ON ari.company = dp.company AND ari.branch = ari.branch and arid.basedocno=dp.so_docno
		LEFT JOIN customers AS c ON ari.company = c.company AND arid.branch = c.branch AND ari.bpcode = c.custno
    LEFT JOIN users us on ari.createdby=us.userid
    LEFT JOIN salespersons sp on ari.salesperson=sp.salesperson
	WHERE ari.docstatus in ('O','C')
		AND ari.company = pi_company AND ari.branch = pi_branch
		AND ((ari.bpcode = pi_bpcode AND pi_bpcode <> '') OR pi_bpcode = '')
    AND (pi_docno='' or (pi_docno<>'' and ari.docno=pi_docno))
	ORDER BY ari.docno, ari.docdate,arid.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_soa_sdeliverydownpayments`
--

DROP PROCEDURE IF EXISTS `esp_soa_sdeliverydownpayments`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_soa_sdeliverydownpayments`(  IN pi_company varchar(20),
                                      IN pi_branch varchar(20),
                                      IN pi_docno varchar(20),
                                      IN pi_bpcode varchar(20))
BEGIN
DECLARE SOBAL DECIMAL(25, 10);
DECLARE REFTYPE varchar(5);
DECLARE RECCOUNT DECIMAL(25, 10);
  SET SOBAL = (SELECT SUM(x.totalamount) as 'amount' from salesdeliveries x
              where x.company = pi_company AND
                    x.branch = pi_branch and
                    (pi_bpcode='' or (pi_bpcode<>'' and x.bpcode=pi_bpcode)) and
                    x.docstatus in ('O','C') and
                    (pi_docno='' or (pi_docno<>'' and x.docno=pi_docno))
               GROUP BY x.bpcode);
  SET REFTYPE = 'SD';
DROP TEMPORARY TABLE IF EXISTS tmp_so;
	CREATE TEMPORARY TABLE tmp_so(
		company varchar(20) default '',
    branch varchar(20) default '',
		docno varchar(25) default '');
    
      INSERT INTO tmp_so()
      SELECT sd.company,
             sd.branch,
			       so.docno
		  FROM salesdeliveries sd
      LEFT JOIN salesdeliveryitems sdi on sd.company = sdi.company AND sd.branch = sdi.branch AND sd.docid = sdi.docid
      LEFT JOIN salesorders so on sdi.company = so.company and sdi.branch = so.branch and sdi.basedocno = so.docno AND so.bpcode = sd.bpcode
		  WHERE sd.company = pi_company and
            sd.branch = pi_branch AND
            (pi_bpcode='' or (pi_bpcode<>'' and sd.bpcode = pi_bpcode)) and
            sd.docstatus in ('O','C') and
            (pi_docno='' or (pi_docno<>'' and sd.docno=pi_docno))
      group by so.docno;
DROP TEMPORARY TABLE IF EXISTS tmp_ar;
	CREATE TEMPORARY TABLE tmp_ar(
		company varchar(20) default '',
    branch varchar(20) default '',
		docno varchar(25) default '');
      INSERT INTO tmp_ar()
      SELECT so.company,
             so.branch,
			       ar.docno
      FROM salesdeliveries so
      LEFT OUTER JOIN arinvoiceitems ari on ari.company = so.company and ari.branch = so.branch and ari.basedocno=so.docno
      LEFT OUTER JOIN arinvoices ar on ari.company=ar.company and ari.branch=ar.branch and ari.docid=ar.docid and ar.bpcode=so.bpcode
      WHERE so.company=pi_company and
            so.branch=pi_branch and
            (pi_bpcode='' OR (pi_bpcode<>'' and so.bpcode=pi_bpcode)) and
            (pi_docno='' OR (pi_docno<>'' and so.docno=pi_docno)) and
            so.docstatus in ('O','C')
      group by so.docno;
DROP TEMPORARY TABLE IF EXISTS tmp_downpayments;
	CREATE TEMPORARY TABLE tmp_downpayments(
    isorderby numeric(2),
    company varchar(20) default '',
    branch varchar(20) default '',
    bpcode varchar(30) default '',
    orno varchar(30) default '',
    ordate DATE default null,
    refdocno varchar(30) default '',
    refdoctype varchar(5) default '',
    downpayment decimal(25, 10) default 0,
    obal decimal(25, 10) default 0,
    remarks varchar(100) default '',
    ospr varchar(100) default '');
  
  INSERT INTO tmp_downpayments()
	SELECT 0,co.company,
           co.branchcode,
           co.custno,
           co.docno,
           co.docdate,
			     co.u_sodocno,REFTYPE,
           co.paidamount as 'amount',
           SOBAL,
           co.remarks,
           (select x.u_ospr from salesorders x where x.docno=co.u_sodocno) as 'ospr'
		FROM collections AS co
		WHERE co.company = pi_company AND
          co.branchcode = pi_branch and
          
          (pi_bpcode='' or (pi_bpcode<>'' and co.custno = pi_bpcode)) and
          co.collfor = 'DP' and
          co.u_sodocno in (select so.docno from tmp_so so);
INSERT INTO tmp_downpayments()
		SELECT 1,a.company,
           a.branchcode,
           a.custno,
           a.docno,
           a.docdate,
			     c.refno,'AR',
           a.paidamount as 'amount',
           SOBAL,
           a.remarks,
           (select ax.u_ospr from arinvoices ax where ax.docno=c.refno) as 'ospr'
	FROM collections a
	LEFT JOIN collectionscheques b ON a.company = b.company AND a.branchcode = b.branch AND a.docno = b.docno
	LEFT JOIN collectionsinvoices c ON a.company = c.company AND a.branchcode = c.branch AND a.docno = c.docno AND c.REFTYPE NOT IN ('DOWNPAYMENT')
  WHERE a.company = pi_company AND
        a.branchcode = pi_branch and
        (pi_bpcode='' or (pi_bpcode<>'' and a.custno = pi_bpcode)) and
        c.refno in (select ar.docno from tmp_ar ar);
SET RECCOUNT = (select count(*) from tmp_downpayments);
  IF RECCOUNT <= 0 THEN
      INSERT INTO tmp_downpayments()
	    SELECT 0,co.company,
           co.branch,
           '' as custno,
           '' as docno,
           null as docdate,
			     '' as u_sodocno,
           '' as REFTYPE,
           0 as 'amount',
           SOBAL,
           '' as remarks,
           '' as ospr
		  FROM salesorders AS co
		  WHERE co.company = pi_company AND
            co.branch = pi_branch LIMIT 1;
    END IF;
select * from tmp_downpayments ORDER BY orno,ordate;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_soa_so`
--

DROP PROCEDURE IF EXISTS `esp_soa_so`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_soa_so`( IN pi_company varchar(20),
                                                          IN pi_branch varchar(20),
                                                          IN pi_docno varchar(30),
                                                          IN pi_bpcode varchar(30))
BEGIN
	DROP TEMPORARY TABLE IF EXISTS tmp_downpayments;
	CREATE TEMPORARY TABLE tmp_downpayments(
		company varchar(20) default '',
    branch varchar(20) default '',
		so_docno varchar(25) default '',
    downpayment decimal(25, 10) default 0,
    remarks varchar(100) default '');
	INSERT INTO tmp_downpayments()
		SELECT co.company, co.branchcode AS 'branch',
			IFNULL(co.u_sodocno, ''), SUM(IFNULL(co.paidamount, 0)),co.remarks AS 'remarks'
		FROM collections AS co
		WHERE co.company = pi_company AND
          co.branchcode = pi_branch and
          (pi_bpcode='' or (pi_bpcode<>'' and co.custno = pi_bpcode))
			AND (co.u_sodocno IS NOT NULL AND co.u_sodocno <> '')
      AND (pi_docno='' or (pi_docno<>'' and co.u_sodocno = pi_docno))
			AND co.collfor = 'dp'
		GROUP BY IFNULL(co.u_sodocno, '');
	SELECT
		NOW() AS 'date',ari.docno as docno,
		ari.bpcode AS 'customer_code', ari.bpname AS 'customer_name', ari.billtoaddress AS 'address',
		c.phone1, c.phone2, c.mobile, c.fax, c.datebirth AS 'birth_date',
    ari.docdate AS 'doc_date',
		ari.bprefno AS 'so_bprefno', arid.basetype AS 'base_type',
		SUBSTRING_INDEX(arid.basedocno, '-', 1) AS 'base_branch',
    SUBSTRING(arid.basedocno, -10) AS 'base_docno',
		arid.u_controlno AS 'admin_control_no',
    ari.docno AS 'control_no',
		arid.itemcode AS 'item_code',
    arid.itemdesc AS 'item_description',
    IFNULL(arid.u_serialno, '') AS 'serial_no',
		'' AS 'fr_itemdesc',
    '' AS 'fr_serialno',
		arid.linetotal AS 'price',
    ari.settledamount AS 'less',
		IFNULL(dp.downpayment, 0) AS 'down_payment',
    '' AS 'REMARKS',
    ari.u_transaction_type AS 'transaction type',
    ari.createdby,
    us.username,
    ari.salesperson,
    sp.salespersonname
	FROM salesorders as ari
		LEFT JOIN salesorderitems AS arid ON ari.company = arid.company AND ari.branch = arid.branch AND ari.docid = arid.docid
    LEFT JOIN tmp_downpayments AS dp ON ari.company = dp.company AND ari.branch = ari.branch and ari.docno=dp.so_docno
		LEFT JOIN customers AS c ON ari.company = c.company AND arid.branch = c.branch AND ari.bpcode = c.custno
    LEFT JOIN users us on ari.createdby=us.userid
    LEFT JOIN salespersons sp on ari.salesperson=sp.salesperson
	WHERE ari.docstatus in ('O','C')
		AND ari.company = pi_company AND ari.branch = pi_branch
		AND ((ari.bpcode = pi_bpcode AND pi_bpcode <> '') OR pi_bpcode = '')
    AND (pi_docno='' or (pi_docno<>'' and ari.docno=pi_docno))
	ORDER BY ari.docno, ari.docdate,arid.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_soa_sodownpayments`
--

DROP PROCEDURE IF EXISTS `esp_soa_sodownpayments`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_soa_sodownpayments`(  IN pi_company varchar(20),
                                      IN pi_branch varchar(20),
                                      IN pi_bpcode varchar(20),
                                      IN pi_docno varchar(20))
BEGIN
DECLARE SOBAL DECIMAL(25, 10);
DECLARE REFTYPE varchar(5);
DECLARE RECCOUNT DECIMAL(25, 10);
IF pi_docno = '' THEN
  SET SOBAL = (SELECT SUM(x.totalamount) as 'amount' from salesorders x
              where x.company = pi_company AND x.branch = pi_branch and x.bpcode=pi_bpcode and x.docstatus in ('O','C')
               GROUP BY x.bpcode);
  SET REFTYPE = 'SO';
ELSE
  SET SOBAL = (SELECT SUM(x.totalamount) as 'amount' from salesdeliveries x
              where x.company = pi_company AND x.branch = pi_branch and x.bpcode=pi_bpcode and x.docstatus in ('O','C')
               GROUP BY x.bpcode);
  SET REFTYPE = 'SD';
END IF;
DROP TEMPORARY TABLE IF EXISTS tmp_so;
	CREATE TEMPORARY TABLE tmp_so(
		company varchar(20) default '',
    branch varchar(20) default '',
		docno varchar(25) default '');
    
    IF pi_docno = '' THEN
      INSERT INTO tmp_so()
      SELECT so.company,
             so.branch,
			       so.docno
	  	FROM salesorders so
		  WHERE so.company = pi_company and so.branch = pi_branch and so.bpcode = pi_bpcode and so.docstatus in ('O','C')
      group by so.docno;
    ELSE
      INSERT INTO tmp_so()
      SELECT sd.company,
             sd.branch,
			       so.docno
		  FROM salesdeliveries sd
      LEFT JOIN salesdeliveryitems sdi on sd.company = sdi.company AND sd.branch = sdi.branch AND sd.docid = sdi.docid
      LEFT JOIN salesorders so on sdi.company = so.company and sdi.branch = so.branch and sdi.basedocno = so.docno AND so.bpcode = pi_bpcode
		  WHERE sd.company = pi_company and sd.branch = pi_branch AND sd.bpcode = pi_bpcode and sd.docstatus in ('O','C')
      group by so.docno;
    END IF;
DROP TEMPORARY TABLE IF EXISTS tmp_downpayments;
	CREATE TEMPORARY TABLE tmp_downpayments(
    isorderby numeric(2),
    company varchar(20) default '',
    branch varchar(20) default '',
    bpcode varchar(30) default '',
    orno varchar(30) default '',
    ordate DATE default null,
    refdocno varchar(30) default '',
    refdoctype varchar(5) default '',
    downpayment decimal(25, 10) default 0,
    obal decimal(25, 10) default 0,
    remarks varchar(100) default '');
  
  INSERT INTO tmp_downpayments()
	SELECT 0,co.company,
           co.branchcode,
           co.custno,
           co.docno,
           co.docdate,
			     co.u_sodocno,REFTYPE,
           co.paidamount as 'amount',
           SOBAL,
           co.remarks
		FROM collections AS co
		WHERE co.company = pi_company AND
          co.branchcode = pi_branch and
          co.custno=pi_bpcode and
          co.collfor = 'DP' and
          co.u_sodocno in (select so.docno from tmp_so so);
SET RECCOUNT = (select count(*) from tmp_downpayments);
  IF RECCOUNT <= 0 THEN
      INSERT INTO tmp_downpayments()
	    SELECT 0,co.company,
           co.branch,
           '' as custno,
           '' as docno,
           null as docdate,
			     '' as u_sodocno,
           '' as REFTYPE,
           0 as 'amount',
           SOBAL,
           '' as remarks
		  FROM salesorders AS co
		  WHERE co.company = pi_company AND
            co.branch = pi_branch LIMIT 1;
    END IF;
select * from tmp_downpayments ORDER BY orno,ordate;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_soa_sorderdownpayments`
--

DROP PROCEDURE IF EXISTS `esp_soa_sorderdownpayments`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_soa_sorderdownpayments`(  IN pi_company varchar(20),
                                      IN pi_branch varchar(20),
                                      IN pi_docno varchar(20),
                                      IN pi_bpcode varchar(20))
BEGIN
DECLARE SOBAL DECIMAL(25, 10);
DECLARE REFTYPE varchar(5);
DECLARE RECCOUNT DECIMAL(25, 10);
  SET SOBAL = (SELECT SUM(x.totalamount) as 'amount' from salesorders x
              where x.company = pi_company AND
                    x.branch = pi_branch and
                    (pi_bpcode='' or (pi_bpcode<>'' and x.bpcode=pi_bpcode)) and
                    x.docstatus in ('O','C') and
                    (pi_docno='' or (pi_docno<>'' and x.docno=pi_docno))
               GROUP BY x.bpcode);
  SET REFTYPE = 'SO';
DROP TEMPORARY TABLE IF EXISTS tmp_so;
	CREATE TEMPORARY TABLE tmp_so(
		company varchar(20) default '',
    branch varchar(20) default '',
		docno varchar(25) default '');
    INSERT INTO tmp_so()
      SELECT so.company,
             so.branch,
			       so.docno
	  	FROM salesorders so
		  WHERE so.company = pi_company and
            so.branch = pi_branch and
            (pi_bpcode='' or (pi_bpcode<>'' and so.bpcode = pi_bpcode)) and
            so.docstatus in ('O','C') and
            (pi_docno='' or (pi_docno<>'' and so.docno=pi_docno))
      group by so.docno;
DROP TEMPORARY TABLE IF EXISTS tmp_ar;
	CREATE TEMPORARY TABLE tmp_ar(
		company varchar(20) default '',
    branch varchar(20) default '',
		docno varchar(25) default '');
      INSERT INTO tmp_ar()
      SELECT so.company,
             so.branch,
			       ar.docno
      FROM salesorders so
      LEFT OUTER JOIN salesdeliveryitems sdi on so.company = sdi.company AND so.branch = sdi.branch and so.docno=sdi.basedocno
      LEFT OUTER JOIN salesdeliveries sd on sdi.company = sd.company and sdi.branch = sd.branch and sdi.docid=sd.docid AND sd.bpcode=so.bpcode
      LEFT OUTER JOIN arinvoiceitems ari on ari.company = sd.company and ari.branch = sd.branch and ari.basedocno=sd.docno
      LEFT OUTER JOIN arinvoices ar on ari.company=ar.company and ari.branch=ar.branch and ari.docid=ar.docid and ar.bpcode=so.bpcode
      WHERE so.company=pi_company and
            so.branch=pi_branch and
            (pi_bpcode='' OR (pi_bpcode<>'' and so.bpcode=pi_bpcode)) and
            (pi_docno='' OR (pi_docno<>'' and so.docno=pi_docno)) and
            so.docstatus in ('O','C')
      group by so.docno;
DROP TEMPORARY TABLE IF EXISTS tmp_downpayments;
	CREATE TEMPORARY TABLE tmp_downpayments(
    isorderby numeric(2),
    company varchar(20) default '',
    branch varchar(20) default '',
    bpcode varchar(30) default '',
    orno varchar(30) default '',
    ordate DATE default null,
    refdocno varchar(30) default '',
    refdoctype varchar(5) default '',
    downpayment decimal(25, 10) default 0,
    obal decimal(25, 10) default 0,
    remarks varchar(100) default '',
    ospr varchar(100) default '');
  INSERT INTO tmp_downpayments()
	SELECT 0,co.company,
           co.branchcode,
           co.custno,
           co.docno,
           co.docdate,
			     co.u_sodocno,REFTYPE,
           co.paidamount as 'amount',
           SOBAL,
           co.remarks,
           (select x.u_ospr from salesorders x where x.docno=co.u_sodocno) as 'ospr'
		FROM collections AS co
		WHERE co.company = pi_company AND
          co.branchcode = pi_branch and
          (pi_bpcode='' or (pi_bpcode<>'' and co.custno = pi_bpcode)) and
          co.collfor = 'DP' and
          co.u_sodocno in (select so.docno from tmp_so so);
INSERT INTO tmp_downpayments()
		SELECT 1,a.company,
           a.branchcode,
           a.custno,
           a.docno,
           a.docdate,
			     c.refno,'AR',
           a.paidamount as 'amount',
           SOBAL,
           a.remarks,
           (select ax.u_ospr from arinvoices ax where ax.docno=c.refno) as 'ospr'
	FROM collections a
	LEFT JOIN collectionscheques b ON a.company = b.company AND a.branchcode = b.branch AND a.docno = b.docno
	LEFT JOIN collectionsinvoices c ON a.company = c.company AND a.branchcode = c.branch AND a.docno = c.docno AND c.REFTYPE NOT IN ('DOWNPAYMENT')
  WHERE a.company = pi_company AND
        a.branchcode = pi_branch and
        (pi_bpcode='' or (pi_bpcode<>'' and a.custno = pi_bpcode)) and
        c.refno in (select ar.docno from tmp_ar ar);
SET RECCOUNT = (select count(*) from tmp_downpayments);
  IF RECCOUNT <= 0 THEN
      INSERT INTO tmp_downpayments()
	    SELECT 0,co.company,
           co.branch,
           '' as custno,
           '' as docno,
           null as docdate,
			     '' as u_sodocno,
           '' as REFTYPE,
           0 as 'amount',
           SOBAL,
           '' as remarks,
           '' as ospr
		  FROM salesorders AS co
		  WHERE co.company = pi_company AND
            co.branch = pi_branch LIMIT 1;
    END IF;
select * from tmp_downpayments ORDER BY orno,ordate;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_soa_summarized`
--

DROP PROCEDURE IF EXISTS `esp_soa_summarized`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_soa_summarized`( IN pi_company varchar(20),
                                       IN pi_branch varchar(20),
                                      IN pi_bpcode varchar(20))
BEGIN
	SELECT
		NOW() AS 'date',
		ari.bpcode AS 'customer_code', ari.bpname AS 'customer_name', ari.billtoaddress AS 'address', 
		c.phone1, c.phone2, c.mobile, c.fax, c.datebirth AS 'birth_date', ari.docdate AS 'doc_date',
		
		ari.bprefno AS 'so_bprefno', arid.basetype AS 'base_type',
		SUBSTRING_INDEX(arid.basedocno, '-', 1) AS 'base_branch', SUBSTRING(arid.basedocno, -10) AS 'base_docno', 
		arid.u_controlno AS 'admin_control_no', ari.docno AS 'control_no',
		arid.itemcode AS 'item_code', arid.itemdesc AS 'item_description', IFNULL(ds.serialno, '') AS 'serial_no',
		IFNULL(sdd.u_itemdesc, '') AS 'fr_itemdesc', IFNULL(sdd.u_serialno, '') AS 'fr_serialno',
		
		arid.linetotal AS 'price', ari.settledamount AS 'less',
		0 AS 'down_payment', '' AS 'REMARKS',
    ari.u_transaction_type AS 'transaction type'
    
	FROM arinvoices AS ari
		LEFT JOIN arinvoiceitems AS arid
			ON ari.company = arid.company AND ari.branch = arid.branch AND ari.docid = arid.docid
			LEFT JOIN salesdeliveries as sd
				ON arid.company = sd.company and arid.branch = sd.branch
					AND arid.basedocno = sd.docno AND ari.bpcode = sd.bpcode
				LEFT JOIN salesdeliveryitems AS sdd
					ON sd.company = sdd.company AND sd.branch = sdd.branch AND sd.docid = sdd.docid
						AND arid.itemcode = sdd.itemcode
					LEFT JOIN documentserials AS ds
						ON sdd.company = ds.company AND sdd.branch = ds.branch
							AND sdd.docid = ds.docid AND sdd.itemcode = ds.itemcode
		LEFT JOIN customers AS c
			ON ari.company = c.company AND arid.branch = c.branch AND ari.bpcode = c.custno
	WHERE ari.docstatus in ('O')
		AND ari.company = pi_company AND ari.branch = pi_branch
		AND ((ari.bpcode = pi_bpcode AND pi_bpcode <> '') OR pi_bpcode = '')
	ORDER BY ari.docno, ari.docdate,arid.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_supplier_payments`
--

DROP PROCEDURE IF EXISTS `esp_supplier_payments`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_supplier_payments`(  IN pi_company varchar(20),
                                      IN pi_branch varchar(20),
                                      IN pi_bpcode varchar(20),
                                      IN pi_date1 varchar(20),
                                      IN pi_date2 varchar(20))
BEGIN
Select a.docdate,
       a.bpcode,
       a.bpname,
       a.docno,
       b.u_custname,
       b.itemdesc,
       
        (SELECT co.docno FROM payments AS co WHERE co.company = pi_company AND
                                                                 co.branchcode = pi_branch AND
                                                                 co.bpcode = pi_bpcode AND
                                                                 co.u_podocno=a.docno AND
                                                                 co.collfor = 'dp' and
                                                                 co.docstat<>'CN') as 'u_paymentdocno',
       c.serialno as serials,
       b.u_controlno as bt,
       b.unitprice,
       sum(b.discperc) as discount_per,
       sum(b.price) as price,
       date(pi_date1) as 'pi_date1',date(pi_date2) as 'pi_date2',
       if( (SELECT SUM(co.paidamount) FROM payments AS co WHERE co.company = pi_company AND
                                                                 co.branchcode = pi_branch AND
                                                                 co.bpcode = pi_bpcode AND
                                                                 co.u_podocno=a.docno AND
                                                                 co.collfor = 'dp' and
                                                                 co.docstat<>'CN') is null,0,
            (SELECT SUM(co.paidamount) FROM payments AS co WHERE co.company = pi_company AND
                                                                 co.branchcode = pi_branch AND
                                                                 co.bpcode = pi_bpcode AND
                                                                 co.u_podocno=a.docno AND
                                                                 co.collfor = 'dp' and
                                                                 co.docstat<>'CN')) as dp,
       (select group_concat(x.checkno)
               from payments AS co
               left join paymentcheques x on co.company = x.company and co.branchcode = x.branch and co.docno = x.docno
               WHERE co.company = pi_company AND
                     co.branchcode = pi_branch AND
                     co.bpcode = pi_bpcode AND
                     co.u_podocno=a.docno AND
                     co.collfor = 'dp'AND
                     co.docstat<>'CN') as dp_checkno,
      if( ( select sum(co.paidamount)
            from payments AS co
            left join paymentinvoices x on co.company = x.company and
                                           co.branchcode = x.branch and
                                           co.docno = x.docno
            WHERE co.company = pi_company AND
                  co.branchcode = pi_branch AND
                  co.bpcode = pi_bpcode and
                  co.docstat<>'CN' and
                  x.refno = c.refno and
                  x.reftype in('APINVOICE')) is null,0,
          ( select sum(co.paidamount)
            from payments AS co
            left join paymentinvoices x on co.company = x.company and
                                           co.branchcode = x.branch and
                                           co.docno = x.docno
            WHERE co.company = pi_company AND
                  co.branchcode = pi_branch AND
                  co.bpcode = pi_bpcode and
                  co.docstat<>'CN' and
                  x.refno = c.refno and
                  x.reftype in('APINVOICE'))) as payment,
       (select group_concat(x.checkno)
               from paymentcheques x
               where x.company = a.company and x.branch = a.branch and x.docno = (select x.docno from paymentinvoices x where x.company = a.company and x.branch = a.branch
                                  and x.refno = c.refno
                                  and x.reftype in('APINVOICE') limit 1) ) as payment_checkno,
      date( (select max(x.docdate)
               from payments x
               where x.company = a.company and x.branchcode = a.branch and x.docno = (select x.docno from paymentinvoices x where x.company = a.company and x.branch = a.branch
                                  and x.refno = c.refno
                                  and x.reftype in('APINVOICE') limit 1) )) as payment_date
     From purchaseorders a
         Left Outer Join purchaseorderitems b On a.company = b.company and a.branch = b.branch and a.docid = b.docid
         Left Outer Join serials c On a.company = c.company and a.branch = c.branch and c.itemcode = b.itemcode
                                       and c.refno = (select docno
                                                             from apinvoices x
                                                             left outer join apinvoiceitems y on x.company = y.company and x.branch = y.branch
                                                                                              and x.docid = y.docid
                                                      where x.company = a.company and x.branch = a.branch and y.basedocno = a.docno limit 1)
Where a.company = pi_company and
      a.branch = pi_branch and
      a.bpcode = pi_bpcode and
      docdate between pi_date1 and pi_date2
Group by a.docno, b.itemcode, c.serialno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_withdrawal_request`
--

DROP PROCEDURE IF EXISTS `esp_withdrawal_request`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_withdrawal_request`(IN docno varchar (30), IN u_date varchar(30))
BEGIN
select a.docno, a.u_date as 'date', a.u_pc_inspector, a.u_position,a.u_supplier,b.u_bpcode,
       b.u_custname,b.u_address,b.u_admin_ctrl,b.u_itemdesc,b.u_serialno,b.u_supplier as suppliername,
       b.u_unitprice, b.u_discperc, b.u_price,b.u_transaction_type,b.u_salesperson,
       b.u_downpayment from u_withdrawal a
left outer join u_withdrawal_items b on a.docid=b.docid where a.docno=docno and u_date=a.u_date;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `esp_wp`
--

DROP PROCEDURE IF EXISTS `esp_wp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `esp_wp`( IN pi_docno varchar(20),IN pi_date varchar(20) )
BEGIN
  DROP TEMPORARY TABLE IF EXISTS tmp_downpayments;
	CREATE TEMPORARY TABLE tmp_downpayments(
		company varchar(20) default '',
    branch varchar(20) default '',
		po_docno varchar(25) default '',
    downpayment decimal(25, 10) default 0);
  DROP TEMPORARY TABLE IF EXISTS powithdrawalpayments;
	CREATE TEMPORARY TABLE powithdrawalpayments(
		bpcode varchar(50) default '');
  INSERT INTO tmp_downpayments()
		SELECT p.company, p.branchcode, p.u_podocno, SUM(p.paidamount)
		FROM payments AS p
		WHERE (p.u_podocno IS NOT NULL AND p.u_podocno <> '')
		GROUP BY p.u_podocno;
  INSERT INTO powithdrawalpayments()
	SELECT cd.u_bpcode
	FROM u_crame AS c
		LEFT JOIN u_crameitems AS cd ON c.company = cd.company AND c.branch = cd.branch AND c.docid = cd.docid
    LEFT JOIN purchaseorderitems AS pod ON cd.company = pod.company AND
                                           cd.branch = pod.branch AND
                                           cd.u_bpname = pod.u_custname AND
                                           cd.u_admin_ctrl = pod.u_controlno
    LEFT JOIN items AS i ON pod.itemcode = i.itemcode
	  WHERE i.itemgroup = 2 AND
          c.docno = pi_docno AND
          c.u_date=pi_date;
  SELECT UPPER(co.companyname) as 'company',
         UPPER(br.branchname) as 'branch',
         c.docno,
         c.u_date AS 'doc_date',
		     po.bpcode AS 'supplier_code',
         po.bpname AS 'supplier_name',
         cd.u_bpcode AS 'customer_code',
         cd.u_bpname AS 'customer_name',
         pod.itemcode AS 'item_code',
         pod.itemdesc AS 'item_description',
         pod.u_controlno AS 'control_no',
         pod.unitprice as 'unit_price',
         ds.serialno AS 'serial_no',
         pod.discperc AS 'discount_percent',
         pod.discamount AS 'discount_amount',
         po.totalamount AS 'fp',
         IFNULL(dp.downpayment, 0) AS 'down_payment',
         po.totalamount - IFNULL(dp.downpayment, 0) AS 'bal',
         cd.u_admin_ctrl,
         pod.u_controlno,
         po.docno as 'podocno'
	FROM u_crame AS c
		LEFT JOIN u_crameitems AS cd ON c.company = cd.company AND c.branch = cd.branch AND c.docid = cd.docid
    LEFT JOIN purchaseorderitems AS pod ON cd.company = pod.company AND
                                           cd.branch = pod.branch AND
                                           cd.u_bpname = pod.u_custname AND
                                           cd.u_admin_ctrl = pod.u_controlno
    LEFT JOIN purchaseorders AS po ON pod.company = po.company AND pod.branch = po.branch AND pod.docid = po.docid
    LEFT JOIN tmp_downpayments AS dp ON po.company = dp.company AND po.branch = dp.branch AND po.docno = dp.po_docno
    LEFT JOIN apinvoiceitems AS apid ON po.company = apid.company AND
                                        po.branch = apid.branch AND
                                        po.docno = apid.basedocno AND
                                        pod.itemcode = apid.itemcode
    LEFT JOIN documentserials AS ds ON apid.company = ds.company AND
                                       apid.branch = ds.branch AND
                                       apid.docid = ds.docid AND
                                       apid.itemcode = ds.itemcode
    LEFT JOIN items AS i ON pod.itemcode = i.itemcode
    LEFT JOIN companies co on c.company=co.companycode
    LEFt JOIN branches br on c.branch=br.branchcode and c.company=co.companycode
	  WHERE i.itemgroup = 2 AND
          c.docno = pi_docno AND
          c.u_date=pi_date
  group by ds.serialno
UNION ALL
SELECT   UPPER(co.companyname) as 'company',
         UPPER(br.branchname) as 'branch',
         c.docno,
         c.u_date AS 'doc_date',
		     '-' AS 'supplier_code',
         'ESPINELI' AS 'supplier_name',
         cd.u_bpcode AS 'customer_code',
         cd.u_bpname AS 'customer_name',
         pod.itemcode AS 'item_code',
         pod.itemdesc AS 'item_description',
         pod.u_controlno AS 'control_no',
         pod.unitprice as 'unit_price',
         ds.serialno AS 'serial_no',
         
         pod.discperc AS 'discount_percent',
         pod.discamount AS 'discount_amount',
         0 AS 'fp',
         0 AS 'down_payment',
         0 AS 'bal',
         cd.u_admin_ctrl,
         pod.u_controlno,
         po.docno as 'podocno'
	FROM u_crame AS c
		LEFT JOIN u_crameitems AS cd ON c.company = cd.company AND c.branch = cd.branch AND c.docid = cd.docid
    LEFT JOIN salesorderitems AS pod ON cd.company = pod.company AND
                                           cd.branch = pod.branch AND
                                           
                                           cd.u_admin_ctrl = pod.u_controlno
    LEFT JOIN salesorders AS po ON pod.company = po.company AND pod.branch = po.branch AND pod.docid = po.docid
    LEFT JOIN salesdeliveryitems AS sdi ON sdi.company = po.company AND sdi.branch = po.branch AND sdi.basedocno = po.docno and pod.itemcode=sdi.itemcode
    LEFT JOIN documentserials AS ds ON sdi.company = ds.company AND
                                       sdi.branch = ds.branch AND
                                       sdi.docid = ds.docid AND
                                       sdi.lineid = ds.lineid AND
                                       sdi.itemcode = ds.itemcode AND
                                       ds.objectcode='SALESDELIVERY'
    LEFT JOIN items AS i ON pod.itemcode = i.itemcode
    LEFT JOIN companies co on c.company=co.companycode
    LEFt JOIN branches br on c.branch=br.branchcode and c.company=co.companycode
	  WHERE i.itemgroup = 2 AND
          c.docno = pi_docno AND
          c.u_date=pi_date AND
          cd.u_bpcode not in (select x.bpcode from powithdrawalpayments x)
    group by ds.serialno
order by supplier_code,customer_name;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `fix_deletejeitemsnolink`
--

DROP PROCEDURE IF EXISTS `fix_deletejeitemsnolink`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `fix_deletejeitemsnolink`(IN pi_mode VARCHAR(10))
BEGIN
DECLARE v_Company       varchar(30);
DECLARE v_Branch       varchar(30);
DECLARE v_SuppNo       varchar(30);
DECLARE v_DocID bigint;
DECLARE v_Done        integer;
DECLARE v_Updated        integer;
DECLARE Cursor_jeitems CURSOR FOR SELECT Company, Branch, DocID FROM jeitems where DOCNO2='none';
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;
DROP TEMPORARY TABLE IF EXISTS `jeitems`;
CREATE TEMPORARY TABLE  `jeitems` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCNO2` varchar(30) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO jeitems (COMPANY,BRANCH,DOCID,DOCNO,DOCNO2)
select journalentryitems.company,journalentryitems.branch,journalentryitems.docid,journalentryitems.docno, ifnull(journalentries.docno,'none') from journalentryitems left outer join journalentries on journalentries.company=journalentryitems.company and journalentries.branch=journalentryitems.branch and journalentries.docid=journalentryitems.docid group by journalentryitems.company,journalentryitems.branch,journalentryitems.docid,journalentryitems.docno;
if pi_mode = 'update' then
  SET v_Updated = 0 ;
  SET v_Done = 0 ;
  BLOCK1: BEGIN
  OPEN Cursor_jeitems ;
  REPEAT
    FETCH Cursor_jeitems INTO v_Company, v_Branch, v_DocID ;
    IF NOT v_Done THEN
       delete from journalentryitems where company=v_Company and branch=v_Branch and docid=v_DocID;
       SET v_Updated = v_Updated + 1;
    END IF ;
  UNTIL v_Done END REPEAT ;
  CLOSE Cursor_jeitems ;
  END BLOCK1 ;
  select v_Updated;
else
  select COMPANY,BRANCH,DOCID,DOCNO,DOCNO2 from jeitems where DOCNO2='none';
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `focuson_comm_sp`
--

DROP PROCEDURE IF EXISTS `focuson_comm_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `focuson_comm_sp`(IN pi_custno VARCHAR(100), IN pi_date_from DATE, IN pi_date_to DATE, IN pi_invoice_from VARCHAR(100), IN pi_invoice_to VARCHAR(100))
BEGIN

DECLARE v_original_no VARCHAR(100);
DECLARE Done INT;
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_company VARCHAR(100);
DECLARE v_branch VARCHAR(100);
DECLARE v_docno VARCHAR(100);
DECLARE v_bpcode VARCHAR(100);
DECLARE v_bpname VARCHAR(200);
DECLARE v_docdate DATE;
DECLARE v_focuson_comm NUMERIC(20,6);
DECLARE v_commission NUMERIC(20,6);
DECLARE v_totaltax NUMERIC(20,6);
DECLARE v_wtax NUMERIC(20,6);
DECLARE v_totalamount NUMERIC(20,6);
DECLARE v_linetotal NUMERIC(20,6);
DECLARE v_basedocno VARCHAR(100);
DECLARE v_basedocid NUMERIC(20,6);
DECLARE v_baselineid NUMERIC(20,6);
DECLARE v_basetype VARCHAR(100);
DECLARE v_lineid NUMERIC(20,6);
DECLARE v_invoice_from VARCHAR(100);
DECLARE v_invoice_to VARCHAR(100);
DECLARE v_pre_docno VARCHAR(100);
DECLARE v_pre_bpcode VARCHAR(100);
DECLARE v_pre_bpname VARCHAR(100);
DECLARE v_pre_docdate DATE;
DECLARE v_sono VARCHAR(255);
DECLARE v_curdate DATE;
DECLARE v_curtime TIME;

  DECLARE cur0001 CURSOR FOR
    SELECT arinvoices.COMPANY,
           arinvoices.BRANCH,
           arinvoices.DOCNO,
           arinvoices.DOCDATE,
           arinvoiceitems.LINETOTAL,
           arinvoices.BPCODE,
           arinvoices.BPNAME,
           arinvoices.U_U_FOCUSON_COMM,
           arinvoices.U_U_WTAX,
           arinvoiceitems.BASEDOCNO,
           arinvoiceitems.BASEDOCID,
           arinvoiceitems.BASELINEID,
           arinvoiceitems.BASETYPE,
           arinvoiceitems.LINEID
      FROM arinvoiceitems,
           arinvoices,
           customers,
           items
     WHERE ( arinvoiceitems.COMPANY = arinvoices.COMPANY ) and
           ( arinvoiceitems.BRANCH = arinvoices.BRANCH ) and
           ( arinvoiceitems.DOCID = arinvoices.DOCID ) and
           ( customers.COMPANY = arinvoices.COMPANY ) and
           ( customers.BRANCH = arinvoices.BRANCH ) and
           ( customers.CUSTNO = arinvoices.BPCODE) and
           ( customers.U_U_FOCUSON_COMM > 0 ) and
           ( arinvoiceitems.ITEMCODE = items.ITEMCODE) and
           ( pi_custno = '' or (pi_custno <> '' and arinvoices.parentbpcode = pi_custno)) and
           ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C') and
           ( arinvoices.DOCDATE >= v_date_from and arinvoices.DOCDATE <= v_date_to) and
           ( arinvoices.DOCNO >= v_invoice_from and arinvoices.DOCNO <= v_invoice_to) AND
           ( items.Isinventory = 1 )
     ORDER BY arinvoices.DOCDATE, arinvoices.DOCNO;


  DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1 ;

  IF pi_date_from is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_from;
  END IF;

  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;

  IF pi_invoice_from is null THEN SET v_invoice_from = '';
  ELSE SET v_invoice_from = pi_invoice_from;
  END IF;

  IF pi_invoice_to is null THEN SET v_invoice_to = '';
  ELSE SET v_invoice_to = pi_invoice_to;
  END IF;

  IF v_invoice_from = '' and v_invoice_to = '' THEN
    SET v_invoice_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;


  SET v_curdate = CURDATE();
  SET v_curtime = Now();

  DROP TEMPORARY TABLE IF EXISTS focuson ;
  CREATE TEMPORARY TABLE `focuson` (
    `DOCNO` VARCHAR(255) NOT NULL default '',
    `DOCDATE` DATE,
    `CUSTNO` VARCHAR(100),
    `CUSTNAME` VARCHAR(200),
    `TOTALAMOUNT` NUMERIC(20,6) default '0',
    `SONO` VARCHAR(255),
    `COMMISSION` NUMERIC(20,6) default '0',
    `WTAX` NUMERIC(20,0) default '0',
    PRIMARY KEY  (`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

 SET v_pre_docno = '';
 SET v_totalamount = 0;

 OPEN cur0001;
 cur0001loop: LOOP

     FETCH cur0001 INTO v_company, v_branch, v_docno, v_docdate, v_linetotal, v_bpcode, v_bpname, v_focuson_comm, v_wtax, v_basedocno, v_basedocid, v_baselineid, v_basetype, v_lineid ;
     IF Done = 1 THEN
       Leave cur0001loop;
     END IF;


      IF v_docno = v_pre_docno THEN

          SET v_totalamount = v_totalamount + v_linetotal;

      ELSE
          IF LENGTH(v_pre_docno) > 0 THEN

              SELECT GROUP_CONCAT(DISTINCT IF(AI.BASETYPE = 'SALESDELIVERY',SD.BASEDOCNO,AI.BASEDOCNO)) INTO v_original_no
                FROM arinvoices A
                     LEFT OUTER JOIN arinvoiceitems AI ON AI.COMPANY = A.COMPANY AND AI.BRANCH = A.BRANCH AND AI.DOCID = A.DOCID
                     LEFT OUTER JOIN salesdeliveryitems SD ON SD.COMPANY = AI.COMPANY AND SD.BRANCH = AI.BRANCH AND SD.DOCID = AI.BASEDOCID AND SD.LINEID = AI.BASELINEID
               WHERE A.COMPANY = v_company AND
                     A.BRANCH  = v_branch AND
                     A.DOCNO   = v_pre_docno
               GROUP BY A.DOCNO;


              SET v_commission =  (v_totalamount * (v_focuson_comm / 100));
              SET v_totaltax =  (v_totalamount * (v_wtax/100));
              INSERT INTO focuson (`DOCNO`, `DOCDATE`, `CUSTNO`, `CUSTNAME`, `TOTALAMOUNT`, `SONO`, `COMMISSION`, `WTAX`)
                                VALUES (v_pre_docno, v_pre_docdate, v_pre_bpcode, v_pre_bpname, v_totalamount, v_SONO, v_commission, v_totaltax);
          END IF;

          SET v_pre_docno =  v_docno;
          SET v_SONO = v_original_no;
          SET v_totalamount = v_linetotal;
          SET v_pre_bpcode = v_bpcode;
          SET v_pre_bpname = v_bpname;
          SET v_pre_docdate = v_docdate;

      END IF;
      SET done = 0;
  END LOOP cur0001loop;
  CLOSE cur0001;

          IF LENGTH(v_pre_docno) > 0 THEN
              SELECT GROUP_CONCAT(DISTINCT IF(AI.BASETYPE = 'SALESDELIVERY',SD.BASEDOCNO,AI.BASEDOCNO)) INTO v_original_no
                FROM arinvoices A
                     LEFT OUTER JOIN arinvoiceitems AI ON AI.COMPANY = A.COMPANY AND AI.BRANCH = A.BRANCH AND AI.DOCID = A.DOCID
                     LEFT OUTER JOIN salesdeliveryitems SD ON SD.COMPANY = AI.COMPANY AND SD.BRANCH = AI.BRANCH AND SD.DOCID = AI.BASEDOCID AND SD.LINEID = AI.BASELINEID
               WHERE A.COMPANY = v_company AND
                     A.BRANCH  = v_branch AND
                     A.DOCNO   = v_pre_docno
               GROUP BY A.DOCNO;


              SET v_commission =  (v_totalamount * (v_focuson_comm / 100));
              SET v_totaltax =  (v_totalamount * (v_wtax/100));
              INSERT INTO focuson (`DOCNO`, `DOCDATE`, `CUSTNO`, `CUSTNAME`, `TOTALAMOUNT`, `SONO`, `COMMISSION`, `WTAX`)
                                VALUES (v_pre_docno, v_pre_docdate, v_pre_bpcode, v_pre_bpname, v_totalamount, v_SONO, v_commission, v_totaltax);
          END IF;

   SELECT * FROM focuson ORDER BY v_docdate, v_docno;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `fuel_buffering_report`
--

DROP PROCEDURE IF EXISTS `fuel_buffering_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `fuel_buffering_report`(IN pi_company VARCHAR(30),
                                         IN pi_branch VARCHAR(30),
                                         IN pi_date1 VARCHAR(30))
BEGIN
DECLARE condition_date date;
  IF day(pi_date1) = 1 then
     set condition_date = date(pi_date1)- interval 1 day;
  ELSE
     set condition_date = date(pi_date1);
  end if;
CREATE TEMPORARY TABLE  `main_lastday` (
    `company` varchar(100) NULL default '',
    `branch` varchar(100) NULL default '',
    `u_date_from` DATE NULL,
    `u_shift` varchar(100) NULL default '',
    `u_time_from` TIME NULL
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO main_lastday (company,
                       branch,
                       u_date_from,
                       u_shift,
                       u_time_from)
    Select
       b.company,
       b.branch,
       b.u_date_from,
       b.u_shift,
       b.u_time_from
       from u_dailyshiftsales b
   where b.company = pi_company and b.branch = pi_branch
         and b.u_date_from <= condition_date
   order by b.u_date_from desc, b.u_time_from desc limit 1;
CREATE TEMPORARY TABLE  `ugt` (
    `company` varchar(100) NULL default '',
    `branch` varchar(100) NULL default '',
    `u_itemcode` varchar(100) NULL default '',
    `u_date_from` DATE NULL,
    `qty` NUMERIC(18,6) NOT NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO ugt (company, branch, u_itemcode, u_date_from, qty)
    Select
       b.company,
       b.branch,
       a.u_itemcode,
       b.u_date_from,
       sum(a.u_qty_close)
       from u_dailyshiftsalesinventories a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
       left outer join main_lastday ld on a.company = ld.company and a.branch = ld.branch
   where b.company = pi_company and b.branch = pi_branch
         and b.u_date_from = ld.u_date_from and b.u_shift = ld.u_shift and b.u_time_from = ld.u_time_from
   group by a.u_itemcode;
Select
       b.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Division)')) as CompanyType,
       b.Branch,
       upper(concat(b.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       date(pi_date1) as date1,
       d.u_itemcode, i.itemdesc,
       ugt.qty as UGT,
       ds.u_amount as DeadStock,
       ugt.qty - ds.u_amount as AvailableForSale,
       sum(d.u_sold_liters)/day(ld.u_date_from) as AveVolume,
       (ugt.qty - ds.u_amount)/(sum(d.u_sold_liters)/day(ld.u_date_from)) as NDays,
       if((ugt.qty - ds.u_amount)/(sum(d.u_sold_liters)/day(ld.u_date_from)) <= 3, 'Red','') as ColorCondition
       from u_dailyshiftsales b
       left outer join u_dailyshiftsalesreadings d on b.company = d.company and b.branch = d.branch and b.docid = d.docid
                       and b.U_DFLTREADINGTYPE = d.u_readingtype
       left outer join main_lastday ld on b.company = ld.company and b.branch = ld.branch
       left outer join ugt on b.company = ugt.company and b.branch = ugt.branch and d.u_itemcode = ugt.u_itemcode
       left outer join u_deadstock ds on b.branch = ds.u_branchcode and d.u_itemcode = ds.u_item
       left outer join items i on d.u_itemcode = i.itemcode
       left outer join branches br ON b.BRANCH = br.BRANCHCODE
       left outer join companies co on b.company = co.companycode
where b.company = pi_company and b.branch = pi_branch
      and b.u_date_from between date(concat(year(condition_date),'-',month(condition_date),'-','01')) and condition_date
group by d.u_itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `fuel_monitoring_sheet`
--

DROP PROCEDURE IF EXISTS `fuel_monitoring_sheet`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `fuel_monitoring_sheet`(IN pi_company VARCHAR(30),
                                         IN pi_branch VARCHAR(30),
                                         IN pi_product VARCHAR(30),
                                         IN pi_date1 VARCHAR(30),
                                         IN pi_date2 VARCHAR(30))
BEGIN


CREATE TEMPORARY TABLE  `mergetables` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from < pi_date1 limit 1)
            is null and reftype = 'GT+' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        left outer join stocktransfers sto2 on sto2.company = b.company AND sto2.branch = b.branch AND sto2.u_returnrefno = b.docno
        WHERE a.company = pi_company AND a.refdate < pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        AND a.ITEMCODE = pi_product
        AND (b.u_returned='n' or b.u_returned is null)
        AND (b.u_returnrefno='' or b.u_returnrefno is null)
        AND (sto2.docno is null or sto2.docno='')
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;

  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,pi_branch,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and y.u_date_from < pi_date1 limit 1)
            is null and reftype = 'GT-' and b.u_dr_no not in('OB'), 0, sum(a.QTY)) as QTY,
        sum(a.QTY*a.COSTPRICE) as COST, a.warehouse
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        left outer join stocktransfers sto2 on sto2.company = b.company AND sto2.branch = b.branch AND sto2.u_returnrefno = b.docno
        WHERE a.company = pi_company AND a.REFDATE < pi_date1
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        AND a.ITEMCODE = pi_product
        AND (b.u_returned='n' or b.u_returned is null)
        AND (b.u_returnrefno='' or b.u_returnrefno is null)
        AND (sto2.docno is null or sto2.docno='')
        GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;


CREATE TEMPORARY TABLE  `mergetables_sum` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT
    INTO mergetables_sum (COMPANY,BRANCH,ITEMCODE,QTY)
    select a.COMPANY, a.BRANCH, a.ITEMCODE, sum(a.qty) from mergetables a group by a.ITEMCODE;


CREATE TEMPORARY TABLE  `stock_transfer` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `STDOCNO` varchar(100) NULL default '',
    `STDOCDATE` DATE NULL,
    `FROMWHSCODE` varchar(100) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `SHIFT` varchar(100) NULL default '',
    `DR_NO` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT
    INTO stock_transfer (COMPANY,BRANCH,STDOCNO,STDOCDATE,FROMWHSCODE,ITEMCODE,QTY,SHIFT,DR_NO)

     select a.COMPANY,pi_branch,a.refno, a.refdate, c.fromwhscode, a.itemcode, sum(a.qty),'', b.u_dr_no
           from stockcard a
           left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
           left outer join stocktransfers sto2 on sto2.company = b.company AND sto2.branch = b.branch AND sto2.u_returnrefno = b.docno
           left outer join stocktransferitems c on a.company = c.company and a.branch = c.branch and b.docid = c.docid and a.reflineid=c.lineid
           where a.company = pi_company and a.warehouse = CONCAT('UGT-',pi_branch)
                 and a.ITEMCODE = pi_product and a.REFTYPE in ('GT+','GT-')
                 and a.refdate <= pi_date2 and b.u_dr_no not in('')
                 AND (b.u_returned='n' or b.u_returned is null)
                 AND (b.u_returnrefno='' or b.u_returnrefno is null)
                 AND (sto2.docno is null or sto2.docno='')
           group by a.refdate, a.ITEMCODE, b.u_dr_no;


CREATE TEMPORARY TABLE  `ugt` (
    `Company` varchar(30) NULL default '',
    `Branch` varchar(100) NULL default '',
    `u_date_from` DATE NULL,
    `u_time_from` TIME NULL,
    `u_shift` varchar(100) NULL default '',
    `u_itemcode` varchar(100) NULL default '',
    `u_qty_close` NUMERIC(18,6) NULL default '0',
    `u_qty_delivered` NUMERIC(18,6) NULL default '0',
    `DR_NO` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT
    INTO ugt (Company,Branch,u_date_from,u_time_from,u_shift,u_itemcode,u_qty_close,u_qty_delivered,DR_NO)
    Select
       a.Company,
       a.Branch,
       b.u_date_from,
       b.u_time_from,
       b.u_shift,
       a.u_itemcode,
       sum(a.u_qty_close),
       sum(a.u_qty_delivered),
       a.u_deliveryno

       from u_dailyshiftsalesinventories a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
       where a.company = pi_company and a.branch = pi_branch
       and b.u_date_from between pi_date1 and pi_date2 and a.u_itemcode = pi_product
    group by b.u_date_from, b.u_time_from, b.u_shift, a.u_itemcode;


CREATE TEMPORARY TABLE  `intransit_opening` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT
    INTO intransit_opening (COMPANY,BRANCH,QTY)
    SELECT pi_company, pi_branch,
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and x.u_itemcode = pi_product
                                and y.u_date_from <= pi_date2 limit 1)
            is not null and reftype = 'GT+', 0, sum(a.QTY)) as QTY
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        left outer join stocktransfers sto2 on sto2.company = b.company AND sto2.branch = b.branch AND sto2.u_returnrefno = b.docno
        WHERE a.company = pi_company AND a.refdate <= pi_date2
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GT+','GT-')
        AND a.ITEMCODE = pi_product and b.u_dr_no not in('OB') and a.QTY > 0
        AND (b.u_returned='n' or b.u_returned is null)
        AND (b.u_returnrefno='' or b.u_returnrefno is null)
        AND (sto2.docno is null or sto2.docno='')
     GROUP BY a.REFDATE, a.refno, a.ITEMCODE, a.warehouse;


CREATE TEMPORARY TABLE  `intransit_opening_sum` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT
    INTO intransit_opening_sum (COMPANY,BRANCH,QTY)
    select COMPANY, BRANCH, sum(qty) from intransit_opening group by COMPANY;


SELECT
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       date(pi_date1) as date1,
       date(pi_date2) as date2,

       b.u_date_from,
       if(b.u_shift like '1%', 'X', '') as Shift1,
       if(b.u_shift like '2%', 'X', '') as Shift2,

       if(ob.QTY is null, 0, ob.QTY) as OB,

       st.FROMWHSCODE,
       st.STDOCNO,
       st.STDOCDATE,
       if(st.QTY is null, 0, st.QTY) as QTY,

       a.u_itemcode as Item,
       upper(i.itemdesc) as ItemDesc,
       sum(a.u_sold_liters) as Sales,
       bx.u_qty_close as UGT,

       if(b.u_shift like '1%',
       if((SELECT
          if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and x.u_itemcode = pi_product
                                and y.u_date_from = b.u_date_from limit 1)
            is not null and reftype = 'GT+', 0, sum(a.QTY))
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        left outer join stocktransfers sto2 on sto2.company = b.company AND sto2.branch = b.branch AND sto2.u_returnrefno = b.docno
        WHERE a.company = pi_company AND a.refdate = b.u_date_from
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GT+','GT-')
        AND (b.u_returned='n' or b.u_returned is null)
        AND (b.u_returnrefno='' or b.u_returnrefno is null)
        AND (sto2.docno is null or sto2.docno='')
        AND a.ITEMCODE = pi_product and b.u_dr_no not in('OB') and a.QTY > 0 group by a.company) is null,0,

       (SELECT
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and x.u_itemcode = pi_product
                                and y.u_date_from = b.u_date_from limit 1)
            is not null and reftype = 'GT+', 0, sum(a.QTY))
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        left outer join stocktransfers sto2 on sto2.company = b.company AND sto2.branch = b.branch AND sto2.u_returnrefno = b.docno
        WHERE a.company = pi_company AND a.refdate = b.u_date_from
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GT+','GT-')
        AND (b.u_returned='n' or b.u_returned is null)
        AND (b.u_returnrefno='' or b.u_returnrefno is null)
        AND (sto2.docno is null or sto2.docno='')
        AND a.ITEMCODE = pi_product and b.u_dr_no not in('OB') and a.QTY > 0 group by a.company)),0) as inTransit,

       if(b.u_shift like '1%',
       if((SELECT
          if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and x.u_itemcode = pi_product
                                and y.u_date_from = b.u_date_from limit 1)
            is not null and reftype = 'GT+', '', group_concat(b.docno))
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        left outer join stocktransfers sto2 on sto2.company = b.company AND sto2.branch = b.branch AND sto2.u_returnrefno = b.docno
        WHERE a.company = pi_company AND a.refdate = b.u_date_from
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GT+','GT-')
        AND (b.u_returned='n' or b.u_returned is null)
        AND (b.u_returnrefno='' or b.u_returnrefno is null)
        AND (sto2.docno is null or sto2.docno='')
        AND a.ITEMCODE = pi_product and b.u_dr_no not in('OB') and a.QTY > 0 group by a.company) is null,'',

       (SELECT
        if((select x.u_deliveryno from u_dailyshiftsalesinventories x
                                left outer join u_dailyshiftsales y on x.company = y.company and x.branch = y.branch and x.docid = y.docid
                                where x.company = pi_company and x.branch = pi_branch and x.u_deliveryno = b.u_dr_no
                                and x.u_itemcode = pi_product
                                and y.u_date_from = b.u_date_from limit 1)
            is not null and reftype = 'GT+', '', group_concat(b.docno))
        from stockcard a
        left outer join stocktransfers b on a.company = b.company and a.branch = b.branch and a.refno = b.docno
        left outer join stocktransfers sto2 on sto2.company = b.company AND sto2.branch = b.branch AND sto2.u_returnrefno = b.docno
        WHERE a.company = pi_company AND a.refdate = b.u_date_from
        AND a.warehouse = CONCAT('UGT-',pi_branch)
        AND REFTYPE IN ('GT+','GT-')
        AND (b.u_returned='n' or b.u_returned is null)
        AND (b.u_returnrefno='' or b.u_returnrefno is null)
        AND (sto2.docno is null or sto2.docno='')
        AND a.ITEMCODE = pi_product and b.u_dr_no not in('OB') and a.QTY > 0 group by a.company)),'') as inTransit_ref,

        if(io.QTY is null,0,io.QTY) as inTransit_opening

       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join ugt bx on b.company = bx.company and b.branch = bx.branch
                              and b.u_date_from = bx.u_date_from and b.u_time_from = bx.u_time_from
                              and b.u_shift = bx.u_shift and a.u_itemcode = bx.u_itemcode
       left outer join mergetables_sum ob on a.company = ob.company and a.branch = ob.branch and a.u_itemcode = ob.ITEMCODE
       left outer join stock_transfer st on a.company = st.company and a.branch = st.branch
                                         and bx.DR_NO = st.DR_NO
       left outer join intransit_opening_sum io on a.company = io.company and a.branch = io.branch
       left outer join items i on a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co on a.company = co.companycode

   WHERE a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between pi_date1 and pi_date2
         and a.u_itemcode = pi_product
         and b.docstatus = 'C'
   GROUP BY b.u_date_from, b.u_time_from, b.u_shift, a.u_itemcode;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `generalledger_st`
--

DROP PROCEDURE IF EXISTS `generalledger_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `generalledger_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_glacctno_fr VARCHAR(30),
                                    IN pi_glacctno_to VARCHAR(30), IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_exzero INT, IN pi_currency VARCHAR(30), IN pi_newpage INT)
BEGIN

DECLARE v_glacctno_fr VARCHAR(30);
DECLARE v_glacctno_to VARCHAR(30);
DECLARE v_selectall   INT;
DECLARE v_now         VARCHAR(30);
DECLARE v_loccurrency VARCHAR(30);
DECLARE v_currency    INT;

SET v_now = CAST(NOW() as char(30));

SELECT CO.CURRENCY INTO v_loccurrency
  FROM COMPANIES CO WHERE CO.COMPANYCODE  = pi_company;

IF v_loccurrency =  pi_currency THEN
   SET v_currency = 0;
ELSE
   SET v_currency = 1;
END IF;



  IF pi_glacctno_fr is null THEN
    SET v_glacctno_fr = '';
  ELSE
    SET v_glacctno_fr = pi_glacctno_fr;
  END IF;

  IF pi_glacctno_to is null THEN
    SET v_glacctno_to = '';
  ELSE
    SET v_glacctno_to = pi_glacctno_to;
  END IF;

  IF v_glacctno_fr = '' and v_glacctno_to = '' THEN
     SET v_selectall = 1;
  ELSEIF v_glacctno_fr > '' and v_glacctno_to = '' THEN
    SET v_selectall = 0;
    SET v_glacctno_to = v_glacctno_fr;
  ELSEIF v_glacctno_fr = '' and v_glacctno_to > '' THEN
    SET v_selectall = 0;
    SET v_glacctno_fr = v_glacctno_to;
  END IF;


  CREATE TABLE IF NOT EXISTS `JOURNAL_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `GLDEBIT_FC`      DECIMAL(20,6),
    `GLCREDIT_FC`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP2 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `GLDEBIT_FC`   DECIMAL(20,6),
    `GLCREDIT_FC`  DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS LEDGER_TEMP ;
  CREATE TEMPORARY TABLE `LEDGER_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `GLDEBIT_FC`   DECIMAL(20,6),
    `GLCREDIT_FC`  DECIMAL(20,6),
    `CURRENCY`     VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  IF v_currency = 0 THEN
      INSERT INTO JOURNAL_TEMP (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, v_now, JE.DOCID, JE.LINEID, JE.DOCDATE, JE.DOCTYPE, JE.DOCNO, JE.GLACCTNO, JE.GLACCTNAME, JE.GLDEBIT,
               JE.GLCREDIT, JE.GLDEBIT_FC, JE.GLCREDIT_FC, JE.SLTYPE, JE.SLACCTNO, JE.SLACCTNAME, JE.SLDEBIT, JE.SLCREDIT, JE.REMARKS, CO.CURRENCY,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'JV'  THEN JE.CURRENCYRATE
                    ELSE JE.CURRENCYRATE END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.DOCTYPE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.DOCTYPE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.DOCTYPE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.DOCTYPE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.DOCTYPE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.DOCTYPE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.DOCTYPE
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'AR'  THEN AR.BPCODE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPCODE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPCODE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPCODE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.BPCODE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.BPCODE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPCODE
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'AR'  THEN AR.BPNAME
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPNAME
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPNAME
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPNAME
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.BPNAME
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.BPNAME
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPNAME
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'PY' AND PY.DOCTYPE = 'A' THEN PY.ADDRESS
                    WHEN JE.DOCTYPE = 'RC' AND RC.DOCTYPE = 'A' THEN RC.ADDRESS
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.BPREFNO
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPREFNO
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPREFNO
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPREFNO
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.REFNO
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.REFNO
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPREFNO
                    ELSE '' END
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN ARINVOICES AR            ON AR.COMPANY      = pi_company  AND AR.BRANCH      = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','') AND AR.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APINVOICES AP            ON AP.COMPANY      = pi_company  AND AP.BRANCH      = pi_branch  AND AP.OBJECTCODE = IF(JE.DOCTYPE = 'AP','APINVOICE','')       AND AP.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN ARCREDITMEMOS CM         ON CM.COMPANY      = pi_company  AND CM.BRANCH      = pi_branch  AND CM.OBJECTCODE = IF(JE.DOCTYPE = 'CM','ARCREDITMEMO','')    AND CM.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APCREDITMEMOS ACM        ON ACM.COMPANY     = pi_company  AND ACM.BRANCH     = pi_branch  AND ACM.OBJECTCODE = IF(JE.DOCTYPE = 'ACM','APCREDITMEMO','')   AND ACM.DOCNO = JE.DOCNO
                LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT ON DT.COMPANY      = pi_company  AND DT.BRANCH      = pi_branch  AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','')   AND DT.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN PAYMENTS PY              ON PY.COMPANY      = pi_company  AND PY.BRANCHCODE  = pi_branch  AND PY.OBJECTCODE = IF(JE.DOCTYPE = 'PY','OUTGOINGPAYMENT','') AND PY.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN COLLECTIONS RC           ON RC.COMPANY      = pi_company  AND RC.BRANCHCODE  = pi_branch  AND RC.OBJECTCODE = IF(JE.DOCTYPE = 'RC','INCOMINGPAYMENT','') AND RC.DOCNO  = JE.DOCNO
 
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH =  pi_branch  AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to;

  ELSE
      INSERT INTO JOURNAL_TEMP (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, v_now, JE.DOCID, JE.LINEID, JE.DOCDATE, JE.DOCTYPE, JE.DOCNO, JE.GLACCTNO, JE.GLACCTNAME, JE.GLDEBIT,
               JE.GLCREDIT, JE.GLDEBIT_FC, JE.GLCREDIT_FC, JE.SLTYPE, JE.SLACCTNO, JE.SLACCTNAME, JE.SLDEBIT, JE.SLCREDIT, JE.REMARKS, JE.CURRENCY,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'JV'  THEN JE.CURRENCYRATE
                    ELSE JE.CURRENCYRATE END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.DOCTYPE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.DOCTYPE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.DOCTYPE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.DOCTYPE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.DOCTYPE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.DOCTYPE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.DOCTYPE
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'AR'  THEN AR.BPCODE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPCODE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPCODE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPCODE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.BPCODE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.BPCODE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPCODE
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'AR'  THEN AR.BPNAME
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPNAME
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPNAME
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPNAME
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.BPNAME
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.BPNAME
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPNAME
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'PY' AND PY.DOCTYPE = 'A' THEN PY.ADDRESS
                    WHEN JE.DOCTYPE = 'RC' AND RC.DOCTYPE = 'A' THEN RC.ADDRESS
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.BPREFNO
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPREFNO
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPREFNO
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPREFNO
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.REFNO
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.REFNO
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPREFNO
                    ELSE '' END
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN ARINVOICES AR            ON AR.COMPANY      = pi_company  AND AR.BRANCH      = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','') AND AR.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APINVOICES AP            ON AP.COMPANY      = pi_company  AND AP.BRANCH      = pi_branch  AND AP.OBJECTCODE = IF(JE.DOCTYPE = 'AP','APINVOICE','')       AND AP.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN ARCREDITMEMOS CM         ON CM.COMPANY      = pi_company  AND CM.BRANCH      = pi_branch  AND CM.OBJECTCODE = IF(JE.DOCTYPE = 'CM','ARCREDITMEMO','')    AND CM.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APCREDITMEMOS ACM        ON ACM.COMPANY     = pi_company  AND ACM.BRANCH     = pi_branch  AND ACM.OBJECTCODE = IF(JE.DOCTYPE = 'ACM','APCREDITMEMO','')   AND ACM.DOCNO = JE.DOCNO
                LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT ON DT.COMPANY      = pi_company  AND DT.BRANCH      = pi_branch  AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','')   AND DT.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN PAYMENTS PY              ON PY.COMPANY      = pi_company  AND PY.BRANCHCODE  = pi_branch  AND PY.OBJECTCODE = IF(JE.DOCTYPE = 'PY','OUTGOINGPAYMENT','') AND PY.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN COLLECTIONS RC           ON RC.COMPANY      = pi_company  AND RC.BRANCHCODE  = pi_branch  AND RC.OBJECTCODE = IF(JE.DOCTYPE = 'RC','INCOMINGPAYMENT','') AND RC.DOCNO  = JE.DOCNO
 
            WHERE JE.COMPANY   = pi_company AND
                  JE.BRANCH    = pi_branch  AND
                  JE.DOCDATE  >= pi_date_fr AND
                  JE.DOCDATE  <= pi_date_to AND
                  JE.CURRENCY  = pi_currency;

  END IF;

  IF v_selectall = 1 THEN
        INSERT INTO JOURNAL_TEMP2 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
               SELECT * FROM JOURNAL_TEMP WHERE JOURNAL_TEMP.C_NOW = v_now;


  ELSE

        INSERT INTO JOURNAL_TEMP2 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
               SELECT * FROM JOURNAL_TEMP JE
                     WHERE JE.GLACCTNO >= v_glacctno_fr AND
                           JE.GLACCTNO <= v_glacctno_to AND
                           JE.C_NOW = v_now;

  END IF;


  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
                           DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY)
      SELECT JE.COMPANY,
             JE.BRANCH,
             'B' AS LINETYPE,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT') THEN JE.BPCODE
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN
                    (SELECT JET2.GLACCTNO   FROM JOURNAL_TEMP JET2 WHERE JET2.DOCTYPE = 'CS' AND JET2.DOCNO = JE.DOCNO AND JET2.GLDEBIT > 0 AND
                     JET2.C_NOW = v_now LIMIT 1)
                  ELSE '' END AS BP_CODE,
             CASE WHEN JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT') THEN JE.BPNAME
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN
                    (SELECT JET2.GLACCTNAME FROM JOURNAL_TEMP JET2 WHERE JET2.DOCTYPE = 'CS' AND JET2.DOCNO = JE.DOCNO AND JET2.GLDEBIT > 0 AND
                     JET2.C_NOW = v_now LIMIT 1)
                  ELSE '' END AS BP_NAME,
             '',
             JE.REFNO,
             JE.GLDEBIT,
             JE.GLCREDIT,
             JE.GLDEBIT_FC,
             JE.GLCREDIT_FC,
             JE.CURRENCY
        FROM JOURNAL_TEMP2 JE
          WHERE (JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT', 'CS')) AND
                (JE.ORITYPE = 'I') AND
                (JE.C_NOW = v_now) ;


  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
                           DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY)
      SELECT JE.COMPANY,
             JE.BRANCH,
             'B' AS LINETYPE,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT') THEN JE.BPCODE
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN
                     (SELECT JET.GLACCTNO   FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'CS' AND JET.DOCNO = JE.DOCNO AND JET.GLDEBIT > 0 AND
                     JET.C_NOW = v_now LIMIT 1)
                  ELSE '' END,
             CASE WHEN JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT') THEN JE.BPNAME
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN
                     (SELECT JET.GLACCTNAME FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'CS' AND JET.DOCNO = JE.DOCNO AND JET.GLDEBIT > 0 AND
                     JET.C_NOW = v_now LIMIT 1)
                  ELSE '' END,
             CASE WHEN JE.DOCTYPE = 'AR'  THEN ARI.ITEMDESC
                  WHEN JE.DOCTYPE = 'CM'  THEN CMI.ITEMDESC
                  WHEN JE.DOCTYPE = 'AP'  THEN API.ITEMDESC
                  WHEN JE.DOCTYPE = 'ACM' THEN ACI.ITEMDESC
                  WHEN JE.DOCTYPE = 'DT'  THEN DTI.ITEMDESC
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN ARI.ITEMDESC
                  ELSE '' END,
             JE.REFNO,
             CASE WHEN JE.DOCTYPE = 'AP' AND JE.GLDEBIT > 0 AND API.GLACCTNO = JE.GLACCTNO THEN IF(APBO.AMOUNT IS NULL,(API.LINETOTAL * JE.CURRENCYRATE),(API.LINETOTAL + APBO.AMOUNT) * JE.CURRENCYRATE)
                  WHEN JE.DOCTYPE = 'CM' AND JE.GLDEBIT > 0 AND CMI.GLACCTNO = JE.GLACCTNO THEN IF(ARCBO.AMOUNT IS NULL, (CMI.LINETOTAL * JE.CURRENCYRATE), (CMI.LINETOTAL + ARCBO.AMOUNT) * JE.CURRENCYRATE)
                  ELSE JE.GLDEBIT END,
             CASE WHEN JE.DOCTYPE IN('AR','CS')  AND JE.GLCREDIT > 0 AND ARI.GLACCTNO = JE.GLACCTNO THEN IF(ARBO.AMOUNT IS NULL, (ARI.LINETOTAL * JE.CURRENCYRATE), (ARI.LINETOTAL + ARBO.AMOUNT) * JE.CURRENCYRATE)
                  WHEN JE.DOCTYPE = 'ACM'        AND JE.GLCREDIT > 0 AND ACI.GLACCTNO = JE.GLACCTNO THEN IF(APCBO.AMOUNT IS NULL,(ACI.LINETOTAL * JE.CURRENCYRATE),(ACI.LINETOTAL + APCBO.AMOUNT) * JE.CURRENCYRATE)
                  WHEN JE.DOCTYPE = 'DT'         AND JE.GLCREDIT > 0 AND DTI.GLACCTNO = JE.GLACCTNO THEN (DTI.LINETOTAL * JE.CURRENCYRATE)
                  ELSE JE.GLCREDIT END,
             CASE WHEN JE.DOCTYPE = 'AP' AND JE.GLDEBIT > 0 AND API.GLACCTNO = JE.GLACCTNO THEN IF(APBO.AMOUNT IS NULL,API.LINETOTAL,(API.LINETOTAL + APBO.AMOUNT))
                  WHEN JE.DOCTYPE = 'CM' AND JE.GLDEBIT > 0 AND CMI.GLACCTNO = JE.GLACCTNO THEN IF(ARCBO.AMOUNT IS NULL, CMI.LINETOTAL, (CMI.LINETOTAL + ARCBO.AMOUNT))
                  ELSE JE.GLDEBIT_FC END,
             CASE WHEN JE.DOCTYPE IN('AR','CS')  AND JE.GLCREDIT > 0 AND ARI.GLACCTNO = JE.GLACCTNO THEN IF(ARBO.AMOUNT IS NULL, ARI.LINETOTAL, (ARI.LINETOTAL + ARBO.AMOUNT))
                  WHEN JE.DOCTYPE = 'ACM'        AND JE.GLCREDIT > 0 AND ACI.GLACCTNO = JE.GLACCTNO THEN IF(APCBO.AMOUNT IS NULL,ACI.LINETOTAL, (ACI.LINETOTAL + APCBO.AMOUNT))
                  WHEN JE.DOCTYPE = 'DT'         AND JE.GLCREDIT > 0 AND DTI.GLACCTNO = JE.GLACCTNO THEN (DTI.LINETOTAL)
                  ELSE JE.GLCREDIT_FC END,
             JE.CURRENCY
        FROM JOURNAL_TEMP2 JE
             LEFT OUTER JOIN ARINVOICES AR                 ON AR.COMPANY  = pi_company  AND AR.BRANCH  = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','') AND AR.DOCNO  = JE.DOCNO
             LEFT OUTER JOIN ARINVOICEITEMS ARI            ON ARI.COMPANY = AR.COMPANY  AND ARI.BRANCH = AR.BRANCH  AND ARI.DOCID = AR.DOCID  AND ARI.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT ARO.COMPANY, ARO.BRANCH, SUM(ARO.AMOUNT) AS AMOUNT, BO.GLACCTNO, ARO.DOCID
                                   FROM ARINVOICEOTHERCHARGESITEMS ARO, BRANCHOTHERCHARGES BO
                                   WHERE ARO.COMPANY = BO.COMPANY AND
                                         ARO.BRANCH = BO.BRANCH   AND
                                         ARO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY ARO.DOCID, BO.GLACCTNO) AS ARBO
                                                           ON ARBO.COMPANY = pi_company AND ARBO.BRANCH = pi_branch AND ARBO.DOCID = AR.DOCID AND ARBO.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN APINVOICES AP                 ON AP.COMPANY  = pi_company  AND AP.BRANCH  = pi_branch  AND AP.OBJECTCODE = IF(JE.DOCTYPE = 'AP','APINVOICE','')     AND AP.DOCNO  = JE.DOCNO
             LEFT OUTER JOIN APINVOICEITEMS API            ON API.COMPANY = AP.COMPANY  AND API.BRANCH = AP.BRANCH  AND API.DOCID = AP.DOCID  AND API.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT APO.COMPANY, APO.BRANCH, SUM(APO.AMOUNT) AS AMOUNT, BO.GLACCTNO, APO.DOCID
                                   FROM APINVOICEOTHERCHARGESITEMS APO, BRANCHOTHERCHARGES BO
                                   WHERE APO.COMPANY = BO.COMPANY AND
                                         APO.BRANCH = BO.BRANCH   AND
                                         APO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY APO.DOCID, BO.GLACCTNO) AS APBO
                                                           ON APBO.COMPANY = pi_company AND APBO.BRANCH = pi_branch AND APBO.DOCID = AP.DOCID AND APBO.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN ARCREDITMEMOS CM              ON CM.COMPANY  = pi_company  AND CM.BRANCH  = pi_branch  AND CM.OBJECTCODE = IF(JE.DOCTYPE = 'CM','ARCREDITMEMO','')  AND CM.DOCNO  = JE.DOCNO
             LEFT OUTER JOIN ARCREDITMEMOITEMS CMI         ON CMI.COMPANY = CM.COMPANY  AND CMI.BRANCH = CM.BRANCH  AND CMI.DOCID = CM.DOCID  AND CMI.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT ARO.COMPANY, ARO.BRANCH, SUM(ARO.AMOUNT) AS AMOUNT, BO.GLACCTNO, ARO.DOCID
                                   FROM ARCREDITMEMOOTHERCHARGESITEMS ARO, BRANCHOTHERCHARGES BO
                                   WHERE ARO.COMPANY = BO.COMPANY AND
                                         ARO.BRANCH = BO.BRANCH   AND
                                         ARO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY ARO.DOCID, BO.GLACCTNO) AS ARCBO
                                                           ON ARCBO.COMPANY = pi_company AND ARCBO.BRANCH = pi_branch AND ARCBO.DOCID = CM.DOCID AND ARCBO.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN APCREDITMEMOS ACM             ON ACM.COMPANY = pi_company  AND ACM.BRANCH = pi_branch  AND ACM.OBJECTCODE = IF(JE.DOCTYPE = 'ACM','APCREDITMEMO','') AND ACM.DOCNO = JE.DOCNO
             LEFT OUTER JOIN APCREDITMEMOITEMS ACI         ON ACI.COMPANY = ACM.COMPANY AND ACI.BRANCH = ACM.BRANCH AND ACI.DOCID = ACM.DOCID AND ACI.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT APO.COMPANY, APO.BRANCH, SUM(APO.AMOUNT) AS AMOUNT, BO.GLACCTNO, APO.DOCID
                                   FROM APCREDITMEMOOTHERCHARGESITEMS APO, BRANCHOTHERCHARGES BO
                                   WHERE APO.COMPANY = BO.COMPANY AND
                                         APO.BRANCH = BO.BRANCH   AND
                                         APO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY APO.DOCID, BO.GLACCTNO) AS APCBO
                                                           ON APCBO.COMPANY = pi_company AND APCBO.BRANCH = pi_branch AND APCBO.DOCID = ACM.DOCID AND APCBO.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT      ON DT.COMPANY = pi_company   AND DT.BRANCH = pi_branch   AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','') AND DT.DOCNO = JE.DOCNO
             LEFT OUTER JOIN ARDOWNPAYMENTINVOICEITEMS DTI ON DTI.COMPANY = DT.COMPANY  AND DTI.BRANCH = DT.BRANCH  AND DTI.DOCID = DT.DOCID  AND DTI.GLACCTNO = JE.GLACCTNO
          WHERE (JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT', 'CS')) AND
                (JE.ORITYPE = 'S') AND
                (JE.C_NOW = v_now) ;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
                           DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY)
      SELECT JE.COMPANY,
             JE.BRANCH,
             'B' AS LINETYPE,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             '',
             IF(JV.REFERENCE1 > '', CONCAT('REF. 1: ',JV.REFERENCE1), ''),
             IF(JV.REFERENCE2 > '', CONCAT('REF. 2: ',JV.REFERENCE2), ''),
             JE.REFNO,
             JE.GLDEBIT, JE.GLCREDIT,
             JE.GLDEBIT_FC, JE.GLCREDIT_FC, JE.CURRENCY

        FROM JOURNAL_TEMP2 JE
             LEFT OUTER JOIN JOURNALVOUCHERS JV      ON JV.COMPANY = pi_company   AND JV.BRANCH = pi_branch   AND JV.DOCNO  = JE.DOCNO
 
          WHERE (JE.DOCTYPE = 'JV') AND
                (JE.C_NOW = v_now) ;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
                           DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY)
      SELECT JE.COMPANY,
             JE.BRANCH,
             'B' AS LINETYPE,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             JE.BPCODE,
             JE.BPNAME,
             '',
             JE.REFNO,
             JE.GLDEBIT,
             JE.GLCREDIT,
             JE.GLDEBIT_FC, JE.GLCREDIT_FC, JE.CURRENCY
        FROM JOURNAL_TEMP2 JE
          WHERE (JE.DOCTYPE IN ('PY', 'RC')) AND
                (JE.ORITYPE IN ('S', 'C')) AND
                (JE.C_NOW = v_now) ;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
                           DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY)
      SELECT JE.COMPANY,
             JE.BRANCH,
             'B' AS LINETYPE,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.DOCTYPE = 'PY' AND JE.GLDEBIT > 0  THEN
                     (SELECT JET.GLACCTNO FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'PY' AND JET.DOCNO = JE.DOCNO AND JET.GLCREDIT > 0  AND
                     JET.C_NOW = v_now LIMIT 1)

                  WHEN JE.DOCTYPE = 'RC' AND JE.GLCREDIT > 0 THEN
                      (SELECT JET.GLACCTNO FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'RC' AND JET.DOCNO = JE.DOCNO AND JET.GLDEBIT > 0  AND
                     JET.C_NOW = v_now LIMIT 1)

                  ELSE '' END,
             CASE WHEN JE.DOCTYPE = 'PY' AND JE.GLDEBIT > 0  THEN
                     (SELECT JET.GLACCTNAME FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'PY' AND JET.DOCNO = JE.DOCNO AND JET.GLCREDIT > 0 AND
                     JET.C_NOW = v_now LIMIT 1)

                  WHEN JE.DOCTYPE = 'RC' AND JE.GLCREDIT > 0 THEN
                     (SELECT JET.GLACCTNAME FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'RC' AND JET.DOCNO = JE.DOCNO AND JET.GLDEBIT > 0  AND
                     JET.C_NOW = v_now LIMIT 1)

                  ELSE '' END,
             CASE WHEN JE.DOCTYPE = 'PY' AND JE.GLDEBIT  > 0 THEN PA.REMARKS
                  WHEN JE.DOCTYPE = 'PY' AND JE.GLCREDIT > 0 THEN JE.PAYTO
                  WHEN JE.DOCTYPE = 'RC' AND JE.GLDEBIT  > 0 THEN JE.PAYTO
                  WHEN JE.DOCTYPE = 'RC' AND JE.GLCREDIT > 0 THEN CA.REMARKS
                  ELSE '' END,
             JE.REFNO,
             CASE WHEN JE.DOCTYPE = 'PY' AND JE.GLDEBIT > 0  AND PA.GLACCTNO = JE.GLACCTNO THEN (PA.GROSSAMOUNT * JE.CURRENCYRATE)
                  ELSE JE.GLDEBIT END,
             CASE WHEN JE.DOCTYPE = 'RC' AND JE.GLCREDIT > 0 AND CA.GLACCTNO = JE.GLACCTNO THEN (CA.GROSSAMOUNT * JE.CURRENCYRATE)
                  ELSE JE.GLCREDIT END,
             CASE WHEN JE.DOCTYPE = 'PY' AND JE.GLDEBIT_FC > 0  AND PA.GLACCTNO = JE.GLACCTNO THEN PA.GROSSAMOUNT
                  ELSE JE.GLDEBIT_FC END,
             CASE WHEN JE.DOCTYPE = 'RC' AND JE.GLCREDIT_FC > 0 AND CA.GLACCTNO = JE.GLACCTNO THEN CA.GROSSAMOUNT
                  ELSE JE.GLCREDIT_FC END,
             JE.CURRENCY
        FROM JOURNAL_TEMP2 JE
            LEFT OUTER JOIN PAYMENTACCOUNTS PA     ON PA.COMPANY = pi_company AND PA.BRANCH = pi_branch AND PA.DOCNO = JE.DOCNO AND PA.GLACCTNO = JE.GLACCTNO
            LEFT OUTER JOIN COLLECTIONSACCOUNTS CA ON CA.COMPANY = pi_company AND CA.BRANCH = pi_branch AND CA.DOCNO = JE.DOCNO AND CA.GLACCTNO = JE.GLACCTNO
          WHERE (JE.DOCTYPE IN ('PY', 'RC')) AND
                (JE.ORITYPE = 'A') AND
                (JE.C_NOW = v_now) ;


  IF v_selectall = 1 THEN
      IF v_currency = 0 THEN
        INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, GLACCTNO, GLACCTNAME, DESCRIPTION, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY)
            SELECT CO.COMPANYNAME,
                   BR.BRANCHNAME,
                   'A' AS LINETYPE,
                   AC.ACCTCODE,
                   AC.ACCTNAME,
                   '*** Balance B/F ***' as DESCRIPTION,
                   CASE WHEN SUM(J.GLDEBIT - J.GLCREDIT) > 0 THEN SUM(J.GLDEBIT - J.GLCREDIT) ELSE 0 END,
                   CASE WHEN SUM(J.GLCREDIT - J.GLDEBIT) > 0 THEN SUM(J.GLCREDIT - J.GLDEBIT) ELSE 0 END,
                   CASE WHEN SUM(J.GLDEBIT_FC - J.GLCREDIT_FC) > 0 THEN SUM(J.GLDEBIT_FC - J.GLCREDIT_FC) ELSE 0 END,
                   CASE WHEN SUM(J.GLCREDIT_FC - J.GLDEBIT_FC) > 0 THEN SUM(J.GLCREDIT_FC - J.GLDEBIT_FC) ELSE 0 END,
                   CO.CURRENCY
                FROM CHARTOFACCOUNTS AC
                    LEFT OUTER JOIN COMPANIES CO ON CO.COMPANYCODE = pi_company
                    LEFT OUTER JOIN BRANCHES  BR ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                    LEFT OUTER JOIN JOURNALENTRYITEMS J ON J.COMPANY = pi_company AND J.BRANCH = pi_branch AND J.DOCDATE < pi_date_fr AND J.GLACCTNO = AC.ACCTCODE
                WHERE AC.POSTABLE = 1
                GROUP BY AC.ACCTCODE;
      ELSE

        INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, GLACCTNO, GLACCTNAME, DESCRIPTION, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY)
            SELECT CO.COMPANYNAME,
                   BR.BRANCHNAME,
                   'A' AS LINETYPE,
                   AC.ACCTCODE,
                   AC.ACCTNAME,
                   '*** Balance B/F ***' as DESCRIPTION,
                   CASE WHEN SUM(J.GLDEBIT - J.GLCREDIT) > 0 THEN SUM(J.GLDEBIT - J.GLCREDIT) ELSE 0 END,
                   CASE WHEN SUM(J.GLCREDIT - J.GLDEBIT) > 0 THEN SUM(J.GLCREDIT - J.GLDEBIT) ELSE 0 END,
                   CASE WHEN SUM(J.GLDEBIT_FC - J.GLCREDIT_FC) > 0 THEN SUM(J.GLDEBIT_FC - J.GLCREDIT_FC) ELSE 0 END,
                   CASE WHEN SUM(J.GLCREDIT_FC - J.GLDEBIT_FC) > 0 THEN SUM(J.GLCREDIT_FC - J.GLDEBIT_FC) ELSE 0 END,
                   J.CURRENCY
                FROM CHARTOFACCOUNTS AC
                    LEFT OUTER JOIN COMPANIES CO ON CO.COMPANYCODE = pi_company
                    LEFT OUTER JOIN BRANCHES  BR ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                    LEFT OUTER JOIN JOURNALENTRYITEMS J ON J.COMPANY = pi_company AND J.BRANCH = pi_branch AND J.DOCDATE < pi_date_fr AND J.GLACCTNO = AC.ACCTCODE
                WHERE AC.POSTABLE = 1 AND J.CURRENCY = pi_currency
                GROUP BY AC.ACCTCODE, J.CURRENCY;
      END IF;
 ELSE
      IF v_currency = 0 THEN
        INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, GLACCTNO, GLACCTNAME, DESCRIPTION, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY)
            SELECT CO.COMPANYNAME,
                   BR.BRANCHNAME,
                   'A' AS LINETYPE,
                   AC.ACCTCODE,
                   AC.ACCTNAME,
                   '*** Balance B/F ***' as DESCRIPTION,
                   CASE WHEN SUM(J.GLDEBIT - J.GLCREDIT) > 0 THEN SUM(J.GLDEBIT - J.GLCREDIT) ELSE 0 END,
                   CASE WHEN SUM(J.GLCREDIT - J.GLDEBIT) > 0 THEN SUM(J.GLCREDIT - J.GLDEBIT) ELSE 0 END,
                   CASE WHEN SUM(J.GLDEBIT_FC - J.GLCREDIT_FC) > 0 THEN SUM(J.GLDEBIT_FC - J.GLCREDIT_FC) ELSE 0 END,
                   CASE WHEN SUM(J.GLCREDIT_FC - J.GLDEBIT_FC) > 0 THEN SUM(J.GLCREDIT_FC - J.GLDEBIT_FC) ELSE 0 END,
                   CO.CURRENCY
                FROM CHARTOFACCOUNTS AC
                    LEFT OUTER JOIN COMPANIES CO ON CO.COMPANYCODE = pi_company
                    LEFT OUTER JOIN BRANCHES  BR ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                    LEFT OUTER JOIN JOURNALENTRYITEMS J ON J.COMPANY = pi_company AND J.BRANCH = pi_branch AND J.DOCDATE < pi_date_fr AND J.GLACCTNO = AC.ACCTCODE
                WHERE AC.POSTABLE = 1              AND
                      AC.ACCTCODE >= v_glacctno_fr AND
                      AC.ACCTCODE <= v_glacctno_to
                GROUP BY AC.ACCTCODE;
      ELSE

        INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, GLACCTNO, GLACCTNAME, DESCRIPTION, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY)
            SELECT CO.COMPANYNAME,
                   BR.BRANCHNAME,
                   'A' AS LINETYPE,
                   AC.ACCTCODE,
                   AC.ACCTNAME,
                   '*** Balance B/F ***' as DESCRIPTION,
                   CASE WHEN SUM(J.GLDEBIT - J.GLCREDIT) > 0 THEN SUM(J.GLDEBIT - J.GLCREDIT) ELSE 0 END,
                   CASE WHEN SUM(J.GLCREDIT - J.GLDEBIT) > 0 THEN SUM(J.GLCREDIT - J.GLDEBIT) ELSE 0 END,
                   CASE WHEN SUM(J.GLDEBIT_FC - J.GLCREDIT_FC) > 0 THEN SUM(J.GLDEBIT_FC - J.GLCREDIT_FC) ELSE 0 END,
                   CASE WHEN SUM(J.GLCREDIT_FC - J.GLDEBIT_FC) > 0 THEN SUM(J.GLCREDIT_FC - J.GLDEBIT_FC) ELSE 0 END,
                   J.CURRENCY
                FROM CHARTOFACCOUNTS AC
                    LEFT OUTER JOIN COMPANIES CO ON CO.COMPANYCODE = pi_company
                    LEFT OUTER JOIN BRANCHES  BR ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                    LEFT OUTER JOIN JOURNALENTRYITEMS J ON J.COMPANY = pi_company AND J.BRANCH = pi_branch AND J.DOCDATE < pi_date_fr AND J.GLACCTNO = AC.ACCTCODE
                WHERE AC.POSTABLE = 1              AND
                      J.CURRENCY   = pi_currency   AND
                      AC.ACCTCODE >= v_glacctno_fr AND
                      AC.ACCTCODE <= v_glacctno_to
                GROUP BY AC.ACCTCODE, J.CURRENCY;
      END IF;
  END IF;

  IF v_currency = 0 THEN
    IF pi_exzero = 1 THEN
       DELETE FROM LEDGER_TEMP WHERE GLDEBIT = 0 AND GLCREDIT = 0;
    END IF;
  ELSE
    IF pi_exzero = 1 THEN
       DELETE FROM LEDGER_TEMP WHERE GLDEBIT_FC = 0 AND GLCREDIT_FC = 0;
    END IF;
  END IF;

  DELETE FROM JOURNAL_TEMP WHERE JOURNAL_TEMP.C_NOW = v_now;
  

  IF v_currency = 0 THEN
     SELECT COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
            DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, CURRENCY, CONCAT(GLACCTNO,CURRENCY) AS GROUPCODE
       FROM LEDGER_TEMP ORDER BY GLACCTNO, LINETYPE, DOCDATE;
  ELSE
     SELECT COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
            DESCRIPTION2, DESCRIPTION3, GLDEBIT_FC AS GLDEBIT, GLCREDIT_FC AS GLCREDIT, CURRENCY, CONCAT(GLACCTNO,CURRENCY) AS GROUPCODE
       FROM LEDGER_TEMP ORDER BY GLACCTNO, CURRENCY, LINETYPE, DOCDATE;
  END IF;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `general_ledger2`
--

DROP PROCEDURE IF EXISTS `general_ledger2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `general_ledger2`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `je_opening` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
   `REMARKS` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je_opening (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, OGLDEBIT, OGLCREDIT, REMARKS)
    SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             sum(if (b.GLDEBIT is null, 0, b.GLDEBIT)) as GLDEBIT,
             sum(if (b.GLCREDIT is null, 0, b.GLCREDIT)) as GLCREDIT, b.REMARKS
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE < pi_date1
             group by b.GLACCTNO;
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
    `REMARKS` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, REMARKS)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, b.GLDEBIT), if (b.GLCREDIT is null, 0, b.GLCREDIT),
             if(a.DOCREMARKS = '', b.REMARKS, a.DOCREMARKS)
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE BETWEEN pi_date1 and pi_date2;
SELECT upper(c.COMPANYNAME) as Company, pi_branch as BRANCH, UPPER(b.BRANCHNAME) AS BRANCHNAME,
Date(a.DOCDATE) as posting_date, Date(a.DUEDATE) as due_date, a.DOCTYPE AS series, a.DOCNO AS doc_no,
a.DOCID AS trans_no, a.REMARKS AS remarks,
if(a.GLACCTNO is null, d.GLACCTNO, a.GLACCTNO) AS acct_code,
if(a.GLACCTNAME is null, d.GLACCTNAME, a.GLACCTNAME) AS acct_name,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS debit, if (a.GLCREDIT is null, 0, a.GLCREDIT) AS credit,
if (d.OGLDEBIT is null, 0, d.OGLDEBIT) as OGLDEBIT, if (d.OGLCREDIT is null, 0, d.OGLCREDIT) as OGLCREDIT,
x.LEVEL AS level, x.PARENTACCT AS parent_code,
DATE(pi_date1) AS date1, DATE(pi_date2) AS date2, DATE(pi_date1) - interval 1 day AS date3, l.ACCTCODE AS level0_code, l.ACCTNAME AS level0_name,
case when x.PARENTACCT like '1%' then 1
     when x.PARENTACCT like '2%' then 2
     when x.PARENTACCT like '3%' then 3
     when x.PARENTACCT like '4%' then 4
     when x.PARENTACCT like '5%' then 5
     when x.PARENTACCT like '6%' then 6
     when x.PARENTACCT like '7%' then 7
     when x.PARENTACCT like '8%' then 8
else 0
end as drawer_no,
upper(case when x.PARENTACCT like '1%' then 'Assets'
     when x.PARENTACCT like '2%' then 'Liabilities'
     when x.PARENTACCT like '3%' then 'Capital and Reserves'
     when x.PARENTACCT like '4%' then 'Turnover'
     when x.PARENTACCT like '5%' then 'Cost of Sales'
     when x.PARENTACCT like '6%' then 'Operating Costs'
     when x.PARENTACCT like '7%' then 'Non-Operating Income and Expenditure'
     when x.PARENTACCT like '8%' then 'Taxation and Extraordinary Items'
else ''
end) as drawer
FROM chartofaccounts x
left outer join je a on a.GLACCTNO = x.FORMATCODE
left outer join je_opening d on d.GLACCTNO = x.FORMATCODE
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
left outer join chartofaccounts l on l.ACCTCODE = x.PARENTACCT
WHERE x.PARENTACCT NOT IN('')
      and x.formatcode like '61001014%'
Order by x.PARENTACCT, x.LEVEL;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `general_ledger4`
--

DROP PROCEDURE IF EXISTS `general_ledger4`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `general_ledger4`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `je_opening` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
   `REMARKS` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je_opening (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, OGLDEBIT, OGLCREDIT, REMARKS)
    SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             sum(if (b.GLDEBIT is null, 0, b.GLDEBIT)) as GLDEBIT,
             sum(if (b.GLCREDIT is null, 0, b.GLCREDIT)) as GLCREDIT, b.REMARKS
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE < pi_date1
             group by b.GLACCTNO;
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
    `REMARKS` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, REMARKS)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, b.GLDEBIT), if (b.GLCREDIT is null, 0, b.GLCREDIT),
             if(a.DOCREMARKS = '', b.REMARKS, a.DOCREMARKS)
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE BETWEEN pi_date1 and pi_date2;
SELECT upper(c.COMPANYNAME) as Company, pi_branch as BRANCH, UPPER(b.BRANCHNAME) AS BRANCHNAME,
Date(a.DOCDATE) as posting_date, Date(a.DUEDATE) as due_date, a.DOCTYPE AS series, a.DOCNO AS doc_no,
a.DOCID AS trans_no, a.REMARKS AS remarks,
if(a.GLACCTNO is null, d.GLACCTNO, a.GLACCTNO) AS acct_code,
if(a.GLACCTNAME is null, d.GLACCTNAME, a.GLACCTNAME) AS acct_name,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS debit, if (a.GLCREDIT is null, 0, a.GLCREDIT) AS credit,
if (d.OGLDEBIT is null, 0, d.OGLDEBIT) as OGLDEBIT, if (d.OGLCREDIT is null, 0, d.OGLCREDIT) as OGLCREDIT,
x.LEVEL AS level, x.PARENTACCT AS parent_code,
DATE(pi_date1) AS date1, DATE(pi_date2) AS date2, DATE(pi_date1) - interval 1 day AS date3, l.ACCTCODE AS level0_code, l.ACCTNAME AS level0_name,
case when x.PARENTACCT like '1%' then 1
     when x.PARENTACCT like '2%' then 2
     when x.PARENTACCT like '3%' then 3
     when x.PARENTACCT like '4%' then 4
     when x.PARENTACCT like '5%' then 5
     when x.PARENTACCT like '6%' then 6
     when x.PARENTACCT like '7%' then 7
     when x.PARENTACCT like '8%' then 8
else 0
end as drawer_no,
upper(case when x.PARENTACCT like '1%' then 'Assets'
     when x.PARENTACCT like '2%' then 'Liabilities'
     when x.PARENTACCT like '3%' then 'Capital and Reserves'
     when x.PARENTACCT like '4%' then 'Turnover'
     when x.PARENTACCT like '5%' then 'Cost of Sales'
     when x.PARENTACCT like '6%' then 'Operating Costs'
     when x.PARENTACCT like '7%' then 'Non-Operating Income and Expenditure'
     when x.PARENTACCT like '8%' then 'Taxation and Extraordinary Items'
else ''
end) as drawer
FROM chartofaccounts x
left outer join je a on a.GLACCTNO = x.FORMATCODE
left outer join je_opening d on d.GLACCTNO = x.FORMATCODE
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
left outer join chartofaccounts l on l.ACCTCODE = x.PARENTACCT
WHERE x.PARENTACCT NOT IN('')
      and x.formatcode in('1100300203','1100300204')
Order by x.PARENTACCT, x.LEVEL;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `gl`
--

DROP PROCEDURE IF EXISTS `gl`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `gl`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_account VARCHAR(30), IN pi_group VARCHAR(30), IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN

DECLARE v_branch VARCHAR(100);
SET v_branch = concat('%-', pi_branch,'-%');


CREATE TEMPORARY TABLE  `je_opening` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
   `REMARKS` varchar(2000) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je_opening (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, OGLDEBIT, OGLCREDIT, REMARKS)
    SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             sum(if (b.GLDEBIT is null, 0, b.GLDEBIT)) as GLDEBIT,
             sum(if (b.GLCREDIT is null, 0, b.GLCREDIT)) as GLCREDIT, b.REMARKS
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE < pi_date1
             group by b.GLACCTNO;


CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
    `REMARKS` varchar(2000) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, REMARKS)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, b.GLDEBIT), if (b.GLCREDIT is null, 0, b.GLCREDIT),
             a.DOCREMARKS
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE BETWEEN pi_date1 and pi_date2;


SELECT upper(c.COMPANYNAME) as Company, pi_branch as BRANCH, UPPER(b.BRANCHNAME) AS BRANCHNAME,
Date(a.DOCDATE) as posting_date, Date(a.DUEDATE) as due_date, a.DOCTYPE AS series, a.DOCNO AS doc_no,
a.DOCID AS trans_no, a.REMARKS AS remarks,
if(a.GLACCTNO is null, d.GLACCTNO, a.GLACCTNO) AS acct_code,
if(a.GLACCTNAME is null, d.GLACCTNAME, a.GLACCTNAME) AS acct_name,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS debit, if (a.GLCREDIT is null, 0, a.GLCREDIT) AS credit,
if (d.OGLDEBIT is null, 0, d.OGLDEBIT) as OGLDEBIT, if (d.OGLCREDIT is null, 0, d.OGLCREDIT) as OGLCREDIT,
x.LEVEL AS level, x.PARENTACCT AS parent_code,
DATE(pi_date1) AS date1, DATE(pi_date2) AS date2, DATE(pi_date1) - interval 1 day AS date3, l.ACCTCODE AS level0_code, l.ACCTNAME AS level0_name,
case when x.PARENTACCT like '1%' then 1
     when x.PARENTACCT like '2%' then 2
     when x.PARENTACCT like '3%' then 3
     when x.PARENTACCT like '4%' then 4
     when x.PARENTACCT like '5%' then 5
     when x.PARENTACCT like '6%' then 6
     when x.PARENTACCT like '7%' then 7
     when x.PARENTACCT like '8%' then 8
else 0
end as drawer_no,
upper(case when x.PARENTACCT like '1%' then 'Assets'
     when x.PARENTACCT like '2%' then 'Liabilities'
     when x.PARENTACCT like '3%' then 'Capital and Reserves'
     when x.PARENTACCT like '4%' then 'Turnover'
     when x.PARENTACCT like '5%' then 'Cost of Sales'
     when x.PARENTACCT like '6%' then 'Operating Costs'
     when x.PARENTACCT like '7%' then 'Non-Operating Income and Expenditure'
     when x.PARENTACCT like '8%' then 'Taxation and Extraordinary Items'
else ''
end) as drawer

FROM chartofaccounts x
left outer join je a on a.GLACCTNO = x.FORMATCODE
left outer join je_opening d on d.GLACCTNO = x.FORMATCODE
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
left outer join chartofaccounts l on l.ACCTCODE = x.PARENTACCT

WHERE x.PARENTACCT NOT IN('')
      
      and (pi_account ='' or (pi_account<>'' and x.formatcode = pi_account))
      and (pi_group ='' or (pi_group<>'' and x.cashacct = pi_group))

Order by x.PARENTACCT, x.LEVEL;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `goodissued_st`
--

DROP PROCEDURE IF EXISTS `goodissued_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `goodissued_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docid DECIMAL(18,0))
BEGIN

DECLARE v_lineid   NUMERIC(18,0);
DECLARE v_itemcode VARCHAR(100);
DECLARE v_itemdesc VARCHAR(100);
DECLARE v_quantity NUMERIC(18,6);
DECLARE v_itemcost NUMERIC(18,6);
DECLARE v_sbnids   VARCHAR(500);
DECLARE v_sbncnt   NUMERIC(18,6);
DECLARE v_done     INT;
DECLARE v_warehouse VARCHAR(100);

DECLARE v_position  INT;
DECLARE v_qposition INT;
DECLARE v_endpoint  INT;
DECLARE v_qendpoint INT;
DECLARE v_batch     VARCHAR(500);
DECLARE v_batchqty  VARCHAR(500);
DECLARE v_batch_no  VARCHAR(500);
DECLARE v_batch_q  VARCHAR(500);
DECLARE v_batch_qty NUMERIC(18,6);

DECLARE goodissued_cur CURSOR FOR
  SELECT LINEID, ITEMCODE, ITEMDESC, QUANTITY, UNITPRICE, SBNIDS, SBNCNT, WHSCODE
      FROM GOODSISSUEITEMS
      WHERE COMPANY = pi_company AND
            BRANCH  = pi_branch  AND
            DOCID   = pi_docid;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;

DROP TEMPORARY TABLE IF EXISTS goodissued_temp ;
CREATE TEMPORARY TABLE  `goodissued_temp` (
    `LINEID` NUMERIC(18,0) NULL default '0',
    `ITEMCODE` varchar(500) NULL default '',
    `ITEMDESC` varchar(500) NULL default '',
    `QUANTITY` NUMERIC(18,6),
    `ITEMCOST` NUMERIC(18,6),
    `LINETOTAL` NUMERIC(18,6),
    `BATCH` varchar(500) NULL default '',
    `BATCHQTY` NUMERIC(18,6),
    `WHSCODE` VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  OPEN goodissued_cur;
  issuedloop: LOOP
    FETCH goodissued_cur INTO v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_sbnids, v_sbncnt, v_warehouse;
    IF v_done = 1 THEN
       Leave issuedloop;
    END IF;

    SET v_position = 1;
    SET v_qposition = 1;
    SET v_endpoint = 1;
    SET v_qendpoint = 1;
    IF v_sbncnt > 0 THEN
       SET v_batch = Concat(mid(v_sbnids,locate('|',v_sbnids)+1,locate('|',v_sbnids,locate('|',v_sbnids)+1)-locate('|',v_sbnids)-1),'`');
       SET v_batchqty = Concat(mid(v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1,locate('|',v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1)-locate('|',v_sbnids,locate('|',v_sbnids)+1)-1),'`');
       WHILE MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint) > '' DO
            SET v_batch_no = MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint);
            SET v_batch_q  = MID(v_batchqty, v_qposition, locate('`',v_batchqty,v_qposition)-v_qendpoint);
            SET v_batch_qty = CAST(v_batch_q AS SIGNED);
            SET v_position = v_position + Length(v_batch_no) + 1;
            SET v_qposition = v_qposition + Length(v_batch_q) + 1;
            SET v_endpoint = v_position;
            SET v_qendpoint = v_qposition;

           INSERT INTO goodissued_temp (`LINEID`,`ITEMCODE`,`ITEMDESC`,`QUANTITY`,`ITEMCOST`,`LINETOTAL`, `BATCH`,`BATCHQTY`,`WHSCODE`)
                            VALUES (v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_quantity * v_itemcost, v_batch_no, v_batch_qty, v_warehouse);
       END WHILE;
    ELSE
           INSERT INTO goodissued_temp (`LINEID`,`ITEMCODE`,`ITEMDESC`,`QUANTITY`,`ITEMCOST`,`LINETOTAL`, `BATCH`,`BATCHQTY`,`WHSCODE`)
                            VALUES (v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_quantity * v_itemcost, '', 0, v_warehouse);
    END IF;

    SET v_done = 0;
  END LOOP issuedloop;
  CLOSE goodissued_cur;

  SELECT * FROM goodissued_temp;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `goodreceipt_st`
--

DROP PROCEDURE IF EXISTS `goodreceipt_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `goodreceipt_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docid DECIMAL(18,0))
BEGIN

DECLARE v_lineid   NUMERIC(18,0);
DECLARE v_itemcode VARCHAR(100);
DECLARE v_itemdesc VARCHAR(100);
DECLARE v_quantity NUMERIC(18,6);
DECLARE v_itemcost NUMERIC(18,6);
DECLARE v_sbnids   VARCHAR(500);
DECLARE v_sbncnt   NUMERIC(18,6);
DECLARE v_done     INT;
DECLARE v_warehouse VARCHAR(100);

DECLARE v_position  INT;
DECLARE v_qposition INT;
DECLARE v_endpoint  INT;
DECLARE v_qendpoint INT;
DECLARE v_batch     VARCHAR(500);
DECLARE v_batchqty  VARCHAR(500);
DECLARE v_batch_no  VARCHAR(500);
DECLARE v_batch_q  VARCHAR(500);
DECLARE v_batch_qty NUMERIC(18,6);

DECLARE goodreceipt_cur CURSOR FOR
  SELECT LINEID, ITEMCODE, ITEMDESC, QUANTITY, UNITPRICE, SBNIDS, SBNCNT, WHSCODE
      FROM GOODSRECEIPTITEMS
      WHERE COMPANY = pi_company AND
            BRANCH  = pi_branch  AND
            DOCID   = pi_docid;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;

DROP TEMPORARY TABLE IF EXISTS goodreceipt_temp ;
CREATE TEMPORARY TABLE  `goodreceipt_temp` (
    `LINEID` NUMERIC(18,0) NULL default '0',
    `ITEMCODE` varchar(500) NULL default '',
    `ITEMDESC` varchar(500) NULL default '',
    `QUANTITY` NUMERIC(18,6),
    `ITEMCOST` NUMERIC(18,6),
    `LINETOTAL` NUMERIC(18,6),
    `BATCH` varchar(500) NULL default '',
    `BATCHQTY` NUMERIC(18,6),
    `WHSCODE` VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  OPEN goodreceipt_cur;
  receiptloop: LOOP
    FETCH goodreceipt_cur INTO v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_sbnids, v_sbncnt, v_warehouse;
    IF v_done = 1 THEN
       Leave receiptloop;
    END IF;

    SET v_position = 1;
    SET v_qposition = 1;
    SET v_endpoint = 1;
    SET v_qendpoint = 1;
    IF v_sbncnt > 0 THEN
       SET v_batch = Concat(mid(v_sbnids,locate('|',v_sbnids)+1,locate('|',v_sbnids,locate('|',v_sbnids)+1)-locate('|',v_sbnids)-1),'`');
       SET v_batchqty = Concat(mid(v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1,locate('|',v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1)-locate('|',v_sbnids,locate('|',v_sbnids)+1)-1),'`');
       WHILE MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint) > '' DO
            SET v_batch_no = MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint);
            SET v_batch_q  = MID(v_batchqty, v_qposition, locate('`',v_batchqty,v_qposition)-v_qendpoint);
            SET v_batch_qty = CAST(v_batch_q AS SIGNED);
            SET v_position = v_position + Length(v_batch_no) + 1;
            SET v_qposition = v_qposition + Length(v_batch_q) + 1;
            SET v_endpoint = v_position;
            SET v_qendpoint = v_qposition;

           INSERT INTO goodreceipt_temp (`LINEID`,`ITEMCODE`,`ITEMDESC`,`QUANTITY`,`ITEMCOST`,`LINETOTAL`, `BATCH`,`BATCHQTY`,`WHSCODE`)
                            VALUES (v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_quantity * v_itemcost, v_batch_no, v_batch_qty,v_warehouse);
       END WHILE;
    ELSE
           INSERT INTO goodreceipt_temp (`LINEID`,`ITEMCODE`,`ITEMDESC`,`QUANTITY`,`ITEMCOST`,`LINETOTAL`, `BATCH`,`BATCHQTY`,`WHSCODE`)
                            VALUES (v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_quantity * v_itemcost, '', 0,v_warehouse);
    END IF;

    SET v_done = 0;
  END LOOP receiptloop;
  CLOSE goodreceipt_cur;

  SELECT * FROM goodreceipt_temp;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `goodsreturn_report`
--

DROP PROCEDURE IF EXISTS `goodsreturn_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `goodsreturn_report`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM purchasereturns A
        LEFT OUTER JOIN purchasereturnitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `goods_issues`
--

DROP PROCEDURE IF EXISTS `goods_issues`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `goods_issues`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as shiptoadd, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       upper(concat(a.branchref,' - ', t.BRANCHNAME)) as term,
       c.SALESPERSONNAME as sales_person,
       g.SERIALNO as chassis, g.MFRSERIALNO as 'engine', d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno,
       d.QUANTITY as qty,
       d.unitprice as unitprice,
       d.linetotal as linetotal,
       if(h.CREDITCARDNAME is null, 'IN-HOUSE', h.CREDITCARDNAME) as CREDITCARDNAME,
       a.ACCTNO, a.ACCTFDD, a.ACCTLDD, a.INSTNUM, a.ACCTDPAMOUNT,
       a.ACCTMA, a.ACCTREBATE, a.ACCTFINAMOUNT, a.ACCTPNAMOUNT,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.OTHERCHARGES as othercharges, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.DPAPPLIED,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, i.username as created_by,
       concat(y.departmentname, ' - ', x.warehousename) as dept,
       (select sum(d.itemcost * d.QUANTITY) from goodsissues a
            left outer join goodsissueitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno)as total
       from goodsissues a
            left outer join goodsissueitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join brancheslist t on a.branchref = t.BRANCHCODE
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join documentserials g on a.DOCID = g.DOCID and a.COMPANY = g.COMPANY and a.BRANCH = g.BRANCH
                                                 and d.OBJECTCODE = g.OBJECTCODE and d.ITEMCODE = g.ITEMCODE
            left outer join creditcards h on a.CREDITCARD = h.CREDITCARD
            left outer join users i on d.CREATEDBY = i.userid
            left outer join warehouses x on d.whscode = x.warehouse
            left outer join departments y on a.department = y.department
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
 group by a.DOCNO, d.ITEMCODE, g.SERIALNO, g.MFRSERIALNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `goods_issue_report`
--

DROP PROCEDURE IF EXISTS `goods_issue_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `goods_issue_report`(IN pi_company varchar(200),
                                        IN pi_branch varchar(200),
                                        IN pi_date1 varchar(200),
                                        IN pi_date2 varchar(200),
                                        IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', concat(B.GLACCTNO, ' - ', B.ITEMDESC), concat(B.ITEMCODE, ' - ', B.ITEMDESC)) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM goodsissues A
        LEFT OUTER JOIN goodsissueitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `goods_receipts`
--

DROP PROCEDURE IF EXISTS `goods_receipts`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `goods_receipts`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as shiptoadd, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       upper(concat(a.branchref,' - ', t.BRANCHNAME)) as term,
       c.SALESPERSONNAME as sales_person,
       g.SERIALNO as chassis, g.MFRSERIALNO as 'engine', d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno,
       if(G.ITEMCODE IS NULL , d.QUANTITY, 1) as qty,
       d.price as unitprice,
       if(G.ITEMCODE IS NULL , d.QUANTITY, 1) * d.price as linetotal,
       if(h.CREDITCARDNAME is null, 'IN-HOUSE', h.CREDITCARDNAME) as CREDITCARDNAME,
       a.ACCTNO, a.ACCTFDD, a.ACCTLDD, a.INSTNUM, a.ACCTDPAMOUNT,
       a.ACCTMA, a.ACCTREBATE, a.ACCTFINAMOUNT, a.ACCTPNAMOUNT,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.OTHERCHARGES as othercharges, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.DPAPPLIED,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, i.username as created_by
       from goodsreceipts a
            left outer join goodsreceiptitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join brancheslist t on a.branchref = t.BRANCHCODE
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join documentserials g on a.DOCID = g.DOCID and a.COMPANY = g.COMPANY and a.BRANCH = g.BRANCH
                                                 and d.OBJECTCODE = g.OBJECTCODE and d.ITEMCODE = g.ITEMCODE
            left outer join creditcards h on a.CREDITCARD = h.CREDITCARD
            left outer join users i on d.CREATEDBY = i.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
 group by a.DOCNO, d.ITEMCODE, g.SERIALNO, g.MFRSERIALNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `goods_receipt_report`
--

DROP PROCEDURE IF EXISTS `goods_receipt_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `goods_receipt_report`(IN pi_company varchar(200),
                                        IN pi_branch varchar(200),
                                        IN pi_date1 varchar(200),
                                        IN pi_date2 varchar(200),
                                        IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', concat(B.GLACCTNO, ' - ', B.ITEMDESC), concat(B.ITEMCODE, ' - ', B.ITEMDESC)) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM goodsreceipts A
        LEFT OUTER JOIN goodsreceiptitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `grpo_report`
--

DROP PROCEDURE IF EXISTS `grpo_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `grpo_report`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM purchasedeliveries A
        LEFT OUTER JOIN purchasedeliveryitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `invoicejournal_st`
--

DROP PROCEDURE IF EXISTS `invoicejournal_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `invoicejournal_st`(IN pi_company VARCHAR(30),   IN pi_branch VARCHAR(30),    IN pi_docno_fr VARCHAR(30), IN pi_docno_to VARCHAR(30),
                                     IN pi_bpcode_fr VARCHAR(30), IN pi_bpcode_to VARCHAR(30), IN pi_date_fr DATE,         IN pi_date_to DATE)
BEGIN

DECLARE v_docno_fr  VARCHAR(30);
DECLARE v_docno_to  VARCHAR(30);
DECLARE v_bpcode_fr VARCHAR(30);
DECLARE v_bpcode_to VARCHAR(30);
DECLARE v_selectall INT;
DECLARE v_now       VARCHAR(30);

SET v_now = CAST(NOW() as char(30));

  IF pi_docno_fr is null THEN
    SET v_docno_fr = '';
  ELSE
    SET v_docno_fr = pi_docno_fr;
  END IF;

  IF pi_docno_to is null THEN
    SET v_docno_to = '';
  ELSE
    SET v_docno_to = pi_docno_to;
  END IF;

  IF v_docno_fr > '' and v_docno_to = '' THEN

    SET v_docno_to = v_docno_fr;

  ELSEIF v_docno_fr = '' and v_docno_to > '' THEN

    SET v_docno_fr = v_docno_to;

  ELSEIF v_docno_fr = '' and v_docno_to = '' THEN

    SET v_docno_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;

  IF pi_bpcode_fr is null THEN
    SET v_bpcode_fr = '';
  ELSE
    SET v_bpcode_fr = pi_bpcode_fr;
  END IF;

  IF pi_bpcode_to is null THEN
    SET v_bpcode_to = '';
  ELSE
    SET v_bpcode_to = pi_bpcode_to;
  END IF;

  IF v_bpcode_fr > '' and v_bpcode_to = '' THEN

    SET v_bpcode_to = v_bpcode_fr;

  ELSEIF v_bpcode_fr = '' and v_bpcode_to > '' THEN

    SET v_bpcode_fr = v_bpcode_to;

  ELSEIF v_bpcode_fr = '' and v_bpcode_to = '' THEN

    SET v_bpcode_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;


  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP1 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP1` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP2 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS LEDGER_TEMP ;
  CREATE TEMPORARY TABLE `LEDGER_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`      VARCHAR(100),
    `DOCID`        DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO JOURNAL_TEMP1 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, v_now,       JE.DOCID,      JE.LINEID,  JE.DOCDATE,  JE.DOCTYPE, JE.DOCNO,    JE.GLACCTNO,     JE.GLACCTNAME, JE.GLDEBIT,
               JE.GLCREDIT,    JE.SLTYPE, JE.SLACCTNO, JE.SLACCTNAME, JE.SLDEBIT, JE.SLCREDIT, JE.REMARKS, JE.CURRENCY,
               CASE WHEN JE.DOCTYPE = 'DT' THEN DT.CURRENCYRATE
                    ELSE AR.CURRENCYRATE END,
               CASE WHEN JE.DOCTYPE = 'DT' THEN DT.DOCTYPE
                    ELSE AR.DOCTYPE END,
               CASE WHEN JE.DOCTYPE = 'DT' THEN DT.BPCODE
                    ELSE AR.BPCODE END,
               CASE WHEN JE.DOCTYPE = 'DT' THEN DT.BPNAME
                    ELSE AR.BPNAME END,
               '',
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.BPREFNO
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPREFNO
                    ELSE '' END
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN ARINVOICES AR            ON AR.COMPANY      = pi_company  AND AR.BRANCH      = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','')  AND AR.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT ON DT.COMPANY      = pi_company  AND DT.BRANCH      = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','') AND DT.DOCNO = JE.DOCNO
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH =  pi_branch  AND
                  (JE.DOCTYPE IN('AR','CS','DT')) AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to;

        INSERT INTO JOURNAL_TEMP2 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
               SELECT * FROM JOURNAL_TEMP1 JE
                     WHERE JE.BPCODE >= v_bpcode_fr AND
                           JE.BPCODE <= v_bpcode_to AND
                           JE.DOCNO  >= v_docno_fr  AND
                           JE.DOCNO  <= v_docno_to;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.SLACCTNO > '' THEN JE.SLACCTNO
                  ELSE JE.GLACCTNO END AS BP_CODE,
             CASE WHEN JE.SLACCTNAME > '' THEN JE.SLACCTNAME
                  ELSE JE.GLACCTNAME END AS BP_NAME,
             CASE WHEN JE.DOCTYPE = 'CS' AND JE.GLDEBIT > 0  THEN CONCAT(JE.BPCODE, ' - ', JE.BPNAME)
                  ELSE '' END,
             JE.REFNO,
             JE.GLDEBIT,
             JE.GLCREDIT
        FROM JOURNAL_TEMP2 JE
          WHERE (JE.ORITYPE = 'I');


  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.SLACCTNO > '' THEN JE.SLACCTNO
                  ELSE JE.GLACCTNO END AS BP_CODE,
             CASE WHEN JE.SLACCTNAME > '' THEN JE.SLACCTNAME
                  ELSE JE.GLACCTNAME END AS BP_NAME,
             CASE WHEN JE.DOCTYPE = 'AR'  THEN ARI.ITEMDESC
                  WHEN JE.DOCTYPE = 'DT'  THEN DTI.ITEMDESC
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN ARI.ITEMDESC
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLDEBIT  > 0 THEN CONCAT(JE.BPCODE, ' - ', JE.BPNAME)
                  ELSE '' END,
             JE.REFNO,
             JE.GLDEBIT,
             CASE WHEN JE.DOCTYPE IN('AR','CS')  AND JE.GLCREDIT > 0 AND ARI.GLACCTNO = JE.GLACCTNO THEN IF(ABO.AMOUNT IS NULL, (ARI.LINETOTAL * JE.CURRENCYRATE), (ARI.LINETOTAL + ABO.AMOUNT) * JE.CURRENCYRATE)
                  WHEN JE.DOCTYPE = 'DT'         AND JE.GLCREDIT > 0 AND DTI.GLACCTNO = JE.GLACCTNO THEN (DTI.LINETOTAL * JE.CURRENCYRATE)
                  ELSE JE.GLCREDIT END
        FROM JOURNAL_TEMP2 JE
             LEFT OUTER JOIN ARINVOICES AR                 ON AR.COMPANY  = pi_company  AND AR.BRANCH  = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','')  AND AR.DOCNO  = JE.DOCNO
             LEFT OUTER JOIN ARINVOICEITEMS ARI            ON ARI.COMPANY = AR.COMPANY  AND ARI.BRANCH = AR.BRANCH  AND ARI.DOCID = AR.DOCID  AND ARI.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT ARO.COMPANY, ARO.BRANCH, SUM(ARO.AMOUNT) AS AMOUNT, BO.GLACCTNO, ARO.DOCID
                                   FROM ARINVOICEOTHERCHARGESITEMS ARO, BRANCHOTHERCHARGES BO
                                   WHERE ARO.COMPANY = BO.COMPANY AND
                                         ARO.BRANCH = BO.BRANCH   AND
                                         ARO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY ARO.DOCID, BO.GLACCTNO) AS ABO
                                                           ON ABO.COMPANY = pi_company AND ABO.BRANCH = pi_branch AND ABO.DOCID = AR.DOCID AND ABO.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT      ON DT.COMPANY = pi_company   AND DT.BRANCH = pi_branch  AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','') AND DT.DOCNO = JE.DOCNO
             LEFT OUTER JOIN ARDOWNPAYMENTINVOICEITEMS DTI ON DTI.COMPANY = DT.COMPANY  AND DTI.BRANCH = DT.BRANCH  AND DTI.DOCID = DT.DOCID  AND DTI.GLACCTNO = JE.GLACCTNO
          WHERE (JE.ORITYPE = 'S');


  SELECT * FROM LEDGER_TEMP ORDER BY DOCNO, DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `invoice_discount_sp`
--

DROP PROCEDURE IF EXISTS `invoice_discount_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `invoice_discount_sp`(IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_cust_fr VARCHAR(30), IN pi_cust_to VARCHAR(30),
                                       IN pi_invoice_fr VARCHAR(30), IN pi_invoice_to VARCHAR(30), IN pi_rpttype VARCHAR(10))
BEGIN
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_cust_from VARCHAR(30);
DECLARE v_cust_to VARCHAR(30);
DECLARE v_invoice_from VARCHAR(30);
DECLARE v_invoice_to VARCHAR(30);
  IF pi_cust_fr is null THEN SET v_cust_from = '';
  ELSE SET v_cust_from = pi_cust_fr;
  END IF;
  IF pi_cust_to is null THEN SET v_cust_to = '';
  ELSE SET v_cust_to = pi_cust_to;
  END IF;
  IF v_cust_from = '' and v_cust_to = '' THEN
    SET v_cust_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;

  IF pi_invoice_fr is null THEN SET v_invoice_from = '';
  ELSE SET v_invoice_from = pi_invoice_fr;
  END IF;
  IF pi_invoice_to is null THEN SET v_invoice_to = '';
  ELSE SET v_invoice_to = pi_invoice_to;
  END IF;
  IF v_invoice_from = '' and v_invoice_to = '' THEN
    SET v_invoice_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;

  IF pi_date_fr is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_fr;
  END IF;
  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;

  IF pi_rpttype = 'ALL' THEN
    SELECT arinvoices.DOCNO AS DOCNO, arinvoices.DOCDATE AS DOCDATE, arinvoices.bpcode AS bpcode, arinvoices.bpname AS bpname,
           arinvoices.totalamount AS totalamount, arinvoices.u_u_salestype AS u_u_salestype, arinvoices.othercharges AS othercharges,
           arinvoices.discamount AS discamount, SUM(arinvoiceitems.discamount) as linedisc
      FROM arinvoiceitems,
           arinvoices
      WHERE ( arinvoices.COMPANY = arinvoiceitems.COMPANY ) and
            ( arinvoices.BRANCH = arinvoiceitems.BRANCH ) and
            ( arinvoices.DOCID = arinvoiceitems.DOCID ) and
            ( arinvoices.DOCSTATUS <> 'D' ) and
            ( arinvoices.BPCODE >= v_cust_from and arinvoices.BPCODE <= v_cust_to ) and
            ( arinvoices.DOCNO >= v_invoice_from and arinvoices.DOCNO <= v_invoice_to ) and
            ( arinvoices.DOCDATE >= v_date_from and arinvoices.DOCDATE <= v_date_to )
      GROUP BY arinvoices.DOCNO

      UNION

    SELECT arcreditmemos.DOCNO AS DOCNO, arcreditmemos.DOCDATE AS DOCDATE, arcreditmemos.bpcode AS bpcode, arcreditmemos.bpname AS bpname,
           ((arcreditmemos.totalbefdisc + arcreditmemos.roundamount) * -1) AS totalamount, 'CRMEMO' AS u_u_salestype, arcreditmemos.othercharges AS othercharges,
           arcreditmemos.discamount AS discamount, SUM(arcreditmemoitems.discamount) as linedisc
      FROM arcreditmemoitems,
           arcreditmemos
      WHERE ( arcreditmemos.COMPANY = arcreditmemoitems.COMPANY ) and
            ( arcreditmemos.BRANCH  = arcreditmemoitems.BRANCH ) and
            ( arcreditmemos.DOCID   = arcreditmemoitems.DOCID ) and
            ( arcreditmemos.DOCSTATUS <> 'D' ) and
            ( arcreditmemos.BPCODE  >= v_cust_from and arcreditmemos.BPCODE <= v_cust_to ) and
            ( arcreditmemos.DOCNO   >= v_invoice_from and arcreditmemos.DOCNO <= v_invoice_to ) and
            ( arcreditmemos.DOCDATE >= v_date_from and arcreditmemos.DOCDATE <= v_date_to )
      GROUP BY arcreditmemos.DOCNO;
  ELSEIF pi_rpttype = 'AR' THEN
    SELECT arinvoices.DOCNO AS DOCNO, arinvoices.DOCDATE AS DOCDATE, arinvoices.bpcode AS bpcode, arinvoices.bpname AS bpname,
           arinvoices.totalamount AS totalamount, arinvoices.u_u_salestype AS u_u_salestype, arinvoices.othercharges AS othercharges,
           arinvoices.discamount AS discamount, SUM(arinvoiceitems.discamount) as linedisc
      FROM arinvoiceitems,
           arinvoices
      WHERE ( arinvoices.COMPANY = arinvoiceitems.COMPANY ) and
            ( arinvoices.BRANCH = arinvoiceitems.BRANCH ) and
            ( arinvoices.DOCID = arinvoiceitems.DOCID ) and
            ( arinvoices.DOCSTATUS <> 'D' ) and
            ( arinvoices.BPCODE >= v_cust_from and arinvoices.BPCODE <= v_cust_to ) and
            ( arinvoices.DOCNO >= v_invoice_from and arinvoices.DOCNO <= v_invoice_to ) and
            ( arinvoices.DOCDATE >= v_date_from and arinvoices.DOCDATE <= v_date_to )
      GROUP BY arinvoices.DOCNO;
  ELSEIF pi_rpttype = 'ARCM' THEN
    SELECT arcreditmemos.DOCNO AS DOCNO, arcreditmemos.DOCDATE AS DOCDATE, arcreditmemos.bpcode AS bpcode, arcreditmemos.bpname AS bpname,
           if(arcreditmemoitems.basedocno > '', arcreditmemos.totalbefdisc + arcreditmemos.roundamount, arcreditmemos.totalamount) AS totalamount,
           'CRMEMO' AS u_u_salestype, if(arcreditmemoitems.basedocno > '', 0, arcreditmemos.othercharges) AS othercharges,
           if(arcreditmemoitems.basedocno > '', 0, arcreditmemos.discamount) AS discamount,
           if(arcreditmemoitems.basedocno > '', 0, SUM(arcreditmemoitems.discamount)) as linedisc
      FROM arcreditmemoitems,
           arcreditmemos
      WHERE ( arcreditmemos.COMPANY = arcreditmemoitems.COMPANY ) and
            ( arcreditmemos.BRANCH  = arcreditmemoitems.BRANCH ) and
            ( arcreditmemos.DOCID   = arcreditmemoitems.DOCID ) and
            ( arcreditmemos.DOCSTATUS <> 'D' ) and
            ( arcreditmemos.BPCODE  >= v_cust_from and arcreditmemos.BPCODE <= v_cust_to ) and
            ( arcreditmemos.DOCNO   >= v_invoice_from and arcreditmemos.DOCNO <= v_invoice_to ) and
            ( arcreditmemos.DOCDATE >= v_date_from and arcreditmemos.DOCDATE <= v_date_to )
      GROUP BY arcreditmemos.DOCNO;
  ELSEIF pi_rpttype = 'APALL' THEN
    SELECT apinvoices.DOCNO AS DOCNO, apinvoices.DOCDATE AS DOCDATE, apinvoices.bpcode AS bpcode, apinvoices.bpname AS bpname,
           apinvoices.totalamount AS totalamount, 'APINV' AS u_u_salestype, apinvoices.othercharges AS othercharges,
           apinvoices.discamount AS discamount, SUM(apinvoiceitems.discamount) as linedisc
      FROM apinvoiceitems,
           apinvoices
      WHERE ( apinvoices.COMPANY = apinvoiceitems.COMPANY ) and
            ( apinvoices.BRANCH = apinvoiceitems.BRANCH ) and
            ( apinvoices.DOCID = apinvoiceitems.DOCID ) and
            ( apinvoices.DOCSTATUS <> 'D' ) and
            ( apinvoices.BPCODE >= v_cust_from and apinvoices.BPCODE <= v_cust_to ) and
            ( apinvoices.DOCNO >= v_invoice_from and apinvoices.DOCNO <= v_invoice_to ) and
            ( apinvoices.DOCDATE >= v_date_from and apinvoices.DOCDATE <= v_date_to )
      GROUP BY apinvoices.DOCNO

      UNION

    SELECT apcreditmemos.DOCNO AS DOCNO, apcreditmemos.DOCDATE AS DOCDATE, apcreditmemos.bpcode AS bpcode, apcreditmemos.bpname AS bpname,
           ((apcreditmemos.totalbefdisc + apcreditmemos.roundamount) * -1) AS totalamount, 'CPMEMO' AS u_u_salestype, apcreditmemos.othercharges AS othercharges,
           apcreditmemos.discamount AS discamount, SUM(apcreditmemoitems.discamount) as linedisc
      FROM apcreditmemoitems,
           apcreditmemos
      WHERE ( apcreditmemos.COMPANY = apcreditmemoitems.COMPANY ) and
            ( apcreditmemos.BRANCH  = apcreditmemoitems.BRANCH ) and
            ( apcreditmemos.DOCID   = apcreditmemoitems.DOCID ) and
            ( apcreditmemos.DOCSTATUS <> 'D' ) and
            ( apcreditmemos.BPCODE  >= v_cust_from and apcreditmemos.BPCODE <= v_cust_to ) and
            ( apcreditmemos.DOCNO   >= v_invoice_from and apcreditmemos.DOCNO <= v_invoice_to ) and
            ( apcreditmemos.DOCDATE >= v_date_from and apcreditmemos.DOCDATE <= v_date_to )
      GROUP BY apcreditmemos.DOCNO;
  ELSEIF pi_rpttype = 'AP' THEN
    SELECT apinvoices.DOCNO AS DOCNO, apinvoices.DOCDATE AS DOCDATE, apinvoices.bpcode AS bpcode, apinvoices.bpname AS bpname,
           apinvoices.totalamount AS totalamount, 'APINV' AS u_u_salestype, apinvoices.othercharges AS othercharges,
           apinvoices.discamount AS discamount, SUM(apinvoiceitems.discamount) as linedisc
      FROM apinvoiceitems,
           apinvoices
      WHERE ( apinvoices.COMPANY = apinvoiceitems.COMPANY ) and
            ( apinvoices.BRANCH = apinvoiceitems.BRANCH ) and
            ( apinvoices.DOCID = apinvoiceitems.DOCID ) and
            ( apinvoices.DOCSTATUS <> 'D' ) and
            ( apinvoices.BPCODE >= v_cust_from and apinvoices.BPCODE <= v_cust_to ) and
            ( apinvoices.DOCNO >= v_invoice_from and apinvoices.DOCNO <= v_invoice_to ) and
            ( apinvoices.DOCDATE >= v_date_from and apinvoices.DOCDATE <= v_date_to )
      GROUP BY apinvoices.DOCNO;
  ELSE
    SELECT apcreditmemos.DOCNO AS DOCNO, apcreditmemos.DOCDATE AS DOCDATE, apcreditmemos.bpcode AS bpcode, apcreditmemos.bpname AS bpname,
           if(apcreditmemoitems.basedocno > '', apcreditmemos.totalbefdisc + apcreditmemos.roundamount, apcreditmemos.totalamount) AS totalamount,
           'CPMEMO' AS u_u_salestype, if(apcreditmemoitems.basedocno > '', 0, apcreditmemos.othercharges) AS othercharges,
           if(apcreditmemoitems.basedocno > '', 0, apcreditmemos.discamount) AS discamount,
           if(apcreditmemoitems.basedocno > '', 0, SUM(apcreditmemoitems.discamount)) as linedisc
      FROM apcreditmemoitems,
           apcreditmemos
      WHERE ( apcreditmemos.COMPANY = apcreditmemoitems.COMPANY ) and
            ( apcreditmemos.BRANCH  = apcreditmemoitems.BRANCH ) and
            ( apcreditmemos.DOCID   = apcreditmemoitems.DOCID ) and
            ( apcreditmemos.DOCSTATUS <> 'D' ) and
            ( apcreditmemos.BPCODE  >= v_cust_from and apcreditmemos.BPCODE <= v_cust_to ) and
            ( apcreditmemos.DOCNO   >= v_invoice_from and apcreditmemos.DOCNO <= v_invoice_to ) and
            ( apcreditmemos.DOCDATE >= v_date_from and apcreditmemos.DOCDATE <= v_date_to )
      GROUP BY apcreditmemos.DOCNO;
  END IF;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `invoice_no_sp`
--

DROP PROCEDURE IF EXISTS `invoice_no_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `invoice_no_sp`(IN pi_po_no VARCHAR(20))
BEGIN
  SELECT apinvoices.DOCNO
    FROM apinvoiceitems
		LEFT OUTER JOIN purchasedeliveries ON apinvoiceitems.COMPANY = purchasedeliveries.COMPANY AND apinvoiceitems.BRANCH = purchasedeliveries.BRANCH AND apinvoiceitems.BASEDOCNO = purchasedeliveries.DOCNO
		LEFT OUTER JOIN purchasedeliveryitems ON purchasedeliveries.COMPANY = purchasedeliveryitems.COMPANY AND purchasedeliveries.BRANCH = purchasedeliveryitems.BRANCH AND purchasedeliveries.DOCID = purchasedeliveryitems.DOCID
		LEFT OUTER JOIN purchaseorders ON apinvoiceitems.COMPANY = purchaseorders.COMPANY AND apinvoiceitems.BRANCH = purchaseorders.BRANCH AND apinvoiceitems.BASEDOCNO = purchaseorders.DOCNO,
         apinvoices
    WHERE ( apinvoices.COMPANY = apinvoiceitems.COMPANY ) and
          ( apinvoices.BRANCH = apinvoiceitems.BRANCH ) and
          ( apinvoices.DOCID = apinvoiceitems.DOCID ) and
			    ( purchaseorders.DOCNO = pi_po_no or purchasedeliveryitems.BASEDOCNO = pi_po_no);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `invoice_to_so_sp`
--

DROP PROCEDURE IF EXISTS `invoice_to_so_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `invoice_to_so_sp`(IN pi_item_code VARCHAR(100), IN pi_date_from DATE, IN pi_date_to DATE)
BEGIN

DECLARE v_original_no VARCHAR(100);
DECLARE Done INT;
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_company VARCHAR(100);
DECLARE v_branch VARCHAR(100);
DECLARE v_bpcode VARCHAR(100);
DECLARE v_bpname VARCHAR(100);
DECLARE v_docno VARCHAR(100);
DECLARE v_salestype VARCHAR(100);
DECLARE v_docdate DATE;
DECLARE v_quantity NUMERIC(20,6);
DECLARE v_itemvolume NUMERIC(20,6);
DECLARE v_basedocno VARCHAR(100);
DECLARE v_basedocid NUMERIC(20,6);
DECLARE v_baselineid NUMERIC(20,6);
DECLARE v_basetype VARCHAR(100);
DECLARE v_lineid NUMERIC(20,6);
DECLARE v_totalvolume NUMERIC(20,6);
DECLARE v_curdate DATE;
DECLARE v_curtime TIME;

  DECLARE cur0001 CURSOR FOR
    SELECT arinvoices.COMPANY,
           arinvoices.BRANCH,
           arinvoices.BPCODE,
           arinvoices.BPNAME,
           arinvoices.DOCNO,
           arinvoices.DOCDATE,
           arinvoices.U_U_SALESTYPE,
           arinvoiceitems.QUANTITY,
           arinvoiceitems.U_U_ITEMVOLUME,
           arinvoiceitems.BASEDOCNO,
           arinvoiceitems.BASEDOCID,
           arinvoiceitems.BASELINEID,
           arinvoiceitems.BASETYPE,
           arinvoiceitems.LINEID
      FROM arinvoiceitems,
           arinvoices
     WHERE ( arinvoiceitems.COMPANY = arinvoices.COMPANY ) and
           ( arinvoiceitems.BRANCH = arinvoices.BRANCH ) and
           ( arinvoiceitems.DOCID = arinvoices.DOCID ) and
           ( arinvoiceitems.ITEMCODE = pi_item_code) and
           ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C') and
           ( arinvoices.DOCDATE >= v_date_from and arinvoices.DOCDATE <= v_date_to)
     ORDER BY arinvoices.DOCDATE;


  DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1 ;

  IF pi_date_from is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_from;
  END IF;

  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;

  SET v_curdate = CURDATE();
  SET v_curtime = Now();

  DROP TEMPORARY TABLE IF EXISTS arinvoicehistory ;
  CREATE TEMPORARY TABLE `arinvoicehistory` (
    `BPCODE` VARCHAR(100) NOT NULL default '',
    `BPNAME` VARCHAR(100) NOT NULL default '',
    `DOCNO` VARCHAR(100) NOT NULL default '',
    `DOCDATE` DATE,
    `QUANTITY` NUMERIC(20,6) NOT NULL default '0',
    `SONO` VARCHAR(100),
    `SEQ` NUMERIC(20,6) NOT NULL default '0',
    `LINEID` NUMERIC(20,0) NOT NULL default '0',
    `CURRENTDATE` DATE,
    `CURRENTTIME` TIME,
    `SALESTYPE` VARCHAR(100),
    PRIMARY KEY  (`DOCNO`, `LINEID`, `CURRENTDATE`, `CURRENTTIME`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


 OPEN cur0001;
 cur0001loop: LOOP

     FETCH cur0001 INTO v_company, v_branch, v_bpcode, v_bpname, v_docno, v_docdate, v_salestype, v_quantity, v_itemvolume, v_basedocno, v_basedocid, v_baselineid, v_basetype, v_lineid ;
     IF Done = 1 THEN
       Leave cur0001loop;
     END IF;

      IF v_basetype = 'SALESORDER' THEN
          SET v_original_no = v_basedocno;
      ELSE

        SELECT salesdeliveryitems.BASEDOCNO INTO v_original_no
          FROM salesdeliveryitems
          WHERE salesdeliveryitems.COMPANY = v_company and
                salesdeliveryitems.BRANCH = v_branch and
                salesdeliveryitems.LINEID = v_baselineid and
                salesdeliveryitems.DOCID =  v_basedocid;
      END IF;

      SET v_totalvolume = v_quantity * v_itemvolume;

      INSERT INTO arinvoicehistory (`BPCODE`, `BPNAME`, `DOCNO`, `DOCDATE`, `QUANTITY`, `SONO`, `SEQ`, `LINEID`, `CURRENTDATE`, `CURRENTTIME`, `SALESTYPE`)
                            VALUES (v_bpcode, v_bpname, v_docno, v_docdate, v_quantity, v_original_no, v_totalvolume, v_lineid, v_curdate, v_curtime, v_salestype);

      SET done = 0;
  END LOOP cur0001loop;
  CLOSE cur0001;

   SELECT * FROM arinvoicehistory WHERE CURRENTTIME = v_curtime AND CURRENTDATE = v_curdate;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `invtransfermovement`
--

DROP PROCEDURE IF EXISTS `invtransfermovement`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `invtransfermovement`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_transstatus VARCHAR(10),
                                       IN pi_transpurpose VARCHAR(200), IN pi_doc_fr VARCHAR(30), IN pi_doc_to VARCHAR(30),
                                       IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_rpttype INT)
BEGIN

DECLARE v_doc_fr VARCHAR(30);
DECLARE v_doc_to VARCHAR(30);

IF pi_doc_fr IS NULL or pi_doc_fr = '' THEN
   SET v_doc_fr = '';
ELSE
   SET v_doc_fr = pi_doc_fr;
END IF;

IF pi_doc_to IS NULL or pi_doc_to = '' THEN
   SET v_doc_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
ELSE
   SET v_doc_to = pi_doc_to;
END IF;

IF pi_transpurpose = 'RO' or pi_transpurpose = 'SO' THEN
    SELECT pi_transpurpose as Groupcode, hd.docno as docno, hd.docdate as docdate, dt.itemcode as itemcode, hd.u_u_bpcode as bpcode,
           hd.u_u_tobp as bpname, hd2.docno as refdocno, hd.u_u_transstatus as Transstatus, hd2.u_u_transstatus as Refstatus,
           dt.quantity as QuantityOut, if(dt2.quantity is null, 0, dt2.quantity) as QuantityIn,
           if(dt2.quantity is null, 0, dt2.quantity) as Quantity, hd2.docdate as Refdate, hd.fromwhscode as fromwarehouse, dt.whscode as towarehouse
      FROM stocktransfers hd
        left outer join stocktransferitems dt on hd.company = dt.company and hd.branch = dt.branch and hd.docid = dt.docid
        left join (stocktransfers hd2 cross join stocktransferitems dt2) on (hd2.company = dt2.company and hd2.branch = dt2.branch and
                   hd2.docid = dt2.docid and dt2.company = dt.company and dt2.branch = dt.branch and dt2.u_u_linkno = hd.docno and
                   dt2.itemcode = dt.itemcode)
      where hd.company = pi_company and
            hd.branch  = pi_branch  and
            hd.docno   >= v_doc_fr  and
            hd.docno   <= v_doc_to  and
            hd.docdate >= pi_date_fr and
            hd.docdate <= pi_date_to and
            hd.u_u_tranpurpose = pi_transpurpose and
            hd.u_u_transstatus = pi_transstatus;

ELSEIF pi_transpurpose = 'RI' or pi_transpurpose = 'SI' THEN

    SELECT pi_transpurpose as Groupcode, hd.docno as docno, hd.docdate as docdate, dt.itemcode as itemcode, hd.u_u_bpcode as bpcode,
           hd.u_u_tobp as bpname, hd2.docno as refdocno, hd.u_u_transstatus as Transstatus, hd2.u_u_transstatus as Refstatus,
           IF(dt2.quantity IS NULL, 0, dt2.quantity) as QuantityOut, dt.quantity as QuantityIn,
           if(dt2.quantity is null, 0, dt2.quantity) as Quantity, hd2.docdate as Refdate, hd.fromwhscode as fromwarehouse, dt.whscode as towarehouse
      FROM stocktransfers hd
        left outer join stocktransferitems dt on hd.company = dt.company and hd.branch = dt.branch and hd.docid = dt.docid
        left join (stocktransfers hd2 cross join stocktransferitems dt2) on (hd2.company = dt2.company and hd2.branch = dt2.branch and
                   hd2.docid = dt2.docid and hd2.company = dt.company and hd2.branch = dt.branch and hd2.docno = dt.u_u_linkno and
                   dt2.itemcode = dt.itemcode)
      where hd.company = pi_company and
            hd.branch  = pi_branch  and
            hd.docno   >= v_doc_fr  and
            hd.docno   <= v_doc_to  and
            hd.docdate >= pi_date_fr and
            hd.docdate <= pi_date_to and
            hd.u_u_tranpurpose = pi_transpurpose and
            hd.u_u_transstatus = pi_transstatus;

ELSEIF pi_transpurpose = 'N' THEN

    SELECT pi_transpurpose as Groupcode, hd.docno as docno, hd.docdate as docdate, dt.itemcode as itemcode, hd.u_u_bpcode as bpcode,
           hd.u_u_tobp as bpname, '' as refdocno, hd.u_u_transstatus as Transstatus, '-' as Refstatus,
           0 as QuantityOut, dt.quantity as QuantityIn,
           0 as Quantity, '2010-01-01' as Refdate, hd.fromwhscode as fromwarehouse, dt.whscode as towarehouse
      FROM stocktransfers hd
        left outer join stocktransferitems dt on hd.company = dt.company and hd.branch = dt.branch and hd.docid = dt.docid
      where hd.company = pi_company and
            hd.branch  = pi_branch  and
            hd.docno   >= v_doc_fr  and
            hd.docno   <= v_doc_to  and
            hd.docdate >= pi_date_fr and
            hd.docdate <= pi_date_to and
            hd.u_u_tranpurpose = pi_transpurpose;

ELSE

    SELECT 'SO' as Groupcode, hd.docno as docno, hd.docdate as docdate, dt.itemcode as itemcode, hd.u_u_bpcode as bpcode,
           hd.u_u_tobp as bpname, hd2.docno as refdocno, hd.u_u_transstatus as Transstatus, hd2.u_u_transstatus as Refstatus,
           dt.quantity as QuantityOut, if(dt2.quantity is null, 0, dt2.quantity) as QuantityIn,
           if(dt2.quantity is null, 0, dt2.quantity) as Quantity, hd2.docdate as Refdate, hd.fromwhscode as fromwarehouse, dt.whscode as towarehouse
      FROM stocktransfers hd
        left outer join stocktransferitems dt on hd.company = dt.company and hd.branch = dt.branch and hd.docid = dt.docid
        left join (stocktransfers hd2 cross join stocktransferitems dt2) on (hd2.company = dt2.company and hd2.branch = dt2.branch and
                   hd2.docid = dt2.docid and dt2.company = dt.company and dt2.branch = dt.branch and dt2.u_u_linkno = hd.docno and
                   dt2.itemcode = dt.itemcode)
      where hd.company = pi_company and
            hd.branch  = pi_branch  and
            hd.docno   >= v_doc_fr  and
            hd.docno   <= v_doc_to  and
            hd.docdate >= pi_date_fr and
            hd.docdate <= pi_date_to and
            hd.u_u_tranpurpose = 'SO' and
            hd.u_u_transstatus = pi_transstatus

      UNION

    SELECT 'RO' as Groupcode, hd.docno as docno, hd.docdate as docdate, dt.itemcode as itemcode, hd.u_u_bpcode as bpcode,
           hd.u_u_tobp as bpname, hd2.docno as refdocno, hd.u_u_transstatus as Transstatus, hd2.u_u_transstatus as Refstatus,
           dt.quantity as QuantityOut, if(dt2.quantity is null, 0, dt2.quantity) as QuantityIn,
           if(dt2.quantity is null, 0, dt2.quantity) as Quantity, hd2.docdate as Refdate, hd.fromwhscode as fromwarehouse, dt.whscode as towarehouse
      FROM stocktransfers hd
        left outer join stocktransferitems dt on hd.company = dt.company and hd.branch = dt.branch and hd.docid = dt.docid
        left join (stocktransfers hd2 cross join stocktransferitems dt2) on (hd2.company = dt2.company and hd2.branch = dt2.branch and
                   hd2.docid = dt2.docid and dt2.company = dt.company and dt2.branch = dt.branch and dt2.u_u_linkno = hd.docno and
                   dt2.itemcode = dt.itemcode)
      where hd.company = pi_company and
            hd.branch  = pi_branch  and
            hd.docno   >= v_doc_fr  and
            hd.docno   <= v_doc_to  and
            hd.docdate >= pi_date_fr and
            hd.docdate <= pi_date_to and
            hd.u_u_tranpurpose = 'RO' and
            hd.u_u_transstatus = pi_transstatus

      UNION

    SELECT 'RI' as Groupcode, hd.docno as docno, hd.docdate as docdate, dt.itemcode as itemcode, hd.u_u_bpcode as bpcode,
           hd.u_u_tobp as bpname, hd2.docno as refdocno, hd.u_u_transstatus as Transstatus, hd2.u_u_transstatus as Refstatus,
           IF(dt2.quantity IS NULL, 0, dt2.quantity) as QuantityOut, dt.quantity as QuantityIn,
           if(dt2.quantity is null, 0, dt2.quantity) as Quantity, hd2.docdate as Refdate, hd.fromwhscode as fromwarehouse, dt.whscode as towarehouse
      FROM stocktransfers hd
        left outer join stocktransferitems dt on hd.company = dt.company and hd.branch = dt.branch and hd.docid = dt.docid
        left join (stocktransfers hd2 cross join stocktransferitems dt2) on (hd2.company = dt2.company and hd2.branch = dt2.branch and
                   hd2.docid = dt2.docid and hd2.company = dt.company and hd2.branch = dt.branch and hd2.docno = dt.u_u_linkno and
                   dt2.itemcode = dt.itemcode)
      where hd.company = pi_company and
            hd.branch  = pi_branch  and
            hd.docno   >= v_doc_fr  and
            hd.docno   <= v_doc_to  and
            hd.docdate >= pi_date_fr and
            hd.docdate <= pi_date_to and
            hd.u_u_tranpurpose = 'RI' and
            hd.u_u_transstatus = pi_transstatus

      UNION

    SELECT 'SI' as Groupcode, hd.docno as docno, hd.docdate as docdate, dt.itemcode as itemcode, hd.u_u_bpcode as bpcode,
           hd.u_u_tobp as bpname, hd2.docno as refdocno, hd.u_u_transstatus as Transstatus, hd2.u_u_transstatus as Refstatus,
           IF(dt2.quantity IS NULL, 0, dt2.quantity) as QuantityOut, dt.quantity as QuantityIn,
           if(dt2.quantity is null, 0, dt2.quantity) as Quantity, hd2.docdate as Refdate, hd.fromwhscode as fromwarehouse, dt.whscode as towarehouse
      FROM stocktransfers hd
        left outer join stocktransferitems dt on hd.company = dt.company and hd.branch = dt.branch and hd.docid = dt.docid
        left join (stocktransfers hd2 cross join stocktransferitems dt2) on (hd2.company = dt2.company and hd2.branch = dt2.branch and
                   hd2.docid = dt2.docid and hd2.company = dt.company and hd2.branch = dt.branch and hd2.docno = dt.u_u_linkno and
                   dt2.itemcode = dt.itemcode)
      where hd.company = pi_company and
            hd.branch  = pi_branch  and
            hd.docno   >= v_doc_fr  and
            hd.docno   <= v_doc_to  and
            hd.docdate >= pi_date_fr and
            hd.docdate <= pi_date_to and
            hd.u_u_tranpurpose = 'SI' and
            hd.u_u_transstatus = pi_transstatus

      UNION

    SELECT 'N' as Groupcode, hd.docno as docno, hd.docdate as docdate, dt.itemcode as itemcode, hd.u_u_bpcode as bpcode,
           hd.u_u_tobp as bpname, '' as refdocno, hd.u_u_transstatus as Transstatus, '-' as Refstatus,
           0 as QuantityOut, dt.quantity as QuantityIn,
           0 as Quantity, '2010-01-01' as Refdate, hd.fromwhscode as fromwarehouse, dt.whscode as towarehouse
      FROM stocktransfers hd
        left outer join stocktransferitems dt on hd.company = dt.company and hd.branch = dt.branch and hd.docid = dt.docid
      where hd.company = pi_company and
            hd.branch  = pi_branch  and
            hd.docno   >= v_doc_fr  and
            hd.docno   <= v_doc_to  and
            hd.docdate >= pi_date_fr and
            hd.docdate <= pi_date_to and
            hd.u_u_tranpurpose = 'N';


END IF;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `inv_pay`
--

DROP PROCEDURE IF EXISTS `inv_pay`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `inv_pay`(IN pi_company varchar(200),
                           IN pi_branch varchar(200),
                           IN pi_date1 varchar(200))
BEGIN
DROP TEMPORARY TABLE IF EXISTS `balances`;
CREATE TEMPORARY TABLE  `balances` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date1
        and c.docdate <= pi_date1
        group by a.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date1
        and c.docdate <= pi_date1
        group by d.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date1
        and c.docdate <= pi_date1
        group by a.DOCNO;
SELECT
       upper(cm.COMPANYNAME) as Company,
       pi_branch as Branch,
       UPPER(concat(pi_branch, ' - ', br.BRANCHNAME)) AS BranchName,
       date(pi_date1) as Date1,
       A2.docdate as 'SQ_Date', A1.docno as 'SO_No', A.docno as 'DR_No', A2.docno as 'SQ_No', B.whscode as 'Source',
       B.itemcode as 'Itemcode', B.itemdesc as 'Item_Description', B.quantity as 'Volume',
       I.uomsa as 'Unit', B.unitprice as 'Selling_Price', B.linetotal+b.vatamount as 'Sales',
       A.totalamount as 'Invoice_Amount', if(bl.BALANCE is null, 0 , bl.BALANCE) as 'Payment',
       A.totalamount - if(bl.BALANCE is null, 0 , bl.BALANCE) as 'Discrepancy',
       C1.docdate as 'DCR_Date', C3.bank as 'Bank', C3.checkno as 'Cheque_No', C3.checkdate as 'Cheque_Date',
       C3.amount as 'Cheque_Amount'
      FROM arinvoices A
         LEFT OUTER JOIN arinvoiceitems B ON A.COMPANY = B.COMPANY AND A.BRANCH = B.BRANCH AND A.DOCID = B.DOCID
         LEFT OUTER JOIN salesorders A1 ON A.COMPANY = A1.COMPANY AND A.BRANCH = A1.BRANCH AND B.BASEDOCNO = A1.DOCNO
         LEFT OUTER JOIN salesorderitems B2 ON A1.COMPANY = B2.COMPANY AND A1.BRANCH = B2.BRANCH AND A1.DOCID = B2.DOCID
         LEFT OUTER JOIN salesquotations A2 ON A.COMPANY = A2.COMPANY AND A.BRANCH = A2.BRANCH AND B2.BASEDOCNO = A2.DOCNO
         LEFT OUTER JOIN items I ON B.itemcode = i.itemcode
         LEFT OUTER JOIN collectionsinvoices C ON A.COMPANY = C.COMPANY AND A.BRANCH = C.BRANCH AND A.DOCNO = C.REFNO
         LEFT OUTER JOIN collections C1 ON A.COMPANY = C1.COMPANY AND A.BRANCH = C1.BRANCHCODE AND C.DOCNO = C1.DOCNO
                                        AND C1.pdc = 1
         LEFT OUTER JOIN collectionscheques C3 ON A.COMPANY = C1.COMPANY AND A.BRANCH = C1.BRANCHCODE AND C1.DOCNO = C3.DOCNO
                                               AND C3.checkdate >= pi_date1
         LEFT OUTER JOIN branches br ON br.BRANCHCODE = pi_branch
         LEFT OUTER JOIN companies cm ON cm.COMPANYCODE = pi_company
         LEFT OUTER JOIN balances bl ON A.COMPANY = bl.COMPANY AND a.BRANCH = bl.BRANCH AND a.DOCNO = bl.DOCNO
         WHERE A2.company = pi_company AND A2.branch = pi_branch AND A2.docdate <= pi_date1
              AND A.totalamount - if(bl.BALANCE is null, 0 , bl.BALANCE) <> 0
              AND a.DOCSTATUS NOT IN('D')
      GROUP BY A.docno, B.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `item_purchase_req_rpt`
--

DROP PROCEDURE IF EXISTS `item_purchase_req_rpt`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `item_purchase_req_rpt`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_warehouse VARCHAR(30),
                                      IN pi_item_fr VARCHAR(30), IN pi_item_to VARCHAR(30),
                                      IN pi_exzero INT,          IN pi_rpttype INT)
BEGIN

DECLARE v_item_fr VARCHAR(30);
DECLARE v_item_to VARCHAR(30);

 IF pi_item_fr IS NULL OR pi_item_fr = '' THEN
    SET v_item_fr = '';
 ELSE
    SET v_item_fr = pi_item_fr;
 END IF;

 IF pi_item_to IS NULL OR pi_item_to = '' THEN
    SET v_item_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZ';
 ELSE
    SET v_item_to = pi_item_to;
 END IF;


  DROP TEMPORARY TABLE IF EXISTS INVOICE_TEMP ;
  CREATE TEMPORARY TABLE `INVOICE_TEMP` (
    `ITEMCODE` VARCHAR(100) NOT NULL,
    `MTHQTY`   INT NOT NULL,
    `YEARQTY` INT NOT NULL,
    `QUANTITY` NUMERIC(20,6),
    PRIMARY KEY(`ITEMCODE`,`MTHQTY`,`YEARQTY`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS QUANTITY_TEMP ;
  CREATE TEMPORARY TABLE `QUANTITY_TEMP` (
    `ITEMCODE`     VARCHAR(100),
    `INSTOCKQTY`   NUMERIC(20,6),
    `COMMITEDQTY`  NUMERIC(20,6),
    `ORDEREDQTY`   NUMERIC(20,6),
    `AVAILABLEQTY` NUMERIC(20,6),
    `MONTHSTOCK`   INT,
    `AVGQTY`       NUMERIC(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

 INSERT INTO INVOICE_TEMP(ITEMCODE, MTHQTY, YEARQTY, QUANTITY)
   SELECT dt.itemcode, MONTH(hd.docdate), YEAR(hd.docdate), dt.quantity
FROM arinvoices hd, arinvoiceitems dt
Where hd.company = dt.company and
            hd.branch = dt.branch and
            hd.docid = dt.docid and
            dt.itemcode >= v_item_fr and
            dt.itemcode <= v_item_to and
            hd.docdate >= date_sub(cast(concat(Year(curdate()),'-',Month(curdate()),'-01') as date),Interval 365 Day) and
            hd.docdate < date_add(cast(concat(Year(curdate()),'-',Month(curdate()),'-01') as date), Interval 1 Month)
group by dt.itemcode, YEAR(hd.docdate), MONTH(hd.docdate);

IF pi_warehouse IS NULL or pi_warehouse = '' THEN
  INSERT INTO QUANTITY_TEMP(ITEMCODE, INSTOCKQTY, COMMITEDQTY, ORDEREDQTY, AVAILABLEQTY, MONTHSTOCK, AVGQTY)
    SELECT i.itemcode,
           IF(SUM(S.INSTOCKQTY) IS NULL, 0, SUM(S.INSTOCKQTY)),
           IF(SUM(S.COMMITEDQTY) IS NULL, 0, SUM(S.COMMITEDQTY)),
           IF(SUM(S.ORDEREDQTY) IS NULL, 0, SUM(S.ORDEREDQTY)),
           IF(SUM(S.AVAILABLEQTY) IS NULL, 0, SUM(S.AVAILABLEQTY)),
           i.u_u_monthstock,
           IF(SUM(iv.quantity) IS NULL, 0, SUM(iv.quantity) / 12)
    FROM items i
      LEFT OUTER JOIN stockcardsummary s on s.company = pi_company and s.branch = pi_branch and s.itemcode = i.itemcode
      LEFT OUTER JOIN INVOICE_TEMP iv on iv.itemcode = i.itemcode
    where i.itemcode >= v_item_fr and i.itemcode <= v_item_to and i.isinventory = 1
      GROUP BY i.itemcode;

ELSE
  INSERT INTO QUANTITY_TEMP(ITEMCODE, INSTOCKQTY, COMMITEDQTY, ORDEREDQTY, AVAILABLEQTY, MONTHSTOCK, AVGQTY)
    SELECT i.itemcode,
           IF(SUM(S.INSTOCKQTY) IS NULL, 0, SUM(S.INSTOCKQTY)),
           IF(SUM(S.COMMITEDQTY) IS NULL, 0, SUM(S.COMMITEDQTY)),
           IF(SUM(S.ORDEREDQTY) IS NULL, 0, SUM(S.ORDEREDQTY)),
           IF(SUM(S.AVAILABLEQTY) IS NULL, 0, SUM(S.AVAILABLEQTY)),
           i.u_u_monthstock,
           IF(SUM(iv.quantity) IS NULL, 0, SUM(iv.quantity) / 12)
    FROM items i
      LEFT OUTER JOIN stockcardsummary s on i.itemcode = s.itemcode and s.warehouse =pi_warehouse
      LEFT OUTER JOIN INVOICE_TEMP iv on i.itemcode = iv.itemcode
    where i.itemcode >= v_item_fr and i.itemcode <= v_item_to and i.isinventory = 1
    GROUP BY i.itemcode;

END IF;

  SELECT Q.ITEMCODE, Q.INSTOCKQTY, Q.COMMITEDQTY, Q.ORDEREDQTY, Q.AVAILABLEQTY, Q.MONTHSTOCK, Q.AVGQTY,
         I.QUANTITY, I.MTHQTY, I.YEARQTY
    FROM QUANTITY_TEMP Q
        LEFT OUTER JOIN INVOICE_TEMP I ON I.ITEMCODE = Q.ITEMCODE;



END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `journalvouchers_list`
--

DROP PROCEDURE IF EXISTS `journalvouchers_list`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `journalvouchers_list`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_doctype VARCHAR(30), IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30), IN pi_status VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(500) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `SLACCTNO` varchar(100) NULL default '',
    `SLACCTNAME` varchar(100) NULL default '',
    `SLDEBIT` NUMERIC(18,6) NULL default '0',
    `SLCREDIT` NUMERIC(18,6) NULL default '0',
    `DOCTYPE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `REFNO` varchar(100) NULL default '',
    `REMARKS` varchar(1000) NULL default '',
    `LINEID` varchar(100) NULL default '',
    `DOCSTATUS` varchar(100) NULL default '',
    `SLTYPE` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, SLACCTNO,
             SLACCTNAME, SLDEBIT, SLCREDIT, DOCTYPE, DOCNO, REFNO, REMARKS, LINEID, DOCSTATUS, SLTYPE)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE,
             b.ITEMNO, b.ITEMNAME,
             if (b.DEBIT is null, 0, b.DEBIT), if (b.CREDIT is null, 0, b.CREDIT),
             CASE
             WHEN b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANKACCTNO
             WHEN b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             b.SUBSIDIARY
             ELSE '' END,
             CASE
             WHEN b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANK
             WHEN b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             q.SUBSIDIARYNAME
             ELSE '' END,
             if (b.DEBIT is null, 0, b.DEBIT),
             if (b.CREDIT is null, 0, b.CREDIT) ,
             '', a.DOCNO, b.REFERENCE3, a.REMARKS, b.LINEID,
             IF(a.SBO_POST_FLAG<>0, 'POSTED', 'UNPOSTED'),
             CASE WHEN b.ITEMTYPE = 'C' THEN ' - CUSTOMER' WHEN b.ITEMTYPE = 'S' THEN ' - SUPPLIER' ELSE '' END
             FROM journalvouchers a
             LEFT OUTER JOIN journalvoucheritems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             LEFT OUTER JOIN chartofaccountsubsidiaries q on b.SUBSIDIARY = q.SUBSIDIARY
             where a.COMPANY = pi_company and a.BRANCH = pi_branch
             and a.DOCDATE BETWEEN pi_date1 AND pi_date2
             AND (pi_doctype='' or (pi_doctype<>'' AND a.DOCGROUP = pi_doctype));
SELECT upper(c.COMPANYNAME) as COMPANY,
pi_branch as BRANCH,
UPPER(CONCAT(pi_branch, ' - ', b.BRANCHNAME)) AS BRANCHNAME,
Date(a.DOCDATE) as POSTINGDDATE,
Date(a.DUEDATE) as DUEDATE,
DATE(pi_date1) AS DATE1,
DATE(pi_date2) DATE2,
IF(pi_doctype = '', 'ALL', UPPER(d.DOCGROUPNAME)) as DOCTYPENAME,
a.DOCNO,
a.DOCTYPE,
a.REFNO,
a.GLACCTNO AS ACCTCODE,
a.GLACCTNAME AS ACCTNAME,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS DEBIT,
if (a.GLCREDIT is null, 0, a.GLCREDIT) AS CREDIT,
a.SLACCTNO AS SLACCTCODE,
a.SLACCTNAME AS SLACCTNAME,
if (a.SLDEBIT is null, 0, a.SLDEBIT) AS SLDEBIT,
if (a.SLCREDIT is null, 0, a.SLCREDIT) AS SLCREDIT,
UPPER(a.REMARKS) AS REMARKS,
a.DOCSTATUS,
a.SLTYPE
FROM je a
LEFT OUTER JOIN branches b on b.BRANCHCODE = pi_branch
LEFT OUTER JOIN companies c on c.COMPANYCODE = pi_company
LEFT OUTER JOIN docgroups d on d.DOCGROUP = pi_doctype
WHERE (pi_status='' or (pi_status<>'' AND a.DOCSTATUS = pi_status));
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `journal_entries`
--

DROP PROCEDURE IF EXISTS `journal_entries`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `journal_entries`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(500) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `SLACCTNO` varchar(100) NULL default '',
    `SLACCTNAME` varchar(100) NULL default '',
    `SLDEBIT` NUMERIC(18,6) NULL default '0',
    `SLCREDIT` NUMERIC(18,6) NULL default '0',
    `DOCTYPE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `REFNO` varchar(100) NULL default '',
    `REMARKS` varchar(500) NULL default '',
    `LINEID` varchar(100) NULL default '',
    `DOCSTATUS` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, DOCTYPE, DOCNO, REFNO, REMARKS, LINEID, DOCSTATUS)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE,
             b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, b.GLDEBIT), if (b.GLCREDIT is null, 0, b.GLCREDIT),
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANKACCTNO
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             b.SUBSIDIARY
             ELSE b.SLACCTNO END,
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANK
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             q.SUBSIDIARYNAME
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO = '' THEN
             IF(b.REMARKS = a.REMARKS, '', concat(b.REMARKS, ' ', round(b.GLDEBIT - b.GLCREDIT, 2)))
             ELSE if (b.REFERENCE2 = '' , concat(b.SLACCTNAME, ' ', b.REFERENCE1), concat(b.SLACCTNAME, ' ', b.REFERENCE2)) END,
             CASE
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             ELSE (if (b.SLDEBIT is null, 0, b.SLDEBIT)) END,
             CASE
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             ELSE (if (b.SLCREDIT is null, 0, b.SLCREDIT)) END,
             b.DOCTYPE, a.DOCNO, b.REFERENCE1, a.REMARKS, b.LINEID,
             IF(a.SBO_POST_FLAG<>0, 'POSTED', 'UNPOSTED')
             FROM journalentries a
             LEFT OUTER JOIN journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             LEFT OUTER JOIN chartofaccountsubsidiaries q on b.SUBSIDIARY = q.SUBSIDIARY
             where a.COMPANY = pi_company and a.BRANCH = pi_branch
             and a.DOCID = pi_docno;
SELECT upper(c.COMPANYNAME) as COMPANY,
pi_branch as BRANCH,
UPPER(CONCAT(pi_branch, ' - ', b.BRANCHNAME)) AS BRANCHNAME,
Date(a.DOCDATE) as POSTINGDDATE,
Date(a.DUEDATE) as DUEDATE,
a.DOCNO,
a.DOCTYPE,
a.REFNO,
a.GLACCTNO AS ACCTCODE,
a.GLACCTNAME AS ACCTNAME,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS DEBIT,
if (a.GLCREDIT is null, 0, a.GLCREDIT) AS CREDIT,
a.SLACCTNO AS SLACCTCODE,
a.SLACCTNAME AS SLACCTNAME,
if (a.SLDEBIT is null, 0, a.SLDEBIT) AS SLDEBIT,
if (a.SLCREDIT is null, 0, a.SLCREDIT) AS SLCREDIT,
a.REMARKS,
a.DOCSTATUS
FROM je a
LEFT OUTER JOIN branches b on b.BRANCHCODE = pi_branch
LEFT OUTER JOIN companies c on c.COMPANYCODE = pi_company
Order by a.GLCREDIT, a.GLDEBIT, a.GLACCTNO desc;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `journal_entries2`
--

DROP PROCEDURE IF EXISTS `journal_entries2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `journal_entries2`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(500) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `SLACCTNO` varchar(100) NULL default '',
    `SLACCTNAME` varchar(100) NULL default '',
    `SLDEBIT` NUMERIC(18,6) NULL default '0',
    `SLCREDIT` NUMERIC(18,6) NULL default '0',
    `DOCTYPE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `REFNO` varchar(100) NULL default '',
    `REMARKS` varchar(500) NULL default '',
    `LINEID` varchar(100) NULL default '',
    `DOCSTATUS` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, DOCTYPE, DOCNO, REFNO, REMARKS, LINEID, DOCSTATUS)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE,
             b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, b.GLDEBIT), if (b.GLCREDIT is null, 0, b.GLCREDIT),
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' AND b.DEPARTMENT = '' THEN
             b.BANKACCTNO
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' AND b.DEPARTMENT = '' THEN
             b.SUBSIDIARY
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO = '' AND b.DEPARTMENT <> '' THEN
             dp.DEPARTMENT
             ELSE b.SLACCTNO END,
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' AND b.DEPARTMENT = '' THEN
             b.BANK
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' AND b.DEPARTMENT = '' THEN
             q.SUBSIDIARYNAME
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO = '' AND b.DEPARTMENT <> '' THEN
             dp.DEPARTMENTNAME
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO = '' THEN
             IF(b.REMARKS = a.REMARKS, '', concat(b.REMARKS, ' ', round(b.GLDEBIT - b.GLCREDIT, 2)))
             ELSE if (b.REFERENCE2 = '' , concat(b.SLACCTNAME, ' ', b.REFERENCE1), concat(b.SLACCTNAME, ' ', b.REFERENCE2)) END,
             CASE
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' AND b.DEPARTMENT = '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' AND b.DEPARTMENT = '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO = '' AND b.DEPARTMENT <> '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             ELSE (if (b.SLDEBIT is null, 0, b.SLDEBIT)) END,
             CASE
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' AND b.DEPARTMENT = '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' AND b.DEPARTMENT = '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO = '' AND b.DEPARTMENT <> '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             ELSE (if (b.SLCREDIT is null, 0, b.SLCREDIT)) END,
             b.DOCTYPE, a.DOCNO, b.REFERENCE1, a.REMARKS, b.LINEID,
             IF(a.SBO_POST_FLAG<>0, 'POSTED', 'UNPOSTED')
             FROM journalentries a
             LEFT OUTER JOIN journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             LEFT OUTER JOIN chartofaccountsubsidiaries q on b.SUBSIDIARY = q.SUBSIDIARY
             LEFT OUTER JOIN departments dp on b.DEPARTMENT = dp.DEPARTMENT
             where a.COMPANY = pi_company and a.BRANCH = pi_branch
             and a.DOCID = pi_docno;
SELECT upper(c.COMPANYNAME) as COMPANY,
pi_branch as BRANCH,
UPPER(CONCAT(pi_branch, ' - ', b.BRANCHNAME)) AS BRANCHNAME,
Date(a.DOCDATE) as POSTINGDDATE,
Date(a.DUEDATE) as DUEDATE,
a.DOCNO,
a.DOCTYPE,
a.REFNO,
a.GLACCTNO AS ACCTCODE,
a.GLACCTNAME AS ACCTNAME,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS DEBIT,
if (a.GLCREDIT is null, 0, a.GLCREDIT) AS CREDIT,
a.SLACCTNO AS SLACCTCODE,
a.SLACCTNAME AS SLACCTNAME,
if (a.SLDEBIT is null, 0, a.SLDEBIT) AS SLDEBIT,
if (a.SLCREDIT is null, 0, a.SLCREDIT) AS SLCREDIT,
a.REMARKS,
a.DOCSTATUS
FROM je a
LEFT OUTER JOIN branches b on b.BRANCHCODE = pi_branch
LEFT OUTER JOIN companies c on c.COMPANYCODE = pi_company
Order by a.GLCREDIT, a.GLDEBIT, a.GLACCTNO desc;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `journal_vouchers`
--

DROP PROCEDURE IF EXISTS `journal_vouchers`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `journal_vouchers`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(500) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `SLACCTNO` varchar(100) NULL default '',
    `SLACCTNAME` varchar(100) NULL default '',
    `SLDEBIT` NUMERIC(18,6) NULL default '0',
    `SLCREDIT` NUMERIC(18,6) NULL default '0',
    `DOCTYPE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `REFNO` varchar(100) NULL default '',
    `REMARKS` varchar(500) NULL default '',
    `LINEID` varchar(100) NULL default '',
    `DOCSTATUS` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, DOCTYPE, DOCNO, REFNO, REMARKS, LINEID, DOCSTATUS)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE,
             b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, b.GLDEBIT), if (b.GLCREDIT is null, 0, b.GLCREDIT),
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANKACCTNO
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             b.SUBSIDIARY
             ELSE b.SLACCTNO END,
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANK
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             q.SUBSIDIARYNAME
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO = '' THEN
             IF(b.REMARKS = a.REMARKS, '', concat(b.REMARKS, ' ', round(b.GLDEBIT - b.GLCREDIT, 2)))
             ELSE if (b.REFERENCE2 = '' , concat(b.SLACCTNAME, ' ', b.REFERENCE1), concat(b.SLACCTNAME, ' ', b.REFERENCE2)) END,
             CASE
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             ELSE (if (b.SLDEBIT is null, 0, b.SLDEBIT)) END,
             CASE
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             ELSE (if (b.SLCREDIT is null, 0, b.SLCREDIT)) END,
             b.DOCTYPE, a.DOCNO, b.REFERENCE1, a.REMARKS, b.LINEID,
             IF(a.SBO_POST_FLAG<>0, 'POSTED', 'UNPOSTED')
             FROM journalentries a
             LEFT OUTER JOIN journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             LEFT OUTER JOIN chartofaccountsubsidiaries q on b.SUBSIDIARY = q.SUBSIDIARY
             where a.COMPANY = pi_company and a.BRANCH = pi_branch
             and a.DOCNO = pi_docno;
SELECT upper(c.COMPANYNAME) as COMPANY,
pi_branch as BRANCH,
UPPER(CONCAT(pi_branch, ' - ', b.BRANCHNAME)) AS BRANCHNAME,
Date(a.DOCDATE) as POSTINGDDATE,
Date(a.DUEDATE) as DUEDATE,
a.DOCNO,
a.DOCTYPE,
a.REFNO,
a.GLACCTNO AS ACCTCODE,
a.GLACCTNAME AS ACCTNAME,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS DEBIT,
if (a.GLCREDIT is null, 0, a.GLCREDIT) AS CREDIT,
a.SLACCTNO AS SLACCTCODE,
a.SLACCTNAME AS SLACCTNAME,
if (a.SLDEBIT is null, 0, a.SLDEBIT) AS SLDEBIT,
if (a.SLCREDIT is null, 0, a.SLCREDIT) AS SLCREDIT,
a.REMARKS,
a.DOCSTATUS
FROM je a
LEFT OUTER JOIN branches b on b.BRANCHCODE = pi_branch
LEFT OUTER JOIN companies c on c.COMPANYCODE = pi_company
Order by a.GLCREDIT, a.GLDEBIT, a.GLACCTNO desc;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `lube_sales`
--

DROP PROCEDURE IF EXISTS `lube_sales`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `lube_sales`(IN pi_company VARCHAR(30),
                                    IN pi_branch VARCHAR(30),
                                    IN pi_date1 VARCHAR(30),
                                    IN pi_date2 VARCHAR(30),
                                    IN pi_product VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `UGT` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO UGT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.ITEMCODE, sum(a.QTY*-1) as QTY,
        sum((a.QTY*ROUND(a.COSTPRICE, 2))*-1) as COST, a.warehouse AS WAREHOUSE
        from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.refdate > pi_date2
        AND a.warehouse in ('UGT-LUBS')
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        group by a.REFDATE, a.ITEMCODE, a.warehouse;
  INSERT
    INTO UGT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REF2DATE as REFDATE,a.ITEMCODE,
        sum(a.QTY) as QTY, sum(ROUND(a.STOCKVALUE, 2)) as COST, a.warehouse AS WAREHOUSE
        from stockcardissuance a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.REF2DATE > pi_date2
        AND a.warehouse in ('UGT-LUBS')
        AND REF2TYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        group by a.REF2DATE, a.ITEMCODE, a.warehouse;
  INSERT
    INTO UGT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.ITEMCODE,
        sum(a.QTY) as QTY, sum(ROUND(a.STOCKVALUE, 2)) as COST, a.warehouse AS WAREHOUSE
        from stockcardcosting a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
        AND a.warehouse in ('UGT-LUBS')
        group by a.REFDATE, a.ITEMCODE, a.warehouse;
CREATE TEMPORARY TABLE  `UGT_SUM` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO UGT_SUM (COMPANY,BRANCH,ITEMCODE,QTY)
    Select COMPANY,BRANCH,ITEMCODE,Sum(QTY) From UGT Group by ITEMCODE;
CREATE TEMPORARY TABLE  `FORECOURT` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO FORECOURT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.ITEMCODE, sum(a.QTY*-1) as QTY,
        sum((a.QTY*ROUND(a.COSTPRICE, 2))*-1) as COST, a.warehouse AS WAREHOUSE
        from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.refdate > pi_date2
        AND a.warehouse in ('FORECOURT')
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        group by a.REFDATE, a.ITEMCODE, a.warehouse;
  INSERT
    INTO FORECOURT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REF2DATE as REFDATE,a.ITEMCODE,
        sum(a.QTY) as QTY, sum(ROUND(a.STOCKVALUE, 2)) as COST, a.warehouse AS WAREHOUSE
        from stockcardissuance a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.REF2DATE > pi_date2
        AND a.warehouse in ('FORECOURT')
        AND REF2TYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        group by a.REF2DATE, a.ITEMCODE, a.warehouse;
  INSERT
    INTO FORECOURT (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.ITEMCODE,
        sum(a.QTY) as QTY, sum(ROUND(a.STOCKVALUE, 2)) as COST, a.warehouse AS WAREHOUSE
        from stockcardcosting a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
        AND a.warehouse in ('FORECOURT')
        group by a.REFDATE, a.ITEMCODE, a.warehouse;
CREATE TEMPORARY TABLE  `FORECOURT_SUM` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO FORECOURT_SUM (COMPANY,BRANCH,ITEMCODE,QTY)
    Select COMPANY,BRANCH,ITEMCODE,Sum(QTY) From FORECOURT Group by ITEMCODE;
CREATE TEMPORARY TABLE  `GRPO` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO GRPO (COMPANY,BRANCH,ITEMCODE,QTY)
    Select a.COMPANY,a.BRANCH,a.ITEMCODE,Sum(QTY) from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
             AND a.refdate between pi_date1 and pi_date2
             AND a.warehouse in ('UGT-LUBS')
             AND REFTYPE IN ('PDN')
    Group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `STO` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO STO (COMPANY,BRANCH,ITEMCODE,QTY)
    Select a.COMPANY,a.BRANCH,a.ITEMCODE,Sum(QTY*-1) from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
             AND a.refdate between pi_date1 and pi_date2
             AND a.warehouse in ('UGT-LUBS')
             AND REFTYPE IN ('GT-')
    Group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `STI` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO STI (COMPANY,BRANCH,ITEMCODE,QTY)
    Select a.COMPANY,a.BRANCH,a.ITEMCODE,Sum(QTY) from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
             AND a.refdate between pi_date1 and pi_date2
             AND a.warehouse in ('FORECOURT')
             AND REFTYPE IN ('GT+')
    Group by a.ITEMCODE;
CREATE TEMPORARY TABLE  `CASH_SALES` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `UNITPRICE` NUMERIC(18,6) NULL default '0',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO CASH_SALES (COMPANY,BRANCH,ITEMCODE,QTY,UNITPRICE,AMOUNT)
    Select a.company, a.branch, b.itemcode, sum(b.quantity), sum(b.linetotal)/sum(b.quantity), sum(b.linetotal)
       from arinvoices a
            left outer join arinvoiceitems b on a.DOCID = b.DOCID and a.COMPANY = b.COMPANY and a.BRANCH = b.BRANCH
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
             AND a.docdate between pi_date1 and pi_date2
             AND b.whscode in ('FORECOURT')
             AND a.trxtype = 'POS'
             AND a.docstatus not in('D')
    Group by a.docno, b.itemcode;
CREATE TEMPORARY TABLE  `CHARGE_SALES` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `UNITPRICE` NUMERIC(18,6) NULL default '0',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO CHARGE_SALES (COMPANY,BRANCH,ITEMCODE,QTY,UNITPRICE,AMOUNT)
    Select a.company, a.branch, b.itemcode, sum(b.quantity), sum(b.linetotal)/sum(b.quantity), sum(b.linetotal)
       from arinvoices a
            left outer join arinvoiceitems b on a.DOCID = b.DOCID and a.COMPANY = b.COMPANY and a.BRANCH = b.BRANCH
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
             AND a.docdate between pi_date1 and pi_date2
             AND b.whscode in ('FORECOURT')
             AND a.trxtype not in('POS')
             AND a.docstatus not in('D')
    Group by a.docno, b.itemcode;
Select
      pi_company as Company,
      upper(co.companyname) as CompanyName,
      upper(concat('(',co.companytype, ' Group)')) as CompanyType,
      pi_branch as Branch,
      upper(concat(pi_branch,' - ',br.BRANCHNAME)) as BranchName,
      date(pi_date1) as date1,
      date(pi_date2) as date2,
      if(pi_product = '', 'ALL', CONCAT(i.ItemCode,' - ', i.ItemDesc)) AS H_Item,
      i.ItemCode,
      i.ItemDesc,
      (if(ugt.QTY is null, 0, ugt.QTY) + if(sto.QTY is null, 0, sto.QTY)) as OB_UGT,
      if(gr.QTY is null, 0, gr.QTY) as GRPO,
      if(sto.QTY is null, 0, sto.QTY) as STO,
      if(ugt.QTY is null, 0, ugt.QTY) as UGT_Close,
      (if(fc.QTY is null, 0, fc.QTY) + if(cs.QTY is null, 0, cs.QTY)) + if(cs2.QTY is null, 0, cs2.QTY) as OB_FC,
      if(sti.QTY is null, 0, sti.QTY) as STI,
      if(cs.QTY is null, 0, cs.QTY) as Sold,
      if(cs.UNITPRICE is null, 0, cs.UNITPRICE) as UnitPrice,
      if(cs.AMOUNT is null, 0, cs.AMOUNT) as Amount,
      if(cs2.QTY is null, 0, cs2.QTY) as Sold2,
      if(cs2.UNITPRICE is null, 0, cs2.UNITPRICE) as UnitPrice2,
      if(cs2.AMOUNT is null, 0, cs2.AMOUNT) as Amount2,
      if(fc.QTY is null, 0, fc.QTY) as FC_Close
      From items i
          Left outer join UGT_SUM ugt on i.itemcode = ugt.ITEMCODE
          Left outer join FORECOURT_SUM fc on i.itemcode = fc.ITEMCODE
          Left outer join GRPO gr on i.itemcode = gr.ITEMCODE
          Left outer join STO sto on i.itemcode = sto.ITEMCODE
          Left outer join STI sti on i.itemcode = sti.ITEMCODE
          Left outer join CASH_SALES cs on i.itemcode = cs.ITEMCODE
          Left outer join CHARGE_SALES cs2 on i.itemcode = cs2.ITEMCODE
          Left outer join branches br ON br.BRANCHCODE = pi_branch
          Left outer join companies co on co.companycode = pi_company
Where (ugt.QTY <> 0 or gr.QTY <> 0 or sto.QTY <> 0
   or fc.QTY <> 0 or sti.QTY <> 0 or cs.QTY <> 0 or cs2.QTY <> 0)
   and (pi_product='' or (pi_product<>'' AND i.ItemCode = pi_product))
Group by i.ItemCode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `nr_aging`
--

DROP PROCEDURE IF EXISTS `nr_aging`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `nr_aging`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_loantype VARCHAR(30), IN pi_date VARCHAR(10), IN pi_zone VARCHAR(30), IN pi_fgroup VARCHAR(30), IN pi_status VARCHAR(30), IN pi_wcrbal VARCHAR(30),IN pi_info VARCHAR(30))
BEGIN
  DECLARE v_companyname VARCHAR(100);
  DECLARE v_branchname VARCHAR(100);
  DECLARE v_maxdepodays INT;
  DECLARE v_advms DATE;
  DECLARE v_advme DATE;
  DECLARE v_30ms DATE;
  DECLARE v_60ms DATE;
  DECLARE v_90ms DATE;
  DECLARE v_30me DATE;
  DECLARE v_60me DATE;
  DECLARE v_90me DATE;
   DECLARE filter varchar(30);
   IF PI_status='UPDATED' THEN SET filter = '* UPDATED ACCOUNTS ONLY *';
   ELSEIF PI_status='PASTDUE' THEN SET filter = '* PASTDUE ACCOUNTS ONLY *';
   ELSEIF PI_status='MATURED' THEN SET filter = '* MATURED ACCOUNTS ONLY *';
   ELSE SET filter = '';
   END IF;
  SET v_30ms = date(concat(substring(pi_date,1,7),'-01'));
  SET v_advms = v_30ms + interval 1 month;
  SET v_60ms = v_30ms - interval 1 month;
  SET v_90ms = v_30ms - interval 2 month;
  SET v_30me = last_day(date(pi_date));
  SET v_advme = v_30me + interval 1 month;
  SET v_60me = v_30me - interval 1 month;
  SET v_90me = v_30me - interval 2 month;
  CREATE TEMPORARY TABLE `openaccounts` (
    `ACCTNO` varchar(30) NOT NULL default '',
    `RECNO` INT NOT NULL default '0',
    `PNBAL30` NUMERIC(18,6) NOT NULL default '0',
    `PNBAL60` NUMERIC(18,6) NOT NULL default '0',
    `PNBAL90` NUMERIC(18,6) NOT NULL default '0',
    `RECNO30` INT NOT NULL default '0',
    `RECNO60` INT NOT NULL default '0',
    `RECNO90` INT NOT NULL default '0',
    PRIMARY KEY  (`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  CREATE TEMPORARY TABLE `accountbalances` (
    `ACCTNO` varchar(30) NOT NULL default '',
    `PAIDDPAMOUNT` NUMERIC(18,6) NOT NULL default '0',
    `DOWN_BAL` NUMERIC(18,6) NOT NULL default '0',
    `ADVANCEAMOUNT` NUMERIC(18,6) NOT NULL default '0',
    `PNBALANCE` NUMERIC(18,6) NOT NULL default '0',
    `DUEAMOUNT` NUMERIC(18,6) NOT NULL default '0',
    `D30` NUMERIC(18,6) NOT NULL default '0',
    `D60` NUMERIC(18,6) NOT NULL default '0',
    `D90` NUMERIC(18,6) NOT NULL default '0',
    PRIMARY KEY  (`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  CREATE TEMPORARY TABLE  `pdcpayments` (
    `COMPANY` varchar(30) NOT NULL default '',
    `BRANCH` varchar(30) NOT NULL default '',
    `ACCTNO` varchar(30) NOT NULL default '',
    `PDCAMOUNT` NUMERIC(18,6) NOT NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  CREATE TEMPORARY TABLE  `vds` (
    `ACCTNO` varchar(30) NOT NULL default '',
    `DOCDATE` DATE NULL,
    `HIDEDUEAMT` INT NULL,
    PRIMARY KEY  (`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  CREATE TEMPORARY TABLE  `vds2` (
    `ACCTNO` varchar(30) NOT NULL default '',
    `DOCDATE` DATE NULL,
    `HIDEDUEAMT` INT NULL,
    `STATUS` varchar(10) NULL,
    `CLOSEDDATE` DATE NULL,
    PRIMARY KEY  (`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
    
  SELECT a.companyname, upper(b.branchname), a.maxdepodays
    into v_companyname, v_branchname,v_maxdepodays
    from companies a, branches b
    where a.companycode = b.companycode and b.companycode = pi_company and b.branchcode = pi_branch;
  INSERT INTO openaccounts (ACCTNO,RECNO,PNBAL30,PNBAL60,PNBAL90,RECNO30,RECNO60,RECNO90)
    SELECT a.acctno,
            sum(if(c.duedate <= v_30me,1,0)),
            a.ma * sum(if(c.duedate between v_30ms and v_30me,1,0)),
            a.ma * sum(if(c.duedate between v_60ms and v_60me,1,0)),
            a.ma * sum(if(c.duedate <= v_90me,1,0)),
            max(if(c.duedate between v_30ms and v_30me,c.recno,0)),
            max(if(c.duedate between v_60ms and v_60me,c.recno,0)),
            max(if(c.duedate <= v_90me,c.recno,0))
    FROM accounts a
      left outer join cncconsoitems c on c.company = a.company and c.branch = a.branch and c.acctno = a.acctno and c.rectype = 'A'
      inner join customers b on b.company = a.company and b.branch = a.branch and b.custno = a.custno
    where a.releaseddate <= v_30me and (a.closeddate is null or a.closeddate > v_30me or a.downpayment > a.paiddpamount)
      and (pi_loantype='' or (pi_loantype<>'' and a.loantype=pi_loantype))
    group by a.acctno;
 
  INSERT INTO accountbalances(ACCTNO,PAIDDPAMOUNT,DOWN_BAL,ADVANCEAMOUNT,PNBALANCE,DUEAMOUNT,D30,D60,D90)
    SELECT
      openaccounts.ACCTNO,
      sum(if(notescollections.rectype='DP' and notescollections.allocdate <= v_30me,notescollections.amount + notescollections.rebate,0)),
      accounts.DOWNPAYMENT - sum(if(notescollections.rectype='DP' and notescollections.allocdate <= v_30me,notescollections.amount + notescollections.rebate,0)),
      SUM(if(notescollections.rectype='A' and notescollections.allocdate > v_30me,notescollections.amount + notescollections.rebate,0)),
      accounts.pnamount - sum(if(notescollections.rectype='A' and notescollections.allocdate <= v_30me,notescollections.amount + notescollections.rebate,0)),
      if(accounts.fdd <= v_advme,if(openaccounts.recno < accounts.TERM,accounts.ma,0) - SUM(if(notescollections.recno = (openaccounts.recno+1) and notescollections.rectype='A' and notescollections.allocdate <= v_30me,notescollections.amount + notescollections.rebate,0)),0),
      if(openaccounts.pnbal30 > 0, openaccounts.pnbal30 - SUM(if(notescollections.recno = openaccounts.recno30 and notescollections.rectype='A' and notescollections.allocdate <= v_30me,notescollections.amount + notescollections.rebate,0)),0),
      if(openaccounts.pnbal60 > 0, openaccounts.pnbal60 - SUM(if(notescollections.recno = openaccounts.recno60 and notescollections.rectype='A' and notescollections.allocdate <= v_30me,notescollections.amount + notescollections.rebate,0)),0),
      if(openaccounts.pnbal90 > 0, openaccounts.pnbal90 - SUM(if(notescollections.recno <= openaccounts.recno90 and notescollections.rectype='A' and notescollections.allocdate <= v_30me,notescollections.amount + notescollections.rebate,0)),0)
      FROM openaccounts
        INNER JOIN accounts ON accounts.COMPANY = pi_company and accounts.Branch = pi_branch and accounts.acctno = openaccounts.acctno
        LEFT OUTER JOIN notescollections ON notescollections.company = pi_company and notescollections.branch = pi_branch and notescollections.acctno = openaccounts.acctno and notescollections.rectype in ('A','DP')
     GROUP BY openaccounts.ACCTNO;
    
  INSERT
    INTO pdcpayments (COMPANY,BRANCH,ACCTNO,PDCAMOUNT)
      SELECT a.company,a.branch,a.refno, sum(a.rebate + a.amount) as pdcamount
        from collectionsinvoices a, collectionscheques b, collections c
        where b.company = a.company and b.branch = a.branch
        and b.docno = a.docno
        and b.company = c.company
        and b.branch = c.branchcode
        and b.docno = c.docno
        and c.pdc=1
        and a.company = pi_company and a.branch = pi_branch
        and b.checkdate <= v_advme
        and (c.valuedate > v_advme or  c.valuedate = '0000-00-00')
        group by a.refno;
    
  INSERT into vds (ACCTNO,DOCDATE,HIDEDUEAMT)
    select a.acctno,max(a.date),if(datediff(v_30me,max(a.date)) between 1 and v_maxdepodays,1,0) from voluntarydeposits a, accounts b
          where b.company = a.company and b.branch = a.branch and b.acctno = a.acctno and (pi_loantype='' or (pi_loantype<>'' and b.loantype=pi_loantype)) and a.company = pi_company and a.branch = pi_branch and a.date <= v_30me group by acctno;
  INSERT into vds2 (ACCTNO,DOCDATE,HIDEDUEAMT,STATUS,CLOSEDDATE)
  SELECT c.acctno, c.docdate, c.hidedueamt, a.status, (case when a.status='FC' then b.date when a.status='R' then a.redemptiondate else null end) as closedate from vds c,voluntarydeposits a
      left outer join accountloanforclosure b on b.company = a.company and b.branch = a.branch and b.VOLUNTARYDEPOSITNO = a.docno
    where a.company = pi_company and a.branch = pi_branch and a.date <= v_30me and a.acctno = c.acctno and a.date = c.docdate;
  SELECT upper(accounts.COMPANY) AS COMPANY,
      upper(accounts.BRANCH) AS BRANCH,
      v_branchname AS BRANCHNAME,
      upper(loantypes.LOANTYPENAME) AS LOANTYPENAME,
      accountslist.ADDRESS as STREET,
      accounts.ITEMCODE,
      accounts.DOWNPAYMENT,
      accountbalances.PAIDDPAMOUNT,
      if(vds2.Status = 'O',1,0) as 'v1',
      if(vds2.Status = 'R' and  vds2.closeddate > v_30me, 1,0)as 'v2',
      if(vds2.Status = 'FC' and vds2.closeddate > v_30me, 1,0)as 'v3',
      case when accounts.TERM between 1 and 5 then 's' else 'l' end as 'sorl',
      accounts.acctno as acctno,
      accountbalances.ADVANCEAMOUNT,
      pi_date AS DUEdate,
      accounts.pnamount + accounts.downpayment AS 'pn&down',
      accounts.CUSTNO,
      CONCAT(replace(customers.LASTNAME,' ',''),', ', replace(customers.FIRSTNAME,' ','')) AS name,
      accounts.REFNO,
      accounts.TERM,
      accounts.FDD,
      accountbalances.PNBALANCE,
      if(vds2.hidedueamt=1,0,if(accountbalances.PNBALANCE<0,accountbalances.PNBALANCE, accountbalances.DUEAMOUNT)) AS DUEAMOUNT,
      if(accountbalances.d30>0,accountbalances.d30,0) AS '30 days', if(accountbalances.d60>0,accountbalances.d60,0) AS '60 days',  if(accountbalances.d90>0,accountbalances.d90,0) AS '90 days and below',
      accounts.REBATE,
      accountbalances.DOWN_BAL,
      if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'CHECK',
      vds2.DOCDATE as DATE,
      concat(upper(u_zones.code), ' - ',upper(u_zones.u_zonedesc)) as Zone,
      upper(u_zones.code) as zonedesc,
      upper(u_fgroups.U_FGROUPNAME) as fcompany,
      v_30me as 1month, v_60me as 2month, v_90me as 3month,upper(companies.companyname) as cname,
      upper(if(pi_wcrbal='Y','- w/ credit balance','- w/o credit balance')) as wcbal,pi_info as info, filter as filter
    FROM openaccounts, accountbalances, accounts
      LEFT OUTER JOIN accountslist ON accounts.BRANCH = accountslist.BRANCHCODE AND accounts.ACCTNO = accountslist.ACCTNO
      LEFT OUTER JOIN u_fgroups ON accounts.U_FGROUP = u_fgroups.CODE
      left outer join u_zones on accounts.u_zone = u_zones.code
      LEFT OUTER JOIN customers ON accounts.CUSTNO = customers.CUSTNO AND accounts.BRANCH = customers.BRANCH AND accounts.COMPANY = customers.COMPANY
      LEFT OUTER JOIN loantypes ON accounts.LOANTYPE = loantypes.LOANTYPE
      LEFT OUTER JOIN companies on accounts.company = companies.companycode
      LEFT OUTER JOIN notescollections ON notescollections.company = accounts.company and notescollections.branch = accounts.branch and notescollections.acctno = accounts.acctno and notescollections.rectype in ('A','DP')
      LEFT OUTER JOIN vds2 ON accounts.ACCTNO = vds2.ACCTNO
      LEFT OUTER JOIN pdcpayments ON accounts.COMPANY = pdcpayments.COMPANY AND accounts.BRANCH = pdcpayments.BRANCH AND accounts.ACCTNO = pdcpayments.ACCTNO
    where accountbalances.acctno = openaccounts.acctno and (accountbalances.pnbalance<>0 or accountbalances.down_bal<>0) and accounts.acctno = openaccounts.acctno and accounts.COMPANY = pi_company and accounts.Branch = pi_branch
    and (pi_loantype='' or (pi_loantype<>'' and accounts.LOANTYPE = pi_loantype))
      and (pi_zone='' or (pi_zone<>'' and accounts.u_zone=pi_zone))
      and (pi_fgroup='' or (pi_fgroup<>'' and accounts.u_fgroup=pi_fgroup))
      and (pi_status=''
             or (pi_status='UPDATED' and accountbalances.d30=0 and accountbalances.d60=0 and accountbalances.d90=0)
             or (pi_status='PASTDUE' and (accountbalances.d30>0 or accountbalances.d60>0 or accountbalances.d90>0))
             or (pi_status='MATURED' and accounts.ldd <= v_30me)
          )
      and (pi_wcrbal='Y' or (pi_wcrbal='N' and accountbalances.PNBALANCE>0))
    group by accounts.refno
    ORDER BY accounts.u_zone, accounts.u_fgroup, customers.LASTNAME ASC, accounts.refno ASC;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `officialreceipt`
--

DROP PROCEDURE IF EXISTS `officialreceipt`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `officialreceipt`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN CREATE TEMPORARY TABLE  `cashcards2` (     `COMPANY` varchar(30) NOT NULL default '',     `BRANCH` varchar(30) NOT NULL default '',     `DOCID` varchar(30) NOT NULL default '',     `DOCNO` varchar(30) NOT NULL default '',     `CASHCARD` varchar(30) NOT NULL default '',     `REFNO` varchar(30) NOT NULL default '',     `AMOUNT` NUMERIC(18,6) NOT NULL default '0',     PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)   ) ENGINE=InnoDB DEFAULT CHARSET=latin1;   INSERT     INTO cashcards2 (COMPANY,BRANCH,DOCID,DOCNO,CASHCARD,REFNO,AMOUNT)       SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.CASHCARD,a.REFNO,a.AMOUNT as AMOUNT         from collectionscashcards a         where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno; CREATE TEMPORARY TABLE  `creditcards2` (     `COMPANY` varchar(30) NOT NULL default '',     `BRANCH` varchar(30) NOT NULL default '',     `DOCID` varchar(30) NOT NULL default '',     `DOCNO` varchar(30) NOT NULL default '',     `CREDITCARDNO` varchar(30) NOT NULL default '',     `CARDEXPIRETEXT` varchar(30) NOT NULL default '',     `creditcard` varchar(30) NOT NULL default '',     `AMOUNT` NUMERIC(18,6) NOT NULL default '0',     PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)   ) ENGINE=InnoDB DEFAULT CHARSET=latin1;   INSERT     INTO creditcards2 (COMPANY,BRANCH,DOCID,DOCNO,CREDITCARDNO,CARDEXPIRETEXT,creditcard,AMOUNT)       SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.CREDITCARDNO,a.CARDEXPIRETEXT,a.creditcard,a.AMOUNT         from collectionscreditcards a         where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1; CREATE TEMPORARY TABLE  `cheques` (     `COMPANY` varchar(30) NOT NULL default '',     `BRANCH` varchar(30) NOT NULL default '',     `DOCID` varchar(30) NOT NULL default '',     `DOCNO` varchar(30) NOT NULL default '',     `BANKBRANCH` varchar(30) NOT NULL default '',     `BANK` varchar(30) NOT NULL default '',     `CHECKNO` varchar(30) NOT NULL default '',     `checkdate` DATE NULL,     `AMOUNT` NUMERIC(18,6) NOT NULL default '0',     PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)   ) ENGINE=InnoDB DEFAULT CHARSET=latin1;   INSERT     INTO cheques (COMPANY,BRANCH,DOCID,DOCNO,BANK,BANKBRANCH,CHECKNO,checkdate,AMOUNT)       SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.BANK,a.BANKBRANCH,a.CHECKNO,a.checkdate,a.AMOUNT         from collectionscheques a         where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1; SELECT collections.COMPANY, collections.BRANCHCODE, collections.BPCODE, collections.BPNAME, collections.ADDRESS,         collections.DOCNO, collections.DOCDATE, collections.REMARKS, collections.LASTUPDATEDBY,         if (collectionsinvoices.reftype = 'ARINVOICE', collectionsinvoices.REFNO, accounts.REFNO) as REFNO,         case when collectionsinvoices.AMOUNT is null         then collections.PAIDAMOUNT else collectionsinvoices.AMOUNT - collectionsinvoices.penaltypaid         end as 'AMOUNT',         case when collectionsinvoices.reftype is null then 'CUSTOMER DEPOSIT' else collectionsinvoices.reftype end as 'reftype',           branches.BRANCHNAME, if (collectionsinvoices.rebate is null, 0, collectionsinvoices.rebate) as rebate,          if (collectionsinvoices.penaltypaid is null, 0, collectionsinvoices.penaltypaid) as penalty,                 if (cheques.DOCNO is null, '', concat(cheques.BANK,' - ',cheques.BANKBRANCH)) as bankname,         if (cheques.DOCNO is null, '', '') as accountno,         if (cheques.DOCNO is null, '', cheques.CHECKNO) as checkno, cheques.CHECKDATE as checkdate,         if (cheques.DOCNO is null, '', '') as accountname,         if (cheques.DOCNO is null, 0, cheques.AMOUNT) as chequesamount,         if (creditcards2.DOCNO is null, '', creditcards.creditcardname) as ccname,         if (creditcards2.DOCNO is null, '', creditcards2.CREDITCARDNO) as ccno,         if (creditcards2.DOCNO is null, '', creditcards2.CARDEXPIRETEXT) as ccexpiry,         if (creditcards2.DOCNO is null, 0, creditcards2.AMOUNT) as creditcardsamount,         if (cashcards2.DOCNO is null, '', cashcards.CASHCARDNAME) as ccard,         if (cashcards2.DOCNO is null, '', cashcards2.REFNO) as ccardrefno,         if (cashcards2.DOCNO is null, 0, cashcards2.AMOUNT) as ccardamount                           FROM collections         LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE         LEFT OUTER JOIN collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY         AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH         LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO         AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH         LEFT OUTER JOIN accounts ON collectionsinvoices.COMPANY = accounts.COMPANY           AND collectionsinvoices.REFNO = accounts.acctno AND collectionsinvoices.BRANCH = accounts.BRANCH         LEFT OUTER JOIN cheques ON collections.COMPANY = cheques.COMPANY         AND collections.DOCNO = cheques.DOCNO AND collections.BRANCHCODE = cheques.BRANCH         LEFT OUTER JOIN creditcards2 ON collections.COMPANY = creditcards2.COMPANY         AND collections.DOCNO = creditcards2.DOCNO AND collections.BRANCHCODE = creditcards2.BRANCH         LEFT OUTER JOIN cashcards2 ON collections.COMPANY = cashcards2.COMPANY AND collectionsinvoices.refno = cashcards2.refno         AND collections.DOCNO = cashcards2.DOCNO AND collections.BRANCHCODE = cashcards2.BRANCH                           LEFT OUTER JOIN cashcards ON cashcards2.cashcard = cashcards.cashcard         LEFT OUTER JOIN creditcards ON creditcards.creditcard = creditcards2.creditcard         WHERE collections.DOCNO = pi_docno AND collections.COMPANY = pi_company AND collections.BRANCHCODE = pi_branch; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `officialreceipt_st`
--

DROP PROCEDURE IF EXISTS `officialreceipt_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `officialreceipt_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
DECLARE v_done INT;
DECLARE v_reftype VARCHAR(100);
DECLARE v_refno   VARCHAR(100);
DECLARE v_amount  DECIMAL(20,6);
DECLARE v_doctype VARCHAR(100);
DECLARE v_invamount  DECIMAL(20,6);
DECLARE v_bprefno VARCHAR(100);
DECLARE v_docdate DATE;
DECLARE v_docid DECIMAL(20,0);
DECLARE receipt_cur CURSOR FOR
  SELECT REFTYPE, REFNO, AMOUNT, DOCID
    FROM collectionsinvoices
    WHERE COMPANY = pi_company AND BRANCH = pi_branch AND DOCNO = pi_docno;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;
  DROP TEMPORARY TABLE IF EXISTS RECEIPT_TEMP ;
  CREATE TEMPORARY TABLE `RECEIPT_TEMP` (
    `REFTYPE` VARCHAR(100),
    `REFNO` VARCHAR(100),
    `AMOUNT` DECIMAL(20,6),
    `DOCDATE` DATE,
    `INVAMOUNT` DECIMAL(20,6),
    `BPREFNO` VARCHAR(100),
    `DOCID` DECIMAL(20,0)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
 OPEN receipt_cur;
 soloop: LOOP
    FETCH receipt_cur INTO v_reftype, v_refno, v_amount, v_docid;
    IF v_done = 1 THEN
       Leave soloop;
    END IF;
        IF v_reftype = 'ARINVOICE' THEN
            SET v_doctype = 'ARINV';
            SELECT TOTALAMOUNT, BPREFNO, DOCDATE INTO v_invamount, v_bprefno, v_docdate
              FROM ARINVOICES
              WHERE COMPANY = pi_company AND
                    BRANCH = pi_branch AND
                    DOCNO = v_refno;
        ELSEIF v_reftype = 'APCREDITMEMO' THEN
            SET v_doctype = 'APDN';
            SELECT TOTALAMOUNT, BPREFNO, DOCDATE INTO v_invamount, v_bprefno, v_docdate
              FROM APCREDITMEMOS
              WHERE COMPANY = pi_company AND
                    BRANCH = pi_branch AND
                    DOCNO = v_refno;
        ELSEIF v_reftype = 'ARCREDITMEMO' THEN
            SET v_doctype = 'ARCN';
            SELECT (TOTALAMOUNT * -1), BPREFNO, DOCDATE INTO v_invamount, v_bprefno, v_docdate
              FROM ARCREDITMEMOS
              WHERE COMPANY = pi_company AND
                    BRANCH = pi_branch AND
                    DOCNO = v_refno;
        END IF;
        INSERT INTO RECEIPT_TEMP (REFTYPE, REFNO, AMOUNT, DOCDATE, INVAMOUNT, BPREFNO, DOCID)
              VALUES (v_doctype, v_refno, v_amount, v_docdate, v_invamount, v_bprefno, v_docid);
    SET v_done = 0;
  END LOOP soloop;
  CLOSE receipt_cur;
  SELECT * FROM RECEIPT_TEMP ORDER BY v_docid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `official_receipt`
--

DROP PROCEDURE IF EXISTS `official_receipt`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `official_receipt`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `cashcards2` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CASHCARD` varchar(30) NULL default '',
    `REFNO` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cashcards2 (COMPANY,BRANCH,DOCID,DOCNO,CASHCARD,REFNO,AMOUNT)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.CASHCARD,a.REFNO,a.AMOUNT as AMOUNT
        from collectionscashcards a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno;
CREATE TEMPORARY TABLE  `creditcards2` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREDITCARDNO` varchar(30) NULL default '',
    `CARDEXPIRETEXT` varchar(30) NULL default '',
    `creditcard` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO creditcards2 (COMPANY,BRANCH,DOCID,DOCNO,CREDITCARDNO,CARDEXPIRETEXT,creditcard,AMOUNT)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.CREDITCARDNO,a.CARDEXPIRETEXT,a.creditcard,a.AMOUNT
        from collectionscreditcards a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1;
CREATE TEMPORARY TABLE  `cheques` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BANKBRANCH` varchar(30) NULL default '',
    `BANK` varchar(30) NULL default '',
    `CHECKNO` varchar(30) NULL default '',
    `bankacctno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cheques (COMPANY,BRANCH,DOCID,DOCNO,BANK,BANKBRANCH,CHECKNO,checkdate,AMOUNT,bankacctno)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.BANK,a.BANKBRANCH,a.CHECKNO,a.checkdate,a.AMOUNT,a.bankacctno
        from collectionscheques a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1;
CREATE TEMPORARY TABLE  `main` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCHCODE` varchar(30) NULL default '',
    `BPCODE` varchar(30) NULL default '',
    `BPNAME` varchar(500) NULL default '',
    `ADDRESS` varchar(500) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` DATE NULL,
    `REMARKS` varchar(1000) NULL default '',
    `LASTUPDATEDBY` varchar(30) NULL default '',
    `user` varchar(30) NULL default '',
    `REFNO` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    `reftype` varchar(500) NULL default '',
    `BRANCHNAME` varchar(30) NULL default '',
    `rebate` NUMERIC(18,6) NULL default '0',
    `penalty` NUMERIC(18,6) NULL default '0',
    `bankname` varchar(30) NULL default '',
    `accountno` varchar(30) NULL default '',
    `checkno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `chequesamount` NUMERIC(18,6) NULL default '0',
    `ccname` varchar(30) NULL default '',
    `ccno` varchar(30) NULL default '',
    `ccexpiry` varchar(30) NULL default '',
    `creditcardsamount` NUMERIC(18,6) NULL default '0',
    `ccard` varchar(30) NULL default '',
    `ccardrefno` varchar(30) NULL default '',
    `ccardamount` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO main (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    `user`,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount)
SELECT  collections.COMPANY,
        collections.BRANCHCODE,
        collections.BPCODE,
        collections.BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        date(collections.DOCDATE) as DOCDATE,
        collections.REMARKS,
        collections.LASTUPDATEDBY,
        i.username as 'user',
        case when collections.collfor='RS' then ''
             when collections.collfor='WU' then collections.REFNO
             when collections.collfor='SI' then
             if (collectionsinvoices.reftype like 'NR%', accountslist.REFNO, collectionsinvoices.REFNO)
        else '' end as REFNO,
        case when collectionsinvoices.AMOUNT is null
        then collections.PAIDAMOUNT else collectionsinvoices.AMOUNT - collectionsinvoices.penaltypaid
        end as 'AMOUNT',
        case  when collections.collfor='RS' then concat(collections.DEPARTMENT , ' - CUSTOMER DEPOSIT')
              when collections.collfor='WU' then 'OTHER CASH PAYMENTS'
              when collections.collfor='SI' then collectionsinvoices.reftype
        else IF(collectionsaccounts.SUBSIDIARY = '', collectionsaccounts.GLACCTNAME, chartofaccountsubsidiaries.SUBSIDIARYNAME) end as 'reftype',
        branches.BRANCHNAME,
        if (collectionsinvoices.rebate is null, 0, collectionsinvoices.rebate) as rebate,
        if (collectionsinvoices.penaltypaid is null, 0, collectionsinvoices.penaltypaid) as penalty,
        if (cheques.DOCNO is null, '', concat(cheques.BANK,' - ',cheques.BANKBRANCH)) as bankname,
        if (cheques.DOCNO is null, '', cheques.bankacctno) as accountno,
        if (cheques.DOCNO is null, '', cheques.CHECKNO) as checkno,
        date(cheques.CHECKDATE) as checkdate,
        if (cheques.DOCNO is null, 0, cheques.AMOUNT) as chequesamount,
        if (creditcards2.DOCNO is null, '', creditcards.creditcardname) as ccname,
        if (creditcards2.DOCNO is null, '', creditcards2.CREDITCARDNO) as ccno,
        if (creditcards2.DOCNO is null, '', creditcards2.CARDEXPIRETEXT) as ccexpiry,
        if (creditcards2.DOCNO is null, 0, creditcards2.AMOUNT) as creditcardsamount,
        '' as ccard,
        '' as ccardrefno,
        0 as ccardamount
        FROM collections
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN collectionsaccounts ON collections.COMPANY = collectionsaccounts.COMPANY
        AND collections.DOCNO = collectionsaccounts.DOCNO AND collections.BRANCHCODE = collectionsaccounts.BRANCH
        LEFT OUTER JOIN chartofaccountsubsidiaries ON collectionsaccounts.SUBSIDIARY = chartofaccountsubsidiaries.SUBSIDIARY
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN cheques ON collections.COMPANY = cheques.COMPANY
        AND collections.DOCNO = cheques.DOCNO AND collections.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN creditcards2 ON collections.COMPANY = creditcards2.COMPANY
        AND collections.DOCNO = creditcards2.DOCNO AND collections.BRANCHCODE = creditcards2.BRANCH
        LEFT OUTER JOIN creditcards ON creditcards.creditcard = creditcards2.creditcard
        LEFT OUTER JOIN users i ON collections.LASTUPDATEDBY = i.userid
        WHERE collections.COMPANY = pi_company
        AND collections.BRANCHCODE = pi_branch
        AND collections.DOCNO = pi_docno;
INSERT
    INTO main (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    `user`,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount)
SELECT  collections.COMPANY,
        collections.BRANCHCODE,
        collections.BPCODE,
        collections.BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        date(collections.DOCDATE) as DOCDATE,
        collections.REMARKS,
        collections.LASTUPDATEDBY,
        i.username as 'user',
        case when collections.collfor='RS' then ''
             when collections.collfor='WU' then collections.REFNO
             when collections.collfor='SI' then
             if (collectionsinvoices.reftype like 'NR%', accountslist.REFNO, collectionsinvoices.REFNO)
        else '' end as REFNO,
        0 as 'AMOUNT',
        case  when collections.collfor='RS' then concat(collections.DEPARTMENT , ' - CUSTOMER DEPOSIT')
              when collections.collfor='WU' then 'OTHER CASH PAYMENTS'
              when collections.collfor='SI' then collectionsinvoices.reftype
        else '' end as 'reftype',
        branches.BRANCHNAME,
        0 as rebate,
        0 as penalty,
        '' as bankname,
        '' as accountno,
        '' as checkno,
        null as checkdate,
        0 as chequesamount,
        '' as ccname,
        '' as ccno,
        '' as ccexpiry,
        0 as creditcardsamount,
        Upper(if (cashcards2.DOCNO is null, '', cashcards.CASHCARDNAME)) as ccard,
        if (cashcards2.DOCNO is null, '', cashcards2.REFNO) as ccardrefno,
        if (cashcards2.DOCNO is null, 0, cashcards2.AMOUNT) as ccardamount
        FROM collections
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN cheques ON collections.COMPANY = cheques.COMPANY
        AND collections.DOCNO = cheques.DOCNO AND collections.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN creditcards2 ON collections.COMPANY = creditcards2.COMPANY
        AND collections.DOCNO = creditcards2.DOCNO AND collections.BRANCHCODE = creditcards2.BRANCH
        LEFT OUTER JOIN cashcards2 ON collectionsinvoices.COMPANY = cashcards2.COMPANY
        AND collectionsinvoices.DOCNO = cashcards2.DOCNO AND collectionsinvoices.BRANCH = cashcards2.BRANCH
        AND collectionsinvoices.REFNO = cashcards2.REFNO
        LEFT OUTER JOIN cashcards ON cashcards2.cashcard = cashcards.cashcard
        LEFT OUTER JOIN creditcards ON creditcards.creditcard = creditcards2.creditcard
        LEFT OUTER JOIN users i ON collections.LASTUPDATEDBY = i.userid
        WHERE collections.COMPANY = pi_company
        AND collections.BRANCHCODE = pi_branch
        AND collections.DOCNO = pi_docno;
INSERT
    INTO main (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    `user`,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount)
SELECT  collections.COMPANY,
        collections.BRANCHCODE,
        collections.BPCODE,
        collections.BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        date(collections.DOCDATE) as DOCDATE,
        collections.REMARKS,
        collections.LASTUPDATEDBY,
        i.username as 'user',
        case when collections.collfor='RS' then ''
             when collections.collfor='WU' then collections.REFNO
             when collections.collfor='SI' then collectionsinvoices.REFNO
        else '' end as REFNO,
        collectionsinvoices.AMOUNT as 'AMOUNT',
        case  when collections.collfor='RS' then concat(collections.DEPARTMENT , ' - CUSTOMER DEPOSIT')
              when collections.collfor='WU' then 'OTHER CASH PAYMENTS'
              when collections.collfor='SI' then UPPER(othercharges.CHRGNAME)
        else '' end as 'reftype',
        branches.BRANCHNAME,
        0 as rebate,
        0 as penalty,
        '' as bankname,
        '' as accountno,
        '' as checkno,
        null as checkdate,
        0 as chequesamount,
        '' as ccname,
        '' as ccno,
        '' as ccexpiry,
        0 as creditcardsamount,
        '' as ccard,
        '' as ccardrefno,
        0 as ccardamount
        FROM collections
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN collectionsothercharges as collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN othercharges ON collectionsinvoices.CHRGCODE = othercharges.CHRGCODE
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN users i ON collections.LASTUPDATEDBY = i.userid
        WHERE collections.COMPANY = pi_company
        AND collections.BRANCHCODE = pi_branch
        AND collections.DOCNO = pi_docno and collectionsinvoices.AMOUNT <> 0;
Select * from main ORDER BY DOCDATE, DOCNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `old_stock_batch_rpt_sp`
--

DROP PROCEDURE IF EXISTS `old_stock_batch_rpt_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `old_stock_batch_rpt_sp`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_based_date DATE, IN pi_month INT)
BEGIN
DECLARE v_curdate DATE;
DECLARE v_startdate DATE;
  IF pi_based_date IS NULL THEN
    SET pi_based_date = CURDATE();
  END IF;
  SET v_startdate = pi_based_date - interval pi_month month;
  SELECT batches.COMPANY,
         batches.BRANCH,
         batches.ITEMCODE,
         batches.ITEMNAME,
         batches.BATCH,
         SUM(batches.QTY) as QTY,
         batches.REFDATE,
         items.U_U_LOCATION  
    FROM batches,   
         items  
   WHERE ( batches.ITEMCODE = items.ITEMCODE ) AND
         ( batches.COMPANY = pi_company ) AND
         ( batches.BRANCH = pi_branch ) AND
         ( batches.REFDATE <=  v_startdate ) AND
         ( batches.QTY > 0 )
   GROUP BY batches.COMPANY, batches.BRANCH, batches.ITEMCODE, batches.BATCH
   ORDER BY batches.COMPANY, batches.BRANCH, batches.ITEMCODE, batches.BATCH, batches.REFDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `old_stock_batch_rpt_value_sp`
--

DROP PROCEDURE IF EXISTS `old_stock_batch_rpt_value_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `old_stock_batch_rpt_value_sp`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_based_date DATE,
               IN pi_month INT, IN pi_currency VARCHAR(20), IN pi_class_fr VARCHAR(30), IN pi_class_to VARCHAR(30), IN pi_item_fr VARCHAR(30),
               IN pi_item_to VARCHAR(30))
BEGIN
DECLARE v_curdate DATE;
DECLARE v_startdate DATE;
DECLARE v_itemcode VARCHAR(30);
DECLARE v_itemname VARCHAR(200);
DECLARE v_batch VARCHAR(30);
DECLARE v_reftype VARCHAR(30);
DECLARE v_refno VARCHAR(30);
DECLARE v_qty NUMERIC(20,6);
DECLARE v_refdate DATE;
DECLARE v_reflineid NUMERIC(20,0);
DECLARE v_done INT;
DECLARE v_cost NUMERIC(20,6);
DECLARE v_costrate NUMERIC(20,6);
DECLARE v_costcurrency VARCHAR(20);
DECLARE v_basedcurrency VARCHAR(20);
DECLARE v_itemclass VARCHAR(30);
DECLARE v_costdate DATE;
DECLARE v_date01_from DATE;
DECLARE v_date02_from DATE;
DECLARE v_date01_to DATE;
DECLARE v_count INT;
DECLARE v_preitemclass VARCHAR(30);
DECLARE v_firsttotal NUMERIC(20,6);
DECLARE v_secondtotal NUMERIC(20,6);
DECLARE v_thirdtotal NUMERIC(20,6);
DECLARE v_fourthtotal NUMERIC(20,6);
DECLARE v_class_fr VARCHAR(30);
DECLARE v_class_to VARCHAR(30);
DECLARE v_item_fr VARCHAR(30);
DECLARE v_item_to VARCHAR(30);


  DECLARE batch_cur CURSOR FOR
  SELECT batches.ITEMCODE,
         batches.ITEMNAME,
         batches.BATCH,
         SUM(batches.QTY) as QTY,
         batches.REFDATE,
         batches.REFTYPE,
         batches.REFNO,
         batches.REFLINEID,
         items.ITEMCLASS
    FROM batches,
         items
   WHERE ( batches.COMPANY = pi_company ) AND
         ( batches.BRANCH = pi_branch ) AND
         ( batches.ITEMCODE = items.ITEMCODE ) AND
         ( batches.REFDATE <=  v_startdate ) AND
         ( batches.QTY > 0 ) AND
         ( items.itemcode >= v_item_fr and items.itemcode <= v_item_to) AND
         ( items.itemclass >= v_class_fr and items.itemclass <= v_class_to)
   GROUP BY batches.COMPANY, batches.BRANCH, batches.ITEMCODE, batches.BATCH
   ORDER BY batches.COMPANY, batches.BRANCH, batches.ITEMCODE, batches.BATCH, batches.REFDATE;
   DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;
   DROP TEMPORARY TABLE IF EXISTS batchvalue ;
   CREATE TEMPORARY TABLE `batchvalue` (
    `ITEMCODE` VARCHAR(100) NOT NULL default '',
    `ITEMNAME` VARCHAR(200) NOT NULL DEFAULT '0',
    `ITEMCLASS` VARCHAR(30),
    `BATCH` VARCHAR(100),
    `QTY` NUMERIC(20,6),
    `REFDATE` DATE,
    `ITEMCOST` NUMERIC(20,6),
    `YEARCOST` NUMERIC(20,6),
    `SIXMTHCOST` NUMERIC(20,6),
    `THREEMTHCOST` NUMERIC(20,6),
    `FOURTHMTHCOST` NUMERIC(20,6),
    `ALLYEARCOST` NUMERIC(20,6),
    `ALLSIXMTHCOST` NUMERIC(20,6),
    `ALLTHREEMTHCOST` NUMERIC(20,6),
    `ALLFOURTHMTHCOST` NUMERIC(20,6),
    PRIMARY KEY  (`ITEMCODE`, `BATCH`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  IF pi_based_date IS NULL THEN
    SET pi_based_date = CURDATE();
  END IF;
  SET v_startdate = pi_based_date - interval pi_month month;
  SET v_date01_from = v_startdate - interval 12 month;
  SET v_date02_from   = v_startdate - interval 6 month;
  SET v_date01_to   = v_startdate - interval 3 month;
  SET v_count = 1;

  IF pi_item_fr IS NULL THEN
      SET v_item_fr = "";
  ELSE
      SET v_item_fr = pi_item_fr;
  END IF;

  IF pi_item_to IS NULL THEN
      SET v_item_to = "";
  ELSE
      SET v_item_to = pi_item_to;
  END IF;

  IF v_item_fr = "" AND v_item_to = "" THEN
     SET v_item_to = "ZZZZZZZZZZZZZZZZZZZZZ";
  END IF;

  IF pi_class_fr IS NULL THEN
      SET v_class_fr = "";
  ELSE
      SET v_class_fr = pi_class_fr;
  END IF;

  IF pi_class_to IS NULL THEN
      SET v_class_to = "";
  ELSE
      SET v_class_to = pi_class_to;
  END IF;

  IF v_class_fr = "" AND v_class_to = "" THEN
     SET v_class_to = "ZZZZZZZZZZZZZZZZZZZZZ";
  END IF;



  SELECT CURRENCY INTO v_basedcurrency FROM COMPANIES;
  OPEN batch_cur;
  custloop: LOOP
    FETCH batch_cur INTO v_itemcode, v_itemname, v_batch, v_qty, v_refdate, v_reftype, v_refno, v_reflineid, v_itemclass;
    IF v_done = 1 THEN
       Leave custloop;
    END IF;
              IF v_reftype = 'IQ+' THEN
                 
                 
                IF pi_currency = 'LOCAL' THEN
                    SELECT COSTPRICE INTO v_cost
                      FROM STOCKCARD
                      WHERE COMPANY = pi_company AND
                            BRANCH  = pi_branch  AND
                            DOCID   = v_reflineid AND
                            REFTYPE = v_reftype  AND
                            REFNO   = v_refno ;
                 ELSE
                    SELECT itempricelists.price INTO v_cost
                      FROM itempricelists, pricelists
                     WHERE itempricelists.pricelist =  pricelists.pricelist AND
                           pricelists.pricelistname = 'INI COST' AND
                           itempricelists.ITEMCODE = v_itemcode;
                 END IF;
              ELSEIF v_reftype = 'GR' THEN
                 SELECT DT.UNITPRICE, HD.DOCDATE INTO v_cost, v_costdate
                   FROM GOODSRECEIPTS HD, GOODSRECEIPTITEMS DT
                   WHERE HD.COMPANY = DT.COMPANY AND
    	                   HD.BRANCH = DT.BRANCH AND
		 	                   HD.DOCID = DT.DOCID AND
			                   HD.BRANCH = pi_branch AND
			                   DT.LINEID = v_reflineid;
                 IF pi_currency = 'LOCAL' THEN
                    SET v_costrate = 1;
                 ELSE
                    SELECT CURRENCY, RATE INTO v_costcurrency, v_costrate
                      FROM EXCHANGERATES
                      WHERE CURRENCY = 'USD' AND XDATE = v_costdate;
                   IF v_costrate > 0 THEN
                      SET v_cost =  v_cost / v_costrate;
                   ELSE
                      SET v_cost =  0;
                   END IF;
                 END IF;
              ELSEIF v_reftype = 'PDN' THEN
                SELECT (SUM(DT.LINETOTAL) / SUM(DT.QUANTITY)), (SUM(HD.CURRENCYRATE * DT.QUANTITY) / SUM(DT.QUANTITY))
                  INTO v_cost, v_costrate
                  FROM APINVOICES HD, APINVOICEITEMS DT
                  WHERE HD.COMPANY = DT.COMPANY AND
			                  HD.BRANCH = DT.BRANCH AND
			                  HD.DOCID = DT.DOCID AND
			                  HD.BRANCH = pi_branch AND
			                  DT.BASEDOCNO = v_refno AND
			                  DT.BASELINEID = v_reflineid
                  GROUP BY DT.BASEDOCNO, DT.BASELINEID;
                  IF pi_currency = 'LOCAL' THEN
                     IF v_basedcurrency <>  v_costcurrency THEN
                        SET v_cost = v_cost * v_costrate;
                     END IF;
                  END IF;
              ELSEIF v_reftype = 'GA+' THEN
                SELECT DT.UNITPRICE, HD.DOCDATE INTO v_cost, v_costdate
                  FROM STOCKADJUSTMENTS HD, STOCKADJUSTMENTITEMS DT
                  WHERE HD.COMPANY = DT.COMPANY AND 
			                  HD.BRANCH = DT.BRANCH AND
			                  HD.DOCID = DT.DOCID AND
			                  HD.BRANCH = pi_branch AND
			                  DT.LINEID = v_reflineid;
                 IF pi_currency = 'LOCAL' THEN
                    SET v_costrate = 1;
                 ELSE
                    SELECT CURRENCY, RATE INTO v_costcurrency, v_costrate
                      FROM EXCHANGERATES
                      WHERE CURRENCY = 'USD' AND XDATE = v_costdate;
                   IF v_costrate > 0 THEN
                      SET v_cost =  v_cost / v_costrate;
                   ELSE
                      SET v_cost =  0;
                   END IF;
                 END IF;
              ELSEIF v_reftype = 'AP' THEN
                SELECT DT.PRICE, HD.CURRENCYRATE, HD.CURRENCY
                  INTO v_cost, v_costrate, v_costcurrency
                  FROM APINVOICES HD, APINVOICEITEMS DT
                  WHERE HD.COMPANY = DT.COMPANY AND 
                  			HD.BRANCH = DT.BRANCH AND
                  			HD.DOCID = DT.DOCID AND
                  			HD.BRANCH = pi_branch AND
                  			DT.LINEID = v_reflineid;
                   IF pi_currency = 'LOCAL' THEN
                      IF v_basedcurrency <>  v_costcurrency THEN
                        SET v_cost = v_cost * v_costrate;
                      END IF;
                   END IF;
              ELSEIF v_reftype = 'CM' THEN
                SELECT DT.PRICE, HD.CURRENCYRATE, HD.CURRENCY
                  INTO v_cost, v_costrate, v_costcurrency
                  FROM ARCREDITMEMOS HD, ARCREDITMEMOITEMS DT
                  WHERE HD.COMPANY = DT.COMPANY AND 
                  			HD.BRANCH = DT.BRANCH AND
		                  	HD.DOCID = DT.DOCID AND
			                  HD.BRANCH = pi_branch AND
			                  DT.LINEID = v_reflineid;
                   IF pi_currency = 'LOCAL' THEN
                      IF v_basedcurrency <>  v_costcurrency THEN
                        SET v_cost = v_cost * v_costrate;
                      END IF;
                   END IF;
              END IF;
            INSERT INTO batchvalue (ITEMCODE, ITEMNAME, ITEMCLASS, BATCH, QTY, REFDATE, ITEMCOST)
              VALUES (v_itemcode, v_itemname, v_itemclass, v_batch, v_qty, v_refdate, v_cost);
            SET v_cost = 0;
            SET v_costrate = 0;
            IF v_count = 1 THEN
               SET v_preitemclass = v_itemclass;
            ELSE
               IF v_preitemclass <> v_itemclass THEN
               
                   SELECT sum(QTY * ITEMCOST) INTO v_firsttotal
                     FROM batchvalue
                     WHERE  ITEMCLASS = v_preitemclass AND
                            REFDATE < v_date01_from
                     GROUP BY ITEMCLASS;

                 SELECT sum(QTY * ITEMCOST) INTO v_secondtotal
                     FROM batchvalue
                     WHERE  ITEMCLASS = v_preitemclass AND
                            REFDATE >= v_date01_from and
                            REFDATE < v_date02_from
                     GROUP BY ITEMCLASS;

                   SELECT sum(QTY * ITEMCOST) INTO v_thirdtotal
                     FROM batchvalue
                     WHERE  ITEMCLASS = v_preitemclass AND
                            REFDATE >= v_date02_from and
                            REFDATE < v_date01_to
                     GROUP BY ITEMCLASS;

                  SELECT sum(QTY * ITEMCOST) INTO v_fourthtotal
                    FROM batchvalue
                    WHERE  ITEMCLASS = v_preitemclass AND
                           REFDATE >= v_date01_to and
                           REFDATE <= v_startdate
                    GROUP BY ITEMCLASS;

                   UPDATE batchvalue
                     SET  YEARCOST = v_firsttotal,
                          SIXMTHCOST = v_secondtotal,
                          THREEMTHCOST = v_thirdtotal,
                          FOURTHMTHCOST = v_fourthtotal
                     WHERE ITEMCLASS = v_preitemclass;

                  SET v_preitemclass = v_itemclass;
               END IF;
            END IF;
            SET v_firsttotal = 0;
            SET v_secondtotal = 0;
            SET v_thirdtotal = 0;
            SET v_count = v_count + 1;
     SET v_done = 0;
  END LOOP custloop;
  CLOSE batch_cur;
          SELECT sum(QTY * ITEMCOST) INTO v_firsttotal
            FROM batchvalue
            WHERE  ITEMCLASS = v_preitemclass AND
                   REFDATE < v_date01_from
            GROUP BY ITEMCLASS;

          SELECT sum(QTY * ITEMCOST) INTO v_secondtotal
            FROM batchvalue
            WHERE  ITEMCLASS = v_preitemclass AND
                   REFDATE >= v_date01_from and
                   REFDATE < v_date02_from
            GROUP BY ITEMCLASS;

          SELECT sum(QTY * ITEMCOST) INTO v_thirdtotal
            FROM batchvalue
            WHERE  ITEMCLASS = v_preitemclass AND
                   REFDATE >= v_date02_from and
                   REFDATE < v_date01_to
            GROUP BY ITEMCLASS;

          SELECT sum(QTY * ITEMCOST) INTO v_fourthtotal
            FROM batchvalue
            WHERE  ITEMCLASS = v_preitemclass AND
                   REFDATE >= v_date01_to and
                   REFDATE <= v_startdate
            GROUP BY ITEMCLASS;

           UPDATE batchvalue
             SET  YEARCOST = v_firsttotal,
                  SIXMTHCOST = v_secondtotal,
                  THREEMTHCOST = v_thirdtotal,
                  FOURTHMTHCOST = v_fourthtotal
            WHERE ITEMCLASS = v_preitemclass;

            SET v_firsttotal = 0;
            SET v_secondtotal = 0;
            SET v_thirdtotal = 0;
            SET v_fourthtotal = 0;


          SELECT sum(QTY * ITEMCOST) INTO v_firsttotal
            FROM batchvalue
            WHERE  REFDATE < v_date01_from;

          SELECT sum(QTY * ITEMCOST) INTO v_secondtotal
            FROM batchvalue
            WHERE  REFDATE >= v_date01_from and
                   REFDATE < v_date02_from;

          SELECT sum(QTY * ITEMCOST) INTO v_thirdtotal
            FROM batchvalue
            WHERE  REFDATE >= v_date02_from and
                   REFDATE < v_date01_to;

          SELECT sum(QTY * ITEMCOST) INTO v_fourthtotal
            FROM batchvalue
            WHERE  REFDATE >= v_date01_to and
                   REFDATE <= v_startdate;

           UPDATE batchvalue
             SET  ALLYEARCOST = v_firsttotal,
                  ALLSIXMTHCOST = v_secondtotal,
                  ALLTHREEMTHCOST = v_thirdtotal,
                  ALLFOURTHMTHCOST = v_fourthtotal;

  SELECT * FROM batchvalue ORDER BY ITEMCODE, REFDATE, BATCH;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `old_stock_rpt_sp`
--

DROP PROCEDURE IF EXISTS `old_stock_rpt_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `old_stock_rpt_sp`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_based_date DATE, IN pi_month INT)
BEGIN
DECLARE v_curdate DATE;
DECLARE v_startdate DATE;
  IF pi_based_date IS NULL THEN
    SET pi_based_date = CURDATE();
  END IF;
  SET v_startdate = pi_based_date - interval pi_month month;
  SET pi_based_date = v_startdate;
  SELECT batches.COMPANY,
         batches.BRANCH,
         batches.ITEMCODE,
         batches.ITEMNAME,   
         batches.BATCH,   
         SUM(batches.QTY),
         batches.REFDATE,
         items.U_U_LOCATION  
    FROM batches,   
         items  
   WHERE ( batches.ITEMCODE = items.ITEMCODE ) AND
         ( batches.COMPANY = pi_company ) AND
         ( batches.BRANCH = pi_branch ) AND
         ( batches.REFDATE <=  v_startdate )
   GROUP BY batches.COMPANY, batches.BRANCH, batches.ITEMCODE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `open_po_by_month_sp`
--

DROP PROCEDURE IF EXISTS `open_po_by_month_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `open_po_by_month_sp`(IN pi_month VARCHAR(10))
BEGIN
DECLARE v_duedate DATE;
DECLARE v_curdate DATE;
DECLARE v_nexdate DATE;
DECLARE v_reccont NUMERIC(18,6);
DECLARE v_totalreceipt NUMERIC(18,6);
DECLARE v_openorder NUMERIC(18,6);
DECLARE v_opencont NUMERIC(18,6);
DECLARE v_period VARCHAR(10);
DECLARE v_count INT;

  DROP TEMPORARY TABLE IF EXISTS openpo ;
  CREATE TEMPORARY TABLE  `openpo` (
    `PERIOD` VARCHAR (10) NOT NULL default '',
    `TOTALRECEIPT` NUMERIC(18,6) default '0',
    `OPENORDER` NUMERIC(18,6) default '0',
    `RECCONT` NUMERIC(18,6) default '0',
    `OPENCONT` NUMERIC(18,6) default '0',
    PRIMARY KEY  (`PERIOD`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  SELECT purchaseorders.DOCDUEDATE INTO v_duedate
    FROM purchaseorders
    ORDER BY purchaseorders.DOCDUEDATE DESC LIMIT 1;

  SET v_curdate = CURDATE();


  IF MONTH(v_curdate) < 10 THEN
     SET v_nexdate = Date(concat(CONVERT(YEAR(CURDATE()), CHAR(4)), '-0', CONVERT(MONTH(CURDATE()), CHAR(1)), '-01'));
  ELSE
     SET v_nexdate = Date(concat(CONVERT(YEAR(CURDATE()), CHAR(4)), '-', CONVERT(MONTH(CURDATE()), CHAR(2)), '-01'));
  END IF;


  SELECT SUM(purchaseorderitems.OPENQUANTITY * items.volumesa),
         SUM(purchaseorderitems.OPENQUANTITY * purchaseorderitems.PRICE)
    INTO v_opencont, v_openorder
    FROM purchaseorders,
         purchaseorderitems,
         items
    WHERE ( purchaseorders.COMPANY = purchaseorderitems.COMPANY ) and
          ( purchaseorders.BRANCH = purchaseorderitems.BRANCH ) and
          ( purchaseorders.DOCID = purchaseorderitems.DOCID ) and
          ( purchaseorderitems.ITEMCODE = items.ITEMCODE ) and
          ( purchaseorders.DOCSTATUS = 'O' ) and
          ( items.ITEMGROUP = '3' ) and
          ( YEAR(purchaseorders.DOCDUEDATE) <= YEAR(v_nexdate) ) and
          ( MONTH(purchaseorders.DOCDUEDATE) <= MONTH(v_nexdate) );

  SELECT SUM(purchasedeliveryitems.QUANTITY * items.volumesa),
         SUM(purchasedeliveryitems.QUANTITY *purchasedeliveryitems.PRICE)
    INTO v_reccont, v_totalreceipt
    FROM purchasedeliveries,
         purchasedeliveryitems,
         items
    WHERE ( purchasedeliveries.COMPANY = purchasedeliveryitems.COMPANY ) and
          ( purchasedeliveries.BRANCH = purchasedeliveryitems.BRANCH ) and
          ( purchasedeliveries.DOCID = purchasedeliveryitems.DOCID ) and
          ( purchasedeliveryitems.ITEMCODE = items.ITEMCODE ) and
          ( purchasedeliveries.DOCSTATUS = 'O' ) and
          ( items.ITEMGROUP = '3' ) and
          ( YEAR(purchasedeliveries.DOCDATE) = YEAR(v_nexdate) ) and
          ( MONTH(purchasedeliveries.DOCDATE) = MONTH(v_nexdate) );

      IF MONTH(v_nexdate) < 10 THEN
         SET v_period = concat(CONVERT(YEAR(CURDATE()), CHAR(4)), '/0', CONVERT(MONTH(CURDATE()), CHAR(1)));
      ELSE
         SET v_period = concat(CONVERT(YEAR(CURDATE()), CHAR(4)), '/', CONVERT(MONTH(CURDATE()), CHAR(2)));
      END IF;
      IF v_totalreceipt IS NULL THEN
         SET v_totalreceipt = 0;
      END IF;
      IF v_openorder IS NULL THEN
         SET v_openorder = 0;
      END IF;
      IF v_reccont IS NULL THEN
         SET v_reccont = 0;
      END IF;
      IF v_opencont IS NULL THEN
         SET v_opencont = 0;
      END IF;
  
         INSERT INTO openpo (PERIOD, TOTALRECEIPT, OPENORDER, RECCONT, OPENCONT)
              VALUES (v_period, v_totalreceipt, v_openorder, v_reccont, v_opencont);
  
  SET v_nexdate = v_nexdate + interval 1 month;
  SET v_count = 1;
  IF v_duedate IS NOT NULL THEN
     WHILE  v_nexdate < v_duedate DO
          SELECT SUM((purchaseorderitems.QUANTITY - purchaseorderitems.OPENQUANTITY) * items.volumesa),
                 SUM((purchaseorderitems.QUANTITY - purchaseorderitems.OPENQUANTITY) * purchaseorderitems.PRICE),
                 SUM(purchaseorderitems.OPENQUANTITY * items.volumesa),
                 SUM(purchaseorderitems.OPENQUANTITY * purchaseorderitems.PRICE)
            INTO v_reccont, v_totalreceipt, v_opencont, v_openorder
            FROM purchaseorders,
                 purchaseorderitems,
                 items
           WHERE ( purchaseorders.COMPANY = purchaseorderitems.COMPANY ) and
                 ( purchaseorders.BRANCH = purchaseorderitems.BRANCH ) and
                 ( purchaseorders.DOCID = purchaseorderitems.DOCID ) and
                 ( purchaseorderitems.ITEMCODE = items.ITEMCODE ) and
                 ( purchaseorders.DOCSTATUS = 'O' ) and
                 ( items.ITEMGROUP = '3' ) and
                 ( YEAR(purchaseorders.DOCDUEDATE) = YEAR(v_nexdate) ) and
                 ( MONTH(purchaseorders.DOCDUEDATE) = MONTH(v_nexdate) );

        IF MONTH(v_nexdate) < 10 THEN
           SET v_period = concat(CONVERT(YEAR(v_nexdate), CHAR(4)), '/0', CONVERT(MONTH(v_nexdate), CHAR(1)));
        ELSE
           SET v_period = concat(CONVERT(YEAR(v_nexdate), CHAR(4)), '/', CONVERT(MONTH(v_nexdate), CHAR(2)));
        END IF;

        IF v_totalreceipt IS NULL THEN
           SET v_totalreceipt = 0;
        END IF;
        IF v_openorder IS NULL THEN
           SET v_openorder = 0;
        END IF;
        IF v_reccont IS NULL THEN
           SET v_reccont = 0;
        END IF;
        IF v_opencont IS NULL THEN
           SET v_opencont = 0;
        END IF;
  
         INSERT INTO openpo (PERIOD, TOTALRECEIPT, OPENORDER, RECCONT, OPENCONT)
              VALUES (v_period, v_totalreceipt, v_openorder, v_reccont, v_opencont);
  
         SET v_nexdate = v_nexdate + interval 1 month;
     END WHILE;
  END IF;
  SELECT * FROM openpo ORDER BY PERIOD;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `open_so_volume_sp`
--

DROP PROCEDURE IF EXISTS `open_so_volume_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `open_so_volume_sp`(IN pi_date_from DATE, IN pi_date_to DATE, IN pi_so_from VARCHAR(20), IN pi_so_to VARCHAR(20))
BEGIN
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_so_from VARCHAR(20);
DECLARE v_so_to VARCHAR(20);
  IF pi_date_from is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_from;
  END IF;
  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;
  IF pi_so_from is null THEN SET v_so_from = '';
  ELSE SET v_so_from = pi_so_from;
  END IF;
  IF pi_so_to is null THEN SET v_so_to = '';
  ELSE SET v_so_to = pi_so_to;
  END IF;
  IF v_so_from = '' and v_so_to = '' THEN
    SET v_so_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;
  SELECT salesorders.DOCNO,
         salesorders.DOCDATE,
         salesorders.U_U_ETD,
         salesorders.BPCODE,
         sum(salesorderitems.OPENQUANTITY * salesorderitems.PRICE) as TOTALAMOUNT ,
         sum(salesorderitems.OPENQUANTITY * salesorderitems.U_U_ITEMVOLUME) as TOTALVOLUME
    FROM salesorders,
         salesorderitems
   WHERE ( salesorders.COMPANY = salesorderitems.COMPANY ) and
         ( salesorders.BRANCH = salesorderitems.BRANCH ) and
         ( salesorders.DOCID = salesorderitems.DOCID ) and
         ( salesorders.DOCSTATUS = 'O') and
         ( salesorders.DOCDATE >= v_date_from and salesorders.DOCDATE <= v_date_to) and
         ( salesorders.DOCNO >= v_so_from and salesorders.DOCNO <= v_so_to)
	GROUP BY salesorders.DOCNO
  ORDER BY TOTALVOLUME;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `os_po_sp`
--

DROP PROCEDURE IF EXISTS `os_po_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `os_po_sp`(IN pi_status VARCHAR(20), IN pi_po_from VARCHAR(20), IN pi_po_to VARCHAR(20), IN pi_date_from DATE, IN pi_date_to DATE, IN pi_item_from VARCHAR(100), IN pi_item_to VARCHAR(100) )
BEGIN
DECLARE v_status VARCHAR(20);
DECLARE v_po_from VARCHAR(20);
DECLARE v_po_to VARCHAR(20);
DECLARE v_item_from VARCHAR(20);
DECLARE v_item_to VARCHAR(20);
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
  IF pi_status = 'P' THEN SET v_status = 'O';
  ELSE SET v_status = pi_status;
  END IF;
  IF pi_po_from is null THEN SET v_po_from = '';
  ELSE SET v_po_from = pi_po_from;
  END IF;
  IF pi_po_to is null THEN SET v_po_to = '';
  ELSE SET v_po_to = pi_po_to;
  END IF;
  IF v_po_from = '' and v_po_to = '' THEN
    SET v_po_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;
  IF pi_item_from is null THEN SET v_item_from = '';
  ELSE SET v_item_from = pi_item_from;
  END IF;
  IF pi_item_to is null THEN SET v_item_to = '';
  ELSE SET v_item_to = pi_item_to;
  END IF;
  IF v_item_from = '' and v_item_to = '' THEN
    SET v_item_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;
  IF pi_date_from is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_from;
  END IF;
  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;
IF pi_status = 'P' THEN
  SELECT po.DOCNO,
         po.DOCSTATUS,
         po.DOCDATE,
         po.DOCDUEDATE,
         po.BPCODE,
         po.BPNAME,
         po.U_U_ETD,
         poi.ITEMCODE,
         poi.ITEMDESC,
         poi.QUANTITY,
         poi.OPENPRQTY,
         poi.OPENQUANTITY,
         poi.PRICE,
         poi.LINESTATUS
    FROM purchaseorders po,
         purchaseorderitems poi
   WHERE ( po.COMPANY = poi.COMPANY ) and
         ( po.BRANCH = poi.BRANCH ) and
         ( po.DOCID = poi.DOCID ) and
         ( po.DOCSTATUS = 'O' ) and
         ( po.DOCNO >= v_po_from and po.DOCNO <= v_po_to ) and
         ( po.DOCDUEDATE >= v_date_from and po.DOCDUEDATE <= v_date_to ) and
         ( poi.ITEMCODE >= v_item_from and poi.ITEMCODE <= v_item_to ) and
         ( poi.OPENQUANTITY > 0 ) and
         ( poi.OPENQUANTITY < poi.QUANTITY);
ELSEIF pi_status = 'A' THEN
  SELECT po.DOCNO,
         po.DOCSTATUS,
         po.DOCDATE,
         po.DOCDUEDATE,
         po.BPCODE,
         po.BPNAME,
         po.U_U_ETD,
         poi.ITEMCODE,
         poi.ITEMDESC,
         poi.QUANTITY,
         poi.OPENPRQTY,
         poi.OPENQUANTITY,
         poi.PRICE,
         poi.LINESTATUS
    FROM purchaseorders po,
         purchaseorderitems poi
   WHERE ( po.COMPANY = poi.COMPANY ) and
         ( po.BRANCH = poi.BRANCH ) and
         ( po.DOCID = poi.DOCID ) and
         ( po.DOCNO >= v_po_from and po.DOCNO <= v_po_to ) and
         ( po.DOCDUEDATE >= v_date_from and po.DOCDUEDATE <= v_date_to ) and
         ( poi.ITEMCODE >= v_item_from and poi.ITEMCODE <= v_item_to );
ELSE
  SELECT po.DOCNO,
         po.DOCSTATUS,
         po.DOCDATE,
         po.DOCDUEDATE,
         po.BPCODE,
         po.BPNAME,
         po.U_U_ETD,
         poi.ITEMCODE,
         poi.ITEMDESC,
         poi.QUANTITY,
         poi.OPENPRQTY,
         poi.OPENQUANTITY,
         poi.PRICE,
         poi.LINESTATUS
    FROM purchaseorders po,
         purchaseorderitems poi
   WHERE ( po.COMPANY = poi.COMPANY ) and
         ( po.BRANCH = poi.BRANCH ) and
         ( po.DOCID = poi.DOCID ) and
         ( po.DOCSTATUS = v_status ) and
         ( po.DOCNO >= v_po_from and po.DOCNO <= v_po_to ) and
         ( po.DOCDUEDATE >= v_date_from and po.DOCDUEDATE <= v_date_to ) and
         ( poi.ITEMCODE >= v_item_from and poi.ITEMCODE <= v_item_to );
END IF;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `os_po_sp_rpt`
--

DROP PROCEDURE IF EXISTS `os_po_sp_rpt`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `os_po_sp_rpt`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_status VARCHAR(20), IN pi_po_from VARCHAR(20),
          IN pi_po_to VARCHAR(20), IN pi_date_from DATE, IN pi_date_to DATE, IN pi_item_from VARCHAR(100), IN pi_item_to VARCHAR(100),
          IN pi_balvisible INT, IN pi_invvisible INT, IN pi_duedate INT)
BEGIN
DECLARE v_status VARCHAR(20);
DECLARE v_po_from VARCHAR(20);
DECLARE v_po_to VARCHAR(20);
DECLARE v_item_from VARCHAR(20);
DECLARE v_item_to VARCHAR(20);
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_done INT;
DECLARE v_docno VARCHAR(30);
DECLARE v_invno VARCHAR(30);
DECLARE v_invno_all VARCHAR(100);
DECLARE v_count INT;

DECLARE v_docno_p VARCHAR(30);
DECLARE v_openqty_p NUMERIC(18,6);
DECLARE v_qty_p NUMERIC(18,6);

  DECLARE SO_cur CURSOR FOR
    SELECT DOCNO FROM openpo
      GROUP BY DOCNO
      ORDER BY DOCNO;
  DECLARE invoice_cur CURSOR FOR
      SELECT apinvoices.DOCNO
        FROM apinvoiceitems
		    LEFT OUTER JOIN purchasedeliveries ON apinvoiceitems.COMPANY = purchasedeliveries.COMPANY AND apinvoiceitems.BRANCH = purchasedeliveries.BRANCH AND apinvoiceitems.BASEDOCNO = purchasedeliveries.DOCNO
		    LEFT OUTER JOIN purchasedeliveryitems ON purchasedeliveries.COMPANY = purchasedeliveryitems.COMPANY AND purchasedeliveries.BRANCH = purchasedeliveryitems.BRANCH AND purchasedeliveries.DOCID = purchasedeliveryitems.DOCID
		    LEFT OUTER JOIN purchaseorders ON apinvoiceitems.COMPANY = purchaseorders.COMPANY AND apinvoiceitems.BRANCH = purchaseorders.BRANCH AND apinvoiceitems.BASEDOCNO = purchaseorders.DOCNO,
             apinvoices
        WHERE ( apinvoices.COMPANY = apinvoiceitems.COMPANY ) and
              ( apinvoices.BRANCH = apinvoiceitems.BRANCH ) and
              ( apinvoices.DOCID = apinvoiceitems.DOCID ) and
			        ( purchaseorders.DOCNO = v_docno or purchasedeliveryitems.BASEDOCNO = v_docno)
       GROUP BY apinvoices.DOCNO;


  DECLARE partial_cur CURSOR FOR
    SELECT purchaseorders.DOCNO, SUM(purchaseorderitems.OPENQUANTITY), SUM(purchaseorderitems.QUANTITY)
     FROM purchaseorders, purchaseorderitems
    WHERE ( purchaseorders.COMPANY = purchaseorderitems.COMPANY )and
          ( purchaseorders.BRANCH  = purchaseorderitems.BRANCH ) and
          ( purchaseorders.DOCID   = purchaseorderitems.DOCID ) and
          ( purchaseorders.DOCSTATUS = 'O' ) and
          ( purchaseorders.DOCTYPE = 'I' ) and
          ( purchaseorders.DOCNO >= v_po_from and purchaseorders.DOCNO <= v_po_to ) and
          ( (pi_duedate = 0 and purchaseorders.DOCDATE >= v_date_from and purchaseorders.DOCDATE <= v_date_to) or
            (pi_duedate = 1 and purchaseorders.DOCDUEDATE >= v_date_from and purchaseorders.DOCDUEDATE <= v_date_to))
           and
          ( purchaseorderitems.ITEMCODE >= v_item_from and purchaseorderitems.ITEMCODE <= v_item_to )
    GROUP BY purchaseorders.DOCNO;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;
  IF pi_status = 'P' THEN SET v_status = 'O';
  ELSE SET v_status = pi_status;
  END IF;
  IF pi_po_from is null THEN SET v_po_from = '';
  ELSE SET v_po_from = pi_po_from;
  END IF;
  IF pi_po_to is null THEN SET v_po_to = '';
  ELSE SET v_po_to = pi_po_to;
  END IF;
  IF v_po_from = '' and v_po_to = '' THEN
    SET v_po_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;
  IF pi_item_from is null THEN SET v_item_from = '';
  ELSE SET v_item_from = pi_item_from;
  END IF;
  IF pi_item_to is null THEN SET v_item_to = '';
  ELSE SET v_item_to = pi_item_to;
  END IF;
  IF v_item_from = '' and v_item_to = '' THEN
    SET v_item_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;
  IF pi_date_from is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_from;
  END IF;
  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;
  IF pi_status is Null THEN
    SET pi_status = 'A';
  END IF;
  DROP TEMPORARY TABLE IF EXISTS openpo ;
  CREATE TEMPORARY TABLE  `openpo` (
    `ORDERID` NUMERIC(18,0) NOT NULL default '0',
    `DOID` NUMERIC(18,0) NOT NULL default '0',
    `ORDERLINEID` NUMERIC(18,0) NOT NULL default '0',
    `DOLINEID` NUMERIC(18,0) NOT NULL default '0',
    `DOCNO` varchar(30) default '',
    `DOCSTATUS` varchar(30) default '',
    `DOCDATE` DATE,
    `DOCDUEDATE` DATE,
    `BPCODE` varchar(100) default '',
    `BPNAME` varchar(100) default '',
    `U_U_ETD` DATE,
    `ITEMCODE` varchar(100) default '',
    `ITEMDESC` varchar(100) default '',
    `QUANTITY` NUMERIC(18,6) default '0',
    `OPENPRQTY` NUMERIC(18,6) default '0',
    `OPENQUANTITY` NUMERIC(18,6) default '0',
    `PRICE` NUMERIC(18,6) default '0',
    `LINESTATUS` varchar(30) default '',
    `DELNO` varchar(100) default '',
    `DELDATE` DATE,
    `DELITEM` varchar(100) default '',
    `DELQTY` NUMERIC(18,6) default '0',
    `INVOICNO` varchar(100) default '',
    PRIMARY KEY  (`ORDERID`,`DOID`,`ORDERLINEID`,`DOLINEID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
IF pi_status = 'P' THEN
   OPEN partial_cur;
   partialloop: LOOP
      FETCH partial_cur INTO v_docno_p,v_openqty_p,v_qty_p;
      IF v_done = 1 THEN
         Leave partialloop;
      END IF;

      IF v_openqty_p > 0 AND  v_openqty_p < v_qty_p THEN
        INSERT
            INTO openpo (ORDERID, DOID, ORDERLINEID, DOLINEID, DOCNO, DOCSTATUS, DOCDATE, DOCDUEDATE, BPCODE, BPNAME, U_U_ETD, ITEMCODE, ITEMDESC, QUANTITY, OPENPRQTY, OPENQUANTITY, PRICE, LINESTATUS, DELNO, DELDATE, DELITEM, DELQTY)
        SELECT purchaseorders.DOCID,
               purchaseorderitems.LINEID,
               If (purchasedeliveries.DOCID is null, 1, purchasedeliveries.DOCID),
               If (purchasedeliveryitems.LINEID is null, 1, purchasedeliveryitems.LINEID),
               purchaseorders.DOCNO,
               purchaseorders.DOCSTATUS,
               purchaseorders.DOCDATE,
               purchaseorders.DOCDUEDATE,
               purchaseorders.BPCODE,
               purchaseorders.BPNAME,
               purchaseorders.U_U_ETD,
               purchaseorderitems.ITEMCODE,
               purchaseorderitems.ITEMDESC,
               purchaseorderitems.QUANTITY,
               purchaseorderitems.OPENPRQTY,
               purchaseorderitems.OPENQUANTITY,
               purchaseorderitems.PRICE,
               purchaseorderitems.LINESTATUS,
      			   purchasedeliveries.DOCNO,
			         purchasedeliveries.DOCDATE,
      			   purchasedeliveryitems.ITEMCODE,
			         purchasedeliveryitems.QUANTITY
          FROM purchaseorders
          LEFT OUTER JOIN purchaseorderitems ON purchaseorders.COMPANY = purchaseorderitems.COMPANY AND purchaseorders.BRANCH = purchaseorderitems.BRANCH AND purchaseorders.DOCID = purchaseorderitems.DOCID
      		LEFT OUTER JOIN purchasedeliveryitems ON purchaseorders.COMPANY = purchasedeliveryitems.COMPANY AND purchaseorders.BRANCH = purchasedeliveryitems.BRANCH AND purchaseorders.DOCNO = purchasedeliveryitems.BASEDOCNO AND purchasedeliveryitems.BASELINEID = purchaseorderitems.LINEID
      		LEFT OUTER JOIN purchasedeliveries ON purchasedeliveries.COMPANY = purchasedeliveryitems.COMPANY AND purchasedeliveries.BRANCH = purchasedeliveryitems.BRANCH AND purchasedeliveries.DOCID = purchasedeliveryitems.DOCID
          WHERE ( purchaseorders.COMPANY = pi_company ) and
                ( purchaseorders.BRANCH = pi_branch ) and
                ( purchaseorders.DOCSTATUS = 'O' ) and
                ( purchaseorders.DOCTYPE = 'I' ) and
                ( purchaseorders.DOCNO = v_docno_p );
       END IF;
       SET v_done = 0;
    END LOOP partialloop;
    CLOSE partial_cur;
              		
ELSEIF pi_status = 'A' THEN
  SET v_count = 0;
  INSERT
      INTO openpo (ORDERID, DOID, ORDERLINEID, DOLINEID, DOCNO, DOCSTATUS, DOCDATE, DOCDUEDATE, BPCODE, BPNAME, U_U_ETD, ITEMCODE, ITEMDESC, QUANTITY, OPENPRQTY, OPENQUANTITY, PRICE, LINESTATUS, DELNO, DELDATE, DELITEM, DELQTY)
  SELECT purchaseorders.DOCID,
         purchaseorderitems.LINEID,
         If (purchasedeliveries.DOCID is null, 1, purchasedeliveries.DOCID),
         If (purchasedeliveryitems.LINEID is null, 1, purchasedeliveryitems.LINEID),
         purchaseorders.DOCNO,
         purchaseorders.DOCSTATUS,
         purchaseorders.DOCDATE,
         purchaseorders.DOCDUEDATE,
         purchaseorders.BPCODE,
         purchaseorders.BPNAME,
         purchaseorders.U_U_ETD,
         purchaseorderitems.ITEMCODE,
         purchaseorderitems.ITEMDESC,
         purchaseorderitems.QUANTITY,
         purchaseorderitems.OPENPRQTY,
         purchaseorderitems.OPENQUANTITY,
         purchaseorderitems.PRICE,
         purchaseorderitems.LINESTATUS,
			   purchasedeliveries.DOCNO as 'DeliveryNo',
			   purchasedeliveries.DOCDATE as 'DelDate',
			   purchasedeliveryitems.ITEMCODE as 'DelItem',
			   purchasedeliveryitems.QUANTITY as 'DelQty'
    FROM purchaseorders
		LEFT OUTER JOIN purchaseorderitems ON purchaseorders.COMPANY = purchaseorderitems.COMPANY AND purchaseorders.BRANCH = purchaseorderitems.BRANCH AND purchaseorders.DOCID = purchaseorderitems.DOCID
		LEFT OUTER JOIN purchasedeliveryitems ON purchaseorders.COMPANY = purchasedeliveryitems.COMPANY AND purchaseorders.BRANCH = purchasedeliveryitems.BRANCH AND purchaseorders.DOCNO = purchasedeliveryitems.BASEDOCNO AND purchasedeliveryitems.BASELINEID = purchaseorderitems.LINEID
		LEFT OUTER JOIN purchasedeliveries ON purchasedeliveries.COMPANY = purchasedeliveryitems.COMPANY AND purchasedeliveries.BRANCH = purchasedeliveryitems.BRANCH AND purchasedeliveries.DOCID = purchasedeliveryitems.DOCID
    WHERE ( purchaseorders.COMPANY = pi_company ) and
          ( purchaseorders.BRANCH = pi_branch ) and
          ( purchaseorders.DOCTYPE = 'I' ) and
          ( purchaseorders.DOCNO >= v_po_from and purchaseorders.DOCNO <= v_po_to ) and
          ( (pi_duedate = 0 and purchaseorders.DOCDATE >= v_date_from and purchaseorders.DOCDATE <= v_date_to ) OR
            (pi_duedate = 1 and purchaseorders.DOCDUEDATE >= v_date_from and purchaseorders.DOCDUEDATE <= v_date_to))
          and
          ( purchaseorderitems.ITEMCODE >= v_item_from and purchaseorderitems.ITEMCODE <= v_item_to )
    ORDER BY purchaseorders.DOCNO;
ELSE
  INSERT
      INTO openpo (ORDERID, DOID, ORDERLINEID, DOLINEID, DOCNO, DOCSTATUS, DOCDATE, DOCDUEDATE, BPCODE, BPNAME, U_U_ETD, ITEMCODE, ITEMDESC, QUANTITY, OPENPRQTY, OPENQUANTITY, PRICE, LINESTATUS, DELNO, DELDATE, DELITEM, DELQTY)
  SELECT purchaseorders.DOCID,
         purchaseorderitems.LINEID,
         If (purchasedeliveries.DOCID is null, 1, purchasedeliveries.DOCID),
         If (purchasedeliveryitems.LINEID is null, 1, purchasedeliveryitems.LINEID),
         purchaseorders.DOCNO,
         purchaseorders.DOCSTATUS,
         purchaseorders.DOCDATE,
         purchaseorders.DOCDUEDATE,
         purchaseorders.BPCODE,
         purchaseorders.BPNAME,
         purchaseorders.U_U_ETD,
         purchaseorderitems.ITEMCODE,
         purchaseorderitems.ITEMDESC,
         purchaseorderitems.QUANTITY,
         purchaseorderitems.OPENPRQTY,
         purchaseorderitems.OPENQUANTITY,
         purchaseorderitems.PRICE,
         purchaseorderitems.LINESTATUS,
			   purchasedeliveries.DOCNO as 'DeliveryNo',
			   purchasedeliveries.DOCDATE as 'DelDate',
			   purchasedeliveryitems.ITEMCODE as 'DelItem',
			   purchasedeliveryitems.QUANTITY as 'DelQty'
    FROM purchaseorders
		LEFT OUTER JOIN purchaseorderitems ON purchaseorders.COMPANY = purchaseorderitems.COMPANY AND purchaseorders.BRANCH = purchaseorderitems.BRANCH AND purchaseorders.DOCID = purchaseorderitems.DOCID
		LEFT OUTER JOIN purchasedeliveryitems ON purchaseorders.COMPANY = purchasedeliveryitems.COMPANY AND purchaseorders.BRANCH = purchasedeliveryitems.BRANCH AND purchaseorders.DOCNO = purchasedeliveryitems.BASEDOCNO AND purchasedeliveryitems.BASELINEID = purchaseorderitems.LINEID
		LEFT OUTER JOIN purchasedeliveries ON purchasedeliveries.COMPANY = purchasedeliveryitems.COMPANY AND purchasedeliveries.BRANCH = purchasedeliveryitems.BRANCH AND purchasedeliveries.DOCID = purchasedeliveryitems.DOCID
    WHERE ( purchaseorders.COMPANY = pi_company ) and
          ( purchaseorders.BRANCH = pi_branch ) and
          ( purchaseorders.DOCSTATUS = v_status ) and
          ( purchaseorders.DOCTYPE = 'I' ) and
          ( purchaseorders.DOCNO >= v_po_from and purchaseorders.DOCNO <= v_po_to ) and
          ( (pi_duedate = 0 and purchaseorders.DOCDATE >= v_date_from and purchaseorders.DOCDATE <= v_date_to ) OR
            (pi_duedate = 1 and purchaseorders.DOCDUEDATE >= v_date_from and purchaseorders.DOCDUEDATE <= v_date_to))
          and
          ( purchaseorderitems.ITEMCODE >= v_item_from and purchaseorderitems.ITEMCODE <= v_item_to )
    ORDER BY purchaseorders.DOCNO;
END IF;

IF pi_invvisible = 1 THEN
 OPEN SO_cur;
 soloop: LOOP
    FETCH SO_cur INTO v_docno;
    IF v_done = 1 THEN
       Leave soloop;
    END IF;
         SET v_invno_all = '';
         SET v_count = 0;
         OPEN invoice_cur;
         invloop:LOOP
           FETCH invoice_cur INTO v_invno;
           IF v_done = 1 THEN
             Leave invloop;
           END IF;
                SET v_count = v_count + 1;
                IF  v_count = 1 THEN
                    SET v_invno_all = v_invno;
                ELSE
                    SET v_invno_all = CONCAT(v_invno_all, ', ', v_invno);
                END IF;
                SET v_done = 0;
         END LOOP invloop;
         CLOSE invoice_cur;
            UPDATE openpo
              SET  INVOICNO = v_invno_all
              WHERE DOCNO = v_docno;
            SET v_invno_all = '';
    SET v_done = 0;
  END LOOP soloop;
  CLOSE SO_cur;
END IF;

      SELECT * FROM openpo;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `outgoing_payments`
--

DROP PROCEDURE IF EXISTS `outgoing_payments`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `outgoing_payments`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `cheques` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BANKBRANCH` varchar(30) NULL default '',
    `BANK` varchar(30) NULL default '',
    `CHECKNO` varchar(30) NULL default '',
    `bankacctno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cheques (COMPANY,BRANCH,DOCID,DOCNO,BANK,BANKBRANCH,CHECKNO,checkdate,AMOUNT,bankacctno)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.BANK,a.BANKBRANCH,a.CHECKNO,a.checkdate,a.AMOUNT,a.bankacctno
        from paymentcheques a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1;
SELECT upper(c.COMPANYNAME) as COMPANY, payments.BRANCHCODE, payments.BPCODE, payments.BPNAME, payments.ADDRESS,
        payments.DOCNO, payments.DOCDATE, payments.REMARKS,
        payments.LASTUPDATEDBY,
        i.username as 'user',
        payments.PAIDAMOUNT as 'AMOUNT',
        '' as 'reftype',
        branches.BRANCHNAME, 0.00 as rebate,
        0.00 as penalty,
        if (cheques.DOCNO is null, '', concat(cheques.BANK,' - ',cheques.BANKBRANCH)) as bankname,
        if (cheques.DOCNO is null, '', cheques.bankacctno) as accountno,
        if (cheques.DOCNO is null, '', cheques.CHECKNO) as checkno, cheques.CHECKDATE as checkdate,
        if (cheques.DOCNO is null, '', '') as accountname,
        if (cheques.DOCNO is null, 0, cheques.AMOUNT) as ccamount,
        payments.remarks as xxx,
        x.GLACCTNO as bankbankref,
        x.GLACCTNAME as bankbankname,
        SUM(x.GLDEBIT - x.GLCREDIT) as bankbankamount
        FROM payments
        LEFT OUTER JOIN branches ON payments.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN customers ON payments.BPCODE = customers.CUSTNO
        AND payments.COMPANY = customers.COMPANY AND payments.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN cheques ON payments.COMPANY = cheques.COMPANY
        AND payments.DOCNO = cheques.DOCNO AND payments.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN companies c ON c.COMPANYCODE = pi_company
        LEFT OUTER JOIN journalentryitems x ON payments.COMPANY = x.COMPANY
                                               AND payments.BRANCHCODE = x.BRANCH
                                               AND payments.DOCNO = x.DOCNO
                                               AND x.GLACCTNAME not like 'Cash%'     
        LEFT OUTER JOIN users i ON payments.LASTUPDATEDBY = i.userid
        WHERE payments.DOCNO = pi_docno AND payments.COMPANY = pi_company AND payments.BRANCHCODE = pi_branch
        GROUP BY payments.DOCNO, x.GLACCTNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `outgoing_payments_wtax`
--

DROP PROCEDURE IF EXISTS `outgoing_payments_wtax`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `outgoing_payments_wtax`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
SELECT
      date(case when month(a.TAXDATE)in(1,2,3) then concat(year(a.TAXDATE),'-01-01')
           when month(a.TAXDATE)in(4,5,6) then concat(year(a.TAXDATE),'-04-01')
           when month(a.TAXDATE)in(7,8,9) then concat(year(a.TAXDATE),'-07-01')
           when month(a.TAXDATE)in(10,11,12) then concat(year(a.TAXDATE),'-10-01')
      end) as date1,
     date(case when month(a.TAXDATE)in(1,2,3) then concat(year(a.TAXDATE),'-03-31')
           when month(a.TAXDATE)in(4,5,6) then concat(year(a.TAXDATE),'-06-30')
           when month(a.TAXDATE)in(7,8,9) then concat(year(a.TAXDATE),'-09-30')
           when month(a.TAXDATE)in(10,11,12) then concat(year(a.TAXDATE),'-12-31')
      end) as date2, a.DOCNO,
      c.TAXID, a.BPNAME, a.ADDRESS, 'Tax No. here...' as COID, d.COMPANYNAME,
       'Address here...' as COADD, 'Zip Code here...' as COZIP, a.TAXDATE, a.WTAXCODE,
       IF (month(a.TAXDATE)in(1,4,7,10), sum(a.PAIDAMOUNT), 0.00) as 'FIRSTMONTH',
       IF (month(a.TAXDATE)in(2,5,8,11), sum(a.PAIDAMOUNT), 0.00) as 'SECONDMONTH',
       IF (month(a.TAXDATE)in(3,6,9,12), sum(a.PAIDAMOUNT), 0.00) as 'THIRDMONTH',
       IF (sum(a.WTAXAMOUNT) is null, 0.00, sum(a.WTAXAMOUNT)) as TAX_WITHHELD,
       f.WTAXDESC as TAX_WITHHELD_DESC
       FROM payments a
        LEFT OUTER JOIN paymentinvoices b ON a.COMPANY = b.COMPANY
        AND a.DOCNO = b.DOCNO AND a.BRANCHCODE = b.BRANCH
        LEFT OUTER JOIN customers c ON a.BPCODE = c.CUSTNO
        AND a.COMPANY = c.COMPANY AND a.BRANCHCODE = c.BRANCH
        LEFT OUTER JOIN companies d on d.COMPANYCODE = pi_company
        LEFT OUTER JOIN wtaxes f on a.WTAXCODE = f.WTAXCODE
WHERE a.DOCNO = pi_docno AND a.COMPANY = pi_company AND a.BRANCHCODE = pi_branch
GROUP BY a.DOCNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `paymentjournal_st`
--

DROP PROCEDURE IF EXISTS `paymentjournal_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `paymentjournal_st`(IN pi_company VARCHAR(30),   IN pi_branch VARCHAR(30),    IN pi_docno_fr VARCHAR(30), IN pi_docno_to VARCHAR(30),
                                     IN pi_date_fr DATE,          IN pi_date_to DATE)
BEGIN

DECLARE v_docno_fr  VARCHAR(30);
DECLARE v_docno_to  VARCHAR(30);
DECLARE v_bpcode_fr VARCHAR(30);
DECLARE v_bpcode_to VARCHAR(30);
DECLARE v_selectall INT;
DECLARE v_now       VARCHAR(30);

SET v_now = CAST(NOW() as char(30));

  IF pi_docno_fr is null THEN
    SET v_docno_fr = '';
  ELSE
    SET v_docno_fr = pi_docno_fr;
  END IF;

  IF pi_docno_to is null THEN
    SET v_docno_to = '';
  ELSE
    SET v_docno_to = pi_docno_to;
  END IF;

  IF v_docno_fr > '' and v_docno_to = '' THEN

    SET v_docno_to = v_docno_fr;

  ELSEIF v_docno_fr = '' and v_docno_to > '' THEN

    SET v_docno_fr = v_docno_to;

  ELSEIF v_docno_fr = '' and v_docno_to = '' THEN

    SET v_docno_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;


  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP1 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP1` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP2 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS LEDGER_TEMP ;
  CREATE TEMPORARY TABLE `LEDGER_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`      VARCHAR(100),
    `DOCID`        DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO JOURNAL_TEMP1 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, v_now,       JE.DOCID,      JE.LINEID,  JE.DOCDATE,  JE.DOCTYPE, JE.DOCNO, JE.GLACCTNO,     JE.GLACCTNAME, JE.GLDEBIT,
               JE.GLCREDIT,    JE.SLTYPE, JE.SLACCTNO, JE.SLACCTNAME, JE.SLDEBIT, JE.SLCREDIT, JE.REMARKS, JE.CURRENCY,  PY.CURRENCYRATE, PY.DOCTYPE,    PY.BPCODE,
               PY.BPNAME ,     IF(PY.DOCTYPE = 'A', PY.ADDRESS, ''), PY.REFNO
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO  ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR  ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN PAYMENTS PY   ON PY.COMPANY      = pi_company  AND PY.BRANCHCODE  = pi_branch  AND PY.DOCNO  = JE.DOCNO
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH =  pi_branch  AND
                  JE.DOCTYPE = 'PY' AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to;

        INSERT INTO JOURNAL_TEMP2 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
               SELECT * FROM JOURNAL_TEMP1 JE
                     WHERE JE.DOCNO  >= v_docno_fr  AND
                           JE.DOCNO  <= v_docno_to;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             IF(JE.SLACCTNO > '', JE.SLACCTNO, JE.GLACCTNO),
             IF(JE.SLACCTNAME > '', JE.SLACCTNAME, JE.GLACCTNAME),
             '',
             JE.REFNO,
             JE.GLDEBIT,
             JE.GLCREDIT
        FROM JOURNAL_TEMP2 JE
          WHERE JE.ORITYPE IN ('S', 'C');

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.GLDEBIT  > 0 THEN PA.REMARKS
                  WHEN JE.GLCREDIT > 0 THEN JE.PAYTO
                  ELSE '' END,
             JE.REFNO,
             CASE WHEN JE.GLDEBIT > 0  AND PA.GLACCTNO = JE.GLACCTNO THEN (PA.GROSSAMOUNT * JE.CURRENCYRATE)
                  ELSE JE.GLDEBIT END,
             JE.GLCREDIT
        FROM JOURNAL_TEMP2 JE
            LEFT OUTER JOIN PAYMENTACCOUNTS PA     ON PA.COMPANY = pi_company AND PA.BRANCH = pi_branch AND PA.DOCNO = JE.DOCNO AND PA.GLACCTNO = JE.GLACCTNO
          WHERE (JE.ORITYPE = 'A');



  SELECT * FROM LEDGER_TEMP ORDER BY DOCNO, DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `paymentvoucher_ghe`
--

DROP PROCEDURE IF EXISTS `paymentvoucher_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `paymentvoucher_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
DECLARE v_done INT;
DECLARE v_reftype VARCHAR(100);
DECLARE v_refno   VARCHAR(100);
DECLARE v_amount  DECIMAL(20,6);
DECLARE v_doctype VARCHAR(100);
DECLARE v_invamount  DECIMAL(20,6);
DECLARE v_bprefno VARCHAR(100);
DECLARE v_docdate DATE;
DECLARE v_docid DECIMAL(20,0);
DECLARE v_basetype VARCHAR(100);
DECLARE v_basedocno VARCHAR(100);
DECLARE v_pono VARCHAR(100);
DECLARE v_count INT;
DECLARE v_ORINO VARCHAR(100);
DECLARE v_basedocid DECIMAL(20,0);
DECLARE v_baselineid DECIMAL(20,0);
DECLARE payment_cur CURSOR FOR
  SELECT REFTYPE, REFNO, AMOUNT, DOCID
    FROM paymentinvoices
    WHERE COMPANY = pi_company AND BRANCH = pi_branch AND DOCNO = pi_docno;
DECLARE po_cur CURSOR FOR
SELECT AP.TOTALAMOUNT, AP.BPREFNO, AP.DOCDATE,
  CASE WHEN API.BASETYPE = 'PURCHASEDELIVERY' THEN PDI.BASEDOCNO WHEN API.BASETYPE = 'PURCHASEORDER' THEN API.BASEDOCNO ELSE '' END AS BASEDOC
  FROM APINVOICES AP
    LEFT OUTER JOIN APINVOICEITEMS API ON AP.COMPANY = API.COMPANY AND AP.BRANCH = API.BRANCH AND AP.DOCID = API.DOCID
    LEFT OUTER JOIN PURCHASEDELIVERIES PD ON PD.DOCNO = API.BASEDOCNO
    LEFT OUTER JOIN PURCHASEDELIVERYITEMS  PDI ON PD.COMPANY = PDI.COMPANY AND PD.BRANCH = PDI.BRANCH AND PD.DOCID = PDI.DOCID AND PDI.LINEID = API.BASELINEID
    WHERE AP.COMPANY = pi_company AND AP.BRANCH = pi_branch AND AP.DOCNO = v_refno
    GROUP BY  BASEDOC;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;
  DROP TEMPORARY TABLE IF EXISTS PAYMENT_TEMP ;
  CREATE TEMPORARY TABLE `PAYMENT_TEMP` (
    `REFTYPE` VARCHAR(100),
    `REFNO` VARCHAR(100),
    `AMOUNT` DECIMAL(20,6),
    `DOCDATE` DATE,
    `INVAMOUNT` DECIMAL(20,6),
    `BPREFNO` VARCHAR(100),
    `DOCID` DECIMAL(20,0),
    `PONO` VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
 OPEN payment_cur;
 soloop: LOOP
    FETCH payment_cur INTO v_reftype, v_refno, v_amount, v_docid;
    IF v_done = 1 THEN
       Leave soloop;
    END IF;
        SET v_pono = '';
        IF v_reftype = 'APINVOICE' THEN
            SET v_doctype = 'APINV';
            SET v_done = 0;
            SET v_count = 1;
            SET v_basedocno = '';
             OPEN po_cur;
             poloop: LOOP
                FETCH po_cur INTO v_invamount, v_bprefno, v_docdate, v_basedocno;
                IF v_done = 1 THEN
                   Leave poloop;
                END IF;
                IF v_basedocno > '' THEN
                  IF v_count = 1 THEN
                     SET v_pono = v_basedocno;
                  ELSE
                     SET v_pono = CONCAT(v_pono, ', ', v_basedocno);
                  END IF;
                  SET v_count = v_count + 1;
                END IF;
                SET v_done = 0;
             END LOOP poloop;
             CLOSE po_cur;
        ELSEIF v_reftype = 'APCREDITMEMO' THEN
            SET v_doctype = 'APDN';
            SELECT (TOTALAMOUNT * -1), BPREFNO, DOCDATE INTO v_invamount, v_bprefno, v_docdate
              FROM APCREDITMEMOS
              WHERE COMPANY = pi_company AND
                    BRANCH = pi_branch AND
                    DOCNO = v_refno;
        ELSEIF v_reftype = 'ARCREDITMEMO' THEN
            SET v_doctype = 'ARCN';
            SELECT TOTALAMOUNT, BPREFNO, DOCDATE INTO v_invamount, v_bprefno, v_docdate
              FROM ARCREDITMEMOS
              WHERE COMPANY = pi_company AND
                    BRANCH = pi_branch AND
                    DOCNO = v_refno;
        END IF;
        INSERT INTO PAYMENT_TEMP (REFTYPE, REFNO, AMOUNT, DOCDATE, INVAMOUNT, BPREFNO, DOCID, PONO)
              VALUES (v_doctype, v_refno, v_amount, v_docdate, v_invamount, v_bprefno, v_docid, v_pono);
    SET v_done = 0;
  END LOOP soloop;
  CLOSE payment_cur;
  SELECT * FROM PAYMENT_TEMP ORDER BY v_docid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `payment_voucher_ghe`
--

DROP PROCEDURE IF EXISTS `payment_voucher_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `payment_voucher_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `invoices_info` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` DATE NULL,
    `BASETYPE` varchar(30) NULL default '',
    `BASEDOCNO` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO invoices_info (COMPANY,BRANCH,DOCNO,DOCDATE, BASETYPE,BASEDOCNO)
      select A.COMPANY, A.BRANCH, A.DOCNO, A.DOCDATE, D.BASETYPE, D.BASEDOCNO
        from apinvoices a
             left outer join apinvoiceitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
        where a.COMPANY = pi_company and a.BRANCH = pi_branch
      group by A.DOCNO;
  INSERT
    INTO invoices_info (COMPANY,BRANCH,DOCNO,DOCDATE, BASETYPE,BASEDOCNO)
      select A.COMPANY, A.BRANCH, A.DOCNO, A.DOCDATE, D.BASETYPE, D.BASEDOCNO
        from apcreditmemos a
             left outer join apcreditmemoitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
        where a.COMPANY = pi_company and a.BRANCH = pi_branch
      group by A.DOCNO;
CREATE TEMPORARY TABLE  `cashcards2` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CASHCARD` varchar(30) NULL default '',
    `REFNO` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cashcards2 (COMPANY,BRANCH,DOCID,DOCNO,CASHCARD,REFNO,AMOUNT)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.CASHCARD,a.REFNO,a.AMOUNT as AMOUNT
        from paymentcashcards a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno;
CREATE TEMPORARY TABLE  `creditcards2` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREDITCARDNO` varchar(30) NULL default '',
    `CARDEXPIRETEXT` varchar(30) NULL default '',
    `creditcard` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO creditcards2 (COMPANY,BRANCH,DOCID,DOCNO,CREDITCARDNO,CARDEXPIRETEXT,creditcard,AMOUNT)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.CREDITCARDNO,a.CARDEXPIRETEXT,a.creditcard,a.AMOUNT
        from paymentcreditcards a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1;
CREATE TEMPORARY TABLE  `cheques` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BANKBRANCH` varchar(30) NULL default '',
    `BANK` varchar(30) NULL default '',
    `CHECKNO` varchar(30) NULL default '',
    `bankacctno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cheques (COMPANY,BRANCH,DOCID,DOCNO,BANK,BANKBRANCH,CHECKNO,checkdate,AMOUNT,bankacctno)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.BANK,a.BANKBRANCH,a.CHECKNO,a.checkdate,a.AMOUNT,a.bankacctno
        from paymentcheques a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1;
CREATE TEMPORARY TABLE  `main` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCHCODE` varchar(500) NULL default '',
    `BPCODE` varchar(30) NULL default '',
    `BPNAME` varchar(500) NULL default '',
    `ADDRESS` varchar(500) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` DATE NULL,
    `REMARKS` varchar(1000) NULL default '',
    `LASTUPDATEDBY` varchar(30) NULL default '',
    `user` varchar(30) NULL default '',
    `REFNO` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    `reftype` varchar(500) NULL default '',
    `BRANCHNAME` varchar(30) NULL default '',
    `rebate` NUMERIC(18,6) NULL default '0',
    `penalty` NUMERIC(18,6) NULL default '0',
    `bankname` varchar(30) NULL default '',
    `accountno` varchar(30) NULL default '',
    `checkno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `chequesamount` NUMERIC(18,6) NULL default '0',
    `ccname` varchar(30) NULL default '',
    `ccno` varchar(30) NULL default '',
    `ccexpiry` varchar(30) NULL default '',
    `creditcardsamount` NUMERIC(18,6) NULL default '0',
    `ccard` varchar(30) NULL default '',
    `ccardrefno` varchar(30) NULL default '',
    `ccardamount` NUMERIC(18,6) NULL default '0',
    `U_U_TELNO` varchar(30) NULL default '',
    `U_U_FAXNO` varchar(30) NULL default '',
    `U_U_EMAIL` varchar(30) NULL default '',
    `cust_fax` varchar(30) NULL default '',
    `cust_tel` varchar(30) NULL default '',
    `currency` varchar(30) NULL default '',
    `refdate` DATE NULL,
    `so_no` varchar(30) NULL default '',
    `contact_person` varchar(100) NULL default '',
    `currency_rate` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO main (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    `user`,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount,
    U_U_TELNO,
    U_U_FAXNO,
    U_U_EMAIL,
    cust_fax,
    cust_tel,
    currency,
    refdate,
    so_no,
    contact_person,
    currency_rate)
SELECT  upper(f.COMPANYNAME) as COMPANY,
        upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as BRANCHCODE,
        payment.BPCODE,
        payment.BPNAME,
        payment.ADDRESS,
        payment.DOCNO,
        date(payment.DOCDATE) as DOCDATE,
        payment.REMARKS,
        payment.LASTUPDATEDBY,
        i.username as 'user',
        case when payment.collfor='RS' then ''
             when payment.collfor='WU' then payment.REFNO
             when payment.collfor='SI' then
             if (paymentinvoices.reftype like 'NR%', accountslist.REFNO, paymentinvoices.REFNO)
        else '' end as REFNO,
        case when paymentinvoices.AMOUNT is null
        then payment.PAIDAMOUNT else paymentinvoices.AMOUNT
        end as 'AMOUNT',
        case  when payment.collfor='RS' then concat(payment.DEPARTMENT , ' - SUPPLIER DEPOSIT')
              when payment.collfor='WU' then 'OTHER CASH PAYMENTS'
              when payment.collfor='SI' then paymentinvoices.reftype
        else IF(paymentaccounts.SUBSIDIARY = '', paymentaccounts.GLACCTNAME, chartofaccountsubsidiaries.SUBSIDIARYNAME) end as 'reftype',
        branches.BRANCHNAME,
        0 as rebate,
        0 as penalty,
        if (cheques.DOCNO is null, '', concat(cheques.BANK,' - ',cheques.BANKBRANCH)) as bankname,
        if (cheques.DOCNO is null, '', cheques.bankacctno) as accountno,
        if (cheques.DOCNO is null, '', cheques.CHECKNO) as checkno,
        date(cheques.CHECKDATE) as checkdate,
        if (cheques.DOCNO is null, 0, cheques.AMOUNT) as chequesamount,
        if (creditcards2.DOCNO is null, '', creditcards.creditcardname) as ccname,
        if (creditcards2.DOCNO is null, '', creditcards2.CREDITCARDNO) as ccno,
        if (creditcards2.DOCNO is null, '', creditcards2.CARDEXPIRETEXT) as ccexpiry,
        if (creditcards2.DOCNO is null, 0, creditcards2.AMOUNT) as creditcardsamount,
        '' as ccard,
        '' as ccardrefno,
        0 as ccardamount,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       cust.FAX,
       cust.PHONE1,
       payment.currency,
       invref.DOCDATE,
       invref.BASEDOCNO,
       concat(cp.salutation, ' ', cp.name),
       payment.currencyrate
        FROM payments as payment
        LEFT OUTER JOIN branches ON payment.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN paymentinvoices ON payment.COMPANY = paymentinvoices.COMPANY
        AND payment.DOCNO = paymentinvoices.DOCNO AND payment.BRANCHCODE = paymentinvoices.BRANCH
        LEFT OUTER JOIN paymentaccounts ON payment.COMPANY = paymentaccounts.COMPANY
        AND payment.DOCNO = paymentaccounts.DOCNO AND payment.BRANCHCODE = paymentaccounts.BRANCH
        LEFT OUTER JOIN chartofaccountsubsidiaries ON paymentaccounts.SUBSIDIARY = chartofaccountsubsidiaries.SUBSIDIARY
        LEFT OUTER JOIN suppliers ON payment.BPCODE = suppliers.SUPPNO
        LEFT OUTER JOIN accountslist ON
        paymentinvoices.REFNO = accountslist.acctno and paymentinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN cheques ON payment.COMPANY = cheques.COMPANY
        AND payment.DOCNO = cheques.DOCNO AND payment.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN creditcards2 ON payment.COMPANY = creditcards2.COMPANY
        AND payment.DOCNO = creditcards2.DOCNO AND payment.BRANCHCODE = creditcards2.BRANCH
        LEFT OUTER JOIN creditcards ON creditcards.creditcard = creditcards2.creditcard
        LEFT OUTER JOIN users i ON payment.LASTUPDATEDBY = i.userid
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join suppliers cust on payment.BPCODE = cust.SUPPNO
            left outer join invoices_info invref on
                            payment.COMPANY = invref.company
                            AND payment.BRANCHCODE = invref.branch
                            AND paymentinvoices.REFNO = invref.docno
            left outer join suppliercontacts cp on payment.BPCODE = cp.SUPPNO
        WHERE payment.COMPANY = pi_company
        AND payment.BRANCHCODE = pi_branch
        AND payment.DOCNO = pi_docno;
Select * from main ORDER BY DOCDATE, DOCNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `payment_voucher_ghe_2`
--

DROP PROCEDURE IF EXISTS `payment_voucher_ghe_2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `payment_voucher_ghe_2`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `cheques` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BANKBRANCH` varchar(30) NULL default '',
    `BANK` varchar(30) NULL default '',
    `CHECKNO` varchar(30) NULL default '',
    `bankacctno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cheques (COMPANY,BRANCH,DOCID,DOCNO,BANK,BANKBRANCH,CHECKNO,checkdate,AMOUNT,bankacctno)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.BANK,a.BANKBRANCH,a.CHECKNO,a.checkdate,a.AMOUNT,a.bankacctno
        from paymentcheques a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1;
SELECT  upper(f.COMPANYNAME) as COMPANY,
        upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as BRANCHCODE,
        payments.BPCODE,
        payments.BPNAME,
        payments.ADDRESS,
        payments.DOCNO,
        date(payments.DOCDATE) as DOCDATE,
        payments.LASTUPDATEDBY,
        i.username as 'user',
        x.GLACCTNO as REFNO,
        x.GLACCTNAME as 'reftype',
        SUM(x.GLDEBIT - x.GLCREDIT) as 'AMOUNT',
        x.remarks as REMARKS,
        branches.BRANCHNAME,
        0.00 as rebate,
        0.00 as penalty,
        if (cheques.DOCNO is null, '', concat(cheques.BANK,' - ',cheques.BANKBRANCH)) as bankname,
        if (cheques.DOCNO is null, '', cheques.bankacctno) as accountno,
        if (cheques.DOCNO is null, '', cheques.CHECKNO) as checkno, cheques.CHECKDATE as checkdate,
        if (cheques.DOCNO is null, '', '') as accountname,
        if (cheques.DOCNO is null, 0, cheques.AMOUNT) as ccamount,
        e.U_U_TELNO,
        e.U_U_FAXNO,
        e.U_U_EMAIL,
        cust.FAX,
        cust.PHONE1,
        payments.currency,
        payments.currencyrate as currency_rate
        FROM payments
        LEFT OUTER JOIN branches ON payments.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN customers ON payments.BPCODE = customers.CUSTNO
        AND payments.COMPANY = customers.COMPANY AND payments.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN cheques ON payments.COMPANY = cheques.COMPANY
        AND payments.DOCNO = cheques.DOCNO AND payments.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN companies c ON c.COMPANYCODE = pi_company
        LEFT OUTER JOIN journalentryitems x ON payments.COMPANY = x.COMPANY
                                               AND payments.BRANCHCODE = x.BRANCH
                                               AND payments.DOCNO = x.DOCNO
                                               AND x.GLACCTNAME not like 'Cash%'
        LEFT OUTER JOIN users i ON payments.LASTUPDATEDBY = i.userid
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join suppliers cust on payments.BPCODE = cust.SUPPNO
            left outer join suppliercontacts cp on payments.BPCODE = cp.SUPPNO
        WHERE payments.COMPANY = pi_company
        AND payments.BRANCHCODE = pi_branch
        AND payments.DOCNO = pi_docno
        GROUP BY payments.DOCNO, x.GLACCTNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `pdc_as_of`
--

DROP PROCEDURE IF EXISTS `pdc_as_of`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `pdc_as_of`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date varchar(200))
BEGIN
SELECT  collections.BPNAME AS name,
        '' AS LOANTYPENAME,
        upper(companies.companyname) as COMPANY, collections.BRANCHCODE AS BRANCH,
        collections.BPCODE AS CUSTNO,
        collections.DOCNO as REFNO,
        collections.DOCDATE, collectionscheques.CHECKNO, collectionscheques.AMOUNT,
        collectionscheques.CHECKDATE,
        date(pi_date) AS d1,
        collectionscheques.BANK,
        UPPER(branches.BRANCHNAME) AS BRANCHNAME,
        case
        when collections.valuedate = date(pi_date) and collections.cleared <> '-1' then 'Applied PDC'
        when collectionscheques.cleareddate = date(pi_date) and collections.cleared = '-1' then 'Reversed PDC'
        else collections.REMARKS end as REMARKS,
        date(case
        when collections.valuedate = date(pi_date) and collections.cleared <> '-1' then IF(collections.valuedate = '0000-00-00', NULL, collections.valuedate)
        when collectionscheques.cleareddate = date(pi_date) and collections.cleared = '-1' then collectionscheques.cleareddate
        else null end) as VALUEDATE
        FROM collections
        LEFT OUTER JOIN collectionscheques ON collections.COMPANY = collectionscheques.COMPANY
        AND collections.DOCNO = collectionscheques.DOCNO AND collections.BRANCHCODE = collectionscheques.BRANCH
        LEFT OUTER JOIN collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN arinvoices ON collectionsinvoices.COMPANY = arinvoices.COMPANY
        AND collectionsinvoices.REFNO = arinvoices.DOCNO AND collectionsinvoices.BRANCH = arinvoices.BRANCH
        LEFT OUTER JOIN companies on collections.company = companies.companycode
        where collectionscheques.CHECKDATE >= pi_date AND collections.PDC = '1'
        AND collections.COMPANY = pi_company AND collections.BRANCHCODE = pi_branch
        AND collections.DOCSTAT NOT IN('D')
        GROUP BY collections.DOCNO
        ORDER BY collectionscheques.checkdate;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `po_bp_item_rpt_sp`
--

DROP PROCEDURE IF EXISTS `po_bp_item_rpt_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `po_bp_item_rpt_sp`(IN pi_bp_fr VARCHAR(30),    IN pi_bp_to VARCHAR(30), IN pi_item_fr VARCHAR(100),
                                     IN pi_item_to VARCHAR(100), IN pi_do_fr VARCHAR(30), IN pi_do_to VARCHAR(30),
                                     IN pi_po_fr VARCHAR(100),   IN pi_po_to VARCHAR(30),
                                     IN pi_date_fr DATE,         IN pi_date_to DATE,      IN pi_currency VARCHAR(20))
BEGIN
DECLARE v_item_from VARCHAR(100);
DECLARE v_item_to VARCHAR(100);
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_bp_from VARCHAR(30);
DECLARE v_bp_to VARCHAR(30);
DECLARE v_po_from VARCHAR(30);
DECLARE v_po_to VARCHAR(30);
DECLARE v_do_from VARCHAR(30);
DECLARE v_do_to VARCHAR(30);

  IF pi_bp_fr is null THEN SET v_bp_from = '';
  ELSE SET v_bp_from = pi_bp_fr;
  END IF;
  IF pi_bp_to is null THEN SET v_bp_to = '';
  ELSE SET v_bp_to = pi_bp_to;
  END IF;
  IF v_bp_to = '' THEN
    SET v_bp_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;

  IF pi_po_fr is null THEN SET v_po_from = '';
  ELSE SET v_po_from = pi_po_fr;
  END IF;
  IF pi_po_to is null THEN SET v_po_to = '';
  ELSE SET v_po_to = pi_po_to;
  END IF;
  IF v_po_to = '' THEN
    SET v_po_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;

  IF pi_do_fr is null THEN SET v_do_from = '';
  ELSE SET v_do_from = pi_do_fr;
  END IF;
  IF pi_do_to is null THEN SET v_do_to = '';
  ELSE SET v_do_to = pi_do_to;
  END IF;
  IF v_do_to = '' THEN
    SET v_do_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;

  IF pi_item_fr is null THEN SET v_item_from = '';
  ELSE SET v_item_from = pi_item_fr;
  END IF;
  IF pi_item_to is null THEN SET v_item_to = '';
  ELSE SET v_item_to = pi_item_to;
  END IF;
  IF v_item_from = '' and v_item_to = '' THEN
    SET v_item_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;

  IF pi_date_fr is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_fr;
  END IF;
  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;

  SELECT pdi.BASEDOCNO,
         pd.DOCNO,
         pd.DOCDATE,
         pd.BPCODE,
         pd.BPNAME,
         case WHEN pi_currency = 'LOCAL' THEN  pd.CURRENCYRATE * pdi.PRICE
              ELSE pdi.PRICE END as PRICE,
         pd.CURRENCY,
         pdi.ITEMCODE,
         pdi.ITEMDESC,
         pdi.QUANTITY,
         if(pdi.u_u_itemvolume > 0, pdi.u_u_itemvolume, i.volumesa) as u_u_itemvolume,
         IF(pi_currency = 'LOCAL', 'MYR', pd.CURRENCY) AS CURRENCY
    FROM purchasedeliveryitems pdi,
         purchasedeliveries pd,
         items i
   WHERE ( pdi.COMPANY = pd.COMPANY ) and
         ( pdi.BRANCH = pd.BRANCH ) and
         ( pdi.DOCID = pd.DOCID ) and
         ( pd.docno >= v_do_from and pd.docno <= v_do_to) and
         ( pd.BPCODE >= v_bp_from and pd.BPCODE <= v_bp_to ) and
         ( pd.DOCDUEDATE >= v_date_from and pd.DOCDUEDATE <= v_date_to ) and
         ( pdi.itemcode = i.itemcode ) and
         ( i.isinventory = 1) and
         ( pdi.ITEMCODE >= v_item_from and pdi.ITEMCODE <= v_item_to ) and
         ( pdi.BASEDOCNO >= v_po_from and pdi.BASEDOCNO <= v_po_to)
         ORDER BY pd.BPCODE, pdi.ITEMCODE, pdi.BASEDOCNO, pd.DOCNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `po_do_bp_rpt_sp`
--

DROP PROCEDURE IF EXISTS `po_do_bp_rpt_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `po_do_bp_rpt_sp`(IN pi_bp_fr VARCHAR(30), IN pi_bp_to VARCHAR(30), IN pi_item_fr VARCHAR(100), IN pi_item_to VARCHAR(100), IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_currency VARCHAR(20))
BEGIN
DECLARE v_item_from VARCHAR(100);
DECLARE v_item_to VARCHAR(100);
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_bp_from VARCHAR(30);
DECLARE v_bp_to VARCHAR(30);
  IF pi_bp_fr is null THEN SET v_bp_from = '';
  ELSE SET v_bp_from = pi_bp_fr;
  END IF;
  IF pi_bp_to is null THEN SET v_bp_to = '';
  ELSE SET v_bp_to = pi_bp_to;
  END IF;
  IF pi_bp_fr = '' and v_bp_to = '' THEN
    SET v_bp_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;
  IF pi_item_fr is null THEN SET v_item_from = '';
  ELSE SET v_item_from = pi_item_fr;
  END IF;
  IF pi_item_to is null THEN SET v_item_to = '';
  ELSE SET v_item_to = pi_item_to;
  END IF;
  IF v_item_from = '' and v_item_to = '' THEN
    SET v_item_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;
  IF pi_date_fr is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_fr;
  END IF;
  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;
IF pi_currency = 'LOCAL' THEN
     SELECT pdi.BASEDOCNO,
            pd.DOCDATE,
            pd.BPCODE,
            pd.BPNAME,
            SUM(pdi.QUANTITY * pd.CURRENCYRATE * pdi.PRICE ) as PRICE,
            pd.CURRENCY
       FROM purchasedeliveryitems pdi,
            purchasedeliveries pd
      WHERE ( pdi.COMPANY = pd.COMPANY ) and
            ( pdi.BRANCH = pd.BRANCH ) and
            ( pdi.DOCID = pd.DOCID ) and
            ( pd.BPCODE >= v_bp_from and pd.BPCODE <= v_bp_to ) and
            ( pd.DOCDATE >= v_date_from and pd.DOCDATE <= v_date_to ) and
            ( pdi.ITEMCODE >= v_item_from and pdi.ITEMCODE <= v_item_to )
            GROUP BY pdi.BASEDOCNO, pd.DOCDATE;
ELSE
     SELECT pdi.BASEDOCNO,
            pd.DOCDATE,
            pd.BPCODE,
            pd.BPNAME,
            SUM(pdi.QUANTITY * pdi.PRICE ) as PRICE,
            pd.CURRENCY
       FROM purchasedeliveryitems pdi,
            purchasedeliveries pd
      WHERE ( pdi.COMPANY = pd.COMPANY ) and
            ( pdi.BRANCH = pd.BRANCH ) and
            ( pdi.DOCID = pd.DOCID ) and
            ( pd.BPCODE >= v_bp_from and pd.BPCODE <= v_bp_to ) and
            ( pd.DOCDATE >= v_date_from and pd.DOCDATE <= v_date_to ) and
            ( pdi.ITEMCODE >= v_item_from and pdi.ITEMCODE <= v_item_to )
            GROUP BY pdi.BASEDOCNO, pd.DOCDATE;
END IF;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `po_item_rpt_sp`
--

DROP PROCEDURE IF EXISTS `po_item_rpt_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `po_item_rpt_sp`(IN pi_item_from VARCHAR(100), IN pi_item_to VARCHAR(100), IN pi_date_from DATE, IN pi_date_to DATE,
                                  IN pi_bp_fr VARCHAR(30), IN pi_bp_to VARCHAR(30), IN pi_rpt_type INT)
BEGIN
DECLARE v_item_from VARCHAR(100);
DECLARE v_item_to VARCHAR(100);
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_bp_from VARCHAR(30);
DECLARE v_bp_to   VARCHAR(30);

  IF pi_item_from is null THEN SET v_item_from = '';
  ELSE SET v_item_from = pi_item_from;
  END IF;
  IF pi_item_to is null THEN SET v_item_to = '';
  ELSE SET v_item_to = pi_item_to;
  END IF;
  IF v_item_from = '' and v_item_to = '' THEN
    SET v_item_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;
  IF pi_date_from is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_from;
  END IF;
  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;

  IF pi_bp_fr is null THEN SET v_bp_from = '';
  ELSE SET v_bp_from = pi_bp_fr;
  END IF;
  IF pi_bp_to is null THEN SET v_bp_to = '';
  ELSE SET v_bp_to = pi_bp_to;
  END IF;
  IF v_bp_from = '' and v_bp_to = '' THEN
    SET v_bp_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;

 IF pi_rpt_type = 0 THEN
  SELECT pdi.BASEDOCNO,
         pd.bpcode,
         pd.bpname,
         pd.DOCNO,
         pd.DOCDATE,
         pdi.ITEMCODE,
         pdi.ITEMDESC,
         sum(pdi.QUANTITY) AS QUANTITY,
         pdi.PRICE,
         pdi.LINETOTAL,
         pd.currency,
         IF(pdi.u_u_itemvolume = 0, i.volumesa, pdi.u_u_itemvolume) as itemvolume
    FROM purchasedeliveryitems pdi,
         purchasedeliveries pd,
         items i
   WHERE ( pdi.COMPANY = pd.COMPANY ) and
         ( pdi.BRANCH = pd.BRANCH ) and
         ( pdi.DOCID = pd.DOCID ) and
         ( pd.bpcode >= v_bp_from and pd.bpcode <= v_bp_to ) and
         ( pd.DOCDATE >= v_date_from and pd.DOCDATE <= v_date_to ) and
         ( pdi.ITEMCODE >= v_item_from and pdi.ITEMCODE <= v_item_to ) and
         ( i.itemcode = pdi.itemcode)
         GROUP BY pdi.ITEMCODE, pdi.PRICE;
 ELSE
  SELECT pdi.BASEDOCNO,
         pd.bpcode,
         pd.bpname,
         pd.DOCNO,
         pd.DOCDATE,
         pdi.ITEMCODE,
         pdi.ITEMDESC,
         pdi.QUANTITY,
         pdi.PRICE,
         pdi.LINETOTAL,
         pd.currency,
         IF(pdi.u_u_itemvolume = 0, i.volumesa, pdi.u_u_itemvolume) as itemvolume
    FROM purchasedeliveryitems pdi,
         purchasedeliveries pd,
         items i
   WHERE ( pdi.COMPANY = pd.COMPANY ) and
         ( pdi.BRANCH = pd.BRANCH ) and
         ( pdi.DOCID = pd.DOCID ) and
         ( pd.bpcode >= v_bp_from and pd.bpcode <= v_bp_to ) and
         ( pd.DOCDATE >= v_date_from and pd.DOCDATE <= v_date_to ) and
         ( pdi.ITEMCODE >= v_item_from and pdi.ITEMCODE <= v_item_to ) and
         ( i.itemcode = pdi.itemcode);
 END IF;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `price_list`
--

DROP PROCEDURE IF EXISTS `price_list`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `price_list`(IN pi_company VARCHAR(30),
                              IN pi_branch VARCHAR(30),
                              IN pi_pricelist VARCHAR(30),
                              IN pi_itemgroup VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `PRICELIST` (
    `PRICELIST` varchar(30) NULL default '',
    `PRICELISTNAME` varchar(30) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `PRICE` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO PRICELIST (PRICELIST,PRICELISTNAME,ITEMCODE,PRICE)
SELECT b.PRICELIST, b.PRICELISTNAME, a.ITEMCODE, a.PRICE
       FROM itempricelists a
LEFT OUTER JOIN pricelists b ON a.PRICELIST = b.PRICELIST;
SELECT
       upper(c.companyname) as COMPANY,
       pi_branch as BRANCH,
       upper(d.BRANCHNAME) as BRANCHNAME,
       upper(g.ITEMGROUPNAME) as ITEMGROUP,
       IF(pi_pricelist = '', 'ALL',UPPER(a.PRICELISTNAME)) AS PRICELISTNAME,
       IF(pi_itemgroup = '', 'ALL',UPPER(g.ITEMGROUPNAME)) AS ITEMGROUPNAME,
       a.ITEMCODE as ITEMCODE,
       i.ITEMDESC as ITEMDESC,
       IF(a.PRICE IS NULL, 0, a.PRICE) as PRICE,
       a.PRICELISTNAME as INVENTORY_TYPE
FROM PRICELIST a
LEFT OUTER JOIN ITEMS i ON a.ITEMCODE = i.ITEMCODE
LEFT OUTER JOIN itemgroups g ON i.ITEMGROUP = g.ITEMGROUP
LEFT OUTER JOIN companies c on c.companycode = pi_company
LEFT OUTER JOIN branches d ON d.BRANCHCODE = pi_branch
WHERE (pi_pricelist='' or (pi_pricelist<>'' and a.PRICELIST = pi_pricelist))
      AND (pi_itemgroup='' or (pi_itemgroup<>'' and g.ITEMGROUP = pi_itemgroup))
      order by a.ITEMCODE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `profitandloss_st`
--

DROP PROCEDURE IF EXISTS `profitandloss_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `profitandloss_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30),
                                 IN pi_leveltype INT, IN pi_periodmth INT, IN pi_periodyr INT, IN pi_subrpttype VARCHAR(10),
                                 IN pi_period01_fr DATE, IN pi_period01_to DATE,
                                 IN pi_period02_fr DATE, IN pi_period02_to DATE,
                                 IN pi_period03_fr DATE, IN pi_period03_to DATE,
                                 IN pi_period04_fr DATE, IN pi_period04_to DATE,
                                 IN pi_exzero INT, IN pi_isratio INT)
BEGIN

DECLARE v_noofloop INT;
DECLARE v_loopcount INT;
DECLARE v_date_fr DATE;
DECLARE v_date_to DATE;
DECLARE v_found BOOLEAN;

DECLARE v_psl01 NUMERIC(20,6);
DECLARE v_psl02 NUMERIC(20,6);
DECLARE v_psl03 NUMERIC(20,6);
DECLARE v_psl04 NUMERIC(20,6);
DECLARE v_psl05 NUMERIC(20,6);
DECLARE v_psl06 NUMERIC(20,6);
DECLARE v_psl07 NUMERIC(20,6);
DECLARE v_psl08 NUMERIC(20,6);
DECLARE v_psl09 NUMERIC(20,6);
DECLARE v_psl10 NUMERIC(20,6);
DECLARE v_psl11 NUMERIC(20,6);
DECLARE v_psl12 NUMERIC(20,6);
DECLARE v_pslvar NUMERIC(20,6);

  DROP TEMPORARY TABLE IF EXISTS BS_TEMP ;
  CREATE TEMPORARY TABLE  `BS_TEMP` (
    `SEQCODE`      VARCHAR(100),
    `LEVLCODE`     VARCHAR(100),
    `LEVLNAME`     VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `ACCTLEVEL`    INT,
    `CATENAME`     VARCHAR(100),
    `ACCTTYPE`     VARCHAR(100),
    `CATESEQ`      INT,
    `CATEGORY`     VARCHAR(100),
    `SPECIALACCT`  INT,
    `IS_DEBIT`     INT,
    `PERIOD01`     NUMERIC(20,6),
    `PERIOD02`     NUMERIC(20,6),
    `PERIOD03`     NUMERIC(20,6),
    `PERIOD04`     NUMERIC(20,6),
    `PERIOD05`     NUMERIC(20,6),
    `PERIOD06`     NUMERIC(20,6),
    `PERIOD07`     NUMERIC(20,6),
    `PERIOD08`     NUMERIC(20,6),
    `PERIOD09`     NUMERIC(20,6),
    `PERIOD10`     NUMERIC(20,6),
    `PERIOD11`     NUMERIC(20,6),
    `PERIOD12`     NUMERIC(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS stockvalue_tp ;
  CREATE TEMPORARY TABLE  `stockvalue_tp` (
    `STOCKACCT`    VARCHAR(100),
    `OPENINGACCT`  VARCHAR(100),
    `CLOSINGACCT`  VARCHAR(100),
    `SYEAR`        INT,
    `SMONTH`       INT,
    `STOCKVALUE`   NUMERIC(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT INTO stockvalue_tp (STOCKACCT,OPENINGACCT,CLOSINGACCT,SYEAR,SMONTH,STOCKVALUE)
      SELECT ST.CODE, ST.U_OPENINGSTOCK, ST.U_CLOSINGSTOCK, SD.U_YEAR, SD.U_MONTH, SD.U_STOCKVALUE
        FROM U_STOCKVALUEMAINT ST, U_STOCKVALUEMAINTDETAIL SD
          WHERE ST.CODE = SD.CODE;

  CALL chartofaccountcalevel_st(pi_leveltype, 'PL');

    

  SET v_loopcount = 1;

  CASE pi_subrpttype
       WHEN 'CUR' THEN SET v_noofloop = 1;
       WHEN 'CPR' THEN SET v_noofloop = 2;
       WHEN '3CL' THEN SET v_noofloop = 3;
       WHEN 'QTR' THEN SET v_noofloop = 4;
       WHEN '12M' THEN SET v_noofloop = 12;
       END CASE;

  SET v_found = TRUE;

  IF pi_subrpttype =  '12M' THEN
    SELECT DOCDATEFROM, DOCDATETO INTO v_date_fr, v_date_to
      FROM POSTINGPERIODS
      WHERE YR = pi_periodyr AND SUBNUM = pi_periodmth;

    IF v_date_fr IS NULL THEN
       SET v_found = FALSE;
    END IF;
  END IF;

  WHILE v_loopcount <= v_noofloop AND v_found DO

      IF pi_subrpttype <>  '12M' THEN
          IF v_loopcount = 1 THEN
             SET v_date_fr = pi_period01_fr;
             SET v_date_to = pi_period01_to;
          ELSEIF v_loopcount = 2 THEN
             SET v_date_fr = pi_period02_fr;
             SET v_date_to = pi_period02_to;
          ELSEIF v_loopcount = 3 THEN
             SET v_date_fr = pi_period03_fr;
             SET v_date_to = pi_period03_to;
          ELSE
             SET v_date_fr = pi_period04_fr;
             SET v_date_to = pi_period04_to;
          END IF;

      ELSE
          SET v_date_fr = DATE_SUB(v_date_fr, INTERVAL (v_loopcount - 1) MONTH);
          SET v_date_to = DATE_SUB(v_date_to, INTERVAL (v_loopcount - 1) MONTH);
      END IF;

     INSERT INTO BS_TEMP (SEQCODE,  LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT, IS_DEBIT,
                          PERIOD01, PERIOD02, PERIOD03, PERIOD04, PERIOD05, PERIOD06, PERIOD07, PERIOD08, PERIOD09, PERIOD10, PERIOD11, PERIOD12 )
                 SELECT CL.LEVLCODE,
                        CL.LEVLCODE, CL.LEVLNAME, CL.ACCTCODE, CL.ACCTNAME, CL.ACCTLEVEL, CL.CATENAME, CL.CATESEQ, CL.CATEGORY, CL.SPECIALACCT, CL.IS_DEBIT,
                        IF(v_loopcount = 1,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 2,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 3,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 4,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 5,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 6,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 7,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 8,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 9,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 10,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 11,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0),
                        IF(v_loopcount = 12,
                        CASE WHEN CL.SPECIALACCT = 5 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE)
                             WHEN CL.SPECIALACCT = 6 THEN IF(ST.STOCKVALUE IS NULL, 0, ST.STOCKVALUE * -1)
                             WHEN CL.IS_DEBIT = 1 THEN IF(SUM(JI.GLDEBIT - JI.GLCREDIT) IS NULL, 0, SUM(JI.GLDEBIT - JI.GLCREDIT))
                             WHEN CL.IS_DEBIT = 0 THEN IF(SUM(JI.GLCREDIT - JI.GLDEBIT) IS NULL, 0, SUM(JI.GLCREDIT - JI.GLDEBIT)) END, 0)
                   FROM COA_LEVEL CL
                      LEFT OUTER JOIN JOURNALENTRYITEMS JI ON JI.COMPANY = pi_company AND JI.BRANCH = pi_branch AND JI.GLACCTNO = CL.ACCTCODE AND
                                                              JI.DOCDATE >= v_date_fr AND JI.DOCDATE <= v_date_to
                      LEFT OUTER JOIN STOCKVALUE_TP ST ON CL.ACCTCODE = CASE WHEN CL.CATEGORY = 'PCS' AND CL.SPECIALACCT = 5 THEN ST.OPENINGACCT
                                                                             WHEN CL.CATEGORY = 'PCS' AND CL.SPECIALACCT = 6 THEN ST.CLOSINGACCT
                                                                             ELSE '' END AND
                                                          ST.SYEAR = CASE WHEN CL.CATEGORY = 'PCS' AND CL.SPECIALACCT = 5 THEN YEAR(DATE_SUB(v_date_fr, INTERVAL 1 MONTH))
                                                                           ELSE YEAR(v_date_to)END AND
                                                          ST.SMONTH = CASE WHEN CL.CATEGORY = 'PCS' AND CL.SPECIALACCT = 5 THEN MONTH(DATE_SUB(v_date_fr, INTERVAL 1 MONTH))
                                                                           ELSE MONTH(v_date_to)END
                   GROUP BY CL.ACCTCODE;

     SET v_loopcount = v_loopcount + 1;

  END WHILE;

   SELECT SUM(PERIOD01) AS PERIOD01, SUM(PERIOD02) AS PERIOD02, SUM(PERIOD03) AS PERIOD03, SUM(PERIOD04) AS PERIOD04,
          SUM(PERIOD05) AS PERIOD05, SUM(PERIOD06) AS PERIOD06, SUM(PERIOD07) AS PERIOD07, SUM(PERIOD08) AS PERIOD08,
          SUM(PERIOD09) AS PERIOD09, SUM(PERIOD10) AS PERIOD10, SUM(PERIOD11) AS PERIOD11, SUM(PERIOD12) AS PERIOD12,
          SUM(PERIOD01 - PERIOD02) AS VARIANCEAMT
       INTO v_psl01, v_psl02, v_psl03, v_psl04, v_psl05, v_psl06, v_psl07, v_psl08, v_psl09, v_psl10, v_psl11, v_psl12, v_pslvar
       FROM BS_TEMP
       WHERE CATEGORY = 'PSL'
       GROUP BY CATEGORY;

   SELECT SEQCODE, LEVLCODE, LEVLNAME, ACCTCODE,  ACCTNAME, ACCTLEVEL, CATENAME, CATESEQ, CATEGORY, SPECIALACCT, IS_DEBIT,
          SUM(PERIOD01) AS PERIOD01, SUM(PERIOD02) AS PERIOD02, SUM(PERIOD03) AS PERIOD03, SUM(PERIOD04) AS PERIOD04,
          SUM(PERIOD05) AS PERIOD05, SUM(PERIOD06) AS PERIOD06, SUM(PERIOD07) AS PERIOD07, SUM(PERIOD08) AS PERIOD08,
          SUM(PERIOD09) AS PERIOD09, SUM(PERIOD10) AS PERIOD10, SUM(PERIOD11) AS PERIOD11, SUM(PERIOD12) AS PERIOD12,
          SUM(PERIOD01 - PERIOD02) AS VARIANCEAMT, v_psl01 AS TPSL01, v_psl02 AS TPSL02, v_psl03 AS TPSL03, v_psl04 AS TPSL04,
          v_psl05 AS TPSL05, v_psl06 AS TPSL06, v_psl07 AS TPSL07, v_psl08 AS TPSL08, v_psl09 AS TPSL09, v_psl10 AS TPSL10,
          v_psl11 AS TPSL11, v_psl12 AS TPSL12, v_pslvar AS TPSLVAR
       FROM BS_TEMP
       GROUP BY LEVLCODE
       ORDER BY CATESEQ, SEQCODE;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `profit_and_loss`
--

DROP PROCEDURE IF EXISTS `profit_and_loss`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `profit_and_loss`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
DECLARE v_branch VARCHAR(100);
DECLARE gl_year VARCHAR(50);
SET v_branch = concat('%-', pi_branch,'-%');
  IF month(pi_date1) = 1 then
     set gl_year = year(pi_date1) - 1;
  ELSEIF month(pi_date1) <> 1 then
     set gl_year = year(pi_date1);
  end if;
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY,
             BRANCH,
             GLACCTNO,
             GLACCTNAME,
             GLDEBIT,
             GLCREDIT)
      SELECT a.COMPANY, a.BRANCH, b.GLACCTNO, b.GLACCTNAME,
             b.GLDEBIT as GLDEBIT,
             b.GLCREDIT as GLCREDIT
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and DATE_FORMAT(a.DOCDATE, '%y-%m') between DATE_FORMAT(pi_date1, '%y-%m')
             and DATE_FORMAT(pi_date2, '%y-%m')
             and (b.GLACCTNO not like '1%'
                 and b.GLACCTNO not like '2%'
                 and b.GLACCTNO not like '3%');
SELECT upper(c.COMPANYNAME) as Company,
       pi_branch as BRANCH,
       UPPER(b.BRANCHNAME) AS BRANCHNAME,
if(A.GLACCTNO like '4%', 0-(if (sum(a.GLDEBIT) is null, 0, sum(a.GLDEBIT))), (if (sum(a.GLDEBIT) is null, 0, sum(a.GLDEBIT)))) AS debit,
if(A.GLACCTNO like '4%', 0-(if (sum(a.GLCREDIT) is null, 0, sum(a.GLCREDIT))), (if (sum(a.GLCREDIT) is null, 0, sum(a.GLCREDIT)))) AS credit,
case when A.GLACCTNO like '4%' then 4
     when A.GLACCTNO like '5%' then 5
     when A.GLACCTNO like '6%' then 6
     when A.GLACCTNO like '7%' then 7
     when A.GLACCTNO like '8%' then 8
else 0
end as drawer_no,
c3.acctcode as level_2_no,
c3.acctname as level_2_name,
c2.acctcode AS level0_code,
c2.acctname AS level0_name,
a.GLACCTNO AS acct_code,
a.GLACCTNAME AS acct_name,
upper(case when A.GLACCTNO like '4%' then 'Turnover'
     when A.GLACCTNO like '5%' then 'Cost of Sales'
     when A.GLACCTNO like '6%' then 'Operating Costs'
     when A.GLACCTNO like '7%' then 'Non-Operating Income and Expenditure'
     when A.GLACCTNO like '8%' then 'Taxation and Extraordinary Items'
else ''
end) as drawer,
date(pi_date1) as date1,
date(pi_date2) as date2,
date(pi_date1)- interval 2 month as date3
FROM je a
left outer join chartofaccounts c1 on a.GLACCTNO = c1.formatcode
left outer join chartofaccounts c2 on c1.parentacct = c2.acctcode
left outer join chartofaccounts c3 on c2.parentacct = c3.acctcode
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
Group by a.GLACCTNO
Order by A.GLACCTNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `profit_loss_distribution`
--

DROP PROCEDURE IF EXISTS `profit_loss_distribution`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `profit_loss_distribution`(IN pi_company VARCHAR(30),
                                            IN pi_branch VARCHAR(30),
                                            IN pi_month VARCHAR(30),
                                            IN pi_year VARCHAR(30))
BEGIN
DECLARE v_glmonth VARCHAR(30);
DECLARE v_monthday DECIMAL;

SET v_glmonth = concat(pi_year,'-',pi_month);


DROP TEMPORARY TABLE IF EXISTS `je`;
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `U_EXPENSETYPE` varchar(30) NULL default '',
    `DOCDATE` DATE NULL,
    `JEDOCNO` varchar(30) NULL default '',
    `JVDOCNO` varchar(30) NULL default '',
    `JVDOCID` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `ITEMNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `U_EXPDISTRIBUTION` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;



DROP TEMPORARY TABLE IF EXISTS `jve`;
CREATE TEMPORARY TABLE  `jve` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `BRANCHNAME` varchar(100) NULL default '',
    `DRAWER` varchar(255) NULL default '',
    `DRAWER_NO` varchar(3) NULL default '',
    `level_2_no` varchar(100) NULL default '',
    `level_2_name` varchar(255) NULL default '',
    `level0_code` varchar(100) NULL default '',
    `level0_name` varchar(255) NULL default '',
    `acct_code` varchar(100) NULL default '',
    `acct_name` varchar(255) NULL default '',
    `DEBIT` NUMERIC(18,6) NULL default '0',
    `CREDIT` NUMERIC(18,6) NULL default '0',
    `DOCDATE` DATE NULL,
    `MONTHNAME` varchar(30) NULL default '',
    `MONTHDAY` varchar(2) NULL default '',
    `U_EXPENSETYPE` varchar(30) NULL default '',
    `U_EXPDISTRIBUTION` varchar(100) NULL default '',
    `ORDERNO` varchar(2) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

DROP TEMPORARY TABLE IF EXISTS `expdistribution`;
CREATE TEMPORARY TABLE  `expdistribution` (
    `ISLAND` varchar(10) NULL default '',
    `AREA` varchar(50) NULL default '',
    `CODE` varchar(50) NULL default '',
    `NAME` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


DROP TEMPORARY TABLE IF EXISTS `xchartofaccounts`;
CREATE TEMPORARY TABLE  `xchartofaccounts` (
    `lev1acctname` varchar(255) NULL default '',
    `lev1acctcode` varchar(50) NULL default '',
    `lev2acctname` varchar(255) NULL default '',
    `lev2acctcode` varchar(50) NULL default '',
    `lev3acctname` varchar(255) NULL default '',
    `lev3acctcode` varchar(50) NULL default '',
    `lev4acctname` varchar(255) NULL default '',
    `lev4acctcode` varchar(50) NULL default '',
    `lev5acctname` varchar(255) NULL default '',
    `lev5acctcode` varchar(50) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;






  INSERT
    INTO je ()
      SELECT a.COMPANY, a.BRANCH,
             b.GLDEBIT as GLDEBIT,
             b.GLCREDIT as GLCREDIT,
             c.u_expensestype,
             a.DOCDATE,
             a.docno as 'jedocno',
             jv.docno as 'jvdocno',
             jvi.docid as 'jvdocid',
             b.GLACCTNO,
             jvi.itemno,
             b.GLACCTNAME,
             jvi.u_expdistri
             FROM journalentries a
             left outer join journalentryitems b on  b.COMPANY = a.COMPANY and b.BRANCH = a.BRANCH and b.docid = a.docid
             left outer join journalvouchers jv on a.COMPANY = jv.COMPANY and a.BRANCH = jv.BRANCH and a.docno = jv.docno
             left outer join journalvoucheritems jvi on  jv.COMPANY = jvi.COMPANY and
                                                         jv.BRANCH = jvi.BRANCH and
                                                         jv.docid=jvi.docid and
                                                         b.GLACCTNO = jvi.itemno
             left outer join chartofaccounts c on b.GLACCTNO=c.acctcode
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and DATE_FORMAT(a.DOCDATE, '%Y-%m')=v_glmonth
             and (b.GLACCTNO not like '1%'
                 and b.GLACCTNO not like '2%'
                 and b.GLACCTNO not like '3%');

INSERT
    INTO jve ()
SELECT upper(c.COMPANYNAME) as Company,
       pi_branch as BRANCH,
       UPPER(b.BRANCHNAME) AS BRANCHNAME,
upper(case when A.GLACCTNO like '4%' then 'Turnover'
     when A.GLACCTNO like '5%' then 'Cost of Sales'
     when A.GLACCTNO like '6%' then 'Operating Costs'
     when A.GLACCTNO like '7%' then 'Non-Operating Income and Expenditure'
     when A.GLACCTNO like '8%' then 'Taxation and Extraordinary Items'
else ''
end) as drawer,
case when A.GLACCTNO like '4%' then 4
     when A.GLACCTNO like '5%' then 5
     when A.GLACCTNO like '6%' then 6
     when A.GLACCTNO like '7%' then 7
     when A.GLACCTNO like '8%' then 8
else 0
end as drawer_no,
c3.acctcode as level_2_no,
case when (c3.acctcode='6100100000' and upper(a.u_expensetype)='FIXED') then 'FIXED & OTHER ADMINISTRATIVE EXPENSES'
     when (c3.acctcode='6100100000' and upper(a.u_expensetype)<>'FIXED') then 'GENERAL & ADMINISTRATIVE EXPENSES'
     when c3.acctcode='7100100000' then 'ADD: OTHER INCOME  &  EXPENSES'
     when c3.acctcode='4100300000' then 'REVENUES'
else c3.acctname end as 'level_2_name',
c2.acctcode AS level0_code,
c2.acctname AS level0_name,
a.GLACCTNO AS acct_code,
a.GLACCTNAME AS acct_name,
case 
     when A.GLACCTNO like '6%' then if(sum(a.GLDEBIT) is null, 0, (sum(a.GLDEBIT)*-1) )
     when A.GLACCTNO like '7%' then if(sum(a.GLDEBIT) is null, 0, (sum(a.GLDEBIT)*-1) )
else if(sum(a.GLDEBIT) is null, 0, sum(a.GLDEBIT)) END as 'debit',
case 
     when A.GLACCTNO like '6%' then if(sum(a.GLCREDIT) is null, 0, (sum(a.GLCREDIT)*-1) )
     when A.GLACCTNO like '7%' then if(sum(a.GLCREDIT) is null, 0, (sum(a.GLCREDIT)*-1) )
else if(sum(a.GLDEBIT) is null, 0, sum(a.GLCREDIT)) END as 'credit',
a.DOCDATE as 'docdate',
monthname(a.DOCDATE) as 'monthname',
DAY(LAST_DAY(a.DOCDATE)) as 'monthday',
if(a.u_expensetype is null,'',a.u_expensetype) as 'u_expensetype',
if(a.U_EXPDISTRIBUTION is null,'',a.U_EXPDISTRIBUTION) as 'U_EXPDISTRIBUTION',
case when c3.acctcode='4100300000' then 2
     when (c3.acctcode='6100100000' and upper(a.u_expensetype)='FIXED') then 3
     when (c3.acctcode='6100100000' and upper(a.u_expensetype)<>'FIXED') then 4
     when c3.acctcode='7100100000' then 5
else 6 end as 'ORDERNO'
FROM je a
left outer join chartofaccounts c1 on a.GLACCTNO = c1.formatcode
left outer join chartofaccounts c2 on c1.parentacct = c2.acctcode
left outer join chartofaccounts c3 on c2.parentacct = c3.acctcode
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
Group by a.GLACCTNO
Order by A.GLACCTNO;

INSERT
    INTO expdistribution ()
    SELECT u_island,u_area,code,name FROM u_expensedistribution group by u_island,u_area,code order by u_island,u_area,code;


select j.orderno,e.island,e.area,e.code,e.name,trim(substring(e.name, instr(e.name, '-')+ 1)) as 'station',

          (CASE   WHEN (trim(j.U_EXPDISTRIBUTION='INDIRECT/COMMON EXPENSE')) THEN
                  (CASE WHEN (trim(substring_index(e.name,'-',1))='FILOIL') THEN ((j.debit-j.credit)/(select count(*) from u_expensedistribution where trim(substring_index(name,'-',1)) = 'FILOIL')) END)
             WHEN (trim(j.U_EXPDISTRIBUTION='LUZON')) THEN
                  (CASE WHEN (trim(substring_index(e.name,'-',1)) = 'FILOIL' AND e.island='LUZON') THEN ((j.debit-j.credit)/(select count(*) from u_expensedistribution where trim(substring_index(name,'-',1)) = 'FILOIL' AND u_island='LUZON')) END)
             WHEN (trim(j.U_EXPDISTRIBUTION='VISAYAS')) THEN
                  (CASE WHEN (trim(substring_index(e.name,'-',1)) = 'FILOIL' AND e.island='VISAYAS') THEN ((j.debit-j.credit)/(select count(*) from u_expensedistribution where trim(substring_index(name,'-',1)) = 'FILOIL' AND u_island='VISAYAS')) END)
             WHEN (trim(j.U_EXPDISTRIBUTION='MINDANAO')) THEN
                  (CASE WHEN (trim(substring_index(e.name,'-',1)) = 'FILOIL' AND e.island='MINDANAO') THEN ((j.debit-j.credit)/(select count(*) from u_expensedistribution where trim(substring_index(name,'-',1)) = 'FILOIL' AND u_island='MINDANAO')) END)
             WHEN (trim(substring_index(j.U_EXPDISTRIBUTION,'-',1))='AREA') THEN
                  (CASE WHEN (upper(trim(e.area))=upper(trim(substring_index(j.U_EXPDISTRIBUTION,'-',-1)))) THEN ((j.debit-j.credit)/(select count(*) from u_expensedistribution where trim(substring_index(name,'-',1)) = 'FILOIL' AND upper(u_area)=upper(trim(substring_index(j.U_EXPDISTRIBUTION,'-',-1))))) END )
             WHEN j.U_EXPDISTRIBUTION=e.name THEN
                  (CASE WHEN (trim(substring_index(e.name,'-',1))='FILOIL') THEN ((j.debit-j.credit)/(select count(*) from u_expensedistribution where name=j.U_EXPDISTRIBUTION)) END)
             WHEN (trim(j.U_EXPDISTRIBUTION='-') or trim(j.U_EXPDISTRIBUTION='')) THEN 0
       ELSE 0 END)
       AS 'divmount',
       (j.debit-j.credit) as 'expamount',
       j.company,j.branch,j.branchname,j.drawer_no,j.drawer,
       j.level_2_no,j.level_2_name,j.level0_code,j.level0_name,
       j.acct_code,j.acct_name,j.debit,j.credit,j.docdate,UPPER(j.monthname) as 'monthname',j.monthday,pi_year,
       j.u_expensetype,j.U_EXPDISTRIBUTION,v_glmonth
       from jve j,expdistribution e
       where trim(substring_index(e.name,'-',1)) = 'FILOIL';


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `profit_loss_sub`
--

DROP PROCEDURE IF EXISTS `profit_loss_sub`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `profit_loss_sub`(IN pi_company VARCHAR(30),
                                            IN pi_branch VARCHAR(30),
                                            IN pi_month VARCHAR(30),
                                            IN pi_year VARCHAR(30))
BEGIN
DECLARE v_glmonth VARCHAR(30);
DECLARE v_monthday DECIMAL;

SET v_glmonth = concat(pi_year,'-',pi_month);
SET v_monthday = DAY(LAST_DAY(concat(pi_year,'-',pi_month,'-1')));



DROP TABLE IF EXISTS `expdistribution`;
CREATE TABLE  `expdistribution` (
    `U_ISLAND` varchar(10) NULL default '',
    `U_AREA` varchar(50) NULL default '',
    `CODE` varchar(50) NULL default '',
    `NAME` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


DROP TABLE IF EXISTS `ar_sales`;
CREATE TABLE  `ar_sales` (
    `bpname` varchar(100) NULL default '',
    `bpareacode` varchar(30) NULL default '',
    `bpareaname` varchar(100) NULL default '',
    `volume` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  INSERT
    INTO ar_sales ()
          select 
                 a.bpname,c.u_area as 'bpareacode',
                 uf.name as 'bpareaname',
                 sum(ai.quantity) as 'volume'
          from arinvoices a
          left outer join arinvoiceitems ai on a.company=ai.company and a.branch=ai.branch and a.docid=ai.docid
          left outer join items i on ai.itemcode=i.itemcode
          left outer join customers c on a.bpcode=c.custno
          left outer join u_freight uf on c.u_area=uf.code
          where i.itemgroup in ('1','2')
                and date_format(a.docdate,'%Y-%m') = v_glmonth
                and a.branch = 'HO'
          group by a.bpname;


  INSERT
    INTO expdistribution ()
          SELECT u_island,u_area,code,name
          FROM u_expensedistribution
          where trim(substring_index(name,'-',1)) = 'FILOIL'
          group by u_island,u_area,code
          order by u_island,u_area,code;


select 0 as orderno,e.u_island as island,e.u_area as area,e.code,trim(substring(e.name, instr(e.name, '-')+ 1)) as 'station',
       (case when e.name=ars.bpname then if(ars.volume is null,0,ars.volume) else 0 end) as 'divmount',
       upper('Volume in Liters for the month') as level_2_name,'' as level0_name,
       '' as acct_name
       from expdistribution e,ar_sales ars

UNION


select 1 as orderno,e.u_island as island,e.u_area as area,e.code,trim(substring(e.name, instr(e.name, '-')+ 1)) as 'station',
       (case when e.name=ars.bpname then if(ars.volume is null,0,(ars.volume/v_monthday)) else 0 end) as 'divmount',
       upper('Ave. Daily Volume') as level_2_name,'' as level0_name,
       '' as acct_name
       from expdistribution e,ar_sales ars;

DROP TABLE IF EXISTS `ar_sales`;
DROP TABLE IF EXISTS `expdistribution`;





END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `purchaseorder_report`
--

DROP PROCEDURE IF EXISTS `purchaseorder_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `purchaseorder_report`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM purchaseorders A
        LEFT OUTER JOIN purchaseorderitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `purchase_analysis`
--

DROP PROCEDURE IF EXISTS `purchase_analysis`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `purchase_analysis`(IN comp_id varchar(200),
                             IN branch_no varchar(200),
                             IN date_fm varchar(200),
                             IN date_to varchar(200))
BEGIN
DECLARE v_companyname varchar(100);
DECLARE v_branchname varchar(100);
CREATE TEMPORARY TABLE  `main` (
    `company` varchar(30) NULL default '',
    `branchname` varchar(30) NULL default '',
    `datefm` DATE NULL,
    `dateto` DATE NULL,
    `docdate` DATE NULL,
    `docduedate` DATE NULL,
    `docno` varchar(30) NULL default '',
    `bpcode` varchar(30) NULL default '',
    `bpname` varchar(500) NULL default '',
    `salesperson` varchar(500) NULL default '',
    `itemcode` varchar(30) NULL default '',
    `itemdesc` varchar(500) NULL default '',
    `whscode` varchar(30) NULL default '',
    `serialno` varchar(1000) NULL default '',
    `unit` varchar(30) NULL default '',
    `quantity` NUMERIC(18,6) NULL default '0',
    `unitprice` NUMERIC(18,6) NULL default '0',
    `itemcost` NUMERIC(18,6) NULL default '0',
    `vatcode` varchar(30) NULL default '',
    `vatamount` NUMERIC(18,6) NULL default '0',
    `totalcost` NUMERIC(18,6) NULL default '0',
    `linetotal` NUMERIC(18,6) NULL default '0',
    `gpamount` NUMERIC(18,6) NULL default '0',
    `percentage` NUMERIC(18,6) NULL default '0',
    `orderx` NUMERIC(18,6) NULL default '0',
    INDEX IDX_1 (`orderx`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
select upper(a.companyname), upper(concat(b.branchcode, ' - ', b.branchname)) into v_companyname, v_branchname from companies a, branches b  where b.companycode=a.companycode and a.companycode=comp_id and b.branchcode=branch_no;
INSERT
    INTO main (
    company,
    branchname,
    datefm,
    dateto,
    docdate,
    docduedate,
    docno,
    bpcode,
    bpname,
    salesperson,
    itemcode,
    itemdesc,
    whscode,
    serialno,
    unit,
    quantity,
    unitprice,
    itemcost,
    vatcode,
    vatamount,
    totalcost,
    linetotal,
    gpamount,
    percentage,
    orderx)
SELECT
  v_companyname as company,
  v_branchname as branchname,
  DATE(date_fm) as datefm,
  DATE(date_to) as dateto,
  t0.docdate,
  t0.docduedate,
  t0.docno,
  t0.bpcode,
  t0.bpname,
  sp.SALESPERSONNAME,
  if(t1.doctype = 'S', t1.GLACCTNO, t1.itemcode),
  t1.itemdesc,
  t1.whscode,
  concat('SN: ',replace(mid(t1.sbnids,locate('|',t1.sbnids)+1,locate('|',t1.sbnids,locate('|',t1.sbnids)+1)-locate('|',t1.sbnids)-1),'`',','), ' ',
        'CH: ', replace(mid(sbnids, locate('|',sbnids,locate('|',sbnids)+1)+1,locate('|',sbnids,locate('|',sbnids,locate('|',sbnids)+1)+1)-locate('|',sbnids,locate('|',sbnids)+1)-1),'`',',')) as serialno,
  i.uomsa,
  sum(t1.quantity),
  t1.unitprice,
  t1.itemcost,
  t1.vatcode,
  t1.vatamount,
  sum(t1.itemcost * t1.quantity),
  if(t1.doctype = 'S', sum(t1.unitprice), sum(t1.unitprice * t1.quantity)),
  0 as gpamount,
  0 as percentage,
  1
FROM apinvoices t0
  left outer join apinvoiceitems t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
  left outer join departments t3 ON t0.department = t3.department
  LEFT OUTER JOIN paymentterms pt ON t0.PAYMENTTERM = pt.PAYMENTTERM
  LEFT OUTER JOIN items I ON t1.itemcode = i.itemcode
  LEFT OUTER JOIN suppliers f on t0.BPCODE = f.SUPPNO
  LEFT OUTER JOIN salespersons sp on f.SALESPERSON = sp.SALESPERSON
WHERE t0.company = comp_id
      AND t0.branch = branch_no
      AND t0.docdate between date_fm and date_to
      AND t0.DOCSTATUS NOT IN('D')
  Group by t0.DOCNO, t1.itemcode;
INSERT
    INTO main (
    company,
    branchname,
    datefm,
    dateto,
    docdate,
    docduedate,
    docno,
    bpcode,
    bpname,
    salesperson,
    itemcode,
    itemdesc,
    whscode,
    serialno,
    unit,
    quantity,
    unitprice,
    itemcost,
    vatcode,
    vatamount,
    totalcost,
    linetotal,
    gpamount,
    percentage,
    orderx)
SELECT
  v_companyname as company,
  v_branchname as branchname,
  DATE(date_fm) as datefm,
  DATE(date_to) as dateto,
  t0.docdate,
  t0.docduedate,
  t0.docno,
  t0.bpcode,
  t0.bpname,
  sp.SALESPERSONNAME,
  if(t1.doctype = 'S', t1.GLACCTNO, t1.itemcode),
  t1.itemdesc,
  t1.whscode,
  concat('SN: ',replace(mid(t1.sbnids,locate('|',t1.sbnids)+1,locate('|',t1.sbnids,locate('|',t1.sbnids)+1)-locate('|',t1.sbnids)-1),'`',','), ' ',
        'CH: ', replace(mid(sbnids, locate('|',sbnids,locate('|',sbnids)+1)+1,locate('|',sbnids,locate('|',sbnids,locate('|',sbnids)+1)+1)-locate('|',sbnids,locate('|',sbnids)+1)-1),'`',',')) as serialno,
  i.uomsa,
  0-(sum(t1.quantity)),
  t1.unitprice,
  t1.itemcost,
  t1.vatcode,
  0-(t1.vatamount),
  0-(sum(t1.itemcost * t1.quantity)),
  0-(if(t1.doctype = 'S', sum(t1.unitprice), sum(t1.unitprice * t1.quantity))),
  0 as gpamount,
  0 as percentage,
  2
FROM apcreditmemos t0
  left outer join apcreditmemoitems t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
  left outer join departments t3 ON t0.department = t3.department
  LEFT OUTER JOIN paymentterms pt ON t0.PAYMENTTERM = pt.PAYMENTTERM
  LEFT OUTER JOIN items I ON t1.itemcode = i.itemcode
  LEFT OUTER JOIN suppliers f on t0.BPCODE = f.SUPPNO
  LEFT OUTER JOIN salespersons sp on f.SALESPERSON = sp.SALESPERSON
WHERE t0.company = comp_id
      AND t0.branch = branch_no
      AND t0.docdate between date_fm and date_to
      AND t0.DOCSTATUS NOT IN('D')
 Group by t0.DOCNO, t1.itemcode;
select * from main order by orderx;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `purchase_book`
--

DROP PROCEDURE IF EXISTS `purchase_book`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `purchase_book`(
	IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), 
	IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
	DROP TABLE IF EXISTS tbl_withfreight;
	CREATE TABLE tbl_withfreight(
		company varchar(30) null default '',
		branch varchar(30) null default '',
		docno varchar(30) null default ''
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	INSERT INTO tbl_withfreight()
		SELECT DISTINCT api.company, api.branch, api.docno
		FROM apinvoices AS api
			LEFT JOIN apinvoiceitems AS apid
				ON api.company = apid.company AND api.branch = apid.branch AND api.docid = apid.docid
		WHERE apid.itemdesc LIKE '%freight%out%'
			AND api.company = pi_company AND api.branch = pi_branch
			AND api.docdate BETWEEN pi_date1 AND pi_date2;
	

	DROP TEMPORARY TABLE IF EXISTS book;
	CREATE TEMPORARY TABLE book(
		COMPANY varchar(30) null default '',
		BRANCH varchar(30) null default '',
		BRANCHNAME varchar(30) null default '',
		DATE1 date null,
		DATE2 date null,
		SOURCE varchar(30) null default '',
		DOCDATE date null,
		BPCODE varchar(100) null default '',
		BPNAME varchar(500) null default '',
		INVENTORY numeric(18,6) null default 0,
		INPUTVAT numeric(18,6) null default 0,
		PAYABLE numeric(18,6) null default 0,
		ewt numeric(18, 6) null default 0
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	INSERT INTO book()
		SELECT UPPER(f.COMPANYNAME) AS COMPANY,
			pi_branch AS BRANCH,
			UPPER(CONCAT(pi_branch, ' - ', e.BRANCHNAME)) AS BRANCHNAME,
			DATE(pi_date1) AS DATE1,
			DATE(pi_date2) AS DATE2,
			a.DOCNO AS SOURCE,
			a.DOCDATE,
			a.BPCODE,
			a.BPNAME,
			
			a.totalbefdisc AS 'INVENTORY',
			a.VATAMOUNT AS INPUTVAT,
			a.TOTALAMOUNT AS PAYABLE,
			a.wtaxamount
		FROM apinvoices a
			LEFT OUTER JOIN branches e ON e.BRANCHCODE = pi_branch
			LEFT OUTER JOIN companies f ON f.COMPANYCODE = pi_company
		WHERE a.COMPANY = pi_company AND a.BRANCH = pi_branch
			AND a.DOCDATE BETWEEN pi_date1 AND pi_date2
			AND a.DOCSTATUS NOT IN ('D') AND a.TOTALAMOUNT <> 0
			AND a.docno NOT IN (SELECT wf.docno 
				FROM tbl_withfreight AS wf)
			AND a.bprefno NOT IN (SELECT wf.docno 
				FROM tbl_withfreight AS wf)
		GROUP BY a.DOCNO
		ORDER BY a.DOCDATE ASC;
	INSERT INTO book()
		SELECT UPPER(f.COMPANYNAME) AS COMPANY,
			pi_branch AS BRANCH,
			UPPER(CONCAT(pi_branch, ' - ', e.BRANCHNAME)) AS BRANCHNAME,
			DATE(pi_date1) AS DATE1,
			DATE(pi_date2) AS DATE2,
			a.DOCNO AS SOURCE,
			a.DOCDATE,
			a.BPCODE,
			a.BPNAME,
			
			a.totalbefdisc * -1 AS 'INVENTORY',
			0 - (a.VATAMOUNT) AS INPUTVAT,
			0 - (a.TOTALAMOUNT) AS PAYABLE,
			a.wtaxamount
		FROM apcreditmemos a
			LEFT OUTER JOIN branches e ON e.BRANCHCODE = pi_branch
			LEFT OUTER JOIN companies f ON f.COMPANYCODE = pi_company
		WHERE a.COMPANY = pi_company AND a.BRANCH = pi_branch
			AND a.DOCDATE BETWEEN pi_date1 AND pi_date2
			AND a.DOCSTATUS NOT IN ('D') AND a.TOTALAMOUNT <> 0
			AND a.docno NOT IN (SELECT wf.docno 
				FROM tbl_withfreight AS wf)
			AND a.bprefno NOT IN (SELECT wf.docno 
				FROM tbl_withfreight AS wf)
		GROUP BY a.DOCNO
		ORDER BY a.DOCDATE ASC;
	
	SELECT * FROM book;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `purchase_deliveries`
--

DROP PROCEDURE IF EXISTS `purchase_deliveries`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `purchase_deliveries`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as shiptoadd, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       '' as chassis, '' as 'engine', d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno,
       d.QUANTITY as qty,
       d.price as unitprice,
       d.linetotal as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.OTHERCHARGES as othercharges, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, a.CREATEDBY as created_by
       from purchasedeliveries a
            left outer join purchasedeliveryitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            
                                                 
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
 ;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `purchase_order`
--

DROP PROCEDURE IF EXISTS `purchase_order`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `purchase_order`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.SHIPTOADDRESS as shiptoadd,
       a.CONTACTPERSON as contact_person,
       g.SHIPTYPENAME as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials, d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice, d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, i.username as created_by
       from purchaseorders a
            left outer join purchaseorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join users i on d.CREATEDBY = i.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `purchase_order_ghe`
--

DROP PROCEDURE IF EXISTS `purchase_order_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `purchase_order_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname,
       a.SHIPTOADDRESS as shiptoadd,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       g.SHIPTYPENAME as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials, d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice, d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.u_u_itemvolume,
       it.u_u_netweight * d.QUANTITY as netweight,
       if(d.BASETYPE = 'SALESORDER', d.BASEDOCNO, '') as refno,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.docduedate,
       a.currency,
       d.lineid,
       a.company as companyx,
       a.branch as branchx,
       a.docid,
       it.weightsa as WEIGHT,
       if(d.U_U_QTYPERCRTN > 0, (d.QUANTITY / d.U_U_QTYPERCRTN), if(it.U_U_QTYPERCRTN > 0 , d.QUANTITY / it.U_U_QTYPERCRTN, If(it.isinventory = 1, d.QUANTITY, 0))) as BOXES,
       if(d.U_U_ITEMVOLUME > 0, d.U_U_ITEMVOLUME * d.QUANTITY, it.VOLUMESA * d.QUANTITY) as LINEVOLUME
       from purchaseorders a
            left outer join purchaseorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join users i on d.CREATEDBY = i.userid
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join items it on d.itemcode = it.itemcode
            left outer join users us on a.CREATEDBY = us.userid
            left outer join suppliercontacts cp on a.BPCODE = cp.suppno
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `purchase_request_ghe`
--

DROP PROCEDURE IF EXISTS `purchase_request_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `purchase_request_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN

select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname,
       a.SHIPTOADDRESS as shiptoadd,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       g.SHIPTYPENAME as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials, d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice, d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       IF(d.u_u_itemvolume=0, it.volumesa, d.u_u_itemvolume) as u_u_itemvolume,
       it.u_u_netweight * d.QUANTITY as netweight,
       if(d.BASETYPE = 'SALESORDER', d.BASEDOCNO, '') as refno,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.docduedate,
       a.currency,
       d.lineid

       from purchaserequests a
            left outer join purchaserequestitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join users i on d.CREATEDBY = i.userid
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join items it on d.itemcode = it.itemcode
            left outer join users us on a.CREATEDBY = us.userid
            left outer join suppliercontacts cp on a.BPCODE = cp.suppno

      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `purchase_return`
--

DROP PROCEDURE IF EXISTS `purchase_return`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `purchase_return`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM apcreditmemos A
        LEFT OUTER JOIN apcreditmemoitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `purchase_returns`
--

DROP PROCEDURE IF EXISTS `purchase_returns`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `purchase_returns`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.SHIPTOADDRESS as shiptoadd, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       '' as chassis, '' as 'engine', d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno,
       d.QUANTITY as qty,
       d.price as unitprice,
       d.linetotal as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.OTHERCHARGES as othercharges, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.ROUNDAMOUNT as rouding, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, i.username as created_by,
       '' as u_sqrno
       from purchasereturns a
            left outer join purchasereturnitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            
                                                 
            left outer join users i on d.CREATEDBY = i.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno     ;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `receiptjournal_st`
--

DROP PROCEDURE IF EXISTS `receiptjournal_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `receiptjournal_st`(IN pi_company VARCHAR(30),   IN pi_branch VARCHAR(30),    IN pi_docno_fr VARCHAR(30), IN pi_docno_to VARCHAR(30),
                                     IN pi_date_fr DATE,          IN pi_date_to DATE)
BEGIN

DECLARE v_docno_fr  VARCHAR(30);
DECLARE v_docno_to  VARCHAR(30);
DECLARE v_bpcode_fr VARCHAR(30);
DECLARE v_bpcode_to VARCHAR(30);
DECLARE v_selectall INT;
DECLARE v_now       VARCHAR(30);

SET v_now = CAST(NOW() as char(30));

  IF pi_docno_fr is null THEN
    SET v_docno_fr = '';
  ELSE
    SET v_docno_fr = pi_docno_fr;
  END IF;

  IF pi_docno_to is null THEN
    SET v_docno_to = '';
  ELSE
    SET v_docno_to = pi_docno_to;
  END IF;

  IF v_docno_fr > '' and v_docno_to = '' THEN

    SET v_docno_to = v_docno_fr;

  ELSEIF v_docno_fr = '' and v_docno_to > '' THEN

    SET v_docno_fr = v_docno_to;

  ELSEIF v_docno_fr = '' and v_docno_to = '' THEN

    SET v_docno_to = 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ';

  END IF;


  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP1 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP1` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP2 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS LEDGER_TEMP ;
  CREATE TEMPORARY TABLE `LEDGER_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`      VARCHAR(100),
    `DOCID`        DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


      INSERT INTO JOURNAL_TEMP1 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, v_now,       JE.DOCID,      JE.LINEID,  JE.DOCDATE,  JE.DOCTYPE, JE.DOCNO, JE.GLACCTNO,     JE.GLACCTNAME, JE.GLDEBIT,
               JE.GLCREDIT,    JE.SLTYPE, JE.SLACCTNO, JE.SLACCTNAME, JE.SLDEBIT, JE.SLCREDIT, JE.REMARKS, JE.CURRENCY,  RC.CURRENCYRATE, RC.DOCTYPE,    RC.BPCODE,
               RC.BPNAME ,     IF(RC.DOCTYPE = 'A', RC.ADDRESS, ''), RC.REFNO
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO   ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR   ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN COLLECTIONS RC ON RC.COMPANY      = pi_company  AND RC.BRANCHCODE  = pi_branch  AND RC.DOCNO  = JE.DOCNO
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH =  pi_branch  AND
                  JE.DOCTYPE = 'RC' AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to;

        INSERT INTO JOURNAL_TEMP2 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
               SELECT * FROM JOURNAL_TEMP1 JE
                     WHERE JE.DOCNO  >= v_docno_fr  AND
                           JE.DOCNO  <= v_docno_to;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             IF(JE.SLACCTNO > '', JE.SLACCTNO, JE.GLACCTNO),
             IF(JE.SLACCTNAME > '', JE.SLACCTNAME, JE.GLACCTNAME),
             '',
             JE.REFNO,
             JE.GLDEBIT,
             JE.GLCREDIT
        FROM JOURNAL_TEMP2 JE
          WHERE JE.ORITYPE IN ('S', 'C');

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, DOCID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION, DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT)
      SELECT JE.COMPANY,
             JE.BRANCH,
             JE.DOCID,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             JE.REFNO,
             CASE WHEN JE.GLDEBIT  > 0 THEN JE.PAYTO
                  WHEN JE.GLCREDIT > 0 THEN CA.REMARKS
                  ELSE '' END,
             JE.GLDEBIT,
             IF(JE.GLCREDIT > 0 AND CA.GLACCTNO = JE.GLACCTNO , (CA.GROSSAMOUNT * JE.CURRENCYRATE), JE.GLCREDIT) 
        FROM JOURNAL_TEMP2 JE
            LEFT OUTER JOIN COLLECTIONSACCOUNTS CA ON CA.COMPANY = pi_company AND CA.BRANCH = pi_branch AND CA.DOCNO = JE.DOCNO AND CA.GLACCTNO = JE.GLACCTNO
          WHERE (JE.ORITYPE = 'A');



  SELECT * FROM LEDGER_TEMP ORDER BY DOCNO, DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `receiving_report`
--

DROP PROCEDURE IF EXISTS `receiving_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `receiving_report`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM apinvoices A
        LEFT OUTER JOIN apinvoiceitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `receiving_voucher_ghe`
--

DROP PROCEDURE IF EXISTS `receiving_voucher_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `receiving_voucher_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `invoices_info` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` DATE NULL,
    `BASETYPE` varchar(30) NULL default '',
    `BASEDOCNO` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO invoices_info (COMPANY,BRANCH,DOCNO,DOCDATE, BASETYPE,BASEDOCNO)
      select A.COMPANY, A.BRANCH, A.DOCNO, A.DOCDATE, D.BASETYPE, D.BASEDOCNO
        from arinvoices a
             left outer join arinvoiceitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
        where a.COMPANY = pi_company and a.BRANCH = pi_branch
      group by A.DOCNO;
  INSERT
    INTO invoices_info (COMPANY,BRANCH,DOCNO,DOCDATE, BASETYPE,BASEDOCNO)
      select A.COMPANY, A.BRANCH, A.DOCNO, A.DOCDATE, D.BASETYPE, D.BASEDOCNO
        from arcreditmemos a
             left outer join arcreditmemoitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
        where a.COMPANY = pi_company and a.BRANCH = pi_branch
      group by A.DOCNO;
CREATE TEMPORARY TABLE  `cashcards2` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CASHCARD` varchar(30) NULL default '',
    `REFNO` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cashcards2 (COMPANY,BRANCH,DOCID,DOCNO,CASHCARD,REFNO,AMOUNT)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.CASHCARD,a.REFNO,a.AMOUNT as AMOUNT
        from collectionscashcards a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno;
CREATE TEMPORARY TABLE  `creditcards2` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREDITCARDNO` varchar(30) NULL default '',
    `CARDEXPIRETEXT` varchar(30) NULL default '',
    `creditcard` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO creditcards2 (COMPANY,BRANCH,DOCID,DOCNO,CREDITCARDNO,CARDEXPIRETEXT,creditcard,AMOUNT)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.CREDITCARDNO,a.CARDEXPIRETEXT,a.creditcard,a.AMOUNT
        from collectionscreditcards a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1;
CREATE TEMPORARY TABLE  `cheques` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BANKBRANCH` varchar(30) NULL default '',
    `BANK` varchar(30) NULL default '',
    `CHECKNO` varchar(30) NULL default '',
    `bankacctno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cheques (COMPANY,BRANCH,DOCID,DOCNO,BANK,BANKBRANCH,CHECKNO,checkdate,AMOUNT,bankacctno)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.BANK,a.BANKBRANCH,a.CHECKNO,a.checkdate,a.AMOUNT,a.bankacctno
        from collectionscheques a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1;
CREATE TEMPORARY TABLE  `main` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCHCODE` varchar(500) NULL default '',
    `BPCODE` varchar(30) NULL default '',
    `BPNAME` varchar(500) NULL default '',
    `ADDRESS` varchar(500) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` DATE NULL,
    `REMARKS` varchar(1000) NULL default '',
    `LASTUPDATEDBY` varchar(30) NULL default '',
    `user` varchar(30) NULL default '',
    `REFNO` varchar(30) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    `reftype` varchar(500) NULL default '',
    `BRANCHNAME` varchar(30) NULL default '',
    `rebate` NUMERIC(18,6) NULL default '0',
    `penalty` NUMERIC(18,6) NULL default '0',
    `bankname` varchar(30) NULL default '',
    `accountno` varchar(30) NULL default '',
    `checkno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `chequesamount` NUMERIC(18,6) NULL default '0',
    `ccname` varchar(30) NULL default '',
    `ccno` varchar(30) NULL default '',
    `ccexpiry` varchar(30) NULL default '',
    `creditcardsamount` NUMERIC(18,6) NULL default '0',
    `ccard` varchar(30) NULL default '',
    `ccardrefno` varchar(30) NULL default '',
    `ccardamount` NUMERIC(18,6) NULL default '0',
    `U_U_TELNO` varchar(30) NULL default '',
    `U_U_FAXNO` varchar(30) NULL default '',
    `U_U_EMAIL` varchar(30) NULL default '',
    `cust_fax` varchar(30) NULL default '',
    `cust_tel` varchar(30) NULL default '',
    `currency` varchar(30) NULL default '',
    `refdate` DATE NULL,
    `so_no` varchar(30) NULL default '',
    `contact_person` varchar(100) NULL default '',
    `currency_rate` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO main (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    `user`,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount,
    U_U_TELNO,
    U_U_FAXNO,
    U_U_EMAIL,
    cust_fax,
    cust_tel,
    currency,
    refdate,
    so_no,
    contact_person,
    currency_rate)
SELECT  upper(f.COMPANYNAME) as COMPANY,
        upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as BRANCHCODE,
        collections.BPCODE,
        collections.BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        date(collections.DOCDATE) as DOCDATE,
        collections.REMARKS,
        collections.LASTUPDATEDBY,
        i.username as 'user',
        case when collections.collfor='RS' then ''
             when collections.collfor='WU' then collections.REFNO
             when collections.collfor='SI' then
             if (collectionsinvoices.reftype like 'NR%', accountslist.REFNO, collectionsinvoices.REFNO)
        else '' end as REFNO,
        case when collectionsinvoices.AMOUNT is null
        then collections.PAIDAMOUNT else collectionsinvoices.AMOUNT - collectionsinvoices.penaltypaid
        end as 'AMOUNT',
        case  when collections.collfor='RS' then concat(collections.DEPARTMENT , ' - CUSTOMER DEPOSIT')
              when collections.collfor='WU' then 'OTHER CASH PAYMENTS'
              when collections.collfor='SI' then collectionsinvoices.reftype
        else IF(collectionsaccounts.SUBSIDIARY = '', collectionsaccounts.GLACCTNAME, chartofaccountsubsidiaries.SUBSIDIARYNAME) end as 'reftype',
        branches.BRANCHNAME,
        if (collectionsinvoices.rebate is null, 0, collectionsinvoices.rebate) as rebate,
        if (collectionsinvoices.penaltypaid is null, 0, collectionsinvoices.penaltypaid) as penalty,
        if (cheques.DOCNO is null, '', concat(cheques.BANK,' - ',cheques.BANKBRANCH)) as bankname,
        if (cheques.DOCNO is null, '', cheques.bankacctno) as accountno,
        if (cheques.DOCNO is null, '', cheques.CHECKNO) as checkno,
        date(cheques.CHECKDATE) as checkdate,
        if (cheques.DOCNO is null, 0, cheques.AMOUNT) as chequesamount,
        if (creditcards2.DOCNO is null, '', creditcards.creditcardname) as ccname,
        if (creditcards2.DOCNO is null, '', creditcards2.CREDITCARDNO) as ccno,
        if (creditcards2.DOCNO is null, '', creditcards2.CARDEXPIRETEXT) as ccexpiry,
        if (creditcards2.DOCNO is null, 0, creditcards2.AMOUNT) as creditcardsamount,
        '' as ccard,
        '' as ccardrefno,
        0 as ccardamount,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       cust.FAX,
       cust.PHONE1,
       collections.currency,
       invref.DOCDATE,
       IF(invref.BASETYPE = 'SALESORDER', invref.BASEDOCNO, ''),
       concat(cp.salutation, ' ', cp.name),
       collections.currencyrate
        FROM collections
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN collectionsaccounts ON collections.COMPANY = collectionsaccounts.COMPANY
        AND collections.DOCNO = collectionsaccounts.DOCNO AND collections.BRANCHCODE = collectionsaccounts.BRANCH
        LEFT OUTER JOIN chartofaccountsubsidiaries ON collectionsaccounts.SUBSIDIARY = chartofaccountsubsidiaries.SUBSIDIARY
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN cheques ON collections.COMPANY = cheques.COMPANY
        AND collections.DOCNO = cheques.DOCNO AND collections.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN creditcards2 ON collections.COMPANY = creditcards2.COMPANY
        AND collections.DOCNO = creditcards2.DOCNO AND collections.BRANCHCODE = creditcards2.BRANCH
        LEFT OUTER JOIN creditcards ON creditcards.creditcard = creditcards2.creditcard
        LEFT OUTER JOIN users i ON collections.LASTUPDATEDBY = i.userid
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join customers cust on collections.BPCODE = cust.custno
            left outer join invoices_info invref on
                            collections.COMPANY = invref.company
                            AND collections.BRANCHCODE = invref.branch
                            AND collectionsinvoices.REFNO = invref.docno
            left outer join customercontacts cp on collections.BPCODE = cp.CUSTNO
        WHERE collections.COMPANY = pi_company
        AND collections.BRANCHCODE = pi_branch
        AND collections.DOCNO = pi_docno;
INSERT
    INTO main (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    `user`,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount,
    U_U_TELNO,
    U_U_FAXNO,
    U_U_EMAIL,
    cust_fax,
    cust_tel,
    currency,
    refdate,
    so_no,
    contact_person,
    currency_rate)
SELECT  upper(f.COMPANYNAME) as COMPANY,
        upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as BRANCHCODE,
        collections.BPCODE,
        collections.BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        date(collections.DOCDATE) as DOCDATE,
        collections.REMARKS,
        collections.LASTUPDATEDBY,
        i.username as 'user',
        case when collections.collfor='RS' then ''
             when collections.collfor='WU' then collections.REFNO
             when collections.collfor='SI' then
             if (collectionsinvoices.reftype like 'NR%', accountslist.REFNO, collectionsinvoices.REFNO)
        else '' end as REFNO,
        0 as 'AMOUNT',
        case  when collections.collfor='RS' then concat(collections.DEPARTMENT , ' - CUSTOMER DEPOSIT')
              when collections.collfor='WU' then 'OTHER CASH PAYMENTS'
              when collections.collfor='SI' then collectionsinvoices.reftype
        else '' end as 'reftype',
        branches.BRANCHNAME,
        0 as rebate,
        0 as penalty,
        '' as bankname,
        '' as accountno,
        '' as checkno,
        null as checkdate,
        0 as chequesamount,
        '' as ccname,
        '' as ccno,
        '' as ccexpiry,
        0 as creditcardsamount,
        Upper(if (cashcards2.DOCNO is null, '', cashcards.CASHCARDNAME)) as ccard,
        if (cashcards2.DOCNO is null, '', cashcards2.REFNO) as ccardrefno,
        if (cashcards2.DOCNO is null, 0, cashcards2.AMOUNT) as ccardamount,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       cust.FAX,
       cust.PHONE1,
       collections.currency,
       invref.DOCDATE,
       IF(invref.BASETYPE = 'SALESORDER', invref.BASEDOCNO, ''),
       concat(cp.salutation, ' ', cp.name),
       collections.currencyrate
        FROM collections
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN cheques ON collections.COMPANY = cheques.COMPANY
        AND collections.DOCNO = cheques.DOCNO AND collections.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN creditcards2 ON collections.COMPANY = creditcards2.COMPANY
        AND collections.DOCNO = creditcards2.DOCNO AND collections.BRANCHCODE = creditcards2.BRANCH
        LEFT OUTER JOIN cashcards2 ON collectionsinvoices.COMPANY = cashcards2.COMPANY
        AND collectionsinvoices.DOCNO = cashcards2.DOCNO AND collectionsinvoices.BRANCH = cashcards2.BRANCH
        AND collectionsinvoices.REFNO = cashcards2.REFNO
        LEFT OUTER JOIN cashcards ON cashcards2.cashcard = cashcards.cashcard
        LEFT OUTER JOIN creditcards ON creditcards.creditcard = creditcards2.creditcard
        LEFT OUTER JOIN users i ON collections.LASTUPDATEDBY = i.userid
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join customers cust on collections.BPCODE = cust.custno
            left outer join invoices_info invref on
                            collections.COMPANY = invref.company
                            AND collections.BRANCHCODE = invref.branch
                            AND collectionsinvoices.REFNO = invref.docno
            left outer join customercontacts cp on collections.BPCODE = cp.CUSTNO
        WHERE collections.COMPANY = pi_company
        AND collections.BRANCHCODE = pi_branch
        AND collections.DOCNO = pi_docno;
INSERT
    INTO main (COMPANY,
    BRANCHCODE,
    BPCODE,
    BPNAME,
    ADDRESS,
    DOCNO,
    DOCDATE,
    REMARKS,
    LASTUPDATEDBY,
    `user`,
    REFNO,
    AMOUNT,
    reftype,
    BRANCHNAME,
    rebate,
    penalty,
    bankname,
    accountno,
    checkno,
    checkdate,
    chequesamount,
    ccname,
    ccno,
    ccexpiry,
    creditcardsamount,
    ccard,
    ccardrefno,
    ccardamount,
    U_U_TELNO,
    U_U_FAXNO,
    U_U_EMAIL,
    cust_fax,
    cust_tel,
    currency,
    refdate,
    so_no,
    contact_person,
    currency_rate)
SELECT  upper(f.COMPANYNAME) as COMPANY,
        upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as BRANCHCODE,
        collections.BPCODE,
        collections.BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        date(collections.DOCDATE) as DOCDATE,
        collections.REMARKS,
        collections.LASTUPDATEDBY,
        i.username as 'user',
        case when collections.collfor='RS' then ''
             when collections.collfor='WU' then collections.REFNO
             when collections.collfor='SI' then collectionsinvoices.REFNO
        else '' end as REFNO,
        collectionsinvoices.AMOUNT as 'AMOUNT',
        case  when collections.collfor='RS' then concat(collections.DEPARTMENT , ' - CUSTOMER DEPOSIT')
              when collections.collfor='WU' then 'OTHER CASH PAYMENTS'
              when collections.collfor='SI' then UPPER(othercharges.CHRGNAME)
        else '' end as 'reftype',
        branches.BRANCHNAME,
        0 as rebate,
        0 as penalty,
        '' as bankname,
        '' as accountno,
        '' as checkno,
        null as checkdate,
        0 as chequesamount,
        '' as ccname,
        '' as ccno,
        '' as ccexpiry,
        0 as creditcardsamount,
        '' as ccard,
        '' as ccardrefno,
        0 as ccardamount,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       cust.FAX,
       cust.PHONE1,
       collections.currency,
       invref.DOCDATE,
       IF(invref.BASETYPE = 'SALESORDER', invref.BASEDOCNO, ''),
       concat(cp.salutation, ' ', cp.name),
       collections.currencyrate
        FROM collections
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN collectionsothercharges as collectionsinvoices ON collections.COMPANY = collectionsinvoices.COMPANY
        AND collections.DOCNO = collectionsinvoices.DOCNO AND collections.BRANCHCODE = collectionsinvoices.BRANCH
        LEFT OUTER JOIN othercharges ON collectionsinvoices.CHRGCODE = othercharges.CHRGCODE
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN accountslist ON
        collectionsinvoices.REFNO = accountslist.acctno and collectionsinvoices.refbranch = accountslist.branchcode
        LEFT OUTER JOIN users i ON collections.LASTUPDATEDBY = i.userid
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join customers cust on collections.BPCODE = cust.custno
            left outer join invoices_info invref on
                            collections.COMPANY = invref.company
                            AND collections.BRANCHCODE = invref.branch
                            AND collectionsinvoices.REFNO = invref.docno
            left outer join customercontacts cp on collections.BPCODE = cp.CUSTNO
        WHERE collections.COMPANY = pi_company
        AND collections.BRANCHCODE = pi_branch
        AND collections.DOCNO = pi_docno and collectionsinvoices.AMOUNT <> 0;
Select * from main ORDER BY DOCDATE, DOCNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `receiving_voucher_ghe_2`
--

DROP PROCEDURE IF EXISTS `receiving_voucher_ghe_2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `receiving_voucher_ghe_2`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `cheques` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BANKBRANCH` varchar(30) NULL default '',
    `BANK` varchar(30) NULL default '',
    `CHECKNO` varchar(30) NULL default '',
    `bankacctno` varchar(30) NULL default '',
    `checkdate` DATE NULL,
    `AMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO cheques (COMPANY,BRANCH,DOCID,DOCNO,BANK,BANKBRANCH,CHECKNO,checkdate,AMOUNT,bankacctno)
      SELECT a.COMPANY,a.BRANCH,a.DOCID,a.DOCNO,a.BANK,a.BANKBRANCH,a.CHECKNO,a.checkdate,a.AMOUNT,a.bankacctno
        from collectionscheques a
        where a.company = pi_company and a.branch = pi_branch and a.DOCNO = pi_docno order by amount desc limit 0,1;
SELECT  upper(f.COMPANYNAME) as COMPANY,
        upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as BRANCHCODE,
        collections.BPCODE,
        collections.BPNAME,
        collections.ADDRESS,
        collections.DOCNO,
        date(collections.DOCDATE) as DOCDATE,
        collections.LASTUPDATEDBY,
        i.username as 'user',
        x.GLACCTNO as REFNO,
        x.GLACCTNAME as 'reftype',
        SUM(x.GLDEBIT - x.GLCREDIT) as 'AMOUNT',
        x.remarks as REMARKS,
        branches.BRANCHNAME,
        0.00 as rebate,
        0.00 as penalty,
        if (cheques.DOCNO is null, '', concat(cheques.BANK,' - ',cheques.BANKBRANCH)) as bankname,
        if (cheques.DOCNO is null, '', cheques.bankacctno) as accountno,
        if (cheques.DOCNO is null, '', cheques.CHECKNO) as checkno, cheques.CHECKDATE as checkdate,
        if (cheques.DOCNO is null, '', '') as accountname,
        if (cheques.DOCNO is null, 0, cheques.AMOUNT) as ccamount,
        e.U_U_TELNO,
        e.U_U_FAXNO,
        e.U_U_EMAIL,
        cust.FAX,
        cust.PHONE1,
        collections.currency,
        collections.currencyrate as currency_rate
        FROM collections
        LEFT OUTER JOIN branches ON collections.BRANCHCODE = branches.BRANCHCODE
        LEFT OUTER JOIN customers ON collections.BPCODE = customers.CUSTNO
        AND collections.COMPANY = customers.COMPANY AND collections.BRANCHCODE = customers.BRANCH
        LEFT OUTER JOIN cheques ON collections.COMPANY = cheques.COMPANY
        AND collections.DOCNO = cheques.DOCNO AND collections.BRANCHCODE = cheques.BRANCH
        LEFT OUTER JOIN companies c ON c.COMPANYCODE = pi_company
        LEFT OUTER JOIN journalentryitems x ON collections.COMPANY = x.COMPANY
                                               AND collections.BRANCHCODE = x.BRANCH
                                               AND collections.DOCNO = x.DOCNO
                                               AND x.GLACCTNAME not like 'Cash%'
        LEFT OUTER JOIN users i ON collections.LASTUPDATEDBY = i.userid
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join suppliers cust on collections.BPCODE = cust.SUPPNO
            left outer join suppliercontacts cp on collections.BPCODE = cp.SUPPNO
        WHERE collections.COMPANY = pi_company
        AND collections.BRANCHCODE = pi_branch
        AND collections.DOCNO = pi_docno
        GROUP BY collections.DOCNO, x.GLACCTNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `reconciliations_st`
--

DROP PROCEDURE IF EXISTS `reconciliations_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `reconciliations_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN

DECLARE v_country        VARCHAR(100);
DECLARE v_bank           VARCHAR(100);
DECLARE v_bankacctno     VARCHAR(100);
DECLARE v_docid          NUMERIC(20,0);
DECLARE v_statementno    VARCHAR(100);
DECLARE v_statementdate  DATE;
DECLARE v_docdate        DATE;
DECLARE v_lastbal        NUMERIC(20,6);
DECLARE v_curbal         NUMERIC(20,6);
DECLARE v_localcurrrency VARCHAR(10);
DECLARE v_companyname    VARCHAR(100);
DECLARE v_currency       VARCHAR(10);

SELECT CURRENCY, COMPANYNAME INTO v_localcurrrency, v_companyname
  FROM COMPANIES WHERE COMPANYCODE = pi_company;

SELECT country,bank,bankacctno,docid,BANKSTATEMENTNO,BANKSTATEMENTDATE,DOCDATE,CLEAREDLASTBALAMOUNT,BANKLASTBALAMOUNT,CURRENCY
  INTO v_country,v_bank,v_bankacctno,v_docid,v_statementno,v_statementdate,v_docdate,v_lastbal,v_curbal,v_currency
  FROM reconciliations
  WHERE company = pi_company AND
        branch  = pi_branch  AND
        docno   = pi_docno;


DROP TEMPORARY TABLE IF EXISTS bankrecon_temp ;
CREATE TEMPORARY TABLE  `bankrecon_temp` (
  COMPANY           VARCHAR(100),
  TBTYPE            VARCHAR(20),
  DOCNO             VARCHAR(100),
  COUNTRY           VARCHAR(100),
  BANK              VARCHAR(100),
  BANKACCTNO        VARCHAR(100),
  BANKSTATEMENTNO   VARCHAR(100),
  BANKSTATEMENTDATE DATE,
  DOCDATE           DATE,
  LASTBAL           NUMERIC(20,6),
  CURBAL            NUMERIC(20,6),
  REFDATE           DATE,
  REFDOCNO          VARCHAR(100),
  REFNO             VARCHAR(1000),
  DESCRIPTION       VARCHAR(1000),
  DISAMOUNT         NUMERIC(20,6),
  HIDAMOUNT         NUMERIC(20,6),
  CURRENCY          VARCHAR(10)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

 INSERT INTO bankrecon_temp(COMPANY, TBTYPE, DOCNO, COUNTRY, BANK, BANKACCTNO, BANKSTATEMENTNO, BANKSTATEMENTDATE,
                            DOCDATE, LASTBAL, CURBAL, REFDATE, REFDOCNO, REFNO, DESCRIPTION,
                            DISAMOUNT, HIDAMOUNT, CURRENCY)
 SELECT v_companyname, IF(RE.LINETYPE = 'PS', '01ACF', '02APF'),pi_docno,v_country,v_bank,v_bankacctno,v_statementno,v_statementdate,
        v_docdate,v_lastbal,v_curbal, RE.REFDOCDATE, RE.REFDOCNO,RE.REFNO,
        CASE WHEN JE.DOCTYPE = 'RC' THEN CL.CUSTNAME
             WHEN JE.DOCTYPE = 'PY' THEN PY.BPNAME
             ELSE '' END,
        IF(RE.DEBIT > 0, RE.DEBIT, RE.CREDIT), IF(RE.DEBIT > 0, RE.DEBIT, RE.CREDIT * -1), v_currency
   FROM RECONCILIATIONITEMS RE
       LEFT OUTER JOIN JOURNALENTRYITEMS JE ON JE.COMPANY = RE.COMPANY AND JE.BRANCH = RE.BRANCH AND JE.LINEID = RE.REFLINEID
         LEFT OUTER JOIN COLLECTIONS CL ON CL.COMPANY = JE.COMPANY AND CL.BRANCHCODE = JE.BRANCH AND CL.DOCNO = JE.DOCNO AND CL.OBJECTCODE = IF(JE.DOCTYPE = 'RC','INCOMINGPAYMENT','')
         LEFT OUTER JOIN PAYMENTS PY ON PY.COMPANY = JE.COMPANY AND PY.BRANCHCODE = JE.BRANCH AND PY.DOCNO = JE.DOCNO AND PY.OBJECTCODE = IF(JE.DOCTYPE = 'PY','OUTGOINGPAYMENT','')
     WHERE RE.COMPANY = pi_company AND
           RE.BRANCH  = pi_branch  AND
           RE.DOCID   = v_docid;

 INSERT INTO bankrecon_temp(COMPANY, TBTYPE, DOCNO, COUNTRY, BANK, BANKACCTNO, BANKSTATEMENTNO, BANKSTATEMENTDATE,
                            DOCDATE, LASTBAL, CURBAL, REFDOCNO, REFNO, DESCRIPTION,
                            DISAMOUNT, HIDAMOUNT, CURRENCY)
                    VALUES (v_companyname, '03BAL', pi_docno,v_country,v_bank,v_bankacctno,v_statementno,v_statementdate,
                            v_docdate,v_lastbal,v_curbal, '', '', '', 0, 0, v_currency);


 INSERT INTO bankrecon_temp(COMPANY, TBTYPE, DOCNO, COUNTRY, BANK, BANKACCTNO, BANKSTATEMENTNO, BANKSTATEMENTDATE,
                            DOCDATE, LASTBAL, CURBAL, REFDATE, REFDOCNO, REFNO, DESCRIPTION,
                            DISAMOUNT, HIDAMOUNT, CURRENCY)
  SELECT v_companyname, IF(JE.ISDEBIT = 0, '03UCF', '04UPF'),pi_docno,v_country,v_bank,v_bankacctno,v_statementno,v_statementdate,
        v_docdate,v_lastbal,v_curbal, JE.DOCDATE, JE.DOCNO,JE.REFERENCE3,
        CASE WHEN JE.DOCTYPE = 'RC' THEN CL.CUSTNAME
             WHEN JE.DOCTYPE = 'PY' THEN PY.BPNAME
             ELSE '' END,
        IF(v_localcurrrency <> JE.CURRENCY, IF(JE.ISDEBIT = 1, JE.GLDEBIT_FC, JE.GLCREDIT_FC), IF(JE.ISDEBIT = 1, JE.GLDEBIT, JE.GLCREDIT)),
        IF(v_localcurrrency <> JE.CURRENCY, IF(JE.ISDEBIT = 1, JE.GLDEBIT_FC, JE.GLCREDIT_FC * -1), IF(JE.ISDEBIT = 1, JE.GLDEBIT, JE.GLCREDIT * -1)),
        JE.CURRENCY
     FROM JOURNALENTRYITEMS JE
         LEFT OUTER JOIN RECONCILIATIONITEMS RE ON RE.COMPANY = JE.COMPANY AND RE.BRANCH = JE.BRANCH AND RE.DOCID <= v_docid
         LEFT OUTER JOIN COLLECTIONS CL ON CL.COMPANY = JE.COMPANY AND CL.BRANCHCODE = JE.BRANCH AND CL.DOCNO = JE.DOCNO AND CL.OBJECTCODE = IF(JE.DOCTYPE = 'RC','INCOMINGPAYMENT','')
         LEFT OUTER JOIN PAYMENTS PY ON PY.COMPANY = JE.COMPANY AND PY.BRANCHCODE = JE.BRANCH AND PY.DOCNO = JE.DOCNO AND PY.OBJECTCODE = IF(JE.DOCTYPE = 'PY','OUTGOINGPAYMENT','')
     WHERE JE.COMPANY    = pi_company AND
           JE.BRANCH     = pi_branch AND
           JE.LINEID     <> RE.REFLINEID AND
           JE.COUNTRY    = v_country AND
           JE.BANK       = v_bank AND
           JE.BANKACCTNO = v_bankacctno;

  SELECT * FROM bankrecon_temp ORDER BY TBTYPE;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `recurringpostings_list`
--

DROP PROCEDURE IF EXISTS `recurringpostings_list`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `recurringpostings_list`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30),
                                          IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30),
                                          IN pi_status VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(500) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `SLACCTNO` varchar(100) NULL default '',
    `SLACCTNAME` varchar(100) NULL default '',
    `SLDEBIT` NUMERIC(18,6) NULL default '0',
    `SLCREDIT` NUMERIC(18,6) NULL default '0',
    `DOCTYPE` varchar(100) NULL default '',
    `DOCNO` varchar(1000) NULL default '',
    `REFNO` varchar(100) NULL default '',
    `REMARKS` varchar(1000) NULL default '',
    `LINEID` varchar(100) NULL default '',
    `DOCSTATUS` varchar(100) NULL default '',
    `SLTYPE` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, SLACCTNO,
             SLACCTNAME, SLDEBIT, SLCREDIT, DOCTYPE, DOCNO, REFNO, REMARKS, LINEID, DOCSTATUS, SLTYPE)
      SELECT a.COMPANY, a.BRANCH, a.LIMITDATE, a.NEXTDUE,
             b.ITEMNO, b.ITEMNAME,
             if (b.DEBIT is null, 0, b.DEBIT), if (b.CREDIT is null, 0, b.CREDIT),
             CASE
             WHEN b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANKACCTNO
             WHEN b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             b.SUBSIDIARY
             ELSE '' END,
             CASE
             WHEN b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANK
             WHEN b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             q.SUBSIDIARYNAME
             ELSE '' END,
             if (b.DEBIT is null, 0, b.DEBIT),
             if (b.CREDIT is null, 0, b.CREDIT) ,
             '', UPPER(CONCAT(a.RECURCODE, ' - ', a.RECURNAME)), '', a.REMARKS, b.LINEID, a.DOCSTATUS,
             CASE WHEN b.ITEMTYPE = 'C' THEN ' - CUSTOMER' WHEN b.ITEMTYPE = 'S' THEN ' - SUPPLIER' ELSE '' END
             FROM recurringpostings a
             LEFT OUTER JOIN recurringpostingitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             LEFT OUTER JOIN chartofaccountsubsidiaries q on b.SUBSIDIARY = q.SUBSIDIARY
             where a.COMPANY = pi_company and a.BRANCH = pi_branch
             and a.NEXTDUE BETWEEN pi_date1 AND pi_date2;
SELECT upper(c.COMPANYNAME) as COMPANY,
pi_branch as BRANCH,
UPPER(CONCAT(pi_branch, ' - ', b.BRANCHNAME)) AS BRANCHNAME,
Date(a.DOCDATE) as POSTINGDDATE,
Date(a.DUEDATE) as DUEDATE,
DATE(pi_date1) AS DATE1,
DATE(pi_date2) DATE2,
'' as DOCTYPENAME,
a.DOCNO,
a.DOCTYPE,
a.REFNO,
a.GLACCTNO AS ACCTCODE,
a.GLACCTNAME AS ACCTNAME,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS DEBIT,
if (a.GLCREDIT is null, 0, a.GLCREDIT) AS CREDIT,
a.SLACCTNO AS SLACCTCODE,
a.SLACCTNAME AS SLACCTNAME,
if (a.SLDEBIT is null, 0, a.SLDEBIT) AS SLDEBIT,
if (a.SLCREDIT is null, 0, a.SLCREDIT) AS SLCREDIT,
UPPER(a.REMARKS) AS REMARKS,
a.DOCSTATUS,
a.SLTYPE
FROM je a
LEFT OUTER JOIN branches b on b.BRANCHCODE = pi_branch
LEFT OUTER JOIN companies c on c.COMPANYCODE = pi_company
WHERE (pi_status='' or (pi_status<>'' AND a.DOCSTATUS = pi_status));
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `salesdelivery_report`
--

DROP PROCEDURE IF EXISTS `salesdelivery_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `salesdelivery_report`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM salesdeliveries A
        LEFT OUTER JOIN salesdeliveryitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `salesman_itemlist`
--

DROP PROCEDURE IF EXISTS `salesman_itemlist`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `salesman_itemlist`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_item_fr VARCHAR(30), IN pi_item_to VARCHAR(30), IN pi_warehouse VARCHAR(30), IN pi_warehouse1 VARCHAR(30), IN pi_warehouse2 VARCHAR(30), IN pi_warehouse3 VARCHAR(30), IN pi_zeroqty INT)
BEGIN
DECLARE v_pricelist INTEGER;
DECLARE v_price NUMERIC(20,6);
DECLARE v_currrency VARCHAR(30);
DECLARE v_itemcode VARCHAR(30);
DECLARE v_itemdesc VARCHAR(100);
DECLARE v_availableqty NUMERIC(20,6);
DECLARE v_orderqty NUMERIC(20,6);
DECLARE v_volumesa NUMERIC(20,6);
DECLARE v_date DATE;
DECLARE Done INT;
DECLARE v_item_to VARCHAR(30);
DECLARE v_item_from VARCHAR(30);
DECLARE v_check INT;

  IF pi_item_fr is null THEN SET v_item_from = '';
  ELSE SET v_item_from = pi_item_fr;
  END IF;

  IF pi_item_to is null THEN SET v_item_to = '';
  ELSE SET v_item_to = pi_item_to;
  END IF;

  IF v_item_from = '' and v_item_to = '' THEN
    SET v_item_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;


  DROP TEMPORARY TABLE IF EXISTS po_temp ;
  CREATE TEMPORARY TABLE `po_temp` (
    `ITEMNO` VARCHAR(30) NOT NULL default '',
    `ITEMNAME` VARCHAR(100) default '',
    `ORDERQTY` NUMERIC(20,6),
    `PODATE` DATE
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS pricewimage ;
  CREATE TEMPORARY TABLE `pricewimage` (
    `ITEMNO` VARCHAR(30) NOT NULL default '',
    `ITEMNAME` VARCHAR(100) default '',
    `PRICE` NUMERIC(20,6) default '0',
    `CURRENCY` VARCHAR(30),
    `AVAILABLEQTY` NUMERIC(20,6),
    `ORDERQTY` NUMERIC(20,6) default '0',
    `VOLUMESA` NUMERIC(20,6),
    `PODATE` DATE,
    PRIMARY KEY  (`ITEMNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT INTO po_temp(`ITEMNO`,`ITEMNAME`, `ORDERQTY`,`PODATE`)
    SELECT PI.ITEMCODE, PI.ITEMDESC, PI.OPENQUANTITY, P.DOCDUEDATE
      FROM PURCHASEORDERS P, PURCHASEORDERITEMS PI
      WHERE P.COMPANY   = PI.COMPANY AND
            P.BRANCH    = PI.BRANCH  AND
            P.DOCID     = PI.DOCID   AND
            P.COMPANY   = pi_company AND
            P.BRANCH    = pi_branch  AND
            P.DOCSTATUS = 'O'        AND
            PI.OPENQUANTITY > 0;

  IF pi_warehouse > '' or pi_warehouse1 > '' or pi_warehouse2 > '' or pi_warehouse3 > '' THEN
     SET v_check = 1;


  ELSE
     SET v_check = 0;

  END IF;

IF v_check = 1 THEN
  IF pi_zeroqty = 1 THEN
    INSERT INTO pricewimage(`ITEMNO`,`ITEMNAME`,`PRICE`,`CURRENCY`,`AVAILABLEQTY`,`VOLUMESA`)
    SELECT items.ITEMCODE, items.ITEMDESC, 0, '',
           SUM(stockcardsummary.INSTOCKQTY) - SUM(stockcardsummary.COMMITEDQTY), items.VOLUMESA
      FROM items,
           stockcardsummary
     WHERE ( stockcardsummary.COMPANY = pi_company ) AND
           ( stockcardsummary.BRANCH = pi_branch ) AND
           ( stockcardsummary.ITEMCODE = items.ITEMCODE) AND
           ( stockcardsummary.WAREHOUSE IN (pi_warehouse,pi_warehouse1,pi_warehouse2,pi_warehouse3)) AND
           ( items.ISVALID = 1 ) AND
           ( items.ITEMCLASS <> 'DS' ) AND
           ( stockcardsummary.AVAILABLEQTY <> 0 OR stockcardsummary.ORDEREDQTY > 0)
     GROUP BY items.ITEMCODE;
  ELSE
    INSERT INTO pricewimage(`ITEMNO`,`ITEMNAME`,`PRICE`,`CURRENCY`,`AVAILABLEQTY`,`VOLUMESA`)
    SELECT items.ITEMCODE, items.ITEMDESC, 0, '',
           SUM(stockcardsummary.INSTOCKQTY) - SUM(stockcardsummary.COMMITEDQTY), items.VOLUMESA
      FROM items,
           stockcardsummary
     WHERE ( stockcardsummary.COMPANY = pi_company ) AND
           ( stockcardsummary.BRANCH = pi_branch ) AND
           ( stockcardsummary.ITEMCODE = items.ITEMCODE) AND
           ( stockcardsummary.WAREHOUSE IN (pi_warehouse,pi_warehouse1,pi_warehouse2,pi_warehouse3)) AND
           ( items.ISVALID = 1 ) AND
           ( items.ITEMCLASS <> 'DS' )
     GROUP BY items.ITEMCODE;
  END IF;
ELSE
  IF pi_zeroqty = 1 THEN
    INSERT INTO pricewimage(`ITEMNO`,`ITEMNAME`,`PRICE`,`CURRENCY`,`AVAILABLEQTY`,`VOLUMESA`)
    SELECT items.ITEMCODE, items.ITEMDESC, 0, '',
           SUM(stockcardsummary.INSTOCKQTY) - SUM(stockcardsummary.COMMITEDQTY), items.VOLUMESA
      FROM items,
           stockcardsummary
     WHERE ( stockcardsummary.COMPANY = pi_company ) AND
           ( stockcardsummary.BRANCH = pi_branch ) AND
           ( stockcardsummary.ITEMCODE = items.ITEMCODE) AND
           ( items.ISVALID = 1 ) AND
           ( items.ITEMCLASS <> 'DS' ) AND
           ( stockcardsummary.AVAILABLEQTY <> 0 OR stockcardsummary.ORDEREDQTY > 0)
     GROUP BY items.ITEMCODE;
  ELSE
    INSERT INTO pricewimage(`ITEMNO`,`ITEMNAME`,`PRICE`,`CURRENCY`,`AVAILABLEQTY`,`VOLUMESA`)
    SELECT items.ITEMCODE, items.ITEMDESC, 0, '',
           SUM(stockcardsummary.INSTOCKQTY) - SUM(stockcardsummary.COMMITEDQTY), items.VOLUMESA
      FROM items,
           stockcardsummary
     WHERE ( stockcardsummary.COMPANY = pi_company ) AND
           ( stockcardsummary.BRANCH = pi_branch ) AND
           ( stockcardsummary.ITEMCODE = items.ITEMCODE) AND
           ( items.ISVALID = 1 ) AND
           ( items.ITEMCLASS <> 'DS' )
     GROUP BY items.ITEMCODE;
  END IF;
END IF;

  SELECT P.ITEMNO, P.ITEMNAME, P.PRICE, P.CURRENCY, P.AVAILABLEQTY, PO.ORDERQTY, P.VOLUMESA, PO.PODATE
      FROM pricewimage P
        LEFT OUTER JOIN PO_TEMP PO ON PO.ITEMNO = P.ITEMNO ;



END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `salesman_pricelist`
--

DROP PROCEDURE IF EXISTS `salesman_pricelist`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `salesman_pricelist`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_pricelist INTEGER, IN pi_path VARCHAR(200), IN pi_warehouse VARCHAR(30), IN pi_itemcode VARCHAR(30), IN pi_warehouse1 VARCHAR(30), IN pi_warehouse2 VARCHAR(30), IN pi_warehouse3 VARCHAR(30))
BEGIN


DECLARE v_pricelist INTEGER;
DECLARE v_price NUMERIC(20,6);
DECLARE v_currrency VARCHAR(30);
DECLARE v_itemcode VARCHAR(30);
DECLARE v_itemdesc VARCHAR(100);
DECLARE v_availableqty NUMERIC(20,6);
DECLARE v_orderqty NUMERIC(20,6);
DECLARE v_volumesa NUMERIC(20,6);
DECLARE v_date DATE;
DECLARE v_path VARCHAR(200);
DECLARE Done INT;
DECLARE v_image LONGBLOB;
DECLARE v_description text;
DECLARE v_weightsa NUMERIC(20,6);
DECLARE v_weight NUMERIC(20,6);
DECLARE v_check INT;



 DECLARE CLASSCursor CURSOR FOR
  SELECT itempricelists.PRICE,
         itempricelists.CURRENCY,
         itempricelists.ITEMCODE,
         items.VOLUMESA,
         items.ITEMDESC,
         items.u_u_itemdetail,
         items.WEIGHTSA,
         items.U_U_NETWEIGHT,
         SUM(stockcardsummary.AVAILABLEQTY),
         SUM(stockcardsummary.ORDEREDQTY)
    FROM itempricelists,
         pricelists,
         items,
         stockcardsummary
   WHERE ( stockcardsummary.COMPANY = pi_company ) AND
         ( stockcardsummary.BRANCH = pi_branch ) AND
         ( stockcardsummary.ITEMCODE = items.ITEMCODE) AND
         ( stockcardsummary.WAREHOUSE IN (pi_warehouse,pi_warehouse1,pi_warehouse2,pi_warehouse3)) AND
         ( itempricelists.ITEMCODE = items.ITEMCODE ) and
         ( itempricelists.PRICELIST = pi_pricelist ) AND
         ( pricelists.PRICELIST = pi_pricelist ) AND
         ( items.ITEMCODE = pi_itemcode ) AND
         ( items.ISVALID = 1 )
   GROUP BY items.ITEMCODE;

 DECLARE CLASSCursor2 CURSOR FOR
  SELECT itempricelists.PRICE,
         itempricelists.CURRENCY,
         itempricelists.ITEMCODE,
         items.VOLUMESA,
         items.ITEMDESC,
         items.u_u_itemdetail,
         items.WEIGHTSA,
         items.U_U_NETWEIGHT,
         SUM(stockcardsummary.AVAILABLEQTY),
         SUM(stockcardsummary.ORDEREDQTY)
    FROM itempricelists,
         pricelists,
         items,
         stockcardsummary
   WHERE ( stockcardsummary.COMPANY = pi_company ) AND
         ( stockcardsummary.BRANCH = pi_branch ) AND
         ( stockcardsummary.ITEMCODE = items.ITEMCODE) AND
         ( itempricelists.ITEMCODE = items.ITEMCODE ) and
         ( itempricelists.PRICELIST = pi_pricelist ) AND
         ( pricelists.PRICELIST = pi_pricelist ) AND
         ( items.ITEMCODE = pi_itemcode ) AND
         ( items.ISVALID = 1 )
   GROUP BY items.ITEMCODE;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1 ;

  IF pi_warehouse > '' or pi_warehouse1 > '' or pi_warehouse2 > '' or pi_warehouse3 > '' THEN
     SET v_check = 1;
  ELSE
     SET v_check = 0;
  END IF;


  DROP TEMPORARY TABLE IF EXISTS pricewimage ;
  CREATE TEMPORARY TABLE `pricewimage` (
    `ITEMNO` VARCHAR(30) NOT NULL default '',
    `ITEMNAME` VARCHAR(100) default '',
    `PRICE` NUMERIC(20,6) default '0',
    `CURRENCY` VARCHAR(30),
    `AVAILABLEQTY` NUMERIC(20,6),
    `ORDERQTY` NUMERIC(20,6),
    `VOLUMESA` NUMERIC(20,6),
    `PODATE` DATE,
    `IMAGE` LONGBLOB,
    `IMAGEEXIST` INTEGER,
    `DESCRIPTION` TEXT,
    `WEIGHTSA` NUMERIC(20,6),
    `WEIGHT` NUMERIC(20,6),
    PRIMARY KEY  (`ITEMNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

IF v_check = 1 THEN
  OPEN CLASSCursor;
  cur0001loop: LOOP

     FETCH CLASSCursor INTO v_price, v_currrency, v_itemcode, v_volumesa, v_itemdesc, v_description, v_weightsa, v_weight, v_availableqty, v_orderqty ;
     IF Done = 1 THEN
       Leave cur0001loop;
     END IF;

       SELECT purchaseorders.DOCDUEDATE INTO v_date
          FROM purchaseorders,
               purchaseorderitems
         WHERE ( purchaseorders.COMPANY = purchaseorderitems.COMPANY ) and
               ( purchaseorders.BRANCH = purchaseorderitems.BRANCH ) and
               ( purchaseorders.DOCID = purchaseorderitems.DOCID ) and
          		 ( purchaseorderitems.ITEMCODE = v_itemcode )
        ORDER BY purchaseorders.DOCDUEDATE LIMIT 1;

 

        IF v_availableqty is null THEN
           SET v_availableqty = 0;
        END IF;

        IF v_orderqty is null THEN
           SET v_orderqty = 0;
        END IF;

        SET v_image = LOAD_FILE(CONCAT(pi_path,v_itemcode, '/photo.jpg'));

        IF v_image Is NULL THEN
           INSERT INTO pricewimage (ITEMNO, ITEMNAME, PRICE, CURRENCY, AVAILABLEQTY, ORDERQTY, VOLUMESA, PODATE, IMAGEEXIST, DESCRIPTION, WEIGHTSA, WEIGHT)
               VALUES (v_itemcode, v_itemdesc, v_price, v_currrency, v_availableqty, v_orderqty, v_volumesa, v_date, 0, v_description, v_weightsa, v_weight);
        ELSE
           INSERT INTO pricewimage (ITEMNO, ITEMNAME, PRICE, CURRENCY, AVAILABLEQTY, ORDERQTY, VOLUMESA, PODATE, IMAGE, IMAGEEXIST, DESCRIPTION, WEIGHTSA, WEIGHT)
               VALUES (v_itemcode, v_itemdesc, v_price, v_currrency, v_availableqty, v_orderqty, v_volumesa, v_date, v_image, 1, v_description, v_weightsa, v_weight);
        END IF;

      SET Done = 0;


  END LOOP cur0001loop;
  CLOSE CLASSCursor;
ELSE

  OPEN CLASSCursor2;
  cur0001loop2: LOOP

     FETCH CLASSCursor2 INTO v_price, v_currrency, v_itemcode, v_volumesa, v_itemdesc, v_description, v_weightsa, v_weight, v_availableqty, v_orderqty ;
     IF Done = 1 THEN
       Leave cur0001loop2;
     END IF;

       SELECT purchaseorders.DOCDUEDATE INTO v_date
          FROM purchaseorders,
               purchaseorderitems
         WHERE ( purchaseorders.COMPANY = purchaseorderitems.COMPANY ) and
               ( purchaseorders.BRANCH = purchaseorderitems.BRANCH ) and
               ( purchaseorders.DOCID = purchaseorderitems.DOCID ) and
          		 ( purchaseorderitems.ITEMCODE = v_itemcode )
        ORDER BY purchaseorders.DOCDUEDATE LIMIT 1;

 

        IF v_availableqty is null THEN
           SET v_availableqty = 0;
        END IF;

        IF v_orderqty is null THEN
           SET v_orderqty = 0;
        END IF;

        SET v_image = LOAD_FILE(CONCAT(pi_path,v_itemcode, '/photo.jpg'));

        IF v_image Is NULL THEN
           INSERT INTO pricewimage (ITEMNO, ITEMNAME, PRICE, CURRENCY, AVAILABLEQTY, ORDERQTY, VOLUMESA, PODATE, IMAGEEXIST, DESCRIPTION, WEIGHTSA, WEIGHT)
               VALUES (v_itemcode, v_itemdesc, v_price, v_currrency, v_availableqty, v_orderqty, v_volumesa, v_date, 0, v_description, v_weightsa, v_weight);
        ELSE
           INSERT INTO pricewimage (ITEMNO, ITEMNAME, PRICE, CURRENCY, AVAILABLEQTY, ORDERQTY, VOLUMESA, PODATE, IMAGE, IMAGEEXIST, DESCRIPTION, WEIGHTSA, WEIGHT)
               VALUES (v_itemcode, v_itemdesc, v_price, v_currrency, v_availableqty, v_orderqty, v_volumesa, v_date, v_image, 1, v_description, v_weightsa, v_weight);
        END IF;

      SET Done = 0;




  END LOOP cur0001loop2;
  CLOSE CLASSCursor2;
END IF;

  SELECT * from pricewimage;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `salesman_pricelist_noimg`
--

DROP PROCEDURE IF EXISTS `salesman_pricelist_noimg`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `salesman_pricelist_noimg`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_pricelist INTEGER, IN pi_item_fr VARCHAR(30), IN pi_item_to VARCHAR(30), IN pi_warehouse VARCHAR(30), IN pi_warehouse1 VARCHAR(30), IN pi_warehouse2 VARCHAR(30), IN pi_warehouse3 VARCHAR(30), IN pi_zeroqty INT)
BEGIN
DECLARE v_pricelist INTEGER;
DECLARE v_price NUMERIC(20,6);
DECLARE v_currrency VARCHAR(30);
DECLARE v_itemcode VARCHAR(30);
DECLARE v_itemdesc VARCHAR(100);
DECLARE v_availableqty NUMERIC(20,6);
DECLARE v_orderqty NUMERIC(20,6);
DECLARE v_volumesa NUMERIC(20,6);
DECLARE v_date DATE;
DECLARE Done INT;
DECLARE v_item_to VARCHAR(30);
DECLARE v_item_from VARCHAR(30);
DECLARE v_check INT;

  IF pi_item_fr is null THEN SET v_item_from = '';
  ELSE SET v_item_from = pi_item_fr;
  END IF;

  IF pi_item_to is null THEN SET v_item_to = '';
  ELSE SET v_item_to = pi_item_to;
  END IF;

  IF v_item_from = '' and v_item_to = '' THEN
    SET v_item_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;


  DROP TEMPORARY TABLE IF EXISTS po_temp ;
  CREATE TEMPORARY TABLE `po_temp` (
    `ITEMNO` VARCHAR(30) NOT NULL default '',
    `ITEMNAME` VARCHAR(100) default '',
    `ORDERQTY` NUMERIC(20,6),
    `PODATE` DATE
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS pricewimage ;
  CREATE TEMPORARY TABLE `pricewimage` (
    `ITEMNO` VARCHAR(30) NOT NULL default '',
    `ITEMNAME` VARCHAR(100) default '',
    `PRICE` NUMERIC(20,6) default '0',
    `CURRENCY` VARCHAR(30),
    `AVAILABLEQTY` NUMERIC(20,6),
    `ORDERQTY` NUMERIC(20,6) default '0',
    `VOLUMESA` NUMERIC(20,6),
    `PODATE` DATE,
    PRIMARY KEY  (`ITEMNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  INSERT INTO po_temp(`ITEMNO`,`ITEMNAME`, `ORDERQTY`,`PODATE`)
    SELECT PI.ITEMCODE, PI.ITEMDESC, PI.OPENQUANTITY, P.DOCDUEDATE
      FROM PURCHASEORDERS P, PURCHASEORDERITEMS PI
      WHERE P.COMPANY   = PI.COMPANY AND
            P.BRANCH    = PI.BRANCH  AND
            P.DOCID     = PI.DOCID   AND
            P.COMPANY   = pi_company AND
            P.BRANCH    = pi_branch  AND
            P.DOCSTATUS = 'O'        AND
            PI.OPENQUANTITY > 0;

  IF pi_warehouse > '' or pi_warehouse1 > '' or pi_warehouse2 > '' or pi_warehouse3 > '' THEN
     SET v_check = 1;


  ELSE
     SET v_check = 0;

  END IF;

IF v_check = 1 THEN
  IF pi_zeroqty = 1 THEN
    INSERT INTO pricewimage(`ITEMNO`,`ITEMNAME`,`PRICE`,`CURRENCY`,`AVAILABLEQTY`,`VOLUMESA`)
    SELECT itempricelists.ITEMCODE, items.ITEMDESC, itempricelists.PRICE, itempricelists.CURRENCY,
           SUM(stockcardsummary.INSTOCKQTY) - SUM(stockcardsummary.COMMITEDQTY), items.VOLUMESA
      FROM itempricelists,
           pricelists,
           items,
           stockcardsummary
     WHERE ( stockcardsummary.COMPANY = pi_company ) AND
           ( stockcardsummary.BRANCH = pi_branch ) AND
           ( stockcardsummary.ITEMCODE = items.ITEMCODE) AND
           ( stockcardsummary.WAREHOUSE IN (pi_warehouse,pi_warehouse1,pi_warehouse2,pi_warehouse3)) AND
           ( itempricelists.ITEMCODE = items.ITEMCODE ) and
           ( itempricelists.PRICELIST = pi_pricelist ) AND
           ( pricelists.PRICELIST = pi_pricelist ) AND
           ( items.ISVALID = 1 ) AND
           ( stockcardsummary.AVAILABLEQTY <> 0 OR stockcardsummary.ORDEREDQTY > 0)
     GROUP BY items.ITEMCODE;
  ELSE
    INSERT INTO pricewimage(`ITEMNO`,`ITEMNAME`,`PRICE`,`CURRENCY`,`AVAILABLEQTY`,`VOLUMESA`)
    SELECT itempricelists.ITEMCODE, items.ITEMDESC, itempricelists.PRICE, itempricelists.CURRENCY,
           SUM(stockcardsummary.INSTOCKQTY) - SUM(stockcardsummary.COMMITEDQTY), items.VOLUMESA
      FROM itempricelists,
           pricelists,
           items,
           stockcardsummary
     WHERE ( stockcardsummary.COMPANY = pi_company ) AND
           ( stockcardsummary.BRANCH = pi_branch ) AND
           ( stockcardsummary.ITEMCODE = items.ITEMCODE) AND
           ( stockcardsummary.WAREHOUSE IN (pi_warehouse,pi_warehouse1,pi_warehouse2,pi_warehouse3)) AND
           ( itempricelists.ITEMCODE = items.ITEMCODE ) and
           ( itempricelists.PRICELIST = pi_pricelist ) AND
           ( pricelists.PRICELIST = pi_pricelist ) AND
           ( items.ISVALID = 1 )
     GROUP BY items.ITEMCODE;
  END IF;
ELSE
  IF pi_zeroqty = 1 THEN
    INSERT INTO pricewimage(`ITEMNO`,`ITEMNAME`,`PRICE`,`CURRENCY`,`AVAILABLEQTY`,`VOLUMESA`)
    SELECT itempricelists.ITEMCODE, items.ITEMDESC, itempricelists.PRICE, itempricelists.CURRENCY,
           SUM(stockcardsummary.INSTOCKQTY) - SUM(stockcardsummary.COMMITEDQTY), items.VOLUMESA
      FROM itempricelists,
           pricelists,
           items,
           stockcardsummary
     WHERE ( stockcardsummary.COMPANY = pi_company ) AND
           ( stockcardsummary.BRANCH = pi_branch ) AND
           ( stockcardsummary.ITEMCODE = items.ITEMCODE) AND
           ( itempricelists.ITEMCODE = items.ITEMCODE ) and
           ( itempricelists.PRICELIST = pi_pricelist ) AND
           ( pricelists.PRICELIST = pi_pricelist ) AND
           ( items.ISVALID = 1 ) AND
           ( stockcardsummary.AVAILABLEQTY <> 0 OR stockcardsummary.ORDEREDQTY > 0)
     GROUP BY items.ITEMCODE;
  ELSE
    INSERT INTO pricewimage(`ITEMNO`,`ITEMNAME`,`PRICE`,`CURRENCY`,`AVAILABLEQTY`,`VOLUMESA`)
    SELECT itempricelists.ITEMCODE, items.ITEMDESC, itempricelists.PRICE, itempricelists.CURRENCY,
           SUM(stockcardsummary.INSTOCKQTY) - SUM(stockcardsummary.COMMITEDQTY), items.VOLUMESA
      FROM itempricelists,
           pricelists,
           items,
           stockcardsummary
     WHERE ( stockcardsummary.COMPANY = pi_company ) AND
           ( stockcardsummary.BRANCH = pi_branch ) AND
           ( stockcardsummary.ITEMCODE = items.ITEMCODE) AND
           ( itempricelists.ITEMCODE = items.ITEMCODE ) and
           ( itempricelists.PRICELIST = pi_pricelist ) AND
           ( pricelists.PRICELIST = pi_pricelist ) AND
           ( items.ISVALID = 1 )
     GROUP BY items.ITEMCODE;
  END IF;
END IF;

  SELECT P.ITEMNO, P.ITEMNAME, P.PRICE, P.CURRENCY, P.AVAILABLEQTY, PO.ORDERQTY, P.VOLUMESA, PO.PODATE
      FROM pricewimage P
        LEFT OUTER JOIN PO_TEMP PO ON PO.ITEMNO = P.ITEMNO ;



END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `salesorder_report`
--

DROP PROCEDURE IF EXISTS `salesorder_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `salesorder_report`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM salesorders A
        LEFT OUTER JOIN salesorderitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `Salespurchase_by_class_sp`
--

DROP PROCEDURE IF EXISTS `Salespurchase_by_class_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `Salespurchase_by_class_sp`(IN pi_cur_year VARCHAR(4), IN pi_type VARCHAR(4), IN pi_currency VARCHAR(4))
BEGIN

DECLARE v_cur_year INT;
DECLARE v_bpcode VARCHAR(100);   
DECLARE v_cont_wap NUMERIC(20,6);
DECLARE v_minus_wap NUMERIC(20,6);
DECLARE v_mth01, v_mth02, v_mth03, v_mth04, v_mth05, v_mth06 NUMERIC(20,6);
DECLARE v_mth07, v_mth08, v_mth09, v_mth10, v_mth11, v_mth12 NUMERIC(20,6);

DECLARE v_curtime TIME;
DECLARE v_curdate DATE;
DECLARE v_curdate_from DATE;
DECLARE v_curdate_to DATE;
DECLARE v_inidate_from DATE;
DECLARE v_inidate_to DATE;
DECLARE v_done INT;
DECLARE v_int_mth INT;
DECLARE v_int_yr INT;
DECLARE v_no_year INT;
DECLARE v_no_year2 INT;
DECLARE v_yearcompare INT;
DECLARE Done INT;
DECLARE v_class VARCHAR(30);
DECLARE v_classname VARCHAR(100);
DECLARE v_currency VARCHAR(4);
DECLARE v_curtype VARCHAR(10);

  DECLARE CLASSCursor CURSOR FOR
     SELECT ITEMCLASS, ITEMCLASSNAME FROM itemclasses WHERE ITEMCLASS <> 'DS' and ITEMCLASS <> 'IN' ORDER BY ITEMCLASS;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1 ;

 SELECT CURRENCY INTO v_currency FROM COMPANIES;

 IF v_currency =  pi_currency THEN
    SET v_curtype = 'LOCAL';
 ELSE
    SET v_curtype = 'FOREIGN';
 END IF;

 SET v_cur_year = CONVERT(pi_cur_year,SIGNED); 
 SET v_curdate = CURDATE();
 SET v_curtime = Now();
 SET v_int_mth = 1;
 SET v_int_yr = 1;
 SET v_no_year = v_no_year2;
 SET v_yearcompare = 1;


 SET v_inidate_from = DATE(concat(CONVERT(v_cur_year, CHAR(4)),'-01-01'));

 SET v_inidate_to = v_inidate_from + interval 1 month;

  DROP TEMPORARY TABLE IF EXISTS SalesClass ;
  CREATE TEMPORARY TABLE `SalesClass` (
    `CLASS` VARCHAR(30) NOT NULL default '',
    `CLASSNAME` VARCHAR(100) default '',
    `MTH01` NUMERIC(20,6) default '0',
    `MTH02` NUMERIC(20,6) default '0',
    `MTH03` NUMERIC(20,6) default '0',
    `MTH04` NUMERIC(20,6) default '0',
    `MTH05` NUMERIC(20,6) default '0',
    `MTH06` NUMERIC(20,6) default '0',
    `MTH07` NUMERIC(20,6) default '0',
    `MTH08` NUMERIC(20,6) default '0',
    `MTH09` NUMERIC(20,6) default '0',
    `MTH10` NUMERIC(20,6) default '0',
    `MTH11` NUMERIC(20,6) default '0',
    `MTH12` NUMERIC(20,6) default '0',
    PRIMARY KEY  (`CLASS`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  SET v_curdate_from = v_inidate_from;
  SET v_curdate_to = v_inidate_to;
  SET v_int_mth = 1;

  SET v_mth01 = 0;
  SET v_mth02 = 0;
  SET v_mth03 = 0;
  SET v_mth04 = 0;
  SET v_mth05 = 0;
  SET v_mth06 = 0;
  SET v_mth07 = 0;
  SET v_mth08 = 0;
  SET v_mth09 = 0;
  SET v_mth10 = 0;
  SET v_mth11 = 0;
  SET v_mth12 = 0;

  WHILE v_int_mth <= 12 DO
      IF v_curtype = 'LOCAL' THEN
          IF pi_type = 'AR' THEN
               SELECT SUM(arinvoiceitems.LINETOTAL * arinvoices.CURRENCYRATE) INTO v_cont_wap
                    FROM arinvoiceitems,
                         arinvoices,
                         items
                   WHERE ( arinvoiceitems.COMPANY = arinvoices.COMPANY ) and
                         ( arinvoiceitems.BRANCH = arinvoices.BRANCH ) and
                         ( arinvoiceitems.DOCID = arinvoices.DOCID ) and
                         ( arinvoiceitems.ITEMCODE = items.ITEMCODE) and
                         ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C') and
                         ( arinvoices.DOCDATE >= v_curdate_from and arinvoices.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = 'DS' or items.ITEMCLASS = 'IN' ) ;

               IF v_cont_wap IS NULL THEN
                  SET v_cont_wap = 0;
               END IF;

               SELECT SUM(arcreditmemoitems.LINETOTAL * arcreditmemos.CURRENCYRATE) INTO v_minus_wap
                    FROM arcreditmemoitems,
                         arcreditmemos,
                         items
                   WHERE ( arcreditmemoitems.COMPANY = arcreditmemos.COMPANY ) and
                         ( arcreditmemoitems.BRANCH = arcreditmemos.BRANCH ) and
                         ( arcreditmemoitems.DOCID = arcreditmemos.DOCID ) and
                         ( arcreditmemoitems.ITEMCODE = items.ITEMCODE) and
                         ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C') and
                         ( arcreditmemos.DOCDATE >= v_curdate_from and arcreditmemos.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = 'DS' or items.ITEMCLASS = 'IN' ) ;

               IF v_minus_wap IS NULL THEN
                  SET v_minus_wap = 0;
               END IF;

               SET v_cont_wap = v_cont_wap - v_minus_wap;
          ELSE
              SELECT SUM(apinvoiceitems.LINETOTAL * apinvoices.CURRENCYRATE) INTO v_cont_wap
                    FROM apinvoiceitems,
                         apinvoices,
                         items
                   WHERE ( apinvoiceitems.COMPANY = apinvoices.COMPANY ) and
                         ( apinvoiceitems.BRANCH = apinvoices.BRANCH ) and
                         ( apinvoiceitems.DOCID = apinvoices.DOCID ) and
                         ( apinvoiceitems.ITEMCODE = items.ITEMCODE) and
                         ( apinvoices.DOCSTATUS = 'O' or apinvoices.DOCSTATUS = 'C') and
                         ( apinvoices.DOCDATE >= v_curdate_from and apinvoices.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = 'DS' or items.ITEMCLASS = 'IN' ) ;

               IF v_cont_wap IS NULL THEN
                  SET v_cont_wap = 0;
               END IF;

              SELECT SUM(apcreditmemoitems.LINETOTAL * apcreditmemos.CURRENCYRATE) INTO v_minus_wap
                    FROM apcreditmemoitems,
                         apcreditmemos,
                         items
                   WHERE ( apcreditmemoitems.COMPANY = apcreditmemos.COMPANY ) and
                         ( apcreditmemoitems.BRANCH = apcreditmemos.BRANCH ) and
                         ( apcreditmemoitems.DOCID = apcreditmemos.DOCID ) and
                         ( apcreditmemoitems.ITEMCODE = items.ITEMCODE) and
                         ( apcreditmemos.DOCSTATUS = 'O' or apcreditmemos.DOCSTATUS = 'C') and
                         ( apcreditmemos.DOCDATE >= v_curdate_from and apcreditmemos.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = 'DS' or items.ITEMCLASS = 'IN' ) ;

               IF v_minus_wap IS NULL THEN
                  SET v_minus_wap = 0;
               END IF;

               SET v_cont_wap = v_cont_wap - v_minus_wap;
          END IF;
      ELSE
          IF pi_type = 'AR' THEN
               SELECT SUM(arinvoiceitems.LINETOTAL) INTO v_cont_wap
                    FROM arinvoiceitems,
                         arinvoices,
                         items
                   WHERE ( arinvoiceitems.COMPANY = arinvoices.COMPANY ) and
                         ( arinvoiceitems.BRANCH = arinvoices.BRANCH ) and
                         ( arinvoiceitems.DOCID = arinvoices.DOCID ) and
                         ( arinvoiceitems.ITEMCODE = items.ITEMCODE) and
                         ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C') and
                         ( arinvoices.DOCDATE >= v_curdate_from and arinvoices.DOCDATE < v_curdate_to) and
                         ( arinvoices.CURRENCY =  pi_currency) and
                         ( items.ITEMCLASS = 'DS' or items.ITEMCLASS = 'IN' ) ;

               IF v_cont_wap IS NULL THEN
                  SET v_cont_wap = 0;
               END IF;

               SELECT SUM(arcreditmemoitems.LINETOTAL) INTO v_minus_wap
                    FROM arcreditmemoitems,
                         arcreditmemos,
                         items
                   WHERE ( arcreditmemoitems.COMPANY = arcreditmemos.COMPANY ) and
                         ( arcreditmemoitems.BRANCH = arcreditmemos.BRANCH ) and
                         ( arcreditmemoitems.DOCID = arcreditmemos.DOCID ) and
                         ( arcreditmemoitems.ITEMCODE = items.ITEMCODE) and
                         ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C') and
                         ( arcreditmemos.DOCDATE >= v_curdate_from and arcreditmemos.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = 'DS' or items.ITEMCLASS = 'IN' ) ;

               IF v_minus_wap IS NULL THEN
                  SET v_minus_wap = 0;
               END IF;

               SET v_cont_wap = v_cont_wap - v_minus_wap;
          ELSE
              SELECT SUM(apinvoiceitems.LINETOTAL) INTO v_cont_wap
                    FROM apinvoiceitems,
                         apinvoices,
                         items
                   WHERE ( apinvoiceitems.COMPANY = apinvoices.COMPANY ) and
                         ( apinvoiceitems.BRANCH = apinvoices.BRANCH ) and
                         ( apinvoiceitems.DOCID = apinvoices.DOCID ) and
                         ( apinvoiceitems.ITEMCODE = items.ITEMCODE) and
                         ( apinvoices.DOCSTATUS = 'O' or apinvoices.DOCSTATUS = 'C') and
                         ( apinvoices.DOCDATE >= v_curdate_from and apinvoices.DOCDATE < v_curdate_to) and
                         ( apinvoices.CURRENCY =  pi_currency) and
                         ( items.ITEMCLASS = 'DS' or items.ITEMCLASS = 'IN' ) ;

               IF v_cont_wap IS NULL THEN
                  SET v_cont_wap = 0;
               END IF;

              SELECT SUM(apcreditmemoitems.LINETOTAL) INTO v_minus_wap
                    FROM apcreditmemoitems,
                         apcreditmemos,
                         items
                   WHERE ( apcreditmemoitems.COMPANY = apcreditmemos.COMPANY ) and
                         ( apcreditmemoitems.BRANCH = apcreditmemos.BRANCH ) and
                         ( apcreditmemoitems.DOCID = apcreditmemos.DOCID ) and
                         ( apcreditmemoitems.ITEMCODE = items.ITEMCODE) and
                         ( apcreditmemos.DOCSTATUS = 'O' or apcreditmemos.DOCSTATUS = 'C') and
                         ( apcreditmemos.DOCDATE >= v_curdate_from and apcreditmemos.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = 'DS' or items.ITEMCLASS = 'IN' ) ;

               IF v_minus_wap IS NULL THEN
                  SET v_minus_wap = 0;
               END IF;

               SET v_cont_wap = v_cont_wap - v_minus_wap;
          END IF;
      END IF;

      IF v_cont_wap is null THEN
          SET v_cont_wap = 0;
      END IF;

           CASE v_int_mth
             WHEN 1 THEN
                SET v_mth01 = v_cont_wap;
             WHEN 2 THEN
                SET v_mth02 = v_cont_wap;
             WHEN 3 THEN
                SET v_mth03 = v_cont_wap;
             WHEN 4 THEN
                SET v_mth04 = v_cont_wap;
             WHEN 5 THEN
                SET v_mth05 = v_cont_wap;
             WHEN 6 THEN
                SET v_mth06 = v_cont_wap;
             WHEN 7 THEN
                SET v_mth07 = v_cont_wap;
             WHEN 8 THEN
                SET v_mth08 = v_cont_wap;
             WHEN 9 THEN
                SET v_mth09 = v_cont_wap;
             WHEN 10 THEN
                SET v_mth10 = v_cont_wap;
             WHEN 11 THEN
                SET v_mth11 = v_cont_wap;
             WHEN 12 THEN
                SET v_mth12 = v_cont_wap;
           END CASE;

           SET v_cont_wap = 0;
           SET v_int_mth = v_int_mth + 1;
           SET v_curdate_from = v_curdate_from + interval 1 month;
           SET v_curdate_to = v_curdate_from + interval 1 month;
  END WHILE;

  INSERT INTO SalesClass (CLASS, CLASSNAME, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12)
         VALUES ('000', 'LOCAL', v_mth01, v_mth02, v_mth03, v_mth04, v_mth05, v_mth06, v_mth07, v_mth08, v_mth09, v_mth10, v_mth11, v_mth12);


  OPEN CLASSCursor;
  cur0001loop: LOOP

     FETCH CLASSCursor INTO v_class, v_classname ;
     IF Done = 1 THEN
       Leave cur0001loop;
     END IF;

      SET v_curdate_from = v_inidate_from;
      SET v_curdate_to = v_inidate_to;
      SET v_int_mth = 1;

      SET v_mth01 = 0;
      SET v_mth02 = 0;
      SET v_mth03 = 0;
      SET v_mth04 = 0;
      SET v_mth05 = 0;
      SET v_mth06 = 0;
      SET v_mth07 = 0;
      SET v_mth08 = 0;
      SET v_mth09 = 0;
      SET v_mth10 = 0;
      SET v_mth11 = 0;
      SET v_mth12 = 0;

      WHILE v_int_mth <= 12 DO

      IF v_curtype = 'LOCAL' THEN
          IF pi_type = 'AR' THEN
               SELECT SUM(arinvoiceitems.LINETOTAL * arinvoices.CURRENCYRATE) INTO v_cont_wap
                    FROM arinvoiceitems,
                         arinvoices,
                         items
                   WHERE ( arinvoiceitems.COMPANY = arinvoices.COMPANY ) and
                         ( arinvoiceitems.BRANCH = arinvoices.BRANCH ) and
                         ( arinvoiceitems.DOCID = arinvoices.DOCID ) and
                         ( arinvoiceitems.ITEMCODE = items.ITEMCODE) and
                         ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C') and
                         ( arinvoices.DOCDATE >= v_curdate_from and arinvoices.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = v_class ) ;

               IF v_cont_wap IS NULL THEN
                  SET v_cont_wap = 0;
               END IF;

               SELECT SUM(arcreditmemoitems.LINETOTAL * arcreditmemos.CURRENCYRATE) INTO v_minus_wap
                    FROM arcreditmemoitems,
                         arcreditmemos,
                         items
                   WHERE ( arcreditmemoitems.COMPANY = arcreditmemos.COMPANY ) and
                         ( arcreditmemoitems.BRANCH = arcreditmemos.BRANCH ) and
                         ( arcreditmemoitems.DOCID = arcreditmemos.DOCID ) and
                         ( arcreditmemoitems.ITEMCODE = items.ITEMCODE) and
                         ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C') and
                         ( arcreditmemos.DOCDATE >= v_curdate_from and arcreditmemos.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = v_class ) ;

               IF v_minus_wap IS NULL THEN
                  SET v_minus_wap = 0;
               END IF;

               SET v_cont_wap = v_cont_wap - v_minus_wap;
          ELSE
              SELECT SUM(apinvoiceitems.LINETOTAL * apinvoices.CURRENCYRATE) INTO v_cont_wap
                    FROM apinvoiceitems,
                         apinvoices,
                         items
                   WHERE ( apinvoiceitems.COMPANY = apinvoices.COMPANY ) and
                         ( apinvoiceitems.BRANCH = apinvoices.BRANCH ) and
                         ( apinvoiceitems.DOCID = apinvoices.DOCID ) and
                         ( apinvoiceitems.ITEMCODE = items.ITEMCODE) and
                         ( apinvoices.DOCSTATUS = 'O' or apinvoices.DOCSTATUS = 'C') and
                         ( apinvoices.DOCDATE >= v_curdate_from and apinvoices.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = v_class ) ;

               IF v_cont_wap IS NULL THEN
                  SET v_cont_wap = 0;
               END IF;

              SELECT SUM(apcreditmemoitems.LINETOTAL * apcreditmemos.CURRENCYRATE) INTO v_minus_wap
                    FROM apcreditmemoitems,
                         apcreditmemos,
                         items
                   WHERE ( apcreditmemoitems.COMPANY = apcreditmemos.COMPANY ) and
                         ( apcreditmemoitems.BRANCH = apcreditmemos.BRANCH ) and
                         ( apcreditmemoitems.DOCID = apcreditmemos.DOCID ) and
                         ( apcreditmemoitems.ITEMCODE = items.ITEMCODE) and
                         ( apcreditmemos.DOCSTATUS = 'O' or apcreditmemos.DOCSTATUS = 'C') and
                         ( apcreditmemos.DOCDATE >= v_curdate_from and apcreditmemos.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = v_class ) ;

               IF v_minus_wap IS NULL THEN
                  SET v_minus_wap = 0;
               END IF;

               SET v_cont_wap = v_cont_wap - v_minus_wap;
          END IF;
      ELSE
          IF pi_type = 'AR' THEN
               SELECT SUM(arinvoiceitems.LINETOTAL) INTO v_cont_wap
                    FROM arinvoiceitems,
                         arinvoices,
                         items
                   WHERE ( arinvoiceitems.COMPANY = arinvoices.COMPANY ) and
                         ( arinvoiceitems.BRANCH = arinvoices.BRANCH ) and
                         ( arinvoiceitems.DOCID = arinvoices.DOCID ) and
                         ( arinvoiceitems.ITEMCODE = items.ITEMCODE) and
                         ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C') and
                         ( arinvoices.DOCDATE >= v_curdate_from and arinvoices.DOCDATE < v_curdate_to) and
                         ( arinvoices.CURRENCY =  pi_currency) and
                         ( items.ITEMCLASS = v_class ) ;

               IF v_cont_wap IS NULL THEN
                  SET v_cont_wap = 0;
               END IF;

               SELECT SUM(arcreditmemoitems.LINETOTAL) INTO v_minus_wap
                    FROM arcreditmemoitems,
                         arcreditmemos,
                         items
                   WHERE ( arcreditmemoitems.COMPANY = arcreditmemos.COMPANY ) and
                         ( arcreditmemoitems.BRANCH = arcreditmemos.BRANCH ) and
                         ( arcreditmemoitems.DOCID = arcreditmemos.DOCID ) and
                         ( arcreditmemoitems.ITEMCODE = items.ITEMCODE) and
                         ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C') and
                         ( arcreditmemos.DOCDATE >= v_curdate_from and arcreditmemos.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = v_class ) ;

               IF v_minus_wap IS NULL THEN
                  SET v_minus_wap = 0;
               END IF;

               SET v_cont_wap = v_cont_wap - v_minus_wap;
          ELSE
              SELECT SUM(apinvoiceitems.LINETOTAL) INTO v_cont_wap
                    FROM apinvoiceitems,
                         apinvoices,
                         items
                   WHERE ( apinvoiceitems.COMPANY = apinvoices.COMPANY ) and
                         ( apinvoiceitems.BRANCH = apinvoices.BRANCH ) and
                         ( apinvoiceitems.DOCID = apinvoices.DOCID ) and
                         ( apinvoiceitems.ITEMCODE = items.ITEMCODE) and
                         ( apinvoices.DOCSTATUS = 'O' or apinvoices.DOCSTATUS = 'C') and
                         ( apinvoices.DOCDATE >= v_curdate_from and apinvoices.DOCDATE < v_curdate_to) and
                         ( apinvoices.CURRENCY =  pi_currency) and
                         ( items.ITEMCLASS = v_class ) ;

               IF v_cont_wap IS NULL THEN
                  SET v_cont_wap = 0;
               END IF;

              SELECT SUM(apcreditmemoitems.LINETOTAL) INTO v_minus_wap
                    FROM apcreditmemoitems,
                         apcreditmemos,
                         items
                   WHERE ( apcreditmemoitems.COMPANY = apcreditmemos.COMPANY ) and
                         ( apcreditmemoitems.BRANCH = apcreditmemos.BRANCH ) and
                         ( apcreditmemoitems.DOCID = apcreditmemos.DOCID ) and
                         ( apcreditmemoitems.ITEMCODE = items.ITEMCODE) and
                         ( apcreditmemos.DOCSTATUS = 'O' or apcreditmemos.DOCSTATUS = 'C') and
                         ( apcreditmemos.DOCDATE >= v_curdate_from and apcreditmemos.DOCDATE < v_curdate_to) and
                         ( items.ITEMCLASS = v_class ) ;

               IF v_minus_wap IS NULL THEN
                  SET v_minus_wap = 0;
               END IF;

               SET v_cont_wap = v_cont_wap - v_minus_wap;
          END IF;
      END IF;


          IF v_cont_wap is null THEN
              SET v_cont_wap = 0;
          END IF;

               CASE v_int_mth
                 WHEN 1 THEN
                    SET v_mth01 = v_cont_wap;
                 WHEN 2 THEN
                    SET v_mth02 = v_cont_wap;
                 WHEN 3 THEN
                    SET v_mth03 = v_cont_wap;
                 WHEN 4 THEN
                    SET v_mth04 = v_cont_wap;
                 WHEN 5 THEN
                    SET v_mth05 = v_cont_wap;
                 WHEN 6 THEN
                    SET v_mth06 = v_cont_wap;
                 WHEN 7 THEN
                    SET v_mth07 = v_cont_wap;
                 WHEN 8 THEN
                    SET v_mth08 = v_cont_wap;
                 WHEN 9 THEN
                    SET v_mth09 = v_cont_wap;
                 WHEN 10 THEN
                    SET v_mth10 = v_cont_wap;
                 WHEN 11 THEN
                    SET v_mth11 = v_cont_wap;
                 WHEN 12 THEN
                    SET v_mth12 = v_cont_wap;
               END CASE;

               SET v_cont_wap = 0;
               SET v_int_mth = v_int_mth + 1;
               SET v_curdate_from = v_curdate_from + interval 1 month;
               SET v_curdate_to = v_curdate_from + interval 1 month;
      END WHILE;

      INSERT INTO SalesClass (CLASS, CLASSNAME, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10, MTH11, MTH12)
             VALUES (v_class, v_classname, v_mth01, v_mth02, v_mth03, v_mth04, v_mth05, v_mth06, v_mth07, v_mth08, v_mth09, v_mth10, v_mth11, v_mth12);

      SET Done = 0;

  END LOOP cur0001loop;
  CLOSE CLASSCursor;

  SELECT * FROM SalesClass;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `salesquotation_report`
--

DROP PROCEDURE IF EXISTS `salesquotation_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `salesquotation_report`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM salesquotations A
        LEFT OUTER JOIN salesquotationitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `salesreturn_report`
--

DROP PROCEDURE IF EXISTS `salesreturn_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `salesreturn_report`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date1 varchar(200), IN pi_date2 varchar(200), IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        '' AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE) AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.UNITPRICE) AS PRICE,
        sum(B.LINETOTAL) AS TOTAL
        FROM salesreturns A
        LEFT OUTER JOIN salesreturnitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, IF(B.DOCTYPE = 'S', B.GLACCTNO, B.ITEMCODE);
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_analysis`
--

DROP PROCEDURE IF EXISTS `sales_analysis`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_analysis`(IN comp_id varchar(200),
                             IN branch_no varchar(200),
                             IN date_fm varchar(200),
                             IN date_to varchar(200))
BEGIN
DECLARE v_companyname varchar(100);
DECLARE v_branchname varchar(100);
CREATE TEMPORARY TABLE  `main` (
    `company` varchar(100) NULL default '',
    `branchname` varchar(100) NULL default '',
    `datefm` DATE NULL,
    `dateto` DATE NULL,
    `docdate` DATE NULL,
    `docduedate` DATE NULL,
    `docno` varchar(100) NULL default '',
    `bpcode` varchar(100) NULL default '',
    `bpname` varchar(500) NULL default '',
    `salesperson` varchar(500) NULL default '',
    `itemcode` varchar(100) NULL default '',
    `itemdesc` varchar(500) NULL default '',
    `whscode` varchar(100) NULL default '',
    `serialno` varchar(5000) NULL default '',
    `unit` varchar(100) NULL default '',
    `quantity` NUMERIC(18,6) NULL default '0',
    `unitprice` NUMERIC(18,6) NULL default '0',
    `itemcost` NUMERIC(18,6) NULL default '0',
    `vatcode` varchar(100) NULL default '',
    `vatamount` NUMERIC(18,6) NULL default '0',
    `totalcost` NUMERIC(18,6) NULL default '0',
    `linetotal` NUMERIC(18,6) NULL default '0',
    `gpamount` NUMERIC(18,6) NULL default '0',
    `percentage` NUMERIC(18,6) NULL default '0',
    `orderx` NUMERIC(18,6) NULL default '0',
    INDEX IDX_1 (`orderx`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
select upper(a.companyname), upper(concat(b.branchcode, ' - ', b.branchname)) into v_companyname, v_branchname from companies a, branches b  where b.companycode=a.companycode and a.companycode=comp_id and b.branchcode=branch_no;
INSERT
    INTO main (
    company,
    branchname,
    datefm,
    dateto,
    docdate,
    docduedate,
    docno,
    bpcode,
    bpname,
    salesperson,
    itemcode,
    itemdesc,
    whscode,
    serialno,
    unit,
    quantity,
    unitprice,
    itemcost,
    vatcode,
    vatamount,
    totalcost,
    linetotal,
    gpamount,
    percentage,
    orderx)
SELECT
  v_companyname as company,
  v_branchname as branchname,
  DATE(date_fm) as datefm,
  DATE(date_to) as dateto,
  t0.docdate,
  t0.docduedate,
  t0.docno,
  t0.bpcode,
  t0.bpname,
  sp.SALESPERSONNAME,
  if(t1.doctype = 'S', t1.GLACCTNO, t1.itemcode),
  t1.itemdesc,
  t1.whscode,
  concat('SN: ',replace(mid(t1.sbnids,locate('|',t1.sbnids)+1,locate('|',t1.sbnids,locate('|',t1.sbnids)+1)-locate('|',t1.sbnids)-1),'`',','), ' ',
        'CH: ', replace(mid(sbnids, locate('|',sbnids,locate('|',sbnids)+1)+1,locate('|',sbnids,locate('|',sbnids,locate('|',sbnids)+1)+1)-locate('|',sbnids,locate('|',sbnids)+1)-1),'`',',')) as serialno,
  i.uomsa,
  sum(t1.quantity),
  t1.unitprice,
  t1.itemcost,
  t1.vatcode,
  t1.vatamount,
  sum(t1.itemcost * t1.quantity),
  if(t1.doctype = 'S', sum(t1.unitprice), sum(t1.unitprice * t1.quantity)),
  if(t1.doctype = 'S', 0, (sum(t1.unitprice * t1.quantity)- sum(t1.itemcost * t1.quantity))) as gpamount,
  if(t1.doctype = 'S', 0, if((((sum(t1.unitprice * t1.quantity)- sum(t1.itemcost * t1.quantity)) / (sum(t1.itemcost * t1.quantity))) * 100) is null, 0,
  (((sum(t1.unitprice * t1.quantity)- sum(t1.itemcost * t1.quantity)) / (sum(t1.itemcost * t1.quantity))) * 100))) as percentage,
  1
FROM arinvoices t0
  left outer join arinvoiceitems t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
  left outer join departments t3 ON t0.department = t3.department
  LEFT OUTER JOIN paymentterms pt ON t0.PAYMENTTERM = pt.PAYMENTTERM
  LEFT OUTER JOIN items I ON t1.itemcode = i.itemcode
  LEFT OUTER JOIN customers f on t0.BPCODE = f.CUSTNO
  LEFT OUTER JOIN salespersons sp on f.SALESPERSON = sp.SALESPERSON
WHERE t0.company = comp_id
      AND t0.branch = branch_no
      AND t0.docdate between date_fm and date_to
      AND t0.DOCSTATUS NOT IN('D')
  Group by t0.DOCNO, t1.itemcode;
INSERT
    INTO main (
    company,
    branchname,
    datefm,
    dateto,
    docdate,
    docduedate,
    docno,
    bpcode,
    bpname,
    salesperson,
    itemcode,
    itemdesc,
    whscode,
    serialno,
    unit,
    quantity,
    unitprice,
    itemcost,
    vatcode,
    vatamount,
    totalcost,
    linetotal,
    gpamount,
    percentage,
    orderx)
SELECT
  v_companyname as company,
  v_branchname as branchname,
  DATE(date_fm) as datefm,
  DATE(date_to) as dateto,
  t0.docdate,
  t0.docduedate,
  t0.docno,
  t0.bpcode,
  t0.bpname,
  sp.SALESPERSONNAME,
  if(t1.doctype = 'S', t1.GLACCTNO, t1.itemcode),
  t1.itemdesc,
  t1.whscode,
  concat('SN: ',replace(mid(t1.sbnids,locate('|',t1.sbnids)+1,locate('|',t1.sbnids,locate('|',t1.sbnids)+1)-locate('|',t1.sbnids)-1),'`',','), ' ',
        'CH: ', replace(mid(sbnids, locate('|',sbnids,locate('|',sbnids)+1)+1,locate('|',sbnids,locate('|',sbnids,locate('|',sbnids)+1)+1)-locate('|',sbnids,locate('|',sbnids)+1)-1),'`',',')) as serialno,
  i.uomsa,
  0-(sum(t1.quantity)),
  t1.unitprice,
  t1.itemcost,
  t1.vatcode,
  0-(t1.vatamount),
  0-(sum(t1.itemcost * t1.quantity)),
  0-(if(t1.doctype = 'S', sum(t1.unitprice), sum(t1.unitprice * t1.quantity))),
  if(t1.doctype = 'S', 0, 0-((sum(t1.unitprice * t1.quantity)- sum(t1.itemcost * t1.quantity)))) as gpamount,
  if(t1.doctype = 'S', 0, if(0-(((sum(t1.unitprice * t1.quantity)- sum(t1.itemcost * t1.quantity)) / (sum(t1.itemcost * t1.quantity))) * 100) is null, 0,
  0-(((sum(t1.unitprice * t1.quantity)- sum(t1.itemcost * t1.quantity)) / (sum(t1.itemcost * t1.quantity))) * 100))) as percentage,
  2
FROM arcreditmemos t0
  left outer join arcreditmemoitems t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
  left outer join departments t3 ON t0.department = t3.department
  LEFT OUTER JOIN paymentterms pt ON t0.PAYMENTTERM = pt.PAYMENTTERM
  LEFT OUTER JOIN items I ON t1.itemcode = i.itemcode
  LEFT OUTER JOIN customers f on t0.BPCODE = f.CUSTNO
  LEFT OUTER JOIN salespersons sp on f.SALESPERSON = sp.SALESPERSON
WHERE t0.company = comp_id
      AND t0.branch = branch_no
      AND t0.docdate between date_fm and date_to
      AND t0.DOCSTATUS NOT IN('D')
 Group by t0.DOCNO, t1.itemcode;
select * from main order by orderx;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_analysis_01_sp`
--

DROP PROCEDURE IF EXISTS `sales_analysis_01_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_analysis_01_sp`(IN pi_cur_year VARCHAR(4), IN pi_report_type VARCHAR(100), IN pi_currency VARCHAR(4))
BEGIN

 DECLARE v_cur_year INT;
 DECLARE v_pre_year INT;
 DECLARE v_int_mth INT;
 DECLARE v_curdate_from DATE;
 DECLARE v_curdate_to DATE;
 DECLARE v_predate_from DATE;
 DECLARE v_predate_to DATE;
 DECLARE v_curdate DATE;
 DECLARE v_curtime TIME;
 DECLARE v_curGHE NUMERIC(18,6);
 DECLARE v_curMIFF NUMERIC(18,6);
 DECLARE v_curLOCAL NUMERIC(18,6);
 DECLARE v_curMthSales NUMERIC(18,6);
 DECLARE v_preMthSales NUMERIC(18,6);
 DECLARE v_curIntForecast NUMERIC(18,6);
 DECLARE v_curAsForecast NUMERIC(18,6);
 DECLARE v_curAsMthSales NUMERIC(18,6);
 DECLARE v_preAsMthSales NUMERIC(18,6);
 DECLARE v_curAsMthSalesnoAGA NUMERIC(18,6);
 DECLARE v_preAsMthSalesnoAGA NUMERIC(18,6);
 DECLARE v_curGHEMode VARCHAR(100);
 DECLARE v_curLOCALMode VARCHAR(100);
 DECLARE v_getGHEMode INT;
 DECLARE v_getLOCALMode INT;
 DECLARE v_currency VARCHAR(10);
 DECLARE v_curtype VARCHAR(10);
 DECLARE v_CreditMemos NUMERIC(18,6);

 DECLARE v_curasmth01 NUMERIC(18,6);
 DECLARE v_curasmth02 NUMERIC(18,6);
 DECLARE v_curasmth03 NUMERIC(18,6);
 DECLARE v_curasmth04 NUMERIC(18,6);
 DECLARE v_curasmth05 NUMERIC(18,6);
 DECLARE v_curasmth06 NUMERIC(18,6);
 DECLARE v_curasmth07 NUMERIC(18,6);
 DECLARE v_curasmth08 NUMERIC(18,6);
 DECLARE v_curasmth09 NUMERIC(18,6);
 DECLARE v_curasmth10 NUMERIC(18,6);
 DECLARE v_curasmth11 NUMERIC(18,6);
 DECLARE v_curasmth12 NUMERIC(18,6);

 DECLARE v_curinmth01 NUMERIC(18,6);
 DECLARE v_curinmth02 NUMERIC(18,6);
 DECLARE v_curinmth03 NUMERIC(18,6);
 DECLARE v_curinmth04 NUMERIC(18,6);
 DECLARE v_curinmth05 NUMERIC(18,6);
 DECLARE v_curinmth06 NUMERIC(18,6);
 DECLARE v_curinmth07 NUMERIC(18,6);
 DECLARE v_curinmth08 NUMERIC(18,6);
 DECLARE v_curinmth09 NUMERIC(18,6);
 DECLARE v_curinmth10 NUMERIC(18,6);
 DECLARE v_curinmth11 NUMERIC(18,6);
 DECLARE v_curinmth12 NUMERIC(18,6);

 SET v_curdate = CURDATE();
 SET v_curtime = Now();
 SET v_cur_year = CONVERT(pi_cur_year,SIGNED);
 SET v_pre_year = v_cur_year - 1;
 SET v_int_mth = 1;
 SET v_curGHE = 0;
 SET v_curMIFF = 0;
 SET v_curLOCAL = 0;
 SET v_curMthSales = 0;
 SET v_preMthSales = 0;
 SET v_curIntForecast = 0;
 SET v_curAsForecast = 0;
 SET v_curAsMthSales = 0;
 SET v_preAsMthSales = 0;
 SET v_curAsMthSalesnoAGA = 0;
 SET v_preAsMthSalesnoAGA = 0;
 SET v_curGHEMode = '';
 SET v_curLOCALMode = '';


 SET v_curdate_from = DATE(concat(CONVERT(v_cur_year, CHAR(4)),'-01-01'));
 
 SET v_curdate_to = v_curdate_from + interval 1 month;
 
 SET v_predate_from = DATE(concat(CONVERT(v_pre_year, CHAR(4)),'-01-01'));
 
 SET v_predate_to = v_predate_from + interval 1 month;

 SELECT CURRENCY INTO v_currency FROM COMPANIES;

 IF v_currency =  pi_currency THEN
    SET v_curtype = 'LOCAL';
 ELSE
    SET v_curtype = 'FOREIGN';
 END IF;

  CREATE TEMPORARY TABLE IF NOT EXISTS `SalesAnalysis01` (
    `SALESMONTH` INT NOT NULL,
    `CURGHE` NUMERIC(18,6) NOT NULL default '0',
    `CURMIFF` NUMERIC(18,6) NOT NULL default '0',
    `CURGHEMODE` VARCHAR(100) NOT NULL default '',
    `CURLOCAL` NUMERIC(18,6) NOT NULL default '0',
    `CURLOCALMODE` VARCHAR(100) NOT NULL default '',
    `CURMTHSALES` NUMERIC(18,6) NOT NULL default '0',
    `PREMTHSALES` NUMERIC(18,6) NOT NULL default '0',
    `CURINTFORCAST` NUMERIC(18,6) NOT NULL default '0',
    `CURASFORCAST` NUMERIC(18,6) NOT NULL default '0',
    `CURASMTHSALES` NUMERIC(18,6) NOT NULL default '0',
    `PREASMTHSALES` NUMERIC(18,6) NOT NULL default '0',
    `CURASMTHSALESNOAGA` NUMERIC(18,6) NOT NULL default '0',
    `PREASMTHSALESNOAGA` NUMERIC(18,6) NOT NULL default '0',
    `CURRENTDATE` DATE,
    `CURRENTTIME` TIME,
    PRIMARY KEY  (`SALESMONTH`, `CURRENTDATE`, `CURRENTTIME`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  CREATE TEMPORARY TABLE IF NOT EXISTS `cust_temp` (
    COMPANY VARCHAR(100),
    BRANCH  VARCHAR(100),
    CUSTNO  VARCHAR(100),
    CUSTNAME VARCHAR(100),
    REGION VARCHAR(100),
    AGA    VARCHAR(100),
    PRIMARY KEY  (`COMPANY`, `BRANCH`, `CUSTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


    IF v_curtype= 'LOCAL' THEN
        INSERT INTO cust_temp (COMPANY, BRANCH, CUSTNO, CUSTNAME, REGION, AGA)
          SELECT COMPANY, BRANCH, CUSTNO, CUSTNAME, U_U_REGION, U_U_AGA
            FROM CUSTOMERS;

    ELSE
        INSERT INTO cust_temp (COMPANY, BRANCH, CUSTNO, CUSTNAME, REGION, AGA)
          SELECT COMPANY, BRANCH, CUSTNO, CUSTNAME, U_U_REGION, U_U_AGA
            FROM CUSTOMERS WHERE CURRENCY = pi_currency;
    END IF;

    IF pi_report_type = 'ASYRNA' THEN
      SELECT u_forecastdetails.U_MTH01, u_forecastdetails.U_MTH02, u_forecastdetails.U_MTH03, u_forecastdetails.U_MTH04,
             u_forecastdetails.U_MTH05, u_forecastdetails.U_MTH06, u_forecastdetails.U_MTH07, u_forecastdetails.U_MTH08,
             u_forecastdetails.U_MTH09, u_forecastdetails.U_MTH10, u_forecastdetails.U_MTH11, u_forecastdetails.U_MTH12
        INTO v_curasmth01, v_curasmth02, v_curasmth03, v_curasmth04, v_curasmth05, v_curasmth06,
             v_curasmth07, v_curasmth08, v_curasmth09, v_curasmth10, v_curasmth11, v_curasmth12
        FROM u_forecastdetails
       WHERE ( u_forecastdetails.CODE = pi_cur_year ) and
             ( u_forecastdetails.U_REGION = 'ASC' );

      SELECT u_forecastdetails.U_MTH01, u_forecastdetails.U_MTH02, u_forecastdetails.U_MTH03, u_forecastdetails.U_MTH04,
             u_forecastdetails.U_MTH05, u_forecastdetails.U_MTH06, u_forecastdetails.U_MTH07, u_forecastdetails.U_MTH08,
             u_forecastdetails.U_MTH09, u_forecastdetails.U_MTH10, u_forecastdetails.U_MTH11, u_forecastdetails.U_MTH12
        INTO v_curinmth01, v_curinmth02, v_curinmth03, v_curinmth04, v_curinmth05, v_curinmth06,
             v_curinmth07, v_curinmth08, v_curinmth09, v_curinmth10, v_curinmth11, v_curinmth12
        FROM u_forecastdetails
       WHERE ( u_forecastdetails.CODE = pi_cur_year ) and
             ( u_forecastdetails.U_REGION = 'INT' );
    END IF;

  WHILE v_int_mth <= 12 DO
       
       IF pi_report_type = 'ASYRNA' THEN
         CASE  v_int_mth
             WHEN 1 THEN
                   SET v_curAsForecast = v_curasmth01;
                   SET v_curIntForecast = v_curinmth01;
             WHEN 2 THEN
                   SET v_curAsForecast = v_curasmth02;
                   SET v_curIntForecast = v_curinmth02;
             WHEN 3 THEN
                   SET v_curAsForecast = v_curasmth03;
                   SET v_curIntForecast = v_curinmth03;
             WHEN 4 THEN
                   SET v_curAsForecast = v_curasmth04;
                   SET v_curIntForecast = v_curinmth04;
             WHEN 5 THEN
                   SET v_curAsForecast = v_curasmth05;
                   SET v_curIntForecast = v_curinmth05;
             WHEN 6 THEN
                   SET v_curAsForecast = v_curasmth06;
                   SET v_curIntForecast = v_curinmth06;
             WHEN 7 THEN
                   SET v_curAsForecast = v_curasmth07;
                   SET v_curIntForecast = v_curinmth07;
             WHEN 8 THEN
                   SET v_curAsForecast = v_curasmth08;
                   SET v_curIntForecast = v_curinmth08;
             WHEN 9 THEN
                   SET v_curAsForecast = v_curasmth09;
                   SET v_curIntForecast = v_curinmth09;
             WHEN 10 THEN
                   SET v_curAsForecast = v_curasmth10;
                   SET v_curIntForecast = v_curinmth10;
             WHEN 11 THEN
                   SET v_curAsForecast = v_curasmth11;
                   SET v_curIntForecast = v_curinmth11;
             WHEN 12 THEN
                   SET v_curAsForecast = v_curasmth12;
                   SET v_curIntForecast = v_curinmth12;
         END CASE;
       END IF;

       IF v_curIntForecast Is Null THEN
          SET v_curIntForecast = 0;
       END IF;

       IF v_curAsForecast Is Null THEN
          SET v_curAsForecast = 0;
       END IF;

       
       IF pi_report_type = 'INTYR' THEN
           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arinvoices.TOTALAMOUNT)
                  ELSE sum(arinvoices.TOTALAMOUNT * arinvoices.CURRENCYRATE) END
             INTO v_curGHE
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'INT' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to) and
                 ( arinvoices.U_U_EXPO = 'N');

           IF v_curGHE IS NULL  THEN
              SET v_curGHE = 0;
           END IF;

           SET v_CreditMemos = 0;

           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arcreditmemos.TOTALBEFDISC)
                  ELSE sum(arcreditmemos.TOTALBEFDISC * arcreditmemos.CURRENCYRATE) END
             INTO v_CreditMemos
             FROM arcreditmemos,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arcreditmemos.COMPANY ) and
                 ( cust_temp.BRANCH = arcreditmemos.BRANCH ) and
                 ( cust_temp.CUSTNO = arcreditmemos.BPCODE ) and
                 ( cust_temp.REGION = 'INT' ) and
                 ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C' ) and
                 ( arcreditmemos.DOCDATE >= v_curdate_from and  arcreditmemos.DOCDATE < v_curdate_to);

           IF v_CreditMemos IS NULL  THEN
              SET v_CreditMemos = 0;
           END IF;

           SET v_curGHE = v_curGHE - v_CreditMemos;

       
           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arinvoices.TOTALAMOUNT)
                  ELSE sum(arinvoices.TOTALAMOUNT * arinvoices.CURRENCYRATE) END
             INTO v_curMIFF
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'INT' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to) and
                 ( arinvoices.U_U_EXPO = 'Y');

            IF v_curMIFF IS NULL  THEN
              SET v_curMIFF = 0;
           END IF;
        END IF;



       
        IF pi_report_type = 'ASINT' or pi_report_type = 'ASYR' THEN
           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arinvoices.TOTALAMOUNT)
                  ELSE sum(arinvoices.TOTALAMOUNT * arinvoices.CURRENCYRATE) END
             INTO v_curAsMthSales
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'ASC' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to);

           IF v_curAsMthSales IS NULL  THEN
              SET v_curAsMthSales = 0;
           END IF;

           SET v_CreditMemos = 0;

           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arcreditmemos.TOTALBEFDISC)
                  ELSE sum(arcreditmemos.TOTALBEFDISC * arcreditmemos.CURRENCYRATE) END
             INTO v_CreditMemos
             FROM arcreditmemos,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arcreditmemos.COMPANY ) and
                 ( cust_temp.BRANCH = arcreditmemos.BRANCH ) and
                 ( cust_temp.CUSTNO = arcreditmemos.BPCODE ) and
                 ( cust_temp.REGION = 'ASC' ) and
                 ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C' ) and
                 ( arcreditmemos.DOCDATE >= v_curdate_from and  arcreditmemos.DOCDATE < v_curdate_to);

           IF v_CreditMemos IS NULL  THEN
              SET v_CreditMemos = 0;
           END IF;

           SET v_curAsMthSales = v_curAsMthSales - v_CreditMemos;

        END IF;



       
        IF pi_report_type = 'ASINT' or pi_report_type = 'INTYR' THEN
           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arinvoices.TOTALAMOUNT)
                  ELSE sum(arinvoices.TOTALAMOUNT * arinvoices.CURRENCYRATE) END
             INTO v_curMthSales
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION <> 'ASC' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to);

           IF v_curMthSales IS NULL  THEN
              SET v_curMthSales = 0;
           END IF;

           SET v_CreditMemos = 0;

           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arcreditmemos.TOTALBEFDISC)
                  ELSE sum(arcreditmemos.TOTALBEFDISC * arcreditmemos.CURRENCYRATE) END
             INTO v_CreditMemos
             FROM arcreditmemos,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arcreditmemos.COMPANY ) and
                 ( cust_temp.BRANCH = arcreditmemos.BRANCH ) and
                 ( cust_temp.CUSTNO = arcreditmemos.BPCODE ) and
                 ( cust_temp.REGION <> 'ASC' ) and
                 ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C' ) and
                 ( arcreditmemos.DOCDATE >= v_curdate_from and  arcreditmemos.DOCDATE < v_curdate_to);

           IF v_CreditMemos IS NULL  THEN
              SET v_CreditMemos = 0;
           END IF;

           SET v_curMthSales = v_curMthSales - v_CreditMemos;
        END IF;

      
      IF pi_report_type = 'INTYR' THEN
           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arinvoices.TOTALAMOUNT)
                  ELSE sum(arinvoices.TOTALAMOUNT * arinvoices.CURRENCYRATE) END
             INTO v_curLOCAL
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'LOC' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to);

           IF v_curLOCAL IS NULL  THEN
              SET v_curLOCAL = 0;
           END IF;

           SET v_CreditMemos = 0;

           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arcreditmemos.TOTALBEFDISC)
                  ELSE sum(arcreditmemos.TOTALBEFDISC * arcreditmemos.CURRENCYRATE) END
             INTO v_CreditMemos
             FROM arcreditmemos,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arcreditmemos.COMPANY ) and
                 ( cust_temp.BRANCH = arcreditmemos.BRANCH ) and
                 ( cust_temp.CUSTNO = arcreditmemos.BPCODE ) and
                 ( cust_temp.REGION = 'LOC' ) and
                 ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C' ) and
                 ( arcreditmemos.DOCDATE >= v_curdate_from and  arcreditmemos.DOCDATE < v_curdate_to);

           IF v_CreditMemos IS NULL  THEN
              SET v_CreditMemos = 0;
           END IF;

           SET v_curLOCAL = v_curLOCAL - v_CreditMemos;
       END IF;


       
       IF pi_report_type = 'ASYR' THEN
           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arinvoices.TOTALAMOUNT)
                  ELSE sum(arinvoices.TOTALAMOUNT * arinvoices.CURRENCYRATE) END
             INTO v_preAsMthSales
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'ASC' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_predate_from and  arinvoices.DOCDATE < v_predate_to);

           IF v_preAsMthSales IS NULL  THEN
              SET v_preAsMthSales = 0;
           END IF;

           SET v_CreditMemos = 0;

           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arcreditmemos.TOTALBEFDISC)
                  ELSE sum(arcreditmemos.TOTALBEFDISC * arcreditmemos.CURRENCYRATE) END
             INTO v_CreditMemos
             FROM arcreditmemos,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arcreditmemos.COMPANY ) and
                 ( cust_temp.BRANCH = arcreditmemos.BRANCH ) and
                 ( cust_temp.CUSTNO = arcreditmemos.BPCODE ) and
                 ( cust_temp.REGION = 'ASC' ) and
                 ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C' ) and
                 ( arcreditmemos.DOCDATE >= v_predate_from and  arcreditmemos.DOCDATE < v_predate_to);

           IF v_CreditMemos IS NULL  THEN
              SET v_CreditMemos = 0;
           END IF;

           SET v_preAsMthSales = v_preAsMthSales - v_CreditMemos;
       END IF;

       
       IF pi_report_type = 'INTYR' THEN
           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arinvoices.TOTALAMOUNT)
                  ELSE sum(arinvoices.TOTALAMOUNT * arinvoices.CURRENCYRATE) END
             INTO v_preMthSales
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION <> 'ASC' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_predate_from and  arinvoices.DOCDATE < v_predate_to);


           IF v_preMthSales IS NULL  THEN
              SET v_preMthSales = 0;
           END IF;

           SET v_CreditMemos = 0;

           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arcreditmemos.TOTALBEFDISC)
                  ELSE sum(arcreditmemos.TOTALBEFDISC * arcreditmemos.CURRENCYRATE) END
             INTO v_CreditMemos
             FROM arcreditmemos,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arcreditmemos.COMPANY ) and
                 ( cust_temp.BRANCH = arcreditmemos.BRANCH ) and
                 ( cust_temp.CUSTNO = arcreditmemos.BPCODE ) and
                 ( cust_temp.REGION <> 'ASC' ) and
                 ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C' ) and
                 ( arcreditmemos.DOCDATE >= v_predate_from and  arcreditmemos.DOCDATE < v_predate_to);

           IF v_CreditMemos IS NULL  THEN
              SET v_CreditMemos = 0;
           END IF;

           SET v_preMthSales = v_preMthSales - v_CreditMemos;

        END IF;

       
       IF pi_report_type = 'ASYRNA' THEN
           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arinvoices.TOTALAMOUNT)
                  ELSE sum(arinvoices.TOTALAMOUNT * arinvoices.CURRENCYRATE) END
             INTO v_curAsMthSalesnoAGA
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'ASC' ) and
                 ( cust_temp.AGA = 'N' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to);

            IF v_curAsMthSalesnoAGA IS NULL  THEN
              SET v_curAsMthSalesnoAGA = 0;
           END IF;

           SET v_CreditMemos = 0;

           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arcreditmemos.TOTALBEFDISC)
                  ELSE sum(arcreditmemos.TOTALBEFDISC * arcreditmemos.CURRENCYRATE) END
             INTO v_CreditMemos
             FROM arcreditmemos,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arcreditmemos.COMPANY ) and
                 ( cust_temp.BRANCH = arcreditmemos.BRANCH ) and
                 ( cust_temp.CUSTNO = arcreditmemos.BPCODE ) and
                 ( cust_temp.REGION <> 'ASC' ) and
                 ( cust_temp.AGA = 'N' ) and
                 ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C' ) and
                 ( arcreditmemos.DOCDATE >= v_curdate_from and  arcreditmemos.DOCDATE < v_curdate_to);

           IF v_CreditMemos IS NULL  THEN
              SET v_CreditMemos = 0;
           END IF;

           SET v_curAsMthSalesnoAGA = v_curAsMthSalesnoAGA - v_CreditMemos;

           
           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arinvoices.TOTALAMOUNT)
                  ELSE sum(arinvoices.TOTALAMOUNT * arinvoices.CURRENCYRATE) END
             INTO v_preAsMthSalesnoAGA
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'ASC' ) and
                 ( cust_temp.AGA = 'N' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_predate_from and  arinvoices.DOCDATE < v_predate_to);

           IF v_preAsMthSalesnoAGA IS NULL  THEN
              SET v_preAsMthSalesnoAGA = 0;
           END IF;

           SET v_CreditMemos = 0;

           SELECT CASE v_curtype WHEN 'FOREIGN' THEN sum(arcreditmemos.TOTALBEFDISC)
                  ELSE sum(arcreditmemos.TOTALBEFDISC * arcreditmemos.CURRENCYRATE) END
             INTO v_CreditMemos
             FROM arcreditmemos,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arcreditmemos.COMPANY ) and
                 ( cust_temp.BRANCH = arcreditmemos.BRANCH ) and
                 ( cust_temp.CUSTNO = arcreditmemos.BPCODE ) and
                 ( cust_temp.REGION <> 'ASC' ) and
                 ( cust_temp.AGA = 'N' ) and
                 ( arcreditmemos.DOCSTATUS = 'O' or arcreditmemos.DOCSTATUS = 'C' ) and
                 ( arcreditmemos.DOCDATE >= v_predate_from and  arcreditmemos.DOCDATE < v_predate_to);

           IF v_CreditMemos IS NULL  THEN
              SET v_CreditMemos = 0;
           END IF;

           SET v_preAsMthSalesnoAGA = v_preAsMthSalesnoAGA - v_CreditMemos;
       END IF;

       IF pi_report_type = 'INTYR' THEN
           
           SELECT count(arinvoices.DOCNO)
             INTO v_getGHEMode
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'INT' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to) and
                 ( arinvoices.U_U_SHIPMODE = '20GP' );

           IF v_getGHEMode IS NULL  THEN
              SET v_getGHEMode = 0;
           END IF;

           IF v_getGHEMode > 0 THEN
               SET v_curGHEMode = CONCAT('(',v_getGHEMode, ' x 20GP)');
           END IF;


           
           SELECT count(arinvoices.DOCNO)
             INTO v_getGHEMode
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'INT' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to) and
                 ( arinvoices.U_U_SHIPMODE = '40GP' );

           IF v_getGHEMode IS NULL  THEN
              SET v_getGHEMode = 0;
           END IF;

           IF v_getGHEMode > 0 THEN
               SET v_curGHEMode = CONCAT(v_curGHEMode, '(', v_getGHEMode, ' x 40GP) ');
           END IF;

           
           SELECT count(arinvoices.DOCNO)
             INTO v_getGHEMode
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'INT' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to) and
                 ( arinvoices.U_U_SHIPMODE = '40HQ' );

           IF v_getGHEMode IS NULL  THEN
              SET v_getGHEMode = 0;
           END IF;

           IF v_getGHEMode > 0 THEN
               SET v_curGHEMode = CONCAT(v_curGHEMode, '(', v_getGHEMode, ' x 40HQ) ');
           END IF;


           
           SELECT SUM(arinvoices.U_U_LORRY)
             INTO v_getGHEMode
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'INT' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to) and
                 ( arinvoices.U_U_SHIPMODE = 'Lorry' );

           IF v_getGHEMode IS NULL  THEN
              SET v_getGHEMode = 0;
           END IF;

           IF v_getGHEMode > 0 THEN
               SET v_curGHEMode = CONCAT(v_curGHEMode, '(', v_getGHEMode, "' x Lorry) ");
           END IF;


           
           SELECT count(arinvoices.DOCNO)
             INTO v_getLOCALMode
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'LOC' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to) and
                 ( arinvoices.U_U_SHIPMODE = '20GP' );

           IF v_getLOCALMode IS NULL  THEN
              SET v_getLOCALMode = 0;
           END IF;


           IF v_getLOCALMode > 0 THEN
               SET v_curLOCALMode = CONCAT('(',v_getLOCALMode, ' x 20GP)');
           END IF;


           
           SELECT count(arinvoices.DOCNO)
             INTO v_getLOCALMode
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'LOC' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to) and
                 ( arinvoices.U_U_SHIPMODE = '40GP' );

           IF v_getLOCALMode IS NULL  THEN
              SET v_getLOCALMode = 0;
           END IF;

           IF v_getLOCALMode > 0 THEN
               SET v_curLOCALMode = CONCAT(v_curLOCALMode, '(', v_getLOCALMode, ' x 40GP) ');
           END IF;

           
           SELECT count(arinvoices.DOCNO)
             INTO v_getLOCALMode
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'LOC' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to) and
                 ( arinvoices.U_U_SHIPMODE = '40HQ' );

           IF v_getLOCALMode IS NULL  THEN
              SET v_getLOCALMode = 0;
           END IF;

           IF v_getLOCALMode > 0 THEN
               SET v_curLOCALMode = CONCAT(v_curLOCALMode, '(', v_getLOCALMode, ' x 40HQ) ');
           END IF;


           
           SELECT SUM(arinvoices.U_U_LORRY)
             INTO v_getLOCALMode
             FROM arinvoices,
                  cust_temp
           WHERE ( cust_temp.COMPANY = arinvoices.COMPANY ) and
                 ( cust_temp.BRANCH = arinvoices.BRANCH ) and
                 ( cust_temp.CUSTNO = arinvoices.BPCODE ) and
                 ( cust_temp.REGION = 'LOC' ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and  arinvoices.DOCDATE < v_curdate_to) and
                 ( arinvoices.U_U_SHIPMODE = 'Lorry' );

           IF v_getLOCALMode IS NULL  THEN
              SET v_getLOCALMode = 0;
           END IF;

           IF v_getLOCALMode > 0 THEN
               SET v_curLOCALMode = CONCAT(v_curLOCALMode, '(', v_getLOCALMode, "' x Lorry) ");
           END IF;
       END IF;

      INSERT INTO SalesAnalysis01 (SALESMONTH, CURGHE, CURMIFF, CURGHEMODE, CURLOCAL, CURLOCALMODE, CURMTHSALES, PREMTHSALES, CURINTFORCAST,
                                   CURASFORCAST, CURASMTHSALES, PREASMTHSALES, CURASMTHSALESNOAGA, PREASMTHSALESNOAGA, CURRENTDATE, CURRENTTIME)
                           VALUES (v_int_mth, v_curGHE, v_curMIFF, v_curGHEMode, v_curLOCAL, v_curLOCALMode, v_curMthSales, v_preMthSales, v_curIntForecast,
                                   v_curAsForecast, v_curAsMthSales, v_preAsMthSales, v_curAsMthSalesnoAGA, v_preAsMthSalesnoAGA, v_curdate, v_curtime);

      SET v_int_mth = v_int_mth + 1;
 
      SET v_cur_year = pi_cur_year;
      SET v_pre_year = pi_cur_year - 1;
      SET v_curGHE = 0;
      SET v_curMIFF = 0;
      SET v_curLOCAL = 0;
      SET v_curMthSales = 0;
      SET v_preMthSales = 0;
      SET v_curIntForecast = 0;
      SET v_curAsForecast = 0;
      SET v_curAsMthSales = 0;
      SET v_preAsMthSales = 0;
      SET v_curAsMthSalesnoAGA = 0;
      SET v_preAsMthSalesnoAGA = 0;
      SET v_curGHEMode = '';
      SET v_curLOCALMode = '';
 
      SET v_curdate_from = v_curdate_from + interval 1 month;
      SET v_curdate_to = v_curdate_from + interval 1 month;
      SET v_predate_from = v_predate_from + interval 1 month;
      SET v_predate_to = v_predate_from + interval 1 month;

   END WHILE;

   SELECT * FROM SalesAnalysis01 WHERE CURRENTDATE = v_curdate AND CURRENTTIME = v_curtime;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_and_effective_margin_report`
--

DROP PROCEDURE IF EXISTS `sales_and_effective_margin_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_and_effective_margin_report`(IN pi_company VARCHAR(30),
                                                     IN pi_branch VARCHAR(30),
                                                     IN pi_date1 VARCHAR(30),
                                                     IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `main` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `COMPANYNAME` varchar(500) NULL default '',
    `COMPANYTYPE` varchar(500) NULL default '',
    `BRANCHNAME` varchar(500) NULL default '',
    `u_date_from` DATE NULL,
    `u_shift` varchar(100) NULL default '',
    `Biodiesel` NUMERIC(18,6) NOT NULL default '0',
    `Premium` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded` NUMERIC(18,6) NOT NULL default '0',
    `Regular` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene` NUMERIC(18,6) NOT NULL default '0',
    `Biodiesel_margin` NUMERIC(18,6) NOT NULL default '0',
    `Premium_margin` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded_margin` NUMERIC(18,6) NOT NULL default '0',
    `Regular_margin` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene_margin` NUMERIC(18,6) NOT NULL default '0',
    `Biodiesel_target_vol` NUMERIC(18,6) NOT NULL default '0',
    `Premium_target_vol` NUMERIC(18,6) NOT NULL default '0',
    `Unleaded_target_vol` NUMERIC(18,6) NOT NULL default '0',
    `Regular_target_vol` NUMERIC(18,6) NOT NULL default '0',
    `Kerosene_target_vol` NUMERIC(18,6) NOT NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO main ( COMPANY,
                BRANCH,
                COMPANYNAME,
                COMPANYTYPE,
                BRANCHNAME,
                u_date_from,
                u_shift,
                Biodiesel,
                Premium,
                Unleaded,
                Regular,
                Kerosene,
                Biodiesel_margin,
                Premium_margin,
                Unleaded_margin,
                Regular_margin,
                Kerosene_margin,
                Biodiesel_target_vol,
                Premium_target_vol,
                Unleaded_target_vol,
                Regular_target_vol,
                Kerosene_target_vol)
    Select
       a.COMPANY,
       a.BRANCH,
       upper(co.companyname) as COMPANYNAME,
       upper(concat('(',co.companytype, ' Group)')) as COMPANYTYPE,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BRANCHNAME,
       b.u_date_from,
       b.u_shift,
       if(a.u_itemcode = 'W0001', sum(a.u_sold_liters), 0) as 'Biodiesel',
       if(a.u_itemcode = 'W0002', sum(a.u_sold_liters), 0) as 'Premium',
       if(a.u_itemcode = 'W0003', sum(a.u_sold_liters), 0) as 'Unleaded',
       if(a.u_itemcode = 'W0004', sum(a.u_sold_liters), 0) as 'Regular',
       if(a.u_itemcode = 'W0005', sum(a.u_sold_liters), 0) as 'Kerosene',
       mr1.u_amount as 'Biodiesel_margin',
       mr2.u_amount as 'Premium_margin',
       mr3.u_amount as 'Unleaded_margin',
       mr4.u_amount as 'Regular_margin',
       mr5.u_amount as 'Kerosene_margin',
       tv1.u_amount as 'Biodiesel_target_vol',
       tv2.u_amount as 'Premium_target_vol',
       tv3.u_amount as 'Unleaded_target_vol',
       tv4.u_amount as 'Regular_target_vol',
       tv5.u_amount as 'Kerosene_target_vol'
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join u_margin mr1 on a.branch = mr1.u_branchcode and mr1.u_item = 'W0001' and DATE_FORMAT(mr1.U_DATE, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
       left outer join u_margin mr2 on a.branch = mr2.u_branchcode and mr2.u_item = 'W0002' and DATE_FORMAT(mr2.U_DATE, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
       left outer join u_margin mr3 on a.branch = mr3.u_branchcode and mr3.u_item = 'W0003' and DATE_FORMAT(mr3.U_DATE, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
       left outer join u_margin mr4 on a.branch = mr4.u_branchcode and mr4.u_item = 'W0004' and DATE_FORMAT(mr4.U_DATE, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
       left outer join u_margin mr5 on a.branch = mr5.u_branchcode and mr5.u_item = 'W0005' and DATE_FORMAT(mr5.U_DATE, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
       left outer join u_targetvolume tv1 on a.branch = tv1.u_branchcode and tv1.u_item = 'W0001' and DATE_FORMAT(tv1.U_DATE, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
       left outer join u_targetvolume tv2 on a.branch = tv2.u_branchcode and tv2.u_item = 'W0002' and DATE_FORMAT(tv2.U_DATE, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
       left outer join u_targetvolume tv3 on a.branch = tv3.u_branchcode and tv3.u_item = 'W0003' and DATE_FORMAT(tv3.U_DATE, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
       left outer join u_targetvolume tv4 on a.branch = tv4.u_branchcode and tv4.u_item = 'W0004' and DATE_FORMAT(tv4.U_DATE, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
       left outer join u_targetvolume tv5 on a.branch = tv5.u_branchcode and tv5.u_item = 'W0005' and DATE_FORMAT(tv5.U_DATE, '%y-%m') = DATE_FORMAT(date(pi_date1), '%y-%m')
       left outer join items i on a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co on a.company = co.companycode
   where a.company = pi_company and a.branch = pi_branch and b.U_DFLTREADINGTYPE = 'Digital'
         and b.u_date_from between pi_date1 and pi_date2
   group by b.u_date_from, b.u_shift, a.u_itemcode;
CREATE TEMPORARY TABLE  `main_lastday` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `u_date_from2` DATE NULL
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO main_lastday ( COMPANY,
                        BRANCH,
                        u_date_from2)
       Select
                a.COMPANY,
                a.BRANCH,
                a.u_date_from
       from main a order by a.u_date_from desc limit 1;
select a.Company,
       a.CompanyName,
       a.CompanyType,
       a.Branch,
       a.BranchName,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       a.u_date_from,
       if(a.u_shift like '1%', 'X', '') as Shift1,
       if(a.u_shift like '2%', 'X', '') as Shift2,
       sum(a.Biodiesel) as Biodiesel,
       sum(a.Premium) as Premium,
       sum(a.Unleaded) as Unleaded,
       sum(a.Regular) as Regular,
       sum(a.Kerosene) as Kerosene,
       sum(a.Biodiesel)+sum(a.Premium)+sum(a.Unleaded)+sum(a.Regular)+sum(a.Kerosene) as Total,
       a.Biodiesel_margin,
       a.Premium_margin,
       a.Unleaded_margin,
       a.Regular_margin,
       a.Kerosene_margin,
       a.Biodiesel_target_vol,
       a.Premium_target_vol,
       a.Unleaded_target_vol,
       a.Regular_target_vol,
       a.Kerosene_target_vol,
       day(b.u_date_from2) as LastDayPosting
       from main a
       left outer join main_lastday b on a.company = b.company and a.branch = b.branch
group by a.u_date_from, a.u_shift;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_book`
--

DROP PROCEDURE IF EXISTS `sales_book`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_book`(IN comp_id varchar(200),
                             IN branch_no varchar(200),
                             IN date_fm varchar(200),
                             IN date_to varchar(200))
BEGIN
DECLARE v_companyname varchar(100);
DECLARE v_branchname varchar(100);
CREATE TEMPORARY TABLE  `arinvoiceotherchargesitems_TEMP` (
    `COMPANY` varchar(100) NOT NULL default '',
    `BRANCH` varchar(100) NOT NULL default '',
    `DOCID` varchar(100) NOT NULL default '',
    `AMOUNT` NUMERIC(18,6) NOT NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO arinvoiceotherchargesitems_TEMP (COMPANY,BRANCH,DOCID,AMOUNT)
      SELECT a.COMPANY,a.BRANCH,a.DOCID, sum(a.AMOUNT) as AMOUNT
        from arinvoiceotherchargesitems a
        where a.company = comp_id and a.branch = branch_no
        group by a.DOCID;
CREATE TEMPORARY TABLE  `arcreditmemootherchargesitems_TEMP` (
    `COMPANY` varchar(100) NOT NULL default '',
    `BRANCH` varchar(100) NOT NULL default '',
    `DOCID` varchar(100) NOT NULL default '',
    `AMOUNT` NUMERIC(18,6) NOT NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO arcreditmemootherchargesitems_TEMP (COMPANY,BRANCH,DOCID,AMOUNT)
      SELECT a.COMPANY,a.BRANCH,a.DOCID, sum(a.AMOUNT) as AMOUNT
        from arcreditmemootherchargesitems a
        where a.company = comp_id and a.branch = branch_no
        group by a.DOCID;
CREATE TEMPORARY TABLE  `main` (
    `company` varchar(100) NULL default '',
    `branchname` varchar(100) NULL default '',
    `departmentname` varchar(100) NULL default '',
    `ownertype` varchar(100) NULL default '',
    `datefm` DATE NULL,
    `dateto` DATE NULL,
    `docdate` DATE NULL,
    `docno` varchar(100) NULL default '',
    `u_zone` varchar(100) NULL default '',
    `u_fgroup` varchar(100) NULL default '',
    `bpcode` varchar(100) NULL default '',
    `bpname` varchar(500) NULL default '',
    `itemcode` varchar(100) NULL default '',
    `whscode` varchar(100) NULL default '',
    `itemdesc` varchar(500) NULL default '',
    `serialno` varchar(5000) NULL default '',
    `docduedate` DATE NULL,
    `paymentterm` NUMERIC(18,6) NULL default '0',
    `quantity` NUMERIC(18,6) NULL default '0',
    `itemcost` NUMERIC(18,6) NULL default '0',
    `itemcost2` NUMERIC(18,6) NULL default '0',
    `vatcode` varchar(100) NULL default '',
    `linetotal` NUMERIC(18,6) NULL default '0',
    `vatamount` NUMERIC(18,6) NULL default '0',
    `DownF.Charge` NUMERIC(18,6) NULL default '0',
    `PNValue` NUMERIC(18,6) NULL default '0',
    `gpamount` NUMERIC(18,6) NULL default '0',
    `percentage` NUMERIC(18,6) NULL default '0',
    `fowner` varchar(100) NULL default '',
    `ACCTMA` NUMERIC(18,6) NULL default '0',
    `ACCTDPAMOUNT` NUMERIC(18,6) NULL default '0',
    `ACCTLCP` NUMERIC(18,6) NULL default '0',
    `ACCTREBATE` NUMERIC(18,6) NULL default '0',
    `UFI1` NUMERIC(18,6) NULL default '0',
    `UFI2` NUMERIC(18,6) NULL default '0',
    `UFI3` NUMERIC(18,6) NULL default '0',
    `UFI4` NUMERIC(18,6) NULL default '0',
    `s_gl_code` varchar(100) NULL default '',
    `s_code_desc` varchar(500) NULL default '',
    `s_amount` NUMERIC(18,6) NULL default '0',
    `orderx` NUMERIC(18,6) NULL default '0',
    `unitprice` NUMERIC(18,6) NULL default '0',
    `unit` varchar(100) NULL default '',
    INDEX IDX_1 (`orderx`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
select upper(a.companyname), upper(concat(b.branchcode, ' - ', b.branchname)) into v_companyname, v_branchname from companies a, branches b  where b.companycode=a.companycode and a.companycode=comp_id and b.branchcode=branch_no;
INSERT
    INTO main (
    company,
    branchname,
    departmentname,
    ownertype,
    datefm,
    dateto,
    docdate,
    docno,
    u_zone,
    u_fgroup,
    bpcode,
    bpname,
    itemcode,
    whscode,
    itemdesc,
    serialno,
    docduedate,
    paymentterm,
    quantity,
    itemcost,
    itemcost2,
    vatcode,
    linetotal,
    vatamount,
    `DownF.Charge` ,
    PNValue,
    gpamount,
    percentage,
    fowner,
    ACCTMA,
    ACCTDPAMOUNT,
    ACCTLCP,
    ACCTREBATE,
    UFI1,
    UFI2,
    UFI3,
    UFI4,
    s_gl_code,
    s_code_desc,
    s_amount,orderx,unitprice,unit)
SELECT
  v_companyname as company,
  v_branchname as branchname,
  upper(t3.departmentname) as departmentname,
  '' as ownertype,
  DATE(date_fm) as datefm,
  DATE(date_to) as dateto,
  t0.docdate,
  t0.docno,
  '',
  '',
  t0.bpcode,
  t0.bpname,
  if(t1.doctype = 'S', t1.GLACCTNO, t1.itemcode),
  t1.whscode,
  t1.itemdesc,
  concat('SN: ',replace(mid(t1.sbnids,locate('|',t1.sbnids)+1,locate('|',t1.sbnids,locate('|',t1.sbnids)+1)-locate('|',t1.sbnids)-1),'`',','), ' ',
        'CH: ', replace(mid(sbnids, locate('|',sbnids,locate('|',sbnids)+1)+1,locate('|',sbnids,locate('|',sbnids,locate('|',sbnids)+1)+1)-locate('|',sbnids,locate('|',sbnids)+1)-1),'`',',')) as serialno,
  t0.docduedate,
  0 as paymentterm,
  sum(t1.quantity),
  sum(t1.itemcost * t1.quantity),
  0,
  t1.vatcode,
  sum(t1.linetotal) + IF(tx.amount IS NULL, 0, tx.amount) as linetotal,
  t1.vatamount,
  0,
  0 as 'PNValue',
  0 as gpamount,
  0 as percentage,
  pt.PAYMENTTERMNAME as fowner,
  0,
  0 as ACCTDPAMOUNT,
  0 as ACCTLCP,
  0 as ACCTREBATE,
  0 as UFI1,
  0 as UFI2,
  0 as UFI3,
  0 as UFI4,
  '' s_gl_code,
  '' s_code_desc,
  0 s_amount, 1, t1.unitprice, i.uomsa
FROM arinvoices t0
  left outer join arinvoiceitems t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
  left outer join arinvoiceotherchargesitems_TEMP tx ON t0.company = tx.company and t0.branch = tx.branch and t0.docid = tx.docid
  left outer join departments t3 ON t0.department = t3.department
  LEFT OUTER JOIN paymentterms pt ON t0.PAYMENTTERM = pt.PAYMENTTERM
  LEFT OUTER JOIN items I ON t1.itemcode = i.itemcode
WHERE t0.company = comp_id
      AND t0.branch = branch_no
      AND t0.docdate between date_fm and date_to
      AND t0.DOCSTATUS NOT IN('D')
  Group by t0.DOCNO, t1.itemcode;
INSERT
    INTO main (
    company,
    branchname,
    departmentname,
    ownertype,
    datefm,
    dateto,
    docdate,
    docno,
    u_zone,
    u_fgroup,
    bpcode,
    bpname,
    itemcode,
    whscode,
    itemdesc,
    serialno,
    docduedate,
    paymentterm,
    quantity,
    itemcost,
    itemcost2,
    vatcode,
    linetotal,
    vatamount,
    `DownF.Charge` ,
    PNValue,
    gpamount,
    percentage,
    fowner,
    ACCTMA,
    ACCTDPAMOUNT,
    ACCTLCP,
    ACCTREBATE,
    UFI1,
    UFI2,
    UFI3,
    UFI4,
    s_gl_code,
    s_code_desc,
    s_amount,orderx,unitprice,unit)
SELECT
  v_companyname as company,
  v_branchname as branchname,
  upper(t3.departmentname) as departmentname,
  '' as ownertype,
  DATE(date_fm) as datefm,
  DATE(date_to) as dateto,
  t0.docdate,
  t0.docno,
  '',
  '',
  t0.bpcode,
  t0.bpname,
  if(t1.doctype = 'S', t1.GLACCTNO, t1.itemcode),
  t1.whscode,
  t1.itemdesc,
  concat('SN: ',replace(mid(t1.sbnids,locate('|',t1.sbnids)+1,locate('|',t1.sbnids,locate('|',t1.sbnids)+1)-locate('|',t1.sbnids)-1),'`',','), ' ',
        'CH: ', replace(mid(sbnids, locate('|',sbnids,locate('|',sbnids)+1)+1,locate('|',sbnids,locate('|',sbnids,locate('|',sbnids)+1)+1)-locate('|',sbnids,locate('|',sbnids)+1)-1),'`',',')) as serialno,
  t0.docduedate,
  0 as paymentterm,
  0-(sum(t1.quantity)),
  0-(sum(t1.itemcost * t1.quantity)) AS itemcost,
  0,
  t1.vatcode,
  0-(sum(t1.linetotal) + IF(tx.amount IS NULL, 0, tx.amount)) as linetotal,
  0-(t1.vatamount),
  0 'DownF.Charge',
  0 as 'PNValue',
  (sum(t1.linetotal) - t1.itemcost) as gpamount,
  0 as percentage,
  pt.PAYMENTTERMNAME as fowner,
  0 as ACCTMA,
  0 as ACCTDPAMOUNT,
  0 as ACCTLCP,
  0 as ACCTREBATE,
  0 as UFI1,
  0 as UFI2,
  0 as UFI3,
  0 as UFI4,
  '' s_gl_code,
  '' s_code_desc,
  0 s_amount, 4,
  t1.unitprice, i.uomsa
FROM arcreditmemos t0
  left outer join arcreditmemoitems t1 ON t0.company = t1.company and t0.branch = t1.branch and t0.docid = t1.docid
  left outer join arcreditmemootherchargesitems_TEMP tx ON t0.company = tx.company and t0.branch = tx.branch and t0.docid = tx.docid
  left outer join departments t3 ON t0.department = t3.department
  LEFT OUTER JOIN paymentterms pt ON t0.PAYMENTTERM = pt.PAYMENTTERM
  LEFT OUTER JOIN items I ON t1.itemcode = i.itemcode
WHERE t0.company = comp_id
      AND t0.branch = branch_no
      AND t0.docdate between date_fm and date_to
      AND t0.DOCSTATUS NOT IN('D')
 Group by t0.DOCNO, t1.itemcode;
select * from main order by orderx;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `Sales_by_class_detail_sp`
--

DROP PROCEDURE IF EXISTS `Sales_by_class_detail_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `Sales_by_class_detail_sp`(IN pi_cur_year VARCHAR(4), IN pi_month VARCHAR(4), IN pi_currency VARCHAR(4))
BEGIN

DECLARE v_cur_year INT;
DECLARE v_bpcode VARCHAR(100);

DECLARE v_curtime TIME;
DECLARE v_curdate DATE;
DECLARE v_curdate_from DATE;
DECLARE v_curdate_to DATE;
DECLARE v_inidate_from DATE;
DECLARE v_inidate_to DATE;
DECLARE v_done INT;
DECLARE v_int_mth INT;
DECLARE v_int_yr INT;
DECLARE Done INT;
DECLARE v_class VARCHAR(30);
DECLARE v_classname VARCHAR(100);
DECLARE v_currency VARCHAR(4);
DECLARE v_curtype VARCHAR(10);
DECLARE v_bpname VARCHAR(100);
DECLARE v_localamount NUMERIC(20,6);
DECLARE v_foreignamount NUMERIC(20,6);

  DECLARE CLASSCursor CURSOR FOR
     SELECT ITEMCLASS, ITEMCLASSNAME FROM itemclasses WHERE ITEMCLASS <> 'DS' and ITEMCLASS <> 'IN' ORDER BY ITEMCLASS;

  DECLARE ARINVOICE01Cursor CURSOR FOR
     SELECT arinvoices.BPCODE, arinvoices.BPNAME, SUM(arinvoiceitems.LINETOTAL), SUM(arinvoiceitems.LINETOTAL * arinvoices.CURRENCYRATE)
        FROM arinvoiceitems,
             arinvoices,
             items
      WHERE ( arinvoiceitems.COMPANY = arinvoices.COMPANY ) and
            ( arinvoiceitems.BRANCH = arinvoices.BRANCH ) and
            ( arinvoiceitems.DOCID = arinvoices.DOCID ) and
            ( arinvoiceitems.ITEMCODE = items.ITEMCODE) and
            ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C') and
            ( arinvoices.DOCDATE >= v_inidate_from and arinvoices.DOCDATE < v_inidate_to) and
            ( items.ITEMCLASS = 'DS' or items.ITEMCLASS = 'IN' )
      GROUP BY arinvoices.BPCODE, arinvoices.BPNAME;

  DECLARE ARINVOICE02Cursor CURSOR FOR
     SELECT arinvoices.BPCODE, arinvoices.BPNAME, SUM(arinvoiceitems.LINETOTAL), SUM(arinvoiceitems.LINETOTAL * arinvoices.CURRENCYRATE)
        FROM arinvoiceitems,
             arinvoices,
             items
      WHERE ( arinvoiceitems.COMPANY = arinvoices.COMPANY ) and
            ( arinvoiceitems.BRANCH = arinvoices.BRANCH ) and
            ( arinvoiceitems.DOCID = arinvoices.DOCID ) and
            ( arinvoiceitems.ITEMCODE = items.ITEMCODE) and
            ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C') and
            ( arinvoices.DOCDATE >= v_inidate_from and arinvoices.DOCDATE < v_inidate_to) and
            ( items.ITEMCLASS = v_class )
      GROUP BY arinvoices.BPCODE, arinvoices.BPNAME;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1 ;

 SELECT CURRENCY INTO v_currency FROM COMPANIES;

 IF v_currency =  pi_currency THEN
    SET v_curtype = 'LOCAL';
 ELSE
    SET v_curtype = 'FOREIGN';
 END IF;

 SET v_cur_year = CONVERT(pi_cur_year,SIGNED); 
 SET v_curdate = CURDATE();
 SET v_curtime = Now();


 SET v_inidate_from = DATE(concat(CONVERT(v_cur_year, CHAR(4)),'-', pi_month, '-01'));

 SET v_inidate_to = v_inidate_from + interval 1 month;

  DROP TEMPORARY TABLE IF EXISTS SalesDetail ;
  CREATE TEMPORARY TABLE `SalesDetail` (
    `CLASS` VARCHAR(30) NOT NULL default '',
    `CLASSNAME` VARCHAR(100) default '',
    `CUSTNO` VARCHAR(30) default '',
    `CUSTNAME` VARCHAR(100) default '',
    `AMOUNT` NUMERIC(20,6) default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;



  OPEN ARINVOICE01Cursor;
  ARINVOICE01loop: LOOP

     FETCH ARINVOICE01Cursor INTO v_bpcode, v_bpname, v_localamount, v_foreignamount ;
     IF Done = 1 THEN
       Leave ARINVOICE01loop;
     END IF;

      IF v_curtype = 'LOCAL' THEN
          INSERT INTO SalesDetail (CLASS, CLASSNAME, CUSTNO, CUSTNAME, AMOUNT)
               VALUES ('', 'LOCAL', v_bpcode, v_bpname, v_foreignamount);
      ELSE
          INSERT INTO SalesDetail (CLASS, CLASSNAME, CUSTNO, CUSTNAME, AMOUNT)
               VALUES ('', 'LOCAL', v_bpcode, v_bpname, v_localamount);
      END IF;

      SET Done = 0;
  END LOOP ARINVOICE01loop;
  CLOSE ARINVOICE01Cursor;

  SET Done = 0;
  OPEN CLASSCursor;
  cur0001loop: LOOP

     FETCH CLASSCursor INTO v_class, v_classname ;
     IF Done = 1 THEN
       Leave cur0001loop;
     END IF;

     OPEN ARINVOICE02Cursor;
     ARINVOICE02loop: LOOP

       FETCH ARINVOICE02Cursor INTO v_bpcode, v_bpname, v_localamount, v_foreignamount ;
       IF Done = 1 THEN
         Leave ARINVOICE02loop;
       END IF;

          IF v_curtype = 'LOCAL' THEN
              INSERT INTO SalesDetail (CLASS, CLASSNAME, CUSTNO, CUSTNAME, AMOUNT)
                   VALUES (v_class, v_classname, v_bpcode, v_bpname, v_foreignamount);
          ELSE
              INSERT INTO SalesDetail (CLASS, CLASSNAME, CUSTNO, CUSTNAME, AMOUNT)
                   VALUES (v_class, v_classname, v_bpcode, v_bpname, v_localamount);
          END IF;

          SET Done = 0;

     END LOOP ARINVOICE02loop;
     CLOSE ARINVOICE02Cursor;

     SET Done = 0;

  END LOOP cur0001loop;
  CLOSE CLASSCursor;

  SELECT * FROM SalesDetail;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_deliveries`
--

DROP PROCEDURE IF EXISTS `sales_deliveries`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_deliveries`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd, g.SHIPTYPENAME as SHIPTYPE, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       h.SERIALNO as chassis, h.MFRSERIALNO as 'engine', d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc,
       d.QUANTITY as qty,
       d.unitprice as unitprice,
       d.linetotal as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, i.username as created_by,
       d.glacctno as glacctno
       from salesdeliveries a
            left outer join salesdeliveryitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join documentserials h on a.DOCID = h.DOCID and a.COMPANY = h.COMPANY and a.BRANCH = h.BRANCH
                                                 and d.OBJECTCODE = h.OBJECTCODE and d.ITEMCODE = h.ITEMCODE
            left outer join users i on d.CREATEDBY = i.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
 group by a.DOCNO, d.ITEMCODE, h.SERIALNO, h.MFRSERIALNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_invoice_analysis_sp`
--

DROP PROCEDURE IF EXISTS `sales_invoice_analysis_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_invoice_analysis_sp`(IN pi_branch VARCHAR(20), IN pi_month VARCHAR(4), IN pi_year VARCHAR(4), IN pi_invoice_fr VARCHAR(30),
                                             IN pi_invoice_to VARCHAR(30), IN pi_cust_fr VARCHAR(30), IN pi_cust_to VARCHAR(30), IN pi_currency VARCHAR(10),
                                             IN pi_whse VARCHAR(30))
BEGIN
DECLARE v_invoice_from VARCHAR(30);
DECLARE v_invoice_to VARCHAR(30);
DECLARE v_month INT;
DECLARE v_year INT;
DECLARE v_cust_from VARCHAR(30);
DECLARE v_cust_to VARCHAR(30);
DECLARE v_invno VARCHAR(30);
DECLARE v_docdate DATE;
DECLARE v_bpcode VARCHAR(30);
DECLARE v_bpname VARCHAR(100);
DECLARE v_totalamount Numeric(20,6);
DECLARE v_itemcode VARCHAR(30);
DECLARE v_itemdesc VARCHAR(100);
DECLARE v_quantity Numeric(20,6);
DECLARE v_pono VARCHAR(30);
DECLARE V_invlineid Numeric(20,0);
DECLARE v_polineid Numeric(20,0);
DECLARE v_lineid Numeric(20,0);
DECLARE v_docno VARCHAR(100);
DECLARE v_boolean BOOLEAN;
DECLARE v_qty Numeric(20,6);
DECLARE v_reftype VARCHAR(20);
DECLARE v_refno VARCHAR(30);
DECLARE v_reflineid NUMERIC(20,0);
DECLARE v_price NUMERIC(20,6);
DECLARE v_itemcost NUMERIC(20,6);
DECLARE v_manageby INT;
DECLARE v_currencyrate NUMERIC(20,6);
DECLARE v_currency VARCHAR(30);
DECLARE v_cost NUMERIC(20,6);
DECLARE v_costrate  NUMERIC(20,6);
DECLARE v_costcurrency VARCHAR(30);
DECLARE v_costdate DATE;
DECLARE v_basedcurrency VARCHAR(30);
DECLARE v_costline NUMERIC(20,6);
DECLARE v_costlinerate NUMERIC(20,6);
DECLARE v_linecount INT;
DECLARE v_done INT;
DECLARE v_whscode VARCHAR(20);
DECLARE v_dropship INT;
DECLARE v_sodocno VARCHAR(30);
DECLARE v_solineid INT;
DECLARE v_preinvno VARCHAR(30);
DECLARE v_rowcount NUMERIC(20,0);
DECLARE v_preinvlineid NUMERIC(20,0);
DECLARE v_prebpcode VARCHAR(30);
DECLARE v_prebpname VARCHAR(100);
DECLARE v_prebasedcurrency VARCHAR(30);
DECLARE v_pretotalamount NUMERIC(20,6);
DECLARE v_precostline NUMERIC(20,6);
DECLARE v_unitprice NUMERIC(20,6);
DECLARE v_cmdocno VARCHAR(30);
DECLARE v_cmlineid NUMERIC(20,0);
DECLARE v_cmqty NUMERIC(20,6);
DECLARE v_batch VARCHAR(50);
DECLARE v_cmamount NUMERIC(20,6);
DECLARE v_cmcurrencyrate NUMERIC(20,6);

  DECLARE invoice_cur CURSOR FOR
  SELECT arinvoices.DOCNO,
         arinvoices.DOCDATE,
         arinvoices.BPCODE,
         arinvoices.BPNAME,
         arinvoices.TOTALAMOUNT,
         arinvoices.CURRENCY,
         arinvoices.CURRENCYRATE,
         arinvoiceitems.ITEMCODE,
         arinvoiceitems.ITEMDESC,
         arinvoiceitems.UNITPRICE,
         arinvoiceitems.QUANTITY,
         arinvoiceitems.LINEID,
         arinvoiceitems.ITEMCOST,
         arinvoiceitems.WHSCODE,
         arinvoiceitems.SODOCNO,
         arinvoiceitems.SOLINEID,
         salesdeliveries.DOCNO,
         salesdeliveryitems.LINEID,
         arcreditmemos.DOCNO,
         arcreditmemoitems.LINEID,
         (arcreditmemos.TOTALBEFDISC + arcreditmemos.ROUNDAMOUNT) AS CMAMOUNT,
         arcreditmemos.CURRENCYRATE
    FROM arinvoiceitems
         LEFT OUTER JOIN salesdeliveryitems ON arinvoiceitems.COMPANY = salesdeliveryitems.COMPANY AND
                         arinvoiceitems.BRANCH = salesdeliveryitems.BRANCH and arinvoiceitems.BASEDOCID = salesdeliveryitems.DOCID AND
                         arinvoiceitems.BASELINEID = salesdeliveryitems.LINEID
         LEFT OUTER JOIN salesdeliveries ON salesdeliveryitems.COMPANY = salesdeliveries.COMPANY AND
                         salesdeliveryitems.BRANCH = salesdeliveries.BRANCH AND salesdeliveryitems.DOCID = salesdeliveries.DOCID
         LEFT OUTER JOIN arcreditmemoitems ON arcreditmemoitems.COMPANY = arinvoiceitems.COMPANY AND
                         arcreditmemoitems.BRANCH = arinvoiceitems.BRANCH AND arcreditmemoitems.BASETYPENM = 'A/R Invoice' AND
                         arcreditmemoitems.BASEDOCID = arinvoiceitems.DOCID AND arcreditmemoitems.BASELINEID = arinvoiceitems.LINEID
         LEFT OUTER JOIN arcreditmemos ON arcreditmemos.COMPANY = arcreditmemoitems.COMPANY AND arcreditmemos.BRANCH = arcreditmemoitems.BRANCH AND
                         arcreditmemos.DOCID = arcreditmemoitems.DOCID,
         arinvoices
   WHERE ( arinvoices.COMPANY = arinvoiceitems.COMPANY ) and
         ( arinvoices.BRANCH = arinvoiceitems.BRANCH ) and
         ( arinvoices.DOCID = arinvoiceitems.DOCID ) and
	       ( arinvoices.BRANCH = pi_branch ) and
         ( arinvoices.BPCODE >= v_cust_from ) and
         ( arinvoices.BPCODE <= v_cust_to ) and
         ( arinvoices.DOCNO >= v_invoice_from ) and
         ( arinvoices.DOCNO <= v_invoice_to ) and
         ( Month(arinvoices.DOCDATE) = v_month ) and
         ( Year(arinvoices.DOCDATE) = v_year ) and
         ( arinvoices.DOCTYPE = 'I' ) and
         ( pi_whse='' or (pi_whse<>'' AND arinvoiceitems.whscode = pi_whse));

  DECLARE batch_cur CURSOR FOR
  SELECT batchtrxs.QTY,
         batches.REFTYPE,
         batches.REFNO,
         batches.REFLINEID,
         batches.BATCH
    FROM batchtrxs,
         batches
   WHERE ( batchtrxs.COMPANY = batches.COMPANY ) and
         ( batchtrxs.BRANCH = batches.BRANCH ) and
         ( batchtrxs.ITEMCODE = batches.ITEMCODE ) and
         ( batchtrxs.BATCH = batches.BATCH ) and
         ( batchtrxs.REFNO = v_docno ) and
         ( batchtrxs.REFLINEID = v_lineid);

   DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;


   DROP TEMPORARY TABLE IF EXISTS invcost ;
   CREATE TEMPORARY TABLE `invcost` (
    `DOCNO` VARCHAR(100) ,
    `LINEID` NUMERIC (20,0) ,
    `BPCODE` VARCHAR(100),
    `BPNAME` VARCHAR(200),
    `CURRENCY` VARCHAR(30),
    `ITEMCODE` VARCHAR(100),
    `TOTALAMOUNT` NUMERIC (20,6) ,
    `ITEMCOST` NUMERIC (20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  SELECT CURRENCY INTO v_basedcurrency FROM COMPANIES;

  SET v_year = CONVERT(pi_year,SIGNED);
  SET v_month = CONVERT(pi_month,SIGNED);


  IF pi_invoice_fr is null THEN SET v_invoice_from = '';
  ELSE SET v_invoice_from = pi_invoice_fr;
  END IF;
  IF pi_invoice_to is null THEN SET v_invoice_to = '';
  ELSE SET v_invoice_to = pi_invoice_to;
  END IF;
  IF v_invoice_from = '' and v_invoice_to = '' THEN
    SET v_invoice_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;

  IF pi_cust_fr is null THEN SET v_cust_from = '';
  ELSE SET v_cust_from = pi_cust_fr;
  END IF;
  IF pi_cust_to is null THEN SET v_cust_to = '';
  ELSE SET v_cust_to = pi_cust_to;
  END IF;
  IF v_cust_from = '' and v_cust_to = '' THEN
    SET v_cust_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;

  SET v_boolean = FALSE;
  SET v_preinvno = '';
  SET v_rowcount = 1;
  SET v_precostline = 0;
  SET v_costline = 0;

  OPEN invoice_cur;
  invoiceloop: LOOP

    FETCH invoice_cur INTO v_invno,v_docdate,v_bpcode,v_bpname,v_totalamount,v_currency,v_currencyrate,v_itemcode,v_itemdesc,v_unitprice,
                           v_quantity,v_invlineid,v_itemcost,v_whscode,v_sodocno,v_solineid,v_pono,v_polineid, v_cmdocno, v_cmlineid, v_cmamount, v_cmcurrencyrate;
    IF v_done = 1 THEN
       Leave invoiceloop;
    END IF;

    IF v_cmamount IS NULL THEN
       SET v_cmamount = 0;
    END IF;

    IF v_cmcurrencyrate IS NULL THEN
       SET v_cmcurrencyrate = 0;
    END IF;

      IF v_preinvno <> v_invno THEN
         SET v_costline = 0;
      END IF;

      SELECT items.MANAGEBY INTO v_manageby
        FROM ITEMS
        WHERE ITEMS.ITEMCODE = v_itemcode;


       SELECT warehouses.DROPSHIP INTO v_dropship
         FROM warehouses
         WHERE warehouses.WAREHOUSE = v_whscode;

       SET v_costline  = 0;

       IF v_dropship = 1 THEN

          SELECT apinvoices.currency, apinvoices.currencyrate, (SUM(apinvoiceitems.linetotal) / SUM(apinvoiceitems.quantity)) INTO v_currency, v_currencyrate, v_price
            FROM apinvoices, apinvoiceitems
            WHERE apinvoices.COMPANY =  apinvoiceitems.COMPANY and
                  apinvoices.BRANCH =  apinvoiceitems.BRANCH and
                  apinvoices.DOCID =  apinvoiceitems.DOCID and
		              apinvoices.BRANCH = pi_branch and
                  apinvoiceitems.SODOCNO = v_sodocno and
                  apinvoiceitems.SOLINEID = v_solineid
              GROUP BY apinvoiceitems.SODOCNO;

           IF pi_currency = 'LOCAL' THEN
             SET v_costline = (v_price * v_quantity) * v_currencyrate;
           ELSE
             SET v_costline = (v_price * v_quantity) ;
           END IF;

       ELSEIF v_manageby = 0 THEN

           IF pi_currency = 'LOCAL' THEN
             SET v_costline = v_quantity * v_itemcost;
           ELSE
             SET v_costline = (v_quantity * (v_itemcost / v_currencyrate));
           END IF;

       ELSE

         IF v_pono IS NULL or v_pono = '' THEN
            SET v_docno = v_invno;
            SET v_lineid = v_invlineid;
            SET v_boolean = FALSE;
         ELSE
            SET v_docno = v_pono;
            SET v_lineid = v_polineid;
            SET v_boolean = TRUE;
         END IF;


         OPEN batch_cur;
         batchloop: LOOP
             FETCH batch_cur INTO v_qty,v_reftype,v_refno,v_reflineid, v_batch;
              IF v_done = 1 THEN
                Leave batchloop;
              END IF;
              SET v_cost = 0;
              SET v_costrate = 0;
              IF v_qty < 0 THEN
                 SET v_qty = -1 * v_qty;
              END IF;

              SET v_cmqty = 0;

              SELECT QTY INTO v_cmqty
                FROM batchtrxs
                WHERE COMPANY = 'GHE01' AND
                      BRANCH = pi_branch AND
                      ITEMCODE = v_itemcode AND
                      BATCH = v_batch AND
                      REFTYPE = 'CM' AND
                      REFNO = v_cmdocno AND
                      REFLINEID = v_cmlineid;

              IF v_cmqty IS NULL THEN
                 SET v_cmqty = 0;
              END IF;

              SET v_qty = v_qty - v_cmqty;

              IF v_qty > 0 THEN
                IF v_reftype = 'IQ+' THEN
                  
                  
                 SELECT itempricelists.price INTO v_cost
                    FROM itempricelists, pricelists
                    WHERE itempricelists.pricelist =  pricelists.pricelist AND
                          pricelists.pricelistname = 'INI COST' AND
                          itempricelists.ITEMCODE = v_itemcode;

                  SET v_costcurrency = v_currency;
                  SET v_costrate = v_currencyrate;

                  IF v_cost IS NULL THEN
                    SET v_cost = 0;
                  END IF;

                ELSEIF v_reftype = 'GR' THEN

                  SELECT DT.UNITPRICE, HD.DOCDATE INTO v_price, v_costdate
                    FROM GOODSRECEIPTS HD, GOODSRECEIPTITEMS DT
                    WHERE HD.COMPANY = DT.COMPANY AND
			                    HD.BRANCH = DT.BRANCH AND
			                    HD.DOCID = DT.DOCID AND
			                    HD.BRANCH = pi_branch AND
                          HD.DOCNO =  v_refno AND
			                    DT.LINEID = v_reflineid;


                   IF v_basedcurrency <> v_currency THEN


                     SELECT IF(CURRENCY IS NULL, '', CURRENCY) , IF(RATE IS NULL, 0, RATE) INTO v_costcurrency, v_costrate
                      FROM EXCHANGERATES
                      WHERE CURRENCY = v_currency AND XDATE = v_costdate;

                      IF v_costrate is NULL THEN
                         SET v_costrate = 0;
                      END IF;

                      IF v_costrate = 0 THEN
                         SET v_costrate = v_currencyrate;
                         SET v_costcurrency = v_currency;
                      END IF;
                  ELSE
                    SET v_costrate = 1;
                    SET v_costcurrency = v_currency;
                  END IF;

                    SET v_cost =  v_price / v_costrate;



                ELSEIF v_reftype = 'PDN' THEN

                  SELECT (SUM(DT.LINETOTAL) / SUM(DT.QUANTITY)), (SUM(HD.CURRENCYRATE * DT.QUANTITY) / SUM(DT.QUANTITY)), HD.CURRENCY
                    INTO v_cost, v_costrate, v_costcurrency
                    FROM APINVOICES HD, APINVOICEITEMS DT
                    WHERE HD.COMPANY = DT.COMPANY AND
			                    HD.BRANCH = DT.BRANCH AND
			                    HD.DOCID = DT.DOCID AND
			                    HD.BRANCH = pi_branch AND
			                    DT.BASEDOCNO = v_refno AND
			                    DT.BASELINEID = v_reflineid
                     GROUP BY DT.BASEDOCNO, DT.BASELINEID;

                  IF v_cost IS NULL THEN
                     SET v_cost = 0;
                  END IF;

                  IF v_cost = 0 THEN
                     SELECT DT.UNITPRICE, HD.CURRENCYRATE, HD.CURRENCY
                         INTO v_cost, v_costrate, v_costcurrency
                         FROM PURCHASEDELIVERIES HD, PURCHASEDELIVERYITEMS DT
                         WHERE HD.COMPANY = DT.COMPANY AND
			                         HD.BRANCH = DT.BRANCH AND
			                         HD.DOCID = DT.DOCID AND
			                         HD.BRANCH = pi_branch AND
                               HD.DOCNO = v_refno AND
                               DT.LINEID =  v_reflineid;
                   END IF;

                ELSEIF v_reftype = 'GA+' THEN

                  SELECT DT.UNITPRICE, HD.DOCDATE INTO v_price, v_costdate
                    FROM STOCKADJUSTMENTS HD, STOCKADJUSTMENTITEMS DT
                    WHERE HD.COMPANY = DT.COMPANY AND
			                    HD.BRANCH = DT.BRANCH AND
			                    HD.DOCID = DT.DOCID AND
			                    HD.BRANCH = pi_branch AND
			                    DT.LINEID = v_reflineid;

                  IF v_basedcurrency <> v_currency THEN
                    SELECT CURRENCY, RATE INTO v_costcurrency, v_costrate
                      FROM EXCHANGERATES
                      WHERE CURRENCY = v_currency AND XDATE = v_costdate;
                  ELSE
                    SET v_costrate = 1;
                    SET v_costcurrency = v_currency;
                  END IF;

                  IF v_costrate > 0 THEN
                    SET v_cost =  v_price / v_costrate;
                  ELSE
                    SET v_cost =  0;
                  END IF;

                ELSEIF v_reftype = 'AP' THEN

                  SELECT DT.PRICE, HD.CURRENCYRATE, HD.CURRENCY
                    INTO v_cost, v_costrate, v_costcurrency
                    FROM APINVOICES HD, APINVOICEITEMS DT
                    WHERE HD.COMPANY = DT.COMPANY AND
                    			HD.BRANCH = DT.BRANCH AND
                    			HD.DOCID = DT.DOCID AND
                    			HD.BRANCH = pi_branch AND
                    			DT.LINEID = v_reflineid;

                ELSEIF v_reftype = 'CM' THEN

                  SELECT DT.PRICE, HD.CURRENCYRATE, HD.CURRENCY
                    INTO v_cost, v_costrate, v_costcurrency
                    FROM ARCREDITMEMOS HD, ARCREDITMEMOITEMS DT
                    WHERE HD.COMPANY = DT.COMPANY AND
                  	  		HD.BRANCH = DT.BRANCH AND
		                    	HD.DOCID = DT.DOCID AND
			                    HD.BRANCH = pi_branch AND
  			                  DT.LINEID = v_reflineid;

                END IF;

                IF pi_currency = 'LOCAL' THEN
                   SET v_costline = v_costline + (v_qty * (v_cost * v_costrate));
                ELSE
                   SET v_costline = v_costline + (v_qty * v_cost);
                END IF;
              ELSE
                  SET v_costline = v_costline + 0;
              END IF;
              SET v_done = 0;

         END LOOP batchloop;
         CLOSE batch_cur;
       END IF;

       IF v_rowcount = 1 THEN
          SET v_preinvno = v_invno;
          SET v_preinvlineid = v_invlineid;
          SET v_prebpcode = v_bpcode;
          SET v_prebpname = v_bpname;
          SET v_prebasedcurrency = v_basedcurrency;
          IF pi_currency = 'LOCAL' THEN
             SET v_pretotalamount = (v_totalamount * v_currencyrate) - (v_cmamount * v_cmcurrencyrate);
          ELSE
             SET v_pretotalamount = v_totalamount - v_cmamount;
          END IF;
          SET v_precostline = 0;

       ELSE

         IF v_preinvno <> v_invno THEN


            INSERT INTO invcost (DOCNO, LINEID, BPCODE, BPNAME, CURRENCY, ITEMCODE, TOTALAMOUNT, ITEMCOST)
              VALUES (v_preinvno, v_preinvlineid, v_prebpcode, v_prebpname, v_prebasedcurrency, '', v_pretotalamount, v_precostline);


           SET v_preinvno = v_invno;
           SET v_preinvlineid = v_invlineid;
           SET v_prebpcode = v_bpcode;
           SET v_prebpname = v_bpname;
           SET v_prebasedcurrency = v_basedcurrency;
           IF pi_currency = 'LOCAL' THEN
             SET v_pretotalamount = (v_totalamount * v_currencyrate) - (v_cmamount * v_cmcurrencyrate);
           ELSE
             SET v_pretotalamount = v_totalamount - v_cmamount;
           END IF;

            
            SET v_precostline = 0;

         END IF;

       END IF;
  
      SET v_precostline = v_precostline + v_costline;
      SET v_rowcount = v_rowcount + 1;
      SET v_done = 0;
  END LOOP invoiceloop;
  CLOSE invoice_cur;



        INSERT INTO invcost (DOCNO, LINEID, BPCODE, BPNAME, CURRENCY, ITEMCODE, TOTALAMOUNT, ITEMCOST)
            VALUES (v_preinvno, v_preinvlineid, v_prebpcode, v_prebpname, v_prebasedcurrency, '', v_pretotalamount, v_precostline);



  SELECT * FROM invcost;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_monitoring`
--

DROP PROCEDURE IF EXISTS `sales_monitoring`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_monitoring`(IN pi_company varchar(200),
                           IN pi_branch varchar(200),
                           IN pi_date1 varchar(200), IN pi_date2 varchar(200))
BEGIN
SELECT
       upper(cm.COMPANYNAME) as Company,
       pi_branch as Branch,
       UPPER(concat(pi_branch, ' - ', br.BRANCHNAME)) AS BranchName,
       date(pi_date1) as Date1,
       date(pi_date2) as Date2,
       a1.docdate, a.bpname, a1.docno as 'SO', a.docno as 'DR', b.whscode as 'Source', b.itemdesc as 'ItemDesc',
       b.quantity, i.uomsa, b.unitprice, B.linetotal+b.vatamount as amount, pt.PAYMENTTERMNAME,
       cusG.groupname
      FROM arinvoices A
         LEFT OUTER JOIN arinvoiceitems B ON A.COMPANY = B.COMPANY AND A.BRANCH = B.BRANCH AND A.DOCID = B.DOCID
         LEFT OUTER JOIN salesorders A1 ON A.COMPANY = A1.COMPANY AND A.BRANCH = A1.BRANCH AND B.BASEDOCNO = A1.DOCNO
         LEFT OUTER JOIN items I ON B.itemcode = i.itemcode
         LEFT OUTER JOIN branches br ON br.BRANCHCODE = pi_branch
         LEFT OUTER JOIN companies cm ON cm.COMPANYCODE = pi_company
         LEFT OUTER JOIN paymentterms pt ON a.PAYMENTTERM = pt.PAYMENTTERM
         LEFT OUTER JOIN customers cust ON a.bpcode = cust.CUSTNO
         LEFT OUTER JOIN customergroups cusG ON cust.custgroup = cusG.custgroup
         WHERE A1.company = pi_company AND A1.branch = pi_branch AND A1.docdate between pi_date1 and pi_date2
               AND a.DOCSTATUS NOT IN('D')
      GROUP BY A.docno, B.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_orders`
--

DROP PROCEDURE IF EXISTS `sales_orders`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_orders`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd, g.SHIPTYPENAME as SHIPTYPE, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials, d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice, d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, a.CREATEDBY as created_by
       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_orders_ghe`
--

DROP PROCEDURE IF EXISTS `sales_orders_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_orders_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd, g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       d.ITEMCODE as itemcode,
       d.ITEMDESC as itemdesc,
       i.u_u_itemdetail as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCPERC as DISCAMOUNT,
       if(d.U_U_WEIGHTSA > 0, d.U_U_WEIGHTSA, i.weightsa) AS WEIGHT,
       if(d.U_U_ITEMVOLUME > 0, d.U_U_ITEMVOLUME * d.QUANTITY, i.VOLUMESA * d.QUANTITY) as LINEVOLUME,
       if(d.U_U_QTYPERCRTN > 0, (d.QUANTITY / d.U_U_QTYPERCRTN), if(i.U_U_QTYPERCRTN > 0 , d.QUANTITY / i.U_U_QTYPERCRTN, If(i.isinventory = 1, d.QUANTITY, 0))) as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when (d.UNITPRICE * a.CURRENCYRATE) < d.ITEMCOST then 'C'
            when (d.UNITPRICE * a.CURRENCYRATE) > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       cust.REMARKS as CUSTREMARKS,
       a.currency,
       d.lineid,
       a.u_u_shiptype,
       a.company as companyx,
       a.branch as branchx,
       a.docid,
       cust.u_u_cominfo,
       a.u_u_shipmode
       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_orders_ghe_proforma_inv`
--

DROP PROCEDURE IF EXISTS `sales_orders_ghe_proforma_inv`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_orders_ghe_proforma_inv`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode,
       a.BPNAME as bpname,
       a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd,
       g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       if(b.PAYMENTTERMNAME = '' or b.PAYMENTTERMNAME is null, '-Please Advise-', b.PAYMENTTERMNAME) as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       d.ITEMCODE as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCAMOUNT as DISCAMOUNT,
       if(d.U_U_WEIGHTSA > 0, d.U_U_WEIGHTSA * d.QUANTITY, i.weightsa * d.QUANTITY) AS WEIGHT,
       if(d.U_U_ITEMVOLUME > 0, d.U_U_ITEMVOLUME * d.QUANTITY, i.VOLUMESA * d.QUANTITY) as LINEVOLUME,
       if(d.U_U_QTYPERCRTN > 0, (d.QUANTITY / d.U_U_QTYPERCRTN), if(i.U_U_QTYPERCRTN > 0 , d.QUANTITY / i.U_U_QTYPERCRTN, If(i.isinventory = 1, d.QUANTITY, 0))) as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when (d.UNITPRICE * a.CURRENCYRATE) < d.ITEMCOST then 'C'
            when (d.UNITPRICE * a.CURRENCYRATE) > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       if(a.u_u_pod = '' or a.u_u_pod is null, '-Please Advise-', a.u_u_pod) as u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       if(a.u_u_pol = '' or a.u_u_pol is null, '-Please Advise-', a.u_u_pol) as u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       cust.REMARKS as CUSTREMARKS,
       a.docduedate,
       if(a.u_u_sleadtime = '' or a.u_u_sleadtime is null, '-Please Advise-', a.u_u_sleadtime) as u_u_sleadtime,
       if(a.u_u_shiptype = '' or a.u_u_shiptype is null, '-Please Advise-', a.u_u_shiptype) as u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       a.u_u_bank as bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.company as companyx,
       a.branch as branchx,
       a.docid

       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_orders_ghe_proforma_inv_2`
--

DROP PROCEDURE IF EXISTS `sales_orders_ghe_proforma_inv_2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_orders_ghe_proforma_inv_2`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid,
       cust2.CUSTNO as bpcode,
       cust2.CUSTNAME as bpname,
       a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd,
       g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       if(b.PAYMENTTERMNAME = '' or b.PAYMENTTERMNAME is null, '-Please Advise-', b.PAYMENTTERMNAME) as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       d.ITEMCODE as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCAMOUNT as DISCAMOUNT,
       if(d.U_U_WEIGHTSA > 0, d.U_U_WEIGHTSA * d.QUANTITY, i.weightsa * d.QUANTITY) AS WEIGHT,
       if(d.U_U_ITEMVOLUME > 0, d.U_U_ITEMVOLUME * d.QUANTITY, i.VOLUMESA * d.QUANTITY) as LINEVOLUME,
       if(d.U_U_QTYPERCRTN > 0, (d.QUANTITY / d.U_U_QTYPERCRTN), if(i.U_U_QTYPERCRTN > 0 , d.QUANTITY / i.U_U_QTYPERCRTN, d.QUANTITY)) as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when (d.UNITPRICE * a.CURRENCYRATE) < d.ITEMCOST then 'C'
            when (d.UNITPRICE * a.CURRENCYRATE) > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       if(a.u_u_pod = '' or a.u_u_pod is null, '-Please Advise-', a.u_u_pod) as u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       if(a.u_u_pol = '' or a.u_u_pol is null, '-Please Advise-', a.u_u_pol) as u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       cust.REMARKS as CUSTREMARKS,
       a.docduedate,
       if(a.u_u_sleadtime = '' or a.u_u_sleadtime is null, '-Please Advise-', a.u_u_sleadtime) as u_u_sleadtime,
       if(a.u_u_shiptype = '' or a.u_u_shiptype is null, '-Please Advise-', a.u_u_shiptype) as u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       a.u_u_bank as bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.company as companyx,
       a.branch as branchx,
       a.docid

       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join customers cust2 on cust.PARENTBPCODE = cust2.custno
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_orders_ghe_purchase_order_fucos_on`
--

DROP PROCEDURE IF EXISTS `sales_orders_ghe_purchase_order_fucos_on`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_orders_ghe_purchase_order_fucos_on`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid,
       sup.suppno as bpcode,
       sup.suppname as bpname,
       upper(concat(ad.BARANGAY,', ', ad.STREET,', ', ad.ZIP, ', ', ad.CITY, ', ', pro2.PROVINCENAME, ', ', ct2.COUNTRYNAME)) as billtoadd,
       a.SHIPTOADDRESS as shiptoadd,
       g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.u_u_podate as docdate, a.u_u_eta as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       IF(i.u_u_new = 'Y', concat(d.ITEMCODE,'NEW'),d.ITEMCODE) as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCAMOUNT as DISCAMOUNT,
       i.weightsa * d.QUANTITY AS WEIGHT,
       d.U_U_LINEVOLUME as LINEVOLUME,
       d.U_U_QTYPERCRTN * d.QUANTITY as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when d.UNITPRICE < d.ITEMCOST then 'C'
            when d.UNITPRICE > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       a.docduedate,
       a.u_u_sleadtime,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       hb.bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.company as companyx,
       a.branch as branchx,
       a.docid

       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join suppliers sup on a.u_u_fonsupplier = sup.suppno
            left outer join addresses ad on a.u_u_fonsupplier = ad.refid and ad.addresstype = 0
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join countries ct2 on ad.country = ct2.country
            left outer join provinces pro2 on ad.province = pro2.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join paymentterms b on sup.PAYMENTTERM = b.PAYMENTTERM
            left outer join suppliercontacts cp on sup.suppno = cp.suppno
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_orders_ghe_purchase_order_fucos_on_2`
--

DROP PROCEDURE IF EXISTS `sales_orders_ghe_purchase_order_fucos_on_2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_orders_ghe_purchase_order_fucos_on_2`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid,
       f.COMPANYCODE as bpcode,
       f.COMPANYNAME as bpname,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as billtoadd,
       a.SHIPTOADDRESS as shiptoadd,
       g.SHIPTYPENAME as SHIPTYPE,
       a.bpname as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       i.U_U_SCNAME AS ITEMGROUP,
       d.ITEMCODE as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCAMOUNT as DISCAMOUNT,
       i.weightsa * d.QUANTITY AS WEIGHT,
       d.U_U_LINEVOLUME as LINEVOLUME,
       d.U_U_QTYPERCRTN * d.QUANTITY as BOXES,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       case when d.UNITPRICE < d.ITEMCOST then 'C'
            when d.UNITPRICE > d.ITEMCOST and d.UNITPRICE < pl.price then '*'
            else '' end as condition_a,
       a.u_u_cntr,
       a.u_u_seal,
       a.u_u_etd,
       a.u_u_eta,
       a.u_u_pod,
       a.u_u_fdes,
       a.u_u_vsl,
       a.u_u_shipline,
       a.u_u_pol,
       i.u_u_color,
       cust.PHONE1,
       cust.FAX,
       cust.EMAIL,
       a.docduedate,
       a.u_u_sleadtime,
       a.u_u_shiptype,
       a.u_u_shipmode,
       a.currency,
       bd.NAME as bankname,
       bd.U_ADDR01,
       bd.U_ADDR02,
       bd.U_ADDR03,
       bd.U_ADDR04,
       hb.bankacctno,
       bd.U_SWIFTID,
       bd.U_INTERBANK,
       bd.U_TELEXNO,
       a.u_u_transshipment,
       a.u_u_shipmark,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid,
       a.company as companyx,
       a.branch as branchx,
       a.docid
       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join housebankaccounts hb on a.u_u_bank = hb.bank
            left outer join u_bankdetail bd on a.u_u_bank = bd.code
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_orders_standard`
--

DROP PROCEDURE IF EXISTS `sales_orders_standard`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_orders_standard`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
DECLARE v_group INT;
DECLARE v_company varchar(300);
DECLARE v_branch varchar(300);
DECLARE v_taxid varchar(300);
DECLARE v_bpcode varchar(300);
DECLARE v_bpname varchar(300);
DECLARE v_billtoadd varchar(300);
DECLARE v_shiptoadd varchar(300);
DECLARE v_SHIPTYPE varchar(300);
DECLARE v_contact_person varchar(300);
DECLARE v_bprefno varchar(300);
DECLARE v_docdate DATE;
DECLARE v_delivery_date DATE;
DECLARE v_docno varchar(300);
DECLARE v_term varchar(300);
DECLARE v_sales_person varchar(300);
DECLARE v_serials varchar(300);
DECLARE v_itemcode varchar(300);
DECLARE v_itemdesc varchar(300);
DECLARE v_item_remarks TEXT;
DECLARE v_glacctno varchar(300);
DECLARE v_qty NUMERIC(18,6);
DECLARE v_unitprice NUMERIC(18,6);
DECLARE v_DISCAMOUNT NUMERIC(18,6);
DECLARE v_linetotal NUMERIC(18,6);
DECLARE v_total_bf_disc NUMERIC(18,6);
DECLARE v_disc_percentage NUMERIC(18,6);
DECLARE v_disc_amount NUMERIC(18,6);
DECLARE v_vat_amount NUMERIC(18,6);
DECLARE v_wtax_amount NUMERIC(18,6);
DECLARE v_instalment_addon_amount NUMERIC(18,6);
DECLARE v_total_amount NUMERIC(18,6);
DECLARE v_settled_amount NUMERIC(18,6);
DECLARE v_due_amount NUMERIC(18,6);
DECLARE v_remarks TEXT;
DECLARE v_created_by varchar(300);
DECLARE v_U_U_TELNO varchar(300);
DECLARE v_U_U_FAXNO varchar(300);
DECLARE v_U_U_EMAIL varchar(300);
DECLARE v_currency varchar(300);
DECLARE v_lineid NUMERIC(18,0);
DECLARE v_companyx varchar(300);
DECLARE v_branchx varchar(300);
DECLARE v_docid NUMERIC(18,0);
DECLARE v_totalcount INT;
DECLARE v_doctype varchar(300);
DROP TEMPORARY TABLE IF EXISTS sales_order_standard ;
CREATE TEMPORARY TABLE  `sales_order_standard` (
    `sogroup` INT default 0,
    `company` varchar(300) default '',
    `branch` varchar(300) default '',
    `taxid` varchar(300) default '',
    `bpcode` varchar(300) default '',
    `bpname` varchar(300) default '',
    `billtoadd` varchar(300) default '',
    `shiptoadd` varchar(300) default '',
    `SHIPTYPE` varchar(300) default '',
    `contact_person` varchar(300) default '',
    `bprefno` varchar(300) default '',
    `docdate` DATE,
    `delivery_date` DATE,
    `docno` varchar(300) default '',
    `term` varchar(300) default '',
    `sales_person` varchar(300) default '',
    `serials` varchar(300) default '',
    `itemcode` varchar(300) default '',
    `itemdesc` varchar(300) default '',
    `item_remarks` TEXT,
    `glacctno` varchar(300) default '',
    `qty` NUMERIC(18,6) NULL default '0',
    `unitprice` NUMERIC(18,6) NULL default '0',
    `DISCAMOUNT` NUMERIC(18,6) NULL default '0',
    `linetotal` NUMERIC(18,6) NULL default '0',
    `total_bf_disc` NUMERIC(18,6) NULL default '0',
    `disc_percentage` NUMERIC(18,6) NULL default '0',
    `disc_amount` NUMERIC(18,6) NULL default '0',
    `vat_amount` NUMERIC(18,6) NULL default '0',
    `wtax_amount` NUMERIC(18,6) NULL default '0',
    `instalment_addon_amount` NUMERIC(18,6) NULL default '0',
    `total_amount` NUMERIC(18,6) NULL default '0',
    `settled_amount` NUMERIC(18,6) NULL default '0',
    `due_amount` NUMERIC(18,6) NULL default '0',
    `remarks` TEXT ,
    `created_by` varchar(300) default '',
    `U_U_TELNO` varchar(300) default '',
    `U_U_FAXNO` varchar(300) default '',
    `U_U_EMAIL` varchar(300) default '',
    `currency` varchar(300) default '',
    `lineid`  NUMERIC(18,0) NULL default '0',
    `companyx` varchar(300) default '',
    `branchx` varchar(300) default '',
    `docid` NUMERIC(18,0) NULL default '0' ,
    `doctype` varchar(300) default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT INTO sales_order_standard (`company`,`branch`,`taxid`,`bpcode`,`bpname`,`billtoadd`,`shiptoadd`,`SHIPTYPE`,`contact_person`,
               `bprefno`,`docdate`,`delivery_date`,`docno`,`term`,`sales_person`,`serials`,`itemcode`,`itemdesc`,`item_remarks`,`glacctno`,
               `qty`,`unitprice`,`DISCAMOUNT`,`linetotal`,`total_bf_disc`,`disc_percentage`,`disc_amount`,`vat_amount`,`wtax_amount`,
               `instalment_addon_amount`,`total_amount`,`settled_amount`,`due_amount`,`remarks`,`created_by`,`U_U_TELNO`,`U_U_FAXNO`,
               `U_U_EMAIL`,`currency`,`lineid`,`companyx`,`branchx`,`docid`,`doctype`)
  select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd, g.SHIPTYPENAME as SHIPTYPE,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials,
       d.ITEMCODE as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.DISCPERC as DISCAMOUNT,
       d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       a.currency,
       d.lineid,
       a.company as companyx,
       a.branch as branchx,
       a.docid,
       a.doctype
       from salesorders a
            left outer join salesorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join items i on d.itemcode = i.itemcode
            left outer join customers cust on a.BPCODE = cust.custno
            left outer join itempricelists pl on cust.pricelist = pl.pricelist and d.ITEMCODE = pl.ITEMCODE
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join users us on a.CREATEDBY = us.userid
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
    UPDATE sales_order_standard SET sogroup = 1;
    SELECT `company`,`branch`,`taxid`,`bpcode`,`bpname`,`billtoadd`,`shiptoadd`,`SHIPTYPE`,`contact_person`,
           `bprefno`,`docdate`,`delivery_date`,`docno`,`term`,`sales_person`,`serials`,`itemcode`,`itemdesc`,`item_remarks`,`glacctno`,
           `qty`,`unitprice`,`DISCAMOUNT`,`linetotal`,`total_bf_disc`,`disc_percentage`,`disc_amount`,`vat_amount`,`wtax_amount`,
           `instalment_addon_amount`,`total_amount`,`settled_amount`,`due_amount`,`remarks`,`created_by`,`U_U_TELNO`,`U_U_FAXNO`,
           `U_U_EMAIL`,`currency`,`lineid`,`companyx`,`branchx`,`docid`,`doctype`
      INTO v_company,v_branch,v_taxid, v_bpcode, v_bpname, v_billtoadd,v_shiptoadd, v_SHIPTYPE,v_contact_person,
           v_bprefno, v_docdate, v_delivery_date, v_docno,v_term,v_sales_person,v_serials,v_itemcode,v_itemdesc,v_item_remarks,
           v_glacctno,v_qty,v_unitprice,v_DISCAMOUNT,v_linetotal,v_total_bf_disc, v_disc_percentage, v_disc_amount, v_vat_amount,
           v_wtax_amount, v_instalment_addon_amount, v_total_amount,v_settled_amount, v_due_amount, v_remarks, v_created_by,
           v_U_U_TELNO,v_U_U_FAXNO,v_U_U_EMAIL,v_currency,v_lineid,v_companyx,v_branchx,v_docid,v_doctype
      FROM sales_order_standard LIMIT 1;
    INSERT INTO sales_order_standard (`sogroup`,`company`,`branch`,`taxid`,`bpcode`,`bpname`,`billtoadd`,`shiptoadd`,`SHIPTYPE`,`contact_person`,
               `bprefno`,`docdate`,`delivery_date`,`docno`,`term`,`sales_person`,`serials`,`itemcode`,`itemdesc`,`item_remarks`,`glacctno`,
               `qty`,`unitprice`,`DISCAMOUNT`,`linetotal`,`total_bf_disc`,`disc_percentage`,`disc_amount`,`vat_amount`,`wtax_amount`,
               `instalment_addon_amount`,`total_amount`,`settled_amount`,`due_amount`,`remarks`,`created_by`,`U_U_TELNO`,`U_U_FAXNO`,
               `U_U_EMAIL`,`currency`,`lineid`,`companyx`,`branchx`,`docid`,`doctype`)
         VALUEs(2,v_company,v_branch,v_taxid, v_bpcode, v_bpname, v_billtoadd,v_shiptoadd, v_SHIPTYPE,v_contact_person,
               v_bprefno, v_docdate, v_delivery_date, v_docno,v_term,v_sales_person,v_serials,'','Total Before Discount',v_item_remarks,
               v_glacctno,v_qty,v_unitprice,v_DISCAMOUNT,v_total_bf_disc,v_total_bf_disc, v_disc_percentage, v_disc_amount, v_vat_amount,
               v_wtax_amount, v_instalment_addon_amount, v_total_amount,v_settled_amount, v_due_amount, v_remarks, v_created_by,
               v_U_U_TELNO,v_U_U_FAXNO,v_U_U_EMAIL,v_currency,1000000001,v_companyx,v_branchx,v_docid,v_doctype);
    INSERT INTO sales_order_standard (`sogroup`,`company`,`branch`,`taxid`,`bpcode`,`bpname`,`billtoadd`,`shiptoadd`,`SHIPTYPE`,`contact_person`,
               `bprefno`,`docdate`,`delivery_date`,`docno`,`term`,`sales_person`,`serials`,`itemcode`,`itemdesc`,`item_remarks`,`glacctno`,
               `qty`,`unitprice`,`DISCAMOUNT`,`linetotal`,`total_bf_disc`,`disc_percentage`,`disc_amount`,`vat_amount`,`wtax_amount`,
               `instalment_addon_amount`,`total_amount`,`settled_amount`,`due_amount`,`remarks`,`created_by`,`U_U_TELNO`,`U_U_FAXNO`,
               `U_U_EMAIL`,`currency`,`lineid`,`companyx`,`branchx`,`docid`,`doctype`)
         VALUEs(2,v_company,v_branch,v_taxid, v_bpcode, v_bpname, v_billtoadd,v_shiptoadd, v_SHIPTYPE,v_contact_person,
               v_bprefno, v_docdate, v_delivery_date, v_docno,v_term,v_sales_person,v_serials,'','Discount',v_item_remarks,
               v_glacctno,v_qty,v_unitprice,v_DISCAMOUNT,v_disc_amount,v_total_bf_disc, v_disc_percentage, v_disc_amount, v_vat_amount,
               v_wtax_amount, v_instalment_addon_amount, v_total_amount,v_settled_amount, v_due_amount, v_remarks, v_created_by,
               v_U_U_TELNO,v_U_U_FAXNO,v_U_U_EMAIL,v_currency,1000000002,v_companyx,v_branchx,v_docid,v_doctype);
    INSERT INTO sales_order_standard (`itemcode`,`itemdesc`,`linetotal`)
          SELECT s.CHRGCODE, s.CHRGNAME, s.AMOUNT
          FROM salesorders a, salesorderotherchargesitems s
          WHERE a.COMPANY = s.COMPANY and a.BRANCH = s.BRANCH and a.DOCID = s.DOCID and
                a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno;
    UPDATE sales_order_standard
        SET `sogroup` = 4,`company` = v_company,`branch` = v_branch,`taxid` = v_taxid,`bpcode` = v_bpcode,
            `bpname` = v_bpname,`billtoadd` = v_bpname,`shiptoadd` = v_shiptoadd,`SHIPTYPE` = v_SHIPTYPE,`contact_person` = v_contact_person,
            `bprefno` = v_bprefno,`docdate` = v_docdate,`delivery_date` = v_delivery_date,`docno` = v_docno,`term` = v_term,
            `sales_person` = v_sales_person,`serials` = v_serials,`item_remarks` = v_item_remarks,`glacctno` = v_glacctno,`qty` = v_qty,
            `unitprice` = v_unitprice,`DISCAMOUNT` = v_DISCAMOUNT,`total_bf_disc` = v_total_bf_disc,`disc_percentage` = v_disc_percentage,
            `disc_amount` = v_disc_amount,`vat_amount` = v_vat_amount,`wtax_amount` = v_wtax_amount,`instalment_addon_amount` = v_instalment_addon_amount,
            `total_amount` = v_total_amount,`settled_amount` = v_settled_amount,`due_amount` = v_due_amount,`remarks` = v_remarks,
            `created_by` = v_created_by,`U_U_TELNO` = v_U_U_TELNO,`U_U_FAXNO` = v_U_U_FAXNO,`U_U_EMAIL` = v_U_U_EMAIL,`currency` = v_currency,
            `lineid` = 1000000004,`companyx` = v_companyx,`branchx` = v_branchx,`docid` = v_docid, `doctype` = v_doctype
         WHERE sogroup <> 1 and sogroup <> 2;
     SELECT Count(*) INTO v_totalcount FROM sales_order_standard WHERE sogroup = 4;
     IF v_totalcount > 0 THEN
       INSERT INTO sales_order_standard (`sogroup`,`company`,`branch`,`taxid`,`bpcode`,`bpname`,`billtoadd`,`shiptoadd`,`SHIPTYPE`,`contact_person`,
                 `bprefno`,`docdate`,`delivery_date`,`docno`,`term`,`sales_person`,`serials`,`itemcode`,`itemdesc`,`item_remarks`,`glacctno`,
                 `qty`,`unitprice`,`DISCAMOUNT`,`linetotal`,`total_bf_disc`,`disc_percentage`,`disc_amount`,`vat_amount`,`wtax_amount`,
                 `instalment_addon_amount`,`total_amount`,`settled_amount`,`due_amount`,`remarks`,`created_by`,`U_U_TELNO`,`U_U_FAXNO`,
                 `U_U_EMAIL`,`currency`,`lineid`,`companyx`,`branchx`,`docid`, `doctype`)
           VALUEs(3,v_company,v_branch,v_taxid, v_bpcode, v_bpname, v_billtoadd,v_shiptoadd, v_SHIPTYPE,v_contact_person,
                 v_bprefno, v_docdate, v_delivery_date, v_docno,v_term,v_sales_person,v_serials,'','',v_item_remarks,
                 v_glacctno,v_qty,v_unitprice,v_DISCAMOUNT,0,v_total_bf_disc, v_disc_percentage, v_disc_amount, v_vat_amount,
                 v_wtax_amount, v_instalment_addon_amount, v_total_amount,v_settled_amount, v_due_amount, v_remarks, v_created_by,
                 v_U_U_TELNO,v_U_U_FAXNO,v_U_U_EMAIL,v_currency,1000000003,v_companyx,v_branchx,v_docid,v_doctype);
     END IF;
   SELECT * FROM sales_order_standard ORDER BY sogroup, lineid, itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_quotations`
--

DROP PROCEDURE IF EXISTS `sales_quotations`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_quotations`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as shiptoadd, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials, d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice, d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, a.CREATEDBY as created_by
       from salesquotations a
            left outer join salesquotationitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_quotations_ghe`
--

DROP PROCEDURE IF EXISTS `sales_quotations_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_quotations_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as shiptoadd,
       concat(cp.salutation, ' ', cp.name) as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       d.SBNIDS as serials, d.ITEMCODE as itemcode,
       d.ITEMDESC as itemdesc,
       i.remarks as item_remarks,
       d.GLACCTNO as glacctno, d.QUANTITY as qty,
       d.UNITPRICE as unitprice, d.LINETOTAL as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, us.username as created_by,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       a.currency,
       d.lineid,
       emp.lastname as mob,
       a.company as companyx,
       a.branch as branchx,
       a.docid
       from salesquotations a
            left outer join salesquotationitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join items i on d.itemcode = i.itemcode
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join customercontacts cp on a.BPCODE = cp.CUSTNO
            left outer join users us on a.CREATEDBY = us.userid
            left outer join employees emp on a.CREATEDBY = emp.empid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_returns`
--

DROP PROCEDURE IF EXISTS `sales_returns`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_returns`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.TAXID as taxid, a.BPCODE as bpcode, a.BPNAME as bpname, a.BILLTOADDRESS as billtoadd,
       a.SHIPTOADDRESS as shiptoadd, g.SHIPTYPENAME as SHIPTYPE, a.CONTACTPERSON as contact_person,
       a.BPREFNO as bprefno, a.DOCDATE as docdate, a.DOCDUEDATE as delivery_date, a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       c.SALESPERSONNAME as sales_person,
       h.SERIALNO as chassis, h.MFRSERIALNO as 'engine', d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc, d.GLACCTNO as glacctno,
       d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.linetotal as linetotal,
       a.TOTALBEFDISC as total_bf_disc, a.DISCPERC as disc_percentage, a.DISCAMOUNT as disc_amount, a.VATAMOUNT as vat_amount,
       a.WTAXAMOUNT as wtax_amount, a.INSTADDONAMOUNT as instalment_addon_amount, a.TOTALAMOUNT as total_amount,
       a.SETTLEDAMOUNT as settled_amount, a.DUEAMOUNT as due_amount, a.REMARKS as remarks, i.username as created_by
       from salesreturns a
            left outer join salesreturnitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join shiptypes g on a.SHIPTYPE = g.SHIPTYPE
            left outer join documentserials h on a.DOCID = h.DOCID and a.COMPANY = h.COMPANY and a.BRANCH = h.BRANCH
                                                 and d.OBJECTCODE = h.OBJECTCODE and d.ITEMCODE = h.ITEMCODE
            left outer join users i on d.CREATEDBY = i.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
  group by a.DOCNO, d.ITEMCODE, h.SERIALNO, h.MFRSERIALNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_summary_report`
--

DROP PROCEDURE IF EXISTS `sales_summary_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_summary_report`(IN pi_company VARCHAR(30),
                                        IN pi_branch VARCHAR(30),
                                        IN pi_date1 VARCHAR(30),
                                        IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `main` (
       `Company` varchar(100) NULL default '',
       `CompanyName` varchar(300) NULL default '',
       `CompanyType` varchar(300) NULL default '',
       `Branch` varchar(100) NULL default '',
       `BranchName` varchar(300) NULL default '',
       `date1` DATE NULL,
       `date2` DATE NULL,
       `u_date_from` DATE NULL,
       `u_time_from` varchar(50) NULL default '',
       `u_time_to` varchar(50) NULL default '',
       `u_shift` varchar(100) NULL default '',
       `Shift1` varchar(100) NULL default '',
       `Shift2` varchar(100) NULL default '',
       `Biodiesel_volume` NUMERIC(18,6) NOT NULL default '0',
       `Premium_volume` NUMERIC(18,6) NOT NULL default '0',
       `Unleaded_volume` NUMERIC(18,6) NOT NULL default '0',
       `Regular_volume` NUMERIC(18,6) NOT NULL default '0',
       `Kerosene_volume` NUMERIC(18,6) NOT NULL default '0',
       `Biodiesel_unitPrice` NUMERIC(18,6) NOT NULL default '0',
       `Premium_unitPrice` NUMERIC(18,6) NOT NULL default '0',
       `Unleaded_unitPrice` NUMERIC(18,6) NOT NULL default '0',
       `Regular_unitPrice` NUMERIC(18,6) NOT NULL default '0',
       `Kerosene_unitPrice` NUMERIC(18,6) NOT NULL default '0',
       `Biodiesel_amount` NUMERIC(18,6) NOT NULL default '0',
       `Premium_amount` NUMERIC(18,6) NOT NULL default '0',
       `Unleaded_amount` NUMERIC(18,6) NOT NULL default '0',
       `Regular_amount` NUMERIC(18,6) NOT NULL default '0',
       `Kerosene_amount` NUMERIC(18,6) NOT NULL default '0',
       `TotalLiters` NUMERIC(18,6) NOT NULL default '0',
       `TotalSales` NUMERIC(18,6) NOT NULL default '0',
       `Revenue` NUMERIC(18,6) NOT NULL default '0',
       `FuelSales` NUMERIC(18,6) NOT NULL default '0',
       `EarlyReg` NUMERIC(18,6) NOT NULL default '0',
       `StationReceivables` NUMERIC(18,6) NOT NULL default '0',
       `Discount` NUMERIC(18,6) NOT NULL default '0',
       `CashWithdrawals` NUMERIC(18,6) NOT NULL default '0',
       `CashonHand` NUMERIC(18,6) NOT NULL default '0',
       `CashOverShort` NUMERIC(18,6) NOT NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO main (Company,
       CompanyName,
       CompanyType,
       Branch,
       BranchName,
       date1,
       date2,
       u_date_from,
       u_time_from,
       u_time_to,
       u_shift,
       Shift1,
       Shift2,
       Biodiesel_volume,
       Premium_volume,
       Unleaded_volume,
       Regular_volume,
       Kerosene_volume,
       Biodiesel_unitPrice,
       Premium_unitPrice,
       Unleaded_unitPrice,
       Regular_unitPrice,
       Kerosene_unitPrice,
       Biodiesel_amount,
       Premium_amount,
       Unleaded_amount,
       Regular_amount,
       Kerosene_amount,
       TotalLiters,
       TotalSales,
       Revenue,
       FuelSales,
       EarlyReg,
       StationReceivables,
       Discount,
       CashWithdrawals,
       CashonHand,
       CashOverShort)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       b.u_date_from,
       b.u_time_from,
       b.u_time_to,
       b.u_shift,
       if(b.u_shift like '1%', 'X', '') as Shift1,
       if(b.u_shift like '2%', 'X', '') as Shift2,
       if(a.u_itemcode = 'W0001', sum(a.u_sold_liters), 0) as 'Biodiesel_volume',
       if(a.u_itemcode = 'W0002', sum(a.u_sold_liters), 0) as 'Premium_volume',
       if(a.u_itemcode = 'W0003', sum(a.u_sold_liters), 0) as 'Unleaded_volume',
       if(a.u_itemcode = 'W0004', sum(a.u_sold_liters), 0) as 'Regular_volume',
       if(a.u_itemcode = 'W0005', sum(a.u_sold_liters), 0) as 'Kerosene_volume',
       if(a.u_itemcode = 'W0001', a.u_price, 0) as 'Biodiesel_unitPrice',
       if(a.u_itemcode = 'W0002', a.u_price, 0) as 'Premium_unitPrice',
       if(a.u_itemcode = 'W0003', a.u_price, 0) as 'Unleaded_unitPrice',
       if(a.u_itemcode = 'W0004', a.u_price, 0) as 'Regular_unitPrice',
       if(a.u_itemcode = 'W0005', a.u_price, 0) as 'Kerosene_unitPrice',
       if(a.u_itemcode = 'W0001', sum(a.u_total), 0) as 'Biodiesel_amount',
       if(a.u_itemcode = 'W0002', sum(a.u_total), 0) as 'Premium_amount',
       if(a.u_itemcode = 'W0003', sum(a.u_total), 0) as 'Unleaded_amount',
       if(a.u_itemcode = 'W0004', sum(a.u_total), 0) as 'Regular_amount',
       if(a.u_itemcode = 'W0005', sum(a.u_total), 0) as 'Kerosene_amount',
       b.U_QTY_SOLD_DIGITAL as TotalLiters,
       b.U_TOTAL_SALES_DIGITAL as TotalSales,
       b.U_REVENUE_ADJ_PO_AMOUNT as Revenue,
       b.U_TOTAL_FUEL_SALES as FuelSales,
       b.U_EARLY_REG_AMOUNT as EarlyReg,
       b.U_CHARGE_SALES as StationReceivables,
       b.U_DISC_AMOUNT as Discount,
       b.U_CASH_WITHDRAWALS as CashWithdrawals,
       b.U_TOTAL_CASHCOUNT as CashonHand,
       b.U_TOTAL_CASHVARIANCE as CashOverShort
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype and b.docstatus = 'C'
       left outer join items i on a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join companies co on a.company = co.companycode
   where a.company = pi_company and a.branch = pi_branch
         and b.u_date_from between pi_date1 and pi_date2
   group by b.u_date_from, b.u_time_from, b.u_time_to, b.u_shift, a.u_itemcode;
Select
       Company,
       CompanyName,
       CompanyType,
       Branch,
       BranchName,
       date1,
       date2,
       u_date_from,
       TIME_FORMAT(u_time_from, '%H:%i') u_time_from,
       TIME_FORMAT(u_time_to, '%H:%i')u_time_to,
       Shift1,
       Shift2,
       sum(Biodiesel_volume) as Biodiesel_volume,
       sum(Biodiesel_amount)/sum(Biodiesel_volume) as Biodiesel_unitPrice,
       sum(Biodiesel_amount) as Biodiesel_amount,
       sum(Premium_volume) as Premium_volume,
       sum(Premium_amount)/sum(Premium_volume) as Premium_unitPrice,
       sum(Premium_amount) as Premium_amount,
       sum(Unleaded_volume) as Unleaded_volume,
       sum(Unleaded_amount)/sum(Unleaded_volume) as Unleaded_unitPrice,
       sum(Unleaded_amount) as Unleaded_amount,
       sum(Regular_volume) as Regular_volume,
       sum(Regular_amount)/sum(Regular_volume) as Regular_unitPrice,
       sum(Regular_amount) as Regular_amount,
       sum(Kerosene_volume) as Kerosene_volume,
       sum(Kerosene_amount)/sum(Kerosene_volume) as Kerosene_unitPrice,
       sum(Kerosene_amount) as Kerosene_amount,
       TotalLiters,
       TotalSales,
       Revenue,
       FuelSales,
       EarlyReg,
       StationReceivables,
       Discount,
       CashWithdrawals,
       CashonHand,
       CashOverShort
       From main
 group by u_date_from, u_time_from, u_time_to, u_shift;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_summary_report_1`
--

DROP PROCEDURE IF EXISTS `sales_summary_report_1`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_summary_report_1`(IN pi_company VARCHAR(30),
                                        IN pi_branch VARCHAR(30),
                                        IN pi_date1 VARCHAR(30),
                                        IN pi_date2 VARCHAR(30))
BEGIN
	DROP TEMPORARY TABLE IF EXISTS main;
	CREATE TEMPORARY TABLE  `main` (
		`Company` varchar(100) NULL default '',
		`CompanyName` varchar(300) NULL default '',
		`CompanyType` varchar(300) NULL default '',
		`Branch` varchar(100) NULL default '',
		`BranchName` varchar(300) NULL default '',
		`date1` DATE NULL,
		`date2` DATE NULL,
		`u_date_from` DATE NULL,
		`u_time_from` TIME NULL,
		`u_shift` varchar(100) NULL default '',
		`Shift1` varchar(100) NULL default '',
		`Shift2` varchar(100) NULL default '',
		`Biodiesel_volume` NUMERIC(18,6) NOT NULL default '0',
		`Premium_volume` NUMERIC(18,6) NOT NULL default '0',
		`Unleaded_volume` NUMERIC(18,6) NOT NULL default '0',
		`Regular_volume` NUMERIC(18,6) NOT NULL default '0',
		`Kerosene_volume` NUMERIC(18,6) NOT NULL default '0',
		`Biodiesel_unitPrice` NUMERIC(18,6) NOT NULL default '0',
		`Premium_unitPrice` NUMERIC(18,6) NOT NULL default '0',
		`Unleaded_unitPrice` NUMERIC(18,6) NOT NULL default '0',
		`Regular_unitPrice` NUMERIC(18,6) NOT NULL default '0',
		`Kerosene_unitPrice` NUMERIC(18,6) NOT NULL default '0',
		`Biodiesel_amount` NUMERIC(18,6) NOT NULL default '0',
		`Premium_amount` NUMERIC(18,6) NOT NULL default '0',
		`Unleaded_amount` NUMERIC(18,6) NOT NULL default '0',
		`Regular_amount` NUMERIC(18,6) NOT NULL default '0',
		`Kerosene_amount` NUMERIC(18,6) NOT NULL default '0',
		`TotalLiters` NUMERIC(18,6) NOT NULL default '0',
		`TotalSales` NUMERIC(18,6) NOT NULL default '0',
		`Revenue` NUMERIC(18,6) NOT NULL default '0',
		`FuelSales` NUMERIC(18,6) NOT NULL default '0',
		`EarlyReg` NUMERIC(18,6) NOT NULL default '0',
		`StationReceivables` NUMERIC(18,6) NOT NULL default '0',
		`Discount` NUMERIC(18,6) NOT NULL default '0',
		`CashWithdrawals` NUMERIC(18,6) NOT NULL default '0',
		`CashonHand` NUMERIC(18,6) NOT NULL default '0',
		`CashOverShort` NUMERIC(18,6) NOT NULL default '0',
		dsr_time_from time
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;
	INSERT INTO main (Company,
		CompanyName,
		CompanyType,
		Branch,
		BranchName,
		date1,
		date2,
		u_date_from,
		u_time_from,
		u_shift,
		Shift1,
		Shift2,
		Biodiesel_volume,
		Premium_volume,
		Unleaded_volume,
		Regular_volume,
		Kerosene_volume,
		Biodiesel_unitPrice,
		Premium_unitPrice,
		Unleaded_unitPrice,
		Regular_unitPrice,
		Kerosene_unitPrice,
		Biodiesel_amount,
		Premium_amount,
		Unleaded_amount,
		Regular_amount,
		Kerosene_amount,
		TotalLiters,
		TotalSales,
		Revenue,
		FuelSales,
		EarlyReg,
		StationReceivables,
		Discount,
		CashWithdrawals,
		CashonHand,
		CashOverShort,
		dsr_time_from)
	Select
		a.Company,
		upper(co.companyname) as CompanyName,
		upper(concat('(',co.companytype, ' Group)')) as CompanyType,
		a.Branch,
		upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
		date(pi_date1) as date1,
		date(pi_date2) as date2,
		b.u_date_from,
		b.u_time_from,
		b.u_shift,
		if(b.u_shift like '1%', 'X', '') as Shift1,
		if(b.u_shift like '2%', 'X', '') as Shift2,
		if(a.u_itemcode = 'W0001', sum(a.u_sold_liters), 0) as 'Biodiesel_volume',
		if(a.u_itemcode = 'W0002', sum(a.u_sold_liters), 0) as 'Premium_volume',
		if(a.u_itemcode = 'W0003', sum(a.u_sold_liters), 0) as 'Unleaded_volume',
		if(a.u_itemcode = 'W0004', sum(a.u_sold_liters), 0) as 'Regular_volume',
		if(a.u_itemcode = 'W0005', sum(a.u_sold_liters), 0) as 'Kerosene_volume',
		if(a.u_itemcode = 'W0001', a.u_price, 0) as 'Biodiesel_unitPrice',
		if(a.u_itemcode = 'W0002', a.u_price, 0) as 'Premium_unitPrice',
		if(a.u_itemcode = 'W0003', a.u_price, 0) as 'Unleaded_unitPrice',
		if(a.u_itemcode = 'W0004', a.u_price, 0) as 'Regular_unitPrice',
		if(a.u_itemcode = 'W0005', a.u_price, 0) as 'Kerosene_unitPrice',
		if(a.u_itemcode = 'W0001', sum(a.u_total), 0) as 'Biodiesel_amount',
		if(a.u_itemcode = 'W0002', sum(a.u_total), 0) as 'Premium_amount',
		if(a.u_itemcode = 'W0003', sum(a.u_total), 0) as 'Unleaded_amount',
		if(a.u_itemcode = 'W0004', sum(a.u_total), 0) as 'Regular_amount',
		if(a.u_itemcode = 'W0005', sum(a.u_total), 0) as 'Kerosene_amount',
		b.U_QTY_SOLD_DIGITAL as TotalLiters,
		b.U_TOTAL_SALES_DIGITAL as TotalSales,
		b.U_REVENUE_ADJ_PO_AMOUNT as Revenue,
		b.U_TOTAL_FUEL_SALES as FuelSales,
		b.U_EARLY_REG_AMOUNT as EarlyReg,
		b.U_CHARGE_SALES as StationReceivables,
		b.U_DISC_AMOUNT as Discount,
		b.U_CASH_WITHDRAWALS as CashWithdrawals,
		b.U_TOTAL_CASHCOUNT as CashonHand,
		b.U_TOTAL_CASHVARIANCE as CashOverShort,
		b.u_time_from
		from u_dailyshiftsalesreadings a
		left outer join u_dailyshiftsales b on a.company = b.company and a.branch = b.branch and a.docid = b.docid
											and b.U_DFLTREADINGTYPE = a.u_readingtype
		left outer join items i on a.u_itemcode = i.itemcode
		left outer join branches br ON a.BRANCH = br.BRANCHCODE
		left outer join companies co on a.company = co.companycode
	where a.company = pi_company and a.branch = pi_branch
			and b.u_date_from between pi_date1 and pi_date2
	group by b.u_date_from, b.u_time_from, b.u_shift, a.u_itemcode;
	Select
		Company,
		CompanyName,
		CompanyType,
		Branch,
		BranchName,
		date1,
		date2,
		u_date_from,
		Shift1,
		Shift2,
		sum(Biodiesel_volume) as Biodiesel_volume,
		sum(Biodiesel_amount)/sum(Biodiesel_volume) as Biodiesel_unitPrice,
		sum(Biodiesel_amount) as Biodiesel_amount,
		sum(Premium_volume) as Premium_volume,
		sum(Premium_amount)/sum(Premium_volume) as Premium_unitPrice,
		sum(Premium_amount) as Premium_amount,
		sum(Unleaded_volume) as Unleaded_volume,
		sum(Unleaded_amount)/sum(Unleaded_volume) as Unleaded_unitPrice,
		sum(Unleaded_amount) as Unleaded_amount,
		sum(Regular_volume) as Regular_volume,
		sum(Regular_amount)/sum(Regular_volume) as Regular_unitPrice,
		sum(Regular_amount) as Regular_amount,
		sum(Kerosene_volume) as Kerosene_volume,
		sum(Kerosene_amount)/sum(Kerosene_volume) as Kerosene_unitPrice,
		sum(Kerosene_amount) as Kerosene_amount,
		TotalLiters,
		TotalSales,
		Revenue,
		FuelSales,
		EarlyReg,
		StationReceivables,
		Discount,
		CashWithdrawals,
		CashonHand,
		CashOverShort,
		dsr_time_from
		From main
	group by u_date_from, u_time_from, u_shift;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_tracking`
--

DROP PROCEDURE IF EXISTS `sales_tracking`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_tracking`(
	IN pi_company varchar(30),
	IN pi_branch varchar(30),
	IN pi_customer varchar(30),
	IN pi_custgroup varchar(30),
	IN pi_date_fr varchar(30),
	IN pi_date_to varchar(30))
BEGIN
	
	DROP TEMPORARY TABLE IF EXISTS tmp_cm;
	CREATE TEMPORARY TABLE tmp_cm(ar_docno varchar(30) null default '') ENGINE=InnoDB DEFAULT CHARSET=latin1;
	INSERT INTO tmp_cm() SELECT basedocno FROM arcreditmemoitems WHERE basedocno <> '' OR basedocno IS NOT NULL;
	
	SELECT so.Company,
		UPPER(co.companyname) AS CompanyName,
		UPPER(CONCAT('(', co.companytype, ' Group)')) AS CompanyType,
		so.Branch, UPPER(br.branchname) AS BranchName,
		IFNULL(cg.groupname, '') AS 'custgroup_name',
		so.docno AS 'sodocno', so.docdate AS 'sodocdate', so.bpcode AS 'sobpcode',
		so.bpname AS 'sobpname', soi.itemcode AS 'soitemcode', soi.itemdesc AS 'soitemdesc',
		soi.quantity AS 'soquantity', 
		
		IFNULL(ar.docno, '') AS 'ardocno', IFNULL(ar.docdate, CURDATE()) AS 'ardocdate', 
		IFNULL(ar.docstatus, '') AS 'arstatus', IFNULL(ari.itemdesc, '') AS 'aritemdesc',
		IFNULL(ari.quantity, 0) AS 'arquantity', IFNULL(ari.basedocid, 0) AS 'arbasedocid', 
		IFNULL(ari.baselineid, 0) AS 'arbaselined', IFNULL(ari.basedocno, '') AS 'arbasedocno'
		
	FROM salesorders so
		LEFT JOIN salesorderitems soi ON so.docid=soi.docid AND so.branch=soi.branch AND so.company=soi.company
		LEFT JOIN arinvoiceitems ari ON soi.company=ari.company AND soi.branch=ari.branch 
			AND soi.docid=ari.basedocid AND soi.lineid=ari.baselineid AND soi.itemcode=ari.itemcode	
			LEFT JOIN items AS i ON ari.itemcode = i.itemcode
		LEFT JOIN arinvoices ar ON ari.docid = ar.docid AND ari.branch = ar.branch AND ari.company = ar.company
		LEFT JOIN customers c ON so.company = c.company AND so.bpcode = c.custno
		LEFT JOIN customergroups AS cg ON c.custgroup = cg.custgroup
		LEFT JOIN branches br ON so.branch = br.branchcode
		LEFT JOIN companies co ON so.company = co.companycode
	WHERE i.itemgroup = 2
		AND	so.docstatus IN ('O', 'C') 
		AND ar.docno NOT IN (SELECT ar_docno FROM tmp_cm)
		AND so.company = pi_company AND so.branch = 'ho' 
		AND (so.docdate BETWEEN pi_date_fr AND pi_date_to) 
		AND ((pi_customer = '') OR (pi_customer <> '' AND pi_customer = so.bpcode))
		AND ((pi_custgroup = '') or (pi_custgroup <> '' AND pi_custgroup = c.custgroup))
		
		
	ORDER BY so.docno, so.docdate, ar.docno, ari.baselineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sales_tracking_inedit_ko`
--

DROP PROCEDURE IF EXISTS `sales_tracking_inedit_ko`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sales_tracking_inedit_ko`(
	IN pi_company VARCHAR(30),
	IN pi_branch VARCHAR(30),
	IN pi_customer VARCHAR(30),
	IN pi_custgroup VARCHAR(30),
	IN pi_date1 VARCHAR(30),
	IN pi_date2 VARCHAR(30))
BEGIN
	DROP TEMPORARY TABLE IF EXISTS itemref;
	CREATE TEMPORARY TABLE itemref(itemcode varchar(30) null default '') ENGINE=InnoDB DEFAULT CHARSET=latin1;
	INSERT INTO itemref() SELECT itemcode FROM items WHERE itemgroup = 2;

	SELECT so.Company,
		UPPER(co.companyname) AS CompanyName,
		UPPER(CONCAT('(', co.companytype, ' Group)')) AS CompanyType,
		so.Branch, UPPER(CONCAT(so.BRANCH,' - ',br.BRANCHNAME)) AS BranchName,
		so.docno AS 'sodocno', so.docdate AS 'sodocdate', so.bpcode AS 'sobpcode',
		so.bpname AS 'sobpname', soi.itemcode AS 'soitemcode', soi.itemdesc AS 'soitemdesc',
		soi.quantity AS 'soquantity',soi.openquantity AS 'soopenquantity',
		IF((soi.quantity - IF(ari.quantity IS NULL, 0, ari.quantity)) < 0, 0, (soi.quantity - IF(ari.quantity IS NULL, 0, ari.quantity))) AS 'balancevolume',
		IFNULL(ar.docno, '') AS 'ardocno', IFNULL(ar.docdate, CURDATE()) AS 'ardocdate', 
		IFNULL(ar.docstatus, '') AS 'arstatus', IFNULL(ari.itemdesc, '') AS 'aritemdesc',
		IFNULL(ari.quantity, 0) AS 'arquantity', IFNULL(ari.basedocid, 0) AS 'arbasedocid', 
		IFNULL(ari.baselineid, 0) AS 'arbaselined', IFNULL(ari.basedocno, '') AS 'arbasedocno', 
		c.custgroup, DATE(pi_date1) AS 'DATE1', DATE(pi_date2) AS 'DATE2'
	FROM salesorders so
		LEFT JOIN salesorderitems soi ON so.docid=soi.docid AND so.branch=soi.branch AND so.company=soi.company
		LEFT JOIN arinvoiceitems ari ON soi.company=ari.company AND soi.branch=ari.branch 
			AND soi.docid=ari.basedocid AND soi.lineid=ari.baselineid AND soi.itemcode=ari.itemcode			
		LEFT JOIN arinvoices ar ON ari.docid = ar.docid AND ari.branch = ar.branch AND ari.company = ar.company
		LEFT JOIN arcreditmemoitems AS arcmi 
			ON ari.company = arcmi.company AND ari.branch = arcmi.branch AND ar.docno = arcmi.basedocno
				AND ari.itemcode = arcmi.itemcode
		LEFT JOIN customers c ON so.company = c.company AND so.bpcode = c.custno
		LEFT JOIN branches br ON so.branch = br.branchcode
		LEFT JOIN companies co ON so.company = co.companycode
	WHERE so.company=pi_company AND so.branch=pi_branch 
		AND	so.docstatus IN ('O','C') 
		AND (so.docdate BETWEEN pi_date1 AND pi_date2) 
		AND ((pi_customer = '') OR (pi_customer <> '' AND pi_customer = so.bpcode))
		AND soi.itemcode IN (SELECT i.itemcode FROM itemref i) 
		AND ((pi_custgroup = '') or (pi_custgroup <> '' AND pi_custgroup = c.custgroup))
		AND (arcmi.basedocno = '' OR arcmi.basedocno IS NULL)
	ORDER BY so.docno, so.docdate, ar.docno, ari.baselineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `soa`
--

DROP PROCEDURE IF EXISTS `soa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `soa`(IN pi_company VARCHAR(30),
                       IN pi_branch VARCHAR(30),
                       IN bpcode VARCHAR(10),
                       IN pi_date1 VARCHAR(10),
                       IN pi_date2 VARCHAR(10))
BEGIN
  DECLARE v_advms DATE;
  DECLARE v_advme DATE;
  DECLARE v_30ms DATE;
  DECLARE v_60ms DATE;
  DECLARE v_90ms DATE;
  DECLARE v_30me DATE;
  DECLARE v_60me DATE;
  DECLARE v_90me DATE;
  DECLARE v_MONTH_END INT;

  SET v_30ms = date(concat(substring(pi_date2,1,7),'-01'));
  SET v_advms = v_30ms + interval 1 month;
  SET v_60ms = v_30ms - interval 1 month;
  SET v_90ms = v_30ms - interval 2 month;
  SET v_30me = date(pi_date2);
  SET v_advme = last_day(v_30me + interval 1 month);
  SET v_60me = last_day(v_30me - interval 1 month);
  SET v_90me = last_day(v_30me - interval 2 month);
  SET v_MONTH_END = concat('-',substring(v_60me,9,2)+1);

DROP TEMPORARY TABLE IF EXISTS `pdcpayments`;
CREATE TEMPORARY TABLE  `pdcpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `ACCTNO` varchar(30) NULL default '',
    `PDCAMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO pdcpayments (COMPANY,BRANCH,ACCTNO,PDCAMOUNT)
      SELECT a.company,a.branch,a.refno, sum(a.rebate + a.amount) as pdcamount
        from collectionsinvoices a, collectionscheques b, collections c
        where b.company = a.company and b.branch = a.branch
        and b.docno = a.docno
        and b.company = c.company
        and b.branch = c.branchcode
        and b.docno = c.docno
        and c.pdc=1
        and a.company = pi_company and a.branch = pi_branch
        and b.checkdate >= pi_date2
        and (bpcode='' or (bpcode<>'' AND c.CUSTNO = bpcode))
        group by a.refno;

DROP TEMPORARY TABLE IF EXISTS `balances`;
CREATE TEMPORARY TABLE  `balances` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date2
        and (c.docdate <= pi_date2)
        and (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
        group by a.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date2
        and (c.docdate <= pi_date2)
        and (bpcode='' or (bpcode<>'' AND d.ITEMNO = bpcode))
        group by d.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date2
        and (c.docdate <= pi_date2)
        and (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
        group by a.DOCNO;

DROP TEMPORARY TABLE IF EXISTS `journalpayments`;
CREATE TEMPORARY TABLE  `journalpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date2
        and c.docdate <= pi_date2
        and (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
        group by a.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date2
        and c.docdate <= pi_date2
        and (bpcode='' or (bpcode<>'' AND d.ITEMNO = bpcode))
        group by d.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.debit - b.credit) as BALANCE, c.DOCDATE
        from arcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date2
        and c.docdate <= pi_date2
        and (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
        group by a.DOCNO;

DROP TEMPORARY TABLE IF EXISTS `sale_return`;
CREATE TEMPORARY TABLE  `sale_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sale_return (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
       SELECT a.company,a.branch,a.docno, sum(b.BASEAMOUNT), b.DOCDATE
        from arinvoices a, arcreditmemos b
        where b.company = a.company
        and b.branch = a.branch
        and (b.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date2
        and b.docdate <= pi_date2
        and (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
        group by a.DOCNO;

DROP TEMPORARY TABLE IF EXISTS `adv`;
CREATE TEMPORARY TABLE  `adv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date2
        and (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
        group by a.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype=''
        and c.valuedate > pi_date2
        and (bpcode='' or (bpcode<>'' AND d.ITEMNO = bpcode))
        group by d.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date2
        and (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
        group by a.DOCNO;

DROP TEMPORARY TABLE IF EXISTS `advjv`;
CREATE TEMPORARY TABLE  `advjv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date2
        and (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
        group by a.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype=''
        and c.docdate > pi_date2
        and (bpcode='' or (bpcode<>'' AND d.ITEMNO = bpcode))
        group by d.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date2
        and (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
        group by a.DOCNO;

DROP TEMPORARY TABLE IF EXISTS `adv_sales_return`;
CREATE TEMPORARY TABLE  `adv_sales_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv_sales_return (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
       SELECT a.company,a.branch,a.docno, sum(0 - b.BASEAMOUNT), b.DOCDATE
        from arinvoices a, arcreditmemos b
        where b.company = a.company
        and b.branch = a.branch
        and (b.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date2
        and b.docdate > pi_date2
        and (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
        group by a.DOCNO;

DROP TEMPORARY TABLE IF EXISTS `concatfield`;
CREATE TEMPORARY TABLE  `concatfield` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `advpay` NUMERIC(18,6) NULL default '0',
    `amount` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `next_months` NUMERIC(18,6) NULL default '0',
    `D7` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,amount,current,next_months,D7,D15,D30)
    SELECT arinvoices.COMPANY, arinvoices.BRANCH, arinvoices.DOCNO,
        (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,


        arinvoices.totalamount,


        case when datediff(pi_date2, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) = 0
        then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'current',


        case when datediff(pi_date2, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) < 0
        then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'next',


        case when datediff(pi_date2, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D7',


        case when datediff(pi_date2, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D15',


        case when datediff(pi_date2, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        >= 31 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D30'


        FROM arinvoices
        LEFT OUTER JOIN departments on if(arinvoices.saletype = '', arinvoices.department = departments.department, arinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arinvoices.COMPANY = balances.COMPANY AND arinvoices.BRANCH = balances.BRANCH AND arinvoices.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arinvoices.COMPANY = journalpayments.COMPANY AND arinvoices.BRANCH = journalpayments.BRANCH AND arinvoices.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arinvoices.COMPANY = adv.COMPANY AND arinvoices.BRANCH = adv.BRANCH AND arinvoices.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arinvoices.COMPANY = advjv.COMPANY AND arinvoices.BRANCH = advjv.BRANCH AND arinvoices.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON arinvoices.COMPANY = sale_return.COMPANY AND arinvoices.BRANCH = sale_return.BRANCH AND arinvoices.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON arinvoices.COMPANY = adv_sales_return.COMPANY AND arinvoices.BRANCH = adv_sales_return.BRANCH AND arinvoices.DOCNO = adv_sales_return.DOCNO
        WHERE arinvoices.trxtype<>'POS' and arinvoices.accttype='' and arinvoices.docdate <= pi_date2
        AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        AND (bpcode='' or (bpcode<>'' AND arinvoices.BPCODE = bpcode))
        GROUP BY arinvoices.DOCNO
        ORDER BY arinvoices.docno ASC;


INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,amount,current,next_months,D7,D15,D30)
    SELECT journalvoucheritems.COMPANY, journalvoucheritems.BRANCH, journalvoucheritems.DOCNO,
        (journalvoucheritems.grossamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,


        journalvoucheritems.grossamount,


        case when datediff(pi_date2, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) = 0
        then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'current',


        case when datediff(pi_date2, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) < 0
        then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'next',


        case when datediff(pi_date2, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D7',


        case when datediff(pi_date2, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D15',


        case when datediff(pi_date2, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        >= 31 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D30'


        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date2
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvoucheritems.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON journalvouchers.COMPANY = balances.COMPANY AND journalvouchers.BRANCH = balances.BRANCH AND journalvoucheritems.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON journalvouchers.COMPANY = journalpayments.COMPANY AND journalvouchers.BRANCH = journalpayments.BRANCH AND journalvoucheritems.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON journalvouchers.COMPANY = adv.COMPANY AND journalvouchers.BRANCH = adv.BRANCH AND journalvoucheritems.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON journalvouchers.COMPANY = advjv.COMPANY AND journalvouchers.BRANCH = advjv.BRANCH AND journalvoucheritems.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON journalvouchers.COMPANY = sale_return.COMPANY AND journalvouchers.BRANCH = sale_return.BRANCH AND journalvoucheritems.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON journalvouchers.COMPANY = adv_sales_return.COMPANY AND journalvouchers.BRANCH = adv_sales_return.BRANCH AND journalvoucheritems.DOCNO = adv_sales_return.DOCNO
        WHERE journalvoucheritems.itemtype = 'C'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
          AND (bpcode='' or (bpcode<>'' AND journalvoucheritems.ITEMNO = bpcode))
        GROUP BY journalvoucheritems.DOCNO
        ORDER BY journalvoucheritems.DOCNO ASC;

INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,amount,current,next_months,D7,D15,D30)
    SELECT arcreditmemos.COMPANY, arcreditmemos.BRANCH, arcreditmemos.DOCNO,
        (arcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,


        arcreditmemos.totalamount,


        case when datediff(pi_date2, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) = 0
        then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'current',


        case when datediff(pi_date2, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) < 0
        then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'next',


        case when datediff(pi_date2, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D7',


        case when datediff(pi_date2, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D15',


        case when datediff(pi_date2, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        >= 31 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end as 'D30'


        FROM arcreditmemos
        LEFT OUTER JOIN departments on if(arcreditmemos.saletype = '', arcreditmemos.department = departments.department, arcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arcreditmemos.COMPANY = pdcpayments.COMPANY AND arcreditmemos.BRANCH = pdcpayments.BRANCH AND arcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arcreditmemos.COMPANY = balances.COMPANY AND arcreditmemos.BRANCH = balances.BRANCH AND arcreditmemos.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arcreditmemos.COMPANY = journalpayments.COMPANY AND arcreditmemos.BRANCH = journalpayments.BRANCH AND arcreditmemos.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arcreditmemos.COMPANY = adv.COMPANY AND arcreditmemos.BRANCH = adv.BRANCH AND arcreditmemos.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arcreditmemos.COMPANY = advjv.COMPANY AND arcreditmemos.BRANCH = advjv.BRANCH AND arcreditmemos.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON arcreditmemos.COMPANY = sale_return.COMPANY AND arcreditmemos.BRANCH = sale_return.BRANCH AND arcreditmemos.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON arcreditmemos.COMPANY = adv_sales_return.COMPANY AND arcreditmemos.BRANCH = adv_sales_return.BRANCH AND arcreditmemos.DOCNO = adv_sales_return.DOCNO
        WHERE arcreditmemos.totalamount > 0 AND arcreditmemos.accttype = ''
        AND arcreditmemos.docdate <= pi_date2
        AND arcreditmemos.COMPANY = pi_company AND arcreditmemos.BRANCH = pi_branch
        AND (bpcode='' or (bpcode<>'' AND arcreditmemos.BPCODE = bpcode))
        GROUP BY arcreditmemos.DOCNO
        ORDER BY arcreditmemos.docno ASC;

DROP TEMPORARY TABLE IF EXISTS `mainfield`;
CREATE TEMPORARY TABLE  `mainfield` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `BRANCHNAME` varchar(100) NULL default '',
    `BPCODE` varchar(100) NULL default '',
    `BPNAME` varchar(500) NULL default '',
    `BILLTOADDRESS` varchar(1000) NULL default '',
    `ITEMCODE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `DOCDUEDATE` DATE NULL,
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `aging` NUMERIC(18,6) NULL default '0',
    `fisrtmonth` DATE NULL,
    `secondndmonth` DATE NULL,
    `thirdmonth` DATE NULL,
    `advpay` NUMERIC(18,6) NULL default '0',
    `amount` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `next_months` NUMERIC(18,6) NULL default '0',
    `D7` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0',
    `PDC` NUMERIC(18,6) NULL default '0',
    `cname` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,amount,current,next_months,D7,D15,D30,UP30,
    PDC,cname)
    SELECT arinvoices.COMPANY,
        arinvoices.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        arinvoices.BPCODE,
        arinvoices.BPNAME,
        arinvoices.BILLTOADDRESS,
        arinvoiceitems.ITEMCODE,
        arinvoices.DOCNO,
        date(if(arinvoices.DOCDUEDATE is null, now(), arinvoices.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date2, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date2) - interval 0 month as 1month,
        date(pi_date2) - interval 1 month as 2month,
        date(pi_date2) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.amount,
        concatfield.current,
        concatfield.next_months,
        concatfield.D7 as '7',
        concatfield.D15 as '15',
        concatfield.D30 as '30',
        concatfield.UP30 as 'UP30',
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname
        FROM arinvoices
        LEFT OUTER JOIN branches ON arinvoices.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN arinvoiceitems ON arinvoices.BRANCH = arinvoiceitems.BRANCH AND arinvoices.COMPANY = arinvoiceitems.COMPANY AND arinvoices.DOCID = arinvoiceitems.DOCID
        LEFT OUTER JOIN companies on arinvoices.company = companies.companycode
        LEFT OUTER JOIN departments on if(arinvoices.saletype = '', arinvoices.department = departments.department, arinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arinvoices.COMPANY = concatfield.COMPANY AND arinvoices.BRANCH = concatfield.BRANCH
                        AND arinvoices.DOCNO = concatfield.DOCNO
        WHERE arinvoices.trxtype<>'POS' and arinvoices.accttype='' and arinvoices.docdate <= pi_date2
        AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        AND (bpcode='' or (bpcode<>'' AND arinvoices.BPCODE = bpcode))
        GROUP BY arinvoices.DOCNO, branches.BRANCHNAME
        ORDER BY arinvoices.docno ASC;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,amount,current,next_months,D7,D15,D30,UP30,
    PDC,cname)
    SELECT arcreditmemos.COMPANY,
        arcreditmemos.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        arcreditmemos.BPCODE,
        arcreditmemos.BPNAME,
        arcreditmemos.BILLTOADDRESS,
        arcreditmemoitems.ITEMCODE,
        arcreditmemos.DOCNO,
        date(if(arcreditmemos.DOCDUEDATE is null, now(), arcreditmemos.DOCDUEDATE)) as DOCDUEDATE,
        0-(concatfield.DUEAMOUNT),
        datediff(pi_date2, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date2) - interval 0 month as 1month,
        date(pi_date2) - interval 1 month as 2month,
        date(pi_date2) - interval 2 month as 3month,
        0-(concatfield.advpay),
        0-(concatfield.amount),
        0-(concatfield.current),
        0-(concatfield.next_months),
        0-(concatfield.D7) as '7',
        0-(concatfield.D15) as '15',
        0-(concatfield.D30) as '30',
        0-(concatfield.UP30) as 'UP30',
        0-(if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount)) AS 'PDC',
        upper(companies.companyname) as cname
        FROM arcreditmemos
        LEFT OUTER JOIN branches ON arcreditmemos.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN arcreditmemoitems ON arcreditmemos.BRANCH = arcreditmemoitems.BRANCH AND arcreditmemos.COMPANY = arcreditmemoitems.COMPANY AND arcreditmemos.DOCID = arcreditmemoitems.DOCID
        LEFT OUTER JOIN companies on arcreditmemos.company = companies.companycode
        LEFT OUTER JOIN departments on if(arcreditmemos.saletype = '', arcreditmemos.department = departments.department, arcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arcreditmemos.COMPANY = pdcpayments.COMPANY AND arcreditmemos.BRANCH = pdcpayments.BRANCH AND arcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arcreditmemos.COMPANY = concatfield.COMPANY AND arcreditmemos.BRANCH = concatfield.BRANCH
                        AND arcreditmemos.DOCNO = concatfield.DOCNO
        WHERE arcreditmemos.totalamount > 0 AND arcreditmemos.accttype = ''
        AND arcreditmemos.docdate <= pi_date2
        AND arcreditmemos.COMPANY = pi_company AND arcreditmemos.BRANCH = pi_branch
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        AND (bpcode='' or (bpcode<>'' AND arcreditmemos.BPCODE = bpcode))
        GROUP BY arcreditmemos.DOCNO, branches.BRANCHNAME
        ORDER BY arcreditmemos.docno ASC;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,amount,current,next_months,D7,D15,D30,UP30,
    PDC,cname)
    SELECT journalvouchers.COMPANY,
        journalvouchers.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        journalvoucheritems.itemno as BPCODE,
        journalvoucheritems.itemname as BPNAME,
        '' as BILLTOADDRESS,
        '' as ITEMCODE,
        journalvoucheritems.DOCNO,
        date(if(journalvouchers.DOCDUEDATE is null, now(), journalvouchers.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date2, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date2) - interval 0 month as 1month,
        date(pi_date2) - interval 1 month as 2month,
        date(pi_date2) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.amount,
        concatfield.current,
        concatfield.next_months,
        concatfield.D7 as '7',
        concatfield.D15 as '15',
        concatfield.D30 as '30',
        concatfield.UP30 as 'UP30',
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date2
        LEFT OUTER JOIN branches ON journalvouchers.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on journalvouchers.company = companies.companycode
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvouchers.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON journalvouchers.COMPANY = concatfield.COMPANY AND journalvouchers.BRANCH = concatfield.BRANCH
                        AND journalvoucheritems.DOCNO = concatfield.DOCNO
        WHERE journalvoucheritems.itemtype = 'C'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
        and (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        AND (bpcode='' or (bpcode<>'' AND journalvoucheritems.itemno = bpcode))
        GROUP BY journalvoucheritems.DOCNO, branches.BRANCHNAME
        ORDER BY journalvoucheritems.docno ASC;


  SELECT
    a.COMPANY,
    a.BRANCH,
    a.cname as COMPANY_NAME,
    a.BRANCHNAME as BRANCH_NAME,

    upper(concat(if(e.BARANGAY is null or e.BARANGAY = '','' , concat(e.BARANGAY,', '))
                 , if(e.STREET is null or e.STREET = '','' , concat(e.STREET,', '))
                 , if(e.ZIP is null or e.ZIP = '','' , concat(e.ZIP,', '))
                 , if(e.CITY is null or e.CITY = '','' , concat(e.CITY,', '))
                 , if(pro.PROVINCENAME is null or pro.PROVINCENAME = '','' , concat(pro.PROVINCENAME,', '))
                 , if(ctx.COUNTRYNAME is null or ctx.COUNTRYNAME = '','' , ctx.COUNTRYNAME))) as COMPANY_ADDRESS,
    '' as COMPANY_CONTACTS,

    date(pi_date1) as DATE1,
    date(pi_date2) as DATE2,
    a.BPCODE,
    a.BPNAME,

    (select upper(concat(if(ax.BARANGAY is null or ax.BARANGAY = '','' , concat(ax.BARANGAY,', '))
                 , if(ax.STREET is null or ax.STREET = '','' , concat(ax.STREET,', '))
                 , if(ax.ZIP is null or ax.ZIP = '','' , concat(ax.ZIP,', '))
                 , if(ax.CITY is null or ax.CITY = '','' , concat(ax.CITY,', '))
                 , if(ax3.PROVINCENAME is null or ax3.PROVINCENAME = '','' , concat(ax3.PROVINCENAME,', '))
                 , if(ax2.COUNTRYNAME is null or ax2.COUNTRYNAME = '','' , ax2.COUNTRYNAME)))
           from addresses ax
                LEFT OUTER JOIN countries ax2 on ax.country = ax2.country
                LEFT OUTER JOIN provinces ax3 on ax.province = ax3.province
     where ax.refid = a.BPCODE and ax.reftype = 'CUSTOMER' and ax.addresstype = 0 limit 1) as BP_ADDRESS,

    (select upper(concat(if(salutation is null or salutation = '','' , concat(salutation,' ')), name))
            from customercontacts where custno = a.BPCODE limit 1) as BP_CONTACTS,

    pt.paymenttermNAME as TERM,
    ct.CREDITLIMIT as CREDITLIMIT,
    a.DOCDUEDATE,
    a.DOCNO,
    a.amount as AMOUNT,
    a.amount - a.DUEAMOUNT as PAYMENT,
    a.DUEAMOUNT as OUTSTANDING_BALANCE,
    a.current as CURRENT,
    a.next_months as NEXT_MONTHS,
    a.D7 as '1-15',
    a.D15 as '16-30',
    a.D30 as 'OVER30'

  FROM mainfield a
       LEFT OUTER JOIN customers ct ON ct.custno = a.BPCODE
       LEFT OUTER JOIN paymentterms pt ON pt.paymentterm = ct.paymentterm
       LEFT OUTER JOIN branches e on e.BRANCHCODE = pi_branch
       LEFT OUTER JOIN countries ctx on e.country = ctx.country
       LEFT OUTER JOIN provinces pro on e.province = pro.province

  WHERE (bpcode='' or (bpcode<>'' AND a.BPCODE = bpcode))
  ORDER BY a.DOCDUEDATE, a.DOCNO;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `so_readiness_sp`
--

DROP PROCEDURE IF EXISTS `so_readiness_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `so_readiness_sp`(IN pi_so_from VARCHAR(100), IN pi_so_to VARCHAR(100), IN pi_date_from DATE, IN pi_date_to DATE, IN pi_detail VARCHAR(10))
BEGIN

DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_so_from VARCHAR(100);
DECLARE v_so_to VARCHAR(100);

DECLARE v_company VARCHAR(100);
DECLARE v_branch VARCHAR(100);
DECLARE v_docdate DATE;
DECLARE v_docno VARCHAR(100);
DECLARE v_curdocno VARCHAR(100);
DECLARE v_bpcode VARCHAR(100);
DECLARE v_bpname VARCHAR(200);
DECLARE v_shipmode VARCHAR(100);
DECLARE v_itemcode VARCHAR(100);
DECLARE v_price NUMERIC(20,6);
DECLARE v_openqty NUMERIC(20,6);
DECLARE v_itemvolume NUMERIC(20,6);
DECLARE v_lineid NUMERIC(20,0);
DECLARE V_po_duedate2 DATE;

DECLARE v_totalvolume NUMERIC(20,6);
DECLARE v_totalqty NUMERIC(20,6);
DECLARE v_instockqty NUMERIC(20,6);
DECLARE v_short NUMERIC(20,6);
DECLARE v_shorttrue INT;
DECLARE Done INT DEFAULT 0;
DECLARE v_po_openqty NUMERIC(20,6);
DECLARE v_po_docno VARCHAR(100);
DECLARE V_po_duedate DATE;
DECLARE v_curtime TIME;
DECLARE v_curdate DATE;
DECLARE v_totalamount NUMERIC(20,6);


  DECLARE docno_cur CURSOR FOR
    SELECT salesorders.COMPANY, salesorders.BRANCH, salesorders.DOCNO
    FROM salesorders
   WHERE ( salesorders.DOCSTATUS = 'O' ) and
         ( salesorders.DOCDATE <= v_date_to ) and
         ( salesorders.DOCNO >= v_so_from ) and
         ( salesorders.DOCNO <= v_so_to )
   ORDER BY salesorders.DOCNO;

  DECLARE detail_cur CURSOR FOR
      SELECT salesorders.DOCNO,
             salesorders.DOCDATE,
             salesorders.BPCODE,
             salesorders.BPNAME,
             salesorders.U_U_SHIPMODE,
             salesorderitems.ITEMCODE,
             salesorderitems.LINEID,
             salesorderitems.PRICE,
             salesorderitems.u_u_itemvolume,
             salesorderitems.OPENQUANTITY
        FROM salesorders,
             salesorderitems
       WHERE ( salesorders.COMPANY = salesorderitems.COMPANY ) and
             ( salesorders.BRANCH = salesorderitems.BRANCH ) and
             ( salesorders.DOCID = salesorderitems.DOCID )  and
             ( salesorders.COMPANY = v_company ) AND
             ( salesorders.BRANCH = v_branch ) AND
             ( salesorders.DOCNO = v_docno )AND
             ( salesorderitems.OPENQUANTITY > 0);

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET Done = 1 ;

  SET v_curdate = CURDATE();
  SET v_curtime = Now();
   
  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;

  IF pi_so_from is null or LENGTH(pi_so_from) = 0 THEN SET v_so_from = '';
  ELSE SET v_so_from = pi_so_from;
  END IF;

  IF pi_so_to is null  or LENGTH(pi_so_to) = 0 THEN SET v_so_to = '';
  ELSE SET v_so_to = pi_so_to;
  END IF;

  IF v_so_from <> '' and v_so_to = '' THEN
    SET v_so_to = v_so_from;
  END IF;

  IF v_so_from = '' and v_so_to <> '' THEN
    SET v_so_from = v_so_to;
  END IF;

  IF v_so_from = '' and v_so_to = '' THEN
    SET v_so_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;

  set v_lineid = 0;
  DROP TEMPORARY TABLE IF EXISTS so_readiness ;
   CREATE TEMPORARY TABLE IF NOT EXISTS `so_readiness` (
    `DOCNO` VARCHAR(100) NOT NULL default '',
    `LINEID` NUMERIC(20,6) NOT NULL default '0',
    `DOCDATE` DATE,
    `BPCODE` VARCHAR(100) NOT NULL default '',
    `BPNAME` VARCHAR(200) NOT NULL default '',
    `SHIPMODE` VARCHAR(100) NOT NULL default '',
    `ITEMCODE` VARCHAR(100) NOT NULL default '',
    `PRICE` NUMERIC(20,6) NOT NULL default '0',
    `TOTALVOLUME` NUMERIC(20,6) NOT NULL default '0',
    `OPENQTY` NUMERIC(20,6) NOT NULL default '0',
    `SHORT` NUMERIC(20,6) NOT NULL default '0',
    `POQTY` NUMERIC(20,6) NOT NULL default '0',
    `PONO` VARCHAR(100) NOT NULL default '',
    `PODATE` DATE,
    `TOTALAMOUNT` NUMERIC(20,6) NOT NULL default '0',
    `CURRENTTIME` TIME,
    `CURRENTDATE` DATE,
     PRIMARY KEY  (`DOCNO`, `LINEID`, `CURRENTTIME`, `CURRENTDATE`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;


  OPEN docno_cur;
  docnoloop: LOOP

    FETCH docno_cur INTO v_company, v_branch, v_docno;
    IF Done = 1 THEN
       Leave docnoloop;
    END IF;


        SET v_totalvolume = 0;
        SET v_totalamount = 0;

       OPEN detail_cur;
       detail_loop:LOOP

         FETCH detail_cur INTO v_curdocno, v_docdate, v_bpcode, v_bpname, v_shipmode, v_itemcode, v_lineid, v_price, v_itemvolume, v_openqty;
         IF Done = 1 THEN
            Set Done = 0;
            Leave detail_loop;
         END IF;

          SET v_totalvolume = v_totalvolume + (v_openqty * v_itemvolume);
          SET v_totalamount = v_totalamount + (v_openqty * v_price);
          SET v_totalqty = 0;
          SET v_instockqty = 0;

            SELECT sum(salesorderitems.OPENQUANTITY) INTO v_totalqty
                FROM salesorders,
                     salesorderitems
                WHERE ( salesorders.COMPANY = salesorderitems.COMPANY ) and
                      ( salesorders.BRANCH = salesorderitems.BRANCH ) and
                      ( salesorders.DOCID = salesorderitems.DOCID ) and
                      ( salesorders.COMPANY = v_company ) and
                      ( salesorders.BRANCH = v_branch ) and
                      ( salesorders.DOCSTATUS = 'O' ) and
                      ( salesorderitems.ITEMCODE = v_itemcode );

            SELECT SUM(instockqty) INTO v_instockqty
                FROM stockcardsummary
                WHERE COMPANY = v_company AND
                      BRANCH = v_branch AND
                      ITEMCODE = v_itemcode AND
                      WAREHOUSE <> 'REWORK' AND
                      WAREHOUSE <> 'SAMPLE' AND
                      WAREHOUSE <> 'REWORK-EX';

             SET v_short = 0;
             SET v_shorttrue = 0;
             SET v_po_openqty = 0;
             SET v_po_docno = '';

             IF v_totalqty > v_openqty THEN

                 IF v_totalqty > v_instockqty THEN
                     SET v_short = -9999999999;
                     SET v_shorttrue = 1;
                 END IF;
             ELSE

                 IF v_openqty >  v_instockqty THEN
                     SET v_short =  v_openqty - v_instockqty;
                     SET v_shorttrue = 1;
                 END IF;
             END IF;

             SET V_po_duedate = V_po_duedate2;
             SET v_po_docno = "";
             SET v_po_openqty = 0;

             IF v_shorttrue = 1 THEN
                 SELECT D.OPENQUANTITY, H.DOCNO, H.DOCDUEDATE
                   INTO v_po_openqty, v_po_docno, V_po_duedate
                   FROM PURCHASEORDERS H, PURCHASEORDERITEMS D
                   WHERE H.COMPANY = D.COMPANY AND
                         H.BRANCH = D.BRANCH AND
                         H.DOCID = D.DOCID AND
                         D.ITEMCODE = v_itemcode AND
                         H.DOCSTATUS = 'O' AND
                         D.OPENQUANTITY > 0
                   ORDER BY H.DOCDUEDATE ASC LIMIT 1;
             END IF;

             INSERT INTO so_readiness (`DOCNO`, `LINEID`, `DOCDATE`, `BPCODE`, `BPNAME`, `SHIPMODE`, `ITEMCODE`, `PRICE`, `TOTALVOLUME`,
                                       `OPENQTY`, `SHORT`, `POQTY`, `PONO`, `PODATE`, `TOTALAMOUNT`, `CURRENTTIME`, `CURRENTDATE`)
                               VALUES (v_curdocno, v_lineid, v_docdate, v_bpcode, v_bpname, v_shipmode, v_itemcode,  v_price, 0,
                                       v_openqty, v_short, v_po_openqty, v_po_docno, V_po_duedate, 0, v_curtime, v_curdate);

	     Set Done = 0;

       END LOOP detail_loop;
       CLOSE detail_cur;


          UPDATE so_readiness
             SET TOTALVOLUME = v_totalvolume,
                 TOTALAMOUNT = v_totalamount
           WHERE DOCNO = v_docno AND CURRENTTIME = v_curtime AND CURRENTDATE = v_curdate;

       SET v_docno = '';
       Set Done = 0;	

  END LOOP docnoloop;
  CLOSE docno_cur;


  SELECT * FROM so_readiness WHERE CURRENTTIME = v_curtime AND CURRENTDATE = v_curdate;



END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_atl`
--

DROP PROCEDURE IF EXISTS `sp_atl`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_atl`(IN pi_docno VARCHAR(30), IN pi_company VARCHAR(30),IN pi_branch VARCHAR(30))
BEGIN
SELECT
  sto.docno,
  sto.docdate,
  sto.shiptoaddress,
  sto.bpname,
  sto.u_dr_no,
  sto.u_atl,
  sto.u_driver,
  sto.u_plateno,
  
  'Unleaded' as 'itemdesc',
  sum(stoi.quantity) as 'quantity',
  sto.u_hauler as haulercode,
  s.suppname as haulername,
  substring_index(stoi.fromwhscode,'-',1) as bwarehouse
FROM stocktransfers sto
left outer join stocktransferitems stoi on stoi.docid = sto.docid and stoi.branch = sto.branch and stoi.company = sto.company
left outer join items i on i.itemcode = stoi.itemcode and i.itemgroup=2
left join suppliers s on sto.u_hauler = s.suppno
left join customers c on sto.bpcode = c.custno
where sto.docno = pi_docno and i.itemgroup=2 and (stoi.itemdesc like 'regular%' or stoi.itemdesc like 'premium%' or stoi.itemdesc like 'unleaded%')
and sto.docstatus = 'C'
group by itemdesc,bwarehouse
UNION
SELECT
  sto.docno,
  sto.docdate,
  sto.shiptoaddress,
  sto.bpname,
  sto.u_dr_no,
  sto.u_atl,
  sto.u_driver,
  sto.u_plateno,
  stoi.itemdesc as 'itemdesc',
  sum(stoi.quantity) as 'quantity',
  sto.u_hauler as haulercode,
  s.suppname as haulername,
  substring_index(stoi.fromwhscode,'-',1) as bwarehouse
FROM stocktransfers sto
left outer join stocktransferitems stoi on stoi.docid = sto.docid
left outer join items i on i.itemcode = stoi.itemcode and i.itemgroup=2
left join suppliers s on sto.u_hauler = s.suppno
where sto.docno = pi_docno and i.itemgroup=2 and stoi.itemdesc not in('regular','premium','unleaded')
and sto.docstatus = 'C'
group by itemdesc,bwarehouse;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_atlp`
--

DROP PROCEDURE IF EXISTS `sp_atlp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_atlp`(IN pi_docno VARCHAR(30), IN pi_company VARCHAR(30),IN pi_branch VARCHAR(30))
BEGIN
SELECT
  sto.docno,
  sto.docdate,
  sto.shiptoaddress,
  sto.bpname,
  sto.u_dr_no,
  sto.u_atl,
  sto.u_driver,
  sto.u_plateno,
  stoi.itemdesc,
  sum(stoi.quantity) as 'quantity',
  sto.u_hauler as haulercode,
  s.suppname as haulername,
  substring_index(stoi.whscode,'-',1) as bwarehouse
FROM stocktransfers sto
inner join stocktransferitems stoi on stoi.docid = sto.docid and stoi.branch = sto.branch and stoi.company = sto.company
left outer join items i on i.itemcode = stoi.itemcode 
left join suppliers s on sto.u_hauler = s.suppno
left join customers c on sto.bpcode = c.custno
where sto.docno = pi_docno and sto.company = pi_company and sto.branch = pi_branch
  
and sto.docstatus = 'C'
group by itemdesc,bwarehouse;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_authorityletter`
--

DROP PROCEDURE IF EXISTS `sp_authorityletter`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_authorityletter`(IN pi_docno VARCHAR(30), IN pi_company VARCHAR(30),IN pi_branch VARCHAR(30))
BEGIN
SELECT
  ar.docno,
  ar.docdate,
  ar.billtoaddress,
  ar.bpname,
  ar.bprefno,
  ar.u_dr_no,
  ar.u_atl,
  ar.u_driver,
  ar.u_plateno,
  ari.basedocno,
  c.remarks,
  'Unleaded' as 'itemdesc',
  sum(ari.quantity) as 'quantity',
  ar.u_hauler as haulercode,
  s.suppname as haulername,
  substring_index(ari.whscode,'-',1) as bwarehouse
FROM arinvoices ar
inner join arinvoiceitems ari on ari.docid = ar.docid and ari.branch=ar.branch and ari.company=ar.company
left outer join items i on i.itemcode=ari.itemcode 
left join suppliers s on ar.u_hauler = s.suppno
left outer join customers c on ar.bpcode = c.custno
where ar.docno = pi_docno and ar.company = pi_company and ar.branch = pi_branch
  
  and (ari.itemdesc like '%regular%' or ari.itemdesc like '%premium%' or ari.itemdesc like '%unleaded%')
and ar.docstatus = 'O'
group by itemdesc,bwarehouse
UNION
SELECT
  ar.docno,
  ar.docdate,
  ar.billtoaddress,
  ar.bpname,
  ar.bprefno,
  ar.u_dr_no,
  ar.u_atl,
  ar.u_driver,
  ar.u_plateno,
  ari.basedocno,
  c.remarks,
  ari.itemdesc as 'itemdesc',
  sum(ari.quantity) as 'quantity',
  ar.u_hauler as haulercode,
  s.suppname as haulername,
  substring_index(ari.whscode,'-',1) as bwarehouse
FROM arinvoices ar
inner join arinvoiceitems ari on ari.docid = ar.docid and ari.branch=ar.branch and ari.company=ar.company
left outer join items i on i.itemcode=ari.itemcode 
left join suppliers s on ar.u_hauler = s.suppno
left outer join customers c on ar.bpcode = c.custno
where ar.docno = pi_docno and ar.company = pi_company and ar.branch = pi_branch
  
  
  and (ari.itemdesc not like '%regular%' and ari.itemdesc not like '%premium%' and ari.itemdesc not like '%unleaded%')
and ar.docstatus = 'O'
group by itemdesc,bwarehouse;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_authorityletterp`
--

DROP PROCEDURE IF EXISTS `sp_authorityletterp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_authorityletterp`(IN pi_docno VARCHAR(30), IN pi_company VARCHAR(30),IN pi_branch VARCHAR(30))
BEGIN
SELECT
  ar.docno,
  ar.docdate,
  ar.billtoaddress,
  ar.bpname,
  ar.bprefno,
  ar.u_dr_no,
  ar.u_atl,
  ar.u_driver,
  ar.u_plateno,
  ari.basedocno,
  ari.itemdesc,
  c.remarks,
  sum(ari.quantity) as 'quantity',
  ar.u_hauler as haulercode,
  s.suppname as haulername,
  substring_index(ari.whscode,'-',1) as bwarehouse,
  w.warehousename
FROM arinvoices ar
inner join arinvoiceitems ari on ari.docid = ar.docid and ari.branch=ar.branch and ari.company=ar.company
left outer join items i on i.itemcode=ari.itemcode 
left join suppliers s on ar.u_hauler = s.suppno
left outer join customers c on ar.bpcode = c.custno
left join warehouses w on ari.whscode = w.warehouse
where ar.docno = pi_docno and ar.company = pi_company and ar.branch = pi_branch
  
and ar.docstatus = 'O'
group by itemdesc,bwarehouse;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_cdr`
--

DROP PROCEDURE IF EXISTS `sp_cdr`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_cdr`(
	IN pi_company varchar(30), IN pi_branch varchar(30),
	IN pi_date_fr varchar(15), IN pi_date_to varchar(15))
BEGIN
	DECLARE branch_name varchar(100);
	
	SET branch_name = (
		SELECT b.branchname
		FROM branches AS b
		WHERE b.branchcode = pi_branch);

	

	
	SELECT branch_name, YEAR(p.docdate) AS 'year', MONTH(p.docdate) AS 'month',
		p.docdate AS 'doc_date', p.docno AS 'rc_no', p.doctype,
		pc.checkdate AS 'check_date', pc.checkno AS 'check_no',
		
		p.address AS 'payee', p.remarks AS 'particulars',
		jed.glacctname AS 'journal_entry', jed.gldebit AS 'debit', jed.glcredit AS 'credit',
		CASE p.approvalstatus 
			WHEN 'a' THEN 'Approved'
			WHEN 'd' THEN 'Not Approved'
			ELSE ''
			END AS 'remarks'
	FROM payments AS p
		
		LEFT JOIN paymentcheques AS pc ON p.company = pc.company AND p.branchcode = pc.branch AND p.docno = pc.docno
		
		LEFT JOIN journalentries AS je ON p.company = je.company AND p.branchcode = je.branch AND p.docno = je.docno
			LEFT JOIN journalentryitems AS jed ON je.company = jed.company AND je.branch = jed.branch 
				AND je.docid = jed.docid
	WHERE 
		p.sbo_post_flag = 1
		
		
		AND p.company = pi_company AND p.branchcode = pi_branch
		AND p.docdate BETWEEN pi_date_fr AND pi_date_to
	ORDER BY p.docdate, p.docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_commercialsr`
--

DROP PROCEDURE IF EXISTS `sp_commercialsr`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_commercialsr`(IN pi_company VARCHAR(30),
                                   IN pi_branch VARCHAR(30),
                                   IN pi_datefr VARCHAR(30),
                                   IN pi_dateto VARCHAR(30),
                                   IN pi_area VARCHAR(30))
BEGIN
select
        ar.docdate as 'docdate',
        ar.bpname,
        ari.basedocno,
        ar.bprefno,
        ar.docno as 'docno',
        ar.u_dr_no,
        if(pi_area<>'','',ar.u_depot) as u_depot,
        ari.itemdesc,
        CASE WHEN ari.itemcode='FREIGHT' THEN 0
             WHEN ari.itemcode='ECC' THEN 0
             WHEN ari.itemcode='PUMPING' THEN 0
             ELSE ari.quantity END AS 'quantity',
        i.uomsa,
        ari.unitprice,
        ari.linetotal,
        ar.paymentterm,
        p.paymenttermname,
        date(pi_datefr) as 'datefr',
        date(pi_dateto) as 'dateto',
        ari.lineid as 'orderby',
        c.custgroup as 'custgroup',
        cg.groupname as 'custgroupname',
        if(cm.docno is null,'',cm.docno) as 'cmdocno',
        if(pi_area='','',ud.name) as 'depotname',
        pi_area
from arinvoices ar
inner join arinvoiceitems ari on ari.docid = ar.docid AND
                                 ari.branch = ar.branch AND
                                 ari.company = ar.company
inner join items i on i.itemcode = ari.itemcode
inner join paymentterms p on ar.paymentterm = p.paymentterm
inner join customers c on ar.bpcode=c.custno
inner join customergroups cg on c.custgroup=cg.custgroup
left outer join arcreditmemos cm on ar.docno=cm.basedocno
left outer join u_depot ud on ar.u_depot=ud.name
where ar.company = pi_company
    AND ar.branch = pi_branch
    AND (ar.docdate BETWEEN pi_datefr AND pi_dateto)
    AND (pi_area=''or (pi_area<>'' and pi_area=ud.code))
UNION
select
        ar.docdate as 'docdate',
        ar.bpname,
        ar.basedocno,
        ar.bprefno,
        ar.docno as 'docno',
        ar.u_dr_no,
        if(pi_area<>'','',ar.u_depot) as u_depot,
        ari.chrgname as 'itemdesc',
        CASE WHEN ari.chrgcode='ECC' THEN ar.u_eccqty ELSE 0 END AS 'quantity',
        CASE WHEN ari.chrgcode='ECC' THEN 'L' ELSE '' END AS 'uomsa',
        CASE WHEN ari.chrgcode='FREIGHT' THEN uf.u_wvat
             WHEN ari.chrgcode='ECC' THEN uf.u_ecc
             WHEN ari.chrgcode='PUMPING' THEN uf.u_pumping
             ELSE 0 END AS 'unitprice',
        ari.amount as 'linetotal',
        ar.paymentterm,
        p.paymenttermname,
        date(pi_datefr) as 'datefr',
        date(pi_dateto) as 'dateto',
        9999999 as 'orderby',
        c.custgroup as 'custgroup',
        cg.groupname as 'custgroupname',
        if(cm.docno is null,'',cm.docno) as 'cmdocno',
        if(pi_area='','',ud.name) as 'depotname',
        pi_area
from arinvoices ar
inner join arinvoiceotherchargesitems ari on ar.docid = ari.docid AND
                                             ar.branch=ari.branch AND
                                             ar.company=ari.company
inner join paymentterms p on ar.paymentterm = p.paymentterm
inner join customers c on ar.bpcode=c.custno
inner join customergroups cg on c.custgroup=cg.custgroup
left outer join u_freight uf on  c.u_area=uf.code
left outer join arcreditmemos cm on ar.docno=cm.basedocno
left outer join u_depot ud on ar.u_depot=ud.name
where ar.company = pi_company
    AND ar.branch = pi_branch
    AND (ar.docdate BETWEEN pi_datefr AND pi_dateto)
    AND (pi_area=''or (pi_area<>'' and pi_area=ud.code))
ORDER BY docdate,docno,orderby,custgroup;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_commercialsr1`
--

DROP PROCEDURE IF EXISTS `sp_commercialsr1`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_commercialsr1`(IN pi_company VARCHAR(30),
                                   IN pi_branch VARCHAR(30),
                                   IN pi_datefr VARCHAR(30),
                                   IN pi_dateto VARCHAR(30),
                                   IN pi_area VARCHAR(30))
BEGIN
select
        ar.docdate as 'docdate',
        ar.bpname,
        ari.basedocno,
        ar.bprefno,
        ar.docno as 'docno',
        ar.u_dr_no,
        ar.u_depot,
        ari.itemdesc,
        CASE WHEN ari.itemcode='FREIGHT' THEN 0
             WHEN ari.itemcode='ECC' THEN 0
             WHEN ari.itemcode='PUMPING' THEN 0
             ELSE ari.quantity END AS 'quantity',
        i.uomsa,
        ari.unitprice,
        ari.linetotal,
        ar.paymentterm,
        p.paymenttermname,
        date(pi_datefr) as 'datefr',
        date(pi_dateto) as 'dateto',
        ari.lineid as 'orderby',
        if(pi_area<>'',upper(pr.provincename),'') as 'provincename'
from arinvoices ar
inner join arinvoiceitems ari on ari.docid = ar.docid AND
                                 ari.branch = ar.branch AND
                                 ari.company = ar.company
inner join items i on i.itemcode = ari.itemcode
inner join paymentterms p on ar.paymentterm = p.paymentterm
left outer join addresses ad on ar.bpcode=ad.refid and ad.addresstype=0
left outer join provinces pr on ad.province=pr.province
where ar.company = pi_company
    AND ar.branch = pi_branch
    AND (ar.docdate BETWEEN pi_datefr AND pi_dateto)
    AND (pi_area=''or (pi_area<>'' and pi_area=ad.province))
UNION
select
        ar.docdate as 'docdate',
        ar.bpname,
        ar.basedocno,
        ar.bprefno,
        ar.docno as 'docno',
        ar.u_dr_no,
        ar.u_depot,
        ari.chrgname as 'itemdesc',
        CASE WHEN ari.chrgcode='ECC' THEN ar.u_eccqty ELSE 0 END AS 'quantity',
        CASE WHEN ari.chrgcode='ECC' THEN 'L' ELSE '' END AS 'uomsa',
        CASE WHEN ari.chrgcode='FREIGHT' THEN uf.u_wvat
             WHEN ari.chrgcode='ECC' THEN uf.u_ecc
             WHEN ari.chrgcode='PUMPING' THEN uf.u_pumping
             ELSE 0 END AS 'unitprice',
        ari.amount as 'linetotal',
        ar.paymentterm,
        p.paymenttermname,
        date(pi_datefr) as 'datefr',
        date(pi_dateto) as 'dateto',
        9999999 as 'orderby',
         if(pi_area<>'',upper(pr.provincename),'') as 'provincename'
from arinvoices ar
inner join arinvoiceotherchargesitems ari on ar.docid = ari.docid AND
                                             ar.branch=ari.branch AND
                                             ar.company=ari.company
inner join paymentterms p on ar.paymentterm = p.paymentterm
inner join customers c on ar.bpcode=c.custno
left outer join u_freight uf on  c.u_area=uf.code
left outer join addresses ad on ar.bpcode=ad.refid and ad.addresstype=0
left outer join provinces pr on ad.province=pr.province
where ar.company = pi_company
    AND ar.branch = pi_branch
    AND ar.docdate BETWEEN pi_datefr AND pi_dateto
    AND (pi_area=''or (pi_area<>'' and pi_area=ad.province))
ORDER BY docdate,docno,orderby;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_companyinfo`
--

DROP PROCEDURE IF EXISTS `sp_companyinfo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_companyinfo`(IN pi_company VARCHAR(30))
BEGIN
  select a.COMPANYCODE,a.COMPANYNAME,b.BRANCHCODE,b.BRANCHNAME from companies a, branches b
    where b.companycode=a.companycode and a.COMPANYCODE=pi_company;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_createreportlog`
--

DROP PROCEDURE IF EXISTS `sp_createreportlog`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_createreportlog`(
IN pi_userid VARCHAR(30), IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30),
IN pi_reportid VARCHAR(100), IN pi_reportts VARCHAR(30),
IN pi_sessionid VARCHAR(80), IN pi_remoteip VARCHAR(30),
IN pi_reportfile VARCHAR(100),
IN pi_reportparams text)
BEGIN
  declare v_sessionid varchar(80);
  set v_sessionid = "";
  select SESSIONID into v_sessionid from REPORTLOGS
    where USERID = pi_userid and REPORTID = pi_reportid and REPORTTS = pi_reportts and SESSIONID = pi_sessionid;
  if v_sessionid = "" then
    INSERT INTO REPORTLOGS(USERID,COMPANY,BRANCH,REPORTID,REPORTTS,SESSIONID,REMOTEIP,RUNDATE,REPORTFILE,REPORTPARAMS)
    VALUES(pi_userid,pi_company,pi_branch,pi_reportid,pi_reportts,pi_sessionid,pi_remoteip,now(),pi_reportfile,pi_reportparams);
  end if;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_cvvoucher`
--

DROP PROCEDURE IF EXISTS `sp_cvvoucher`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_cvvoucher`(IN pi_company VARCHAR (30), IN pi_branch VARCHAR (30), IN pi_docid VARCHAR (30))
BEGIN
select
  p.address,
  p.docno,
  p.billto,
  pc.bank,
  p.bpcode,
  p.bpname,
  p.paidamount,
  p.remarks,
  jei.glacctname,
  jei.gldebit,
  jei.glcredit,
  s.suppno,
  s.suppname,
  p.docdate,
  pc.checkno,
  u.username,
  p.u_jvrefno,
  p.branchcode,
   CASE
  when p.u_division = 'C' THEN 'COMMERCIAL'
   WHEN P.u_division = 'R' THEN 'RETAIL'
   END AS u_division
from payments p
left join paymentcheques pc
  on p.company = pc.company
  and p.branchcode = pc.branch
  and p.docno = pc.docno
  and p.doctype = 'S'
inner join journalentries je
  on p.docno = je.docno
  and p.company = je.company
  and p.branchcode = je.branch
  and je.doctype = 'PY'
inner join journalentryitems jei
  on je.docno = jei.docno
  and je.docid = jei.docid
  and je.branch = jei.branch
  and je.company = jei.company
inner join suppliers s
  on p.bpcode = s.suppno
inner join users u
  on p.createdby = u.userid
where je.docid = pi_docid
and je.branch = pi_branch;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_cvvoucher2`
--

DROP PROCEDURE IF EXISTS `sp_cvvoucher2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_cvvoucher2`(IN pi_company VARCHAR (30), IN pi_branch VARCHAR (30), IN pi_docid
VARCHAR (30))
BEGIN
select
  p.address,
  p.docno,
  pc.bank,
  p.bpname,
  p.paidamount,
  p.remarks,
  jei.glacctname,
  jei.slacctname,
  jei.gldebit,
  jei.glcredit,
  p.docdate, 
  pc.checkno,
  u.username,
  p.u_jvrefno,
  p.branchcode, 
  p.refno, 
   CASE
  when p.u_division = 'C' THEN 'COMMERCIAL'
   WHEN P.u_division = 'R' THEN 'RETAIL'
   END AS u_division
from payments p
left join paymentcheques pc
  on p.company = pc.company
  and p.branchcode = pc.branch
  and p.docno = pc.docno
  and p.doctype = 'A'
inner join journalentries je
  on p.docno = je.docno
  and p.company = je.company
  and p.branchcode = je.branch
  and je.doctype = 'PY'
inner join journalentryitems jei
  on je.docno = jei.docno
  and je.docid = jei.docid
  and je.branch = jei.branch
  and je.company = jei.company
inner join users u
  on p.createdby = u.userid
where je.docid = pi_docid
and je.branch = pi_branch;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_cvvoucher4`
--

DROP PROCEDURE IF EXISTS `sp_cvvoucher4`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_cvvoucher4`(IN pi_company VARCHAR (30), IN pi_branch VARCHAR (30),
IN pi_docid VARCHAR (30))
BEGIN
select
  p.address,
  p.docno,
  pc.bank,
  p.bpname,
  p.paidamount,
  p.remarks,
  jei.glacctname,
  jei.slacctname,
  jei.gldebit,
  jei.glcredit,
  p.docdate, 
  pc.checkno,
  u.username,
  p.u_jvrefno,
  p.branchcode, 
  p.refno, 
   CASE
  when p.u_division = 'C' THEN 'COMMERCIAL'
   WHEN P.u_division = 'R' THEN 'RETAIL'
   END AS u_division
from payments p
left join paymentcheques pc
  on p.company = pc.company
  and p.branchcode = pc.branch
  and p.docno = pc.docno
  and p.doctype = 'C'
inner join journalentries je
  on p.docno = je.docno
  and p.company = je.company
  and p.branchcode = je.branch
  and je.doctype = 'PY'
inner join journalentryitems jei
  on je.docno = jei.docno
  and je.docid = jei.docid
  and je.branch = jei.branch
  and je.company = jei.company
inner join customers c
  on p.bpcode = c.custno
inner join users u
  on p.createdby = u.userid
where je.docid = pi_docid
and je.branch = pi_branch;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_cvvoucheroutgoingjvje`
--

DROP PROCEDURE IF EXISTS `sp_cvvoucheroutgoingjvje`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_cvvoucheroutgoingjvje`(IN pi_company VARCHAR (30), IN pi_branch VARCHAR (30), IN pi_docid VARCHAR (30))
BEGIN
select
  p.docno,
  p.address,
  pc.bank,
  p.bpcode,
  p.bpname,
  p.paidamount,
  p.remarks,
  jei.glacctname,
  jei.gldebit,
  jei.glcredit,
  s.suppno,
  s.suppname,
  p.docdate,
  pc.checkno,
  u.username,
  p.u_jvrefno,
  p.branchcode,
CASE
  when p.u_division = 'C' THEN 'COMMERCIAL'
   WHEN P.u_division = 'R' THEN 'RETAIL'
   END AS u_division
from payments p
left join paymentcheques pc
  on p.company = pc.company
  and p.branchcode = pc.branch
  and p.docno = pc.docno
  and p.doctype = 'S'
inner join journalentries je
  on p.docno = je.docno
  and p.company = je.company
  and p.branchcode = je.branch
  and je.doctype = 'PY'
inner join journalentryitems jei
  on je.docno = jei.docno
  and je.docid = jei.docid
  and je.branch = jei.branch
  and je.company = jei.company
inner join suppliers s
  on p.bpcode = s.suppno
inner join users u
  on p.createdby = u.userid
where je.docid = pi_docid
and je.branch = pi_branch;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_dbr`
--

DROP PROCEDURE IF EXISTS `sp_dbr`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_dbr`(
	IN pi_company varchar(20), IN pi_branch varchar(20))
BEGIN
	SELECT dss.u_brjvdocno AS 'jv_no', dss.docno AS 'dsr_no',
		dss.datecreated AS 'dsr_date', UCASE(IFNULL(dss.u_shift, '')) AS 'shift',
		IFNULL(dss.u_total_cashcount, 0) AS 'cash_amount', 0 AS 'pickup',
		IFNULL(dss.u_total_cashcount, 0) AS 'balance', 0 AS 'confirmed',
		IFNULL(dss.u_total_cashcount, 0) AS 'short_over'
	FROM u_dailyshiftsales AS dss
	WHERE dss.docstatus = 'c' AND u_total_cashcount > u_depositedamount
		AND dss.company = pi_company AND dss.branch = pi_branch;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_dcohd`
--

DROP PROCEDURE IF EXISTS `sp_dcohd`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_dcohd`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_docno varchar(20))
BEGIN
	SELECT
		
		dbd.u_bank AS 'bank', dbd.u_bankbranch AS 'bank_branch', dbd.u_bankacctno AS 'bank_account_no',
		dbd.u_remarks AS 'remarks', dbd.docstatus AS 'status',
		IFNULL(dbd.u_docdate, '') AS 'pickup_deposit_date', IFNULL(dbd.u_postdate, '') AS 'post_date',
		
		IFNULL(dbdi.u_jvno, '') AS 'jv_no', IFNULL(dbdi.u_dsrno, '') AS 'dsr_no',
		IFNULL(dbdi.u_dsrdate, '') AS 'dsr_date', IFNULL(dbdi.u_shift, '') AS 'shift',
		IFNULL(dbdi.u_cashamount, 0) AS 'cash_amount', IFNULL(dbdi.u_pickupamount, 0) AS 'pickup',
		IFNULL(dbdi.u_pickupbalamount, 0) AS 'balance', IFNULL(dbdi.u_depositedamount, 0) AS 'confirmed',
		IFNULL(dbdi.u_depositedbalamount, 0) AS 'short_over'
	FROM u_dsrbankdeposits AS dbd
		LEFT JOIN u_dsrbankdeposititems AS dbdi
			ON dbd.company = dbdi.company AND dbd.branch = dbdi.branch AND dbd.docid = dbdi.docid
	WHERE dbd.company = pi_company AND dbd.branch = pi_branch
		AND dbd.docno = pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_dcohdr`
--

DROP PROCEDURE IF EXISTS `sp_dcohdr`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_dcohdr`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_date_fr varchar(20), IN pi_date_to varchar(20))
BEGIN
	SELECT 
		
		dbd.docno AS 'ebt_ref_no',
		IFNULL(dbdi.u_jvno, '') AS 'jv_no',
		IFNULL(dbdi.u_dsrdate, '') AS 'dsr_date', IFNULL(dbdi.u_shift, '') AS 'shift',
		IFNULL(dbdi.u_depositedamount, 0) AS 'confirmed_amount', 
		IFNULL(dbd.u_docdate, '') AS 'pickup_deposit_date', IFNULL(dbd.u_postdate, '') AS 'post_date',
		dbd.u_bank AS 'bank', dbd.u_bankacctno AS 'bank_account_no',
		dbd.u_remarks AS 'remarks'
	FROM u_dsrbankdeposits AS dbd
		LEFT JOIN u_dsrbankdeposititems AS dbdi
			ON dbd.company = dbdi.company AND dbd.branch = dbdi.branch AND dbd.docid = dbdi.docid
	WHERE dbd.docstatus = 'c'
		AND dbd.company = pi_company AND dbd.branch = pi_branch
		AND dbd.u_docdate BETWEEN pi_date_fr AND pi_date_to;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_deleteusermsgs`
--

DROP PROCEDURE IF EXISTS `sp_deleteusermsgs`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_deleteusermsgs`()
BEGIN
DECLARE v_MsgID       varchar(100);
DECLARE v_Balance numeric(20,2);
DECLARE v_Done        integer;
DECLARE v_DirectRate        integer;
DECLARE v_Updated        integer;
DECLARE Cursor_usermsgs CURSOR FOR select a.msgid from usermsgs a, payments b where b.company=a.companycode and b.branchcode=a.branchcode and b.docid=a.docid and a.objectcode='OUTGOINGPAYMENT' and ((b.approvalstatus='A' and b.docstat <>'D') or b.approvalstatus='D');
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;
  SET v_Updated = 0 ;
  SET v_Done = 0 ;
  BLOCK1: BEGIN
  OPEN Cursor_usermsgs ;
  REPEAT
    FETCH Cursor_usermsgs INTO v_MsgID ;
    IF NOT v_Done THEN
        delete from usermsgs where msgid=v_MsgID;
      SET v_Updated = v_Updated + 1;
    END IF ;
  UNTIL v_Done END REPEAT ;
  CLOSE Cursor_usermsgs ;
  END BLOCK1 ;
  select 1;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_deliveryreceipt`
--

DROP PROCEDURE IF EXISTS `sp_deliveryreceipt`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_deliveryreceipt`(IN pi_docno VARCHAR(30), IN pi_company VARCHAR(30),IN pi_branch VARCHAR(30))
BEGIN
select ar.bpname,ar.shiptoaddress,ar.docno,ar.bprefno,ar.u_atl,ar.u_po_no,ar.docdate,p.paymenttermname,ari.quantity,
i.uomsa,ari.itemdesc,if (ar.shiptype = '001', 'X','') as pickup,if (ar.shiptype = '002', 'X','') as delivery, ar.u_plateno,ar.u_driver,ar.u_dr_no,ari.u_tankno,ar.u_schedeldt,
ar.u_hauler as haulercode,
s.suppname as haulername,
ari.basedocno
from arinvoices ar
inner join arinvoiceitems ari on ari.docid = ar.docid and ari.branch=ar.branch and ari.company=ar.company
inner join items i on i.itemcode = ari.itemcode
inner join paymentterms p on p.paymentterm = ar.paymentterm
left join suppliers s on ar.u_hauler = s.suppno
where ar.docno = pi_docno
and ar.docstatus = 'O';
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_fixpaymentinvoices`
--

DROP PROCEDURE IF EXISTS `sp_fixpaymentinvoices`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_fixpaymentinvoices`()
BEGIN
DECLARE v_DocNo       varchar(30);
DECLARE v_Company       varchar(30);
DECLARE v_Branch       varchar(30);
DECLARE v_DocNo2       varchar(30);
DECLARE v_Done        integer;
DECLARE v_Done2        integer;
DECLARE v_Updated        integer;
DECLARE v_Count        integer;
DECLARE v_Balance numeric(20,2);
DECLARE v_Found        integer;
DECLARE Cursor_payments CURSOR FOR SELECT A.COMPANY, A.BRANCHCODE, A.DOCNO, IFNULL(B.DOCNO,'') FROM payments a left outer join paymentinvoices b on
  b.company=a.company and b.branch=a.branchcode and b.docno=a.docno GROUP BY A.BRANCHCODE, A.DOCNO;
DECLARE Cursor_paymentinvoices CURSOR FOR SELECT A.BRANCHCODE, A.DOCNO, IFNULL(B.DOCNO,'') FROM payments a left outer join paymentinvoices b on
  b.company=a.company and b.branch=a.branchcode and b.docno=a.docno GROUP BY A.BRANCHCODE, A.DOCNO;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;
  SET v_Updated = 0 ;
  SET v_Done = 0 ;
  SET v_Done2 = 0 ;
  SET v_Count = 0 ;
  BLOCK1: BEGIN
  OPEN Cursor_payments ;
  REPEAT
    FETCH Cursor_payments INTO v_Company, v_Branch, v_DocNo, v_DocNo2;
    SET v_Done2 = v_Done;
    IF v_DocNo2='' THEN
        SET v_Found = 0 ;
        select 1 into v_Found from filoil_bkup.paymentinvoices a where a.company=v_Company and a.branch=v_Branch and a.docno=v_DocNo limit 1;
        insert into paymentinvoices (AMOUNT,BALANCEAMOUNT,BPCODE,BPNAME,BRANCH,COMPANY,CREATEDBY,CURRENCY,CURRENCYRATE,DATECREATED,DEPARTMENT,DISCAMOUNT,DISCOUNT,DISCOUNTAMOUNT,DISCPERC,DOCID,DOCNO,ISADVANCES,ISFOREIGN,ISSUBSIDIARY,LASTUPDATED,LASTUPDATEDBY,OBJECTCODE,RCDVERSION,REFBRANCH,REFLINEID,REFNO,REFTYPE,SUBSIDIARY,WTAXABLEAMOUNT,WTAXAMT,WTAXCODE,WTAXLIABLE)
          select AMOUNT,BALANCEAMOUNT,BPCODE,BPNAME,BRANCH,COMPANY,CREATEDBY,CURRENCY,CURRENCYRATE,DATECREATED,DEPARTMENT,DISCAMOUNT,DISCOUNT,DISCOUNTAMOUNT,DISCPERC,DOCID,DOCNO,ISADVANCES,ISFOREIGN,ISSUBSIDIARY,LASTUPDATED,LASTUPDATEDBY,OBJECTCODE,RCDVERSION,REFBRANCH,REFLINEID,REFNO,REFTYPE,SUBSIDIARY,WTAXABLEAMOUNT,WTAXAMT,WTAXCODE,WTAXLIABLE
            from filoil_bkup.paymentinvoices where company=v_Company and branch=v_Branch and docno=v_DocNo;
        if v_Found=1 then
          SET v_Updated = v_Updated + 1;
          end if;
          SET v_Count = v_Count + 1;
          SET v_Done = 0 ;
        END IF ;
  UNTIL v_Done2 END REPEAT ;
  CLOSE Cursor_payments ;
  END BLOCK1 ;
  select v_Count,v_Updated;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_gi`
--

DROP PROCEDURE IF EXISTS `sp_gi`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_gi`(IN pi_docno VARCHAR(30),
				                 IN pi_company VARCHAR(30),
				                 IN pi_branch VARCHAR(30))
BEGIN
select
	gi.docno,
	gi.docdate,
	gii.itemcode,
	gii.itemdesc,
	gii.whscode,
	gii.quantity,
	gi.u_hauler as haulercode,
	s.suppname as haulername,
	gi.u_driver,
	gi.u_plateno,
	gi.u_dr_no,
	gi.u_stock_inout,
	i.uomsa,
  gi.remarks

from goodsissues gi
inner join goodsissueitems gii on gii.docid = gi.docid AND gii.company = gi.company AND gii.branch = gi.branch
inner join items i on i.itemcode = gii.itemcode
left join suppliers s on gi.u_hauler = s.suppno
where gi.docno = pi_docno
and gi.docstatus = 'C';
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_gr`
--

DROP PROCEDURE IF EXISTS `sp_gr`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_gr`(IN pi_docno VARCHAR(30),
				                 IN pi_company VARCHAR(30),
				                 IN pi_branch VARCHAR(30))
BEGIN
select 
	gr.docno,
	gr.docdate,
	gri.itemcode,
	gri.itemdesc,
	gri.whscode,
	gri.quantity,
	gr.u_hauler as haulercode,
	s.suppname as haulername,
	gr.u_driver,
	gr.u_plateno,
	gr.u_dr_no,
	gr.u_atl,
	gr.u_stock_inout,
	i.uomsa,
	w.warehousename,
	gr.remarks

from goodsreceipts gr
inner join goodsreceiptitems gri on gri.docid = gr.docid and gri.branch = gr.branch and gri.company = gr.company
inner join items i on i.itemcode = gri.itemcode
left join suppliers s on gr.u_hauler = s.suppno
left join warehouses w on gri.whscode = w.warehouse
where gr.docno = pi_docno
and gr.docstatus = 'C';
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_grpo`
--

DROP PROCEDURE IF EXISTS `sp_grpo`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_grpo`(pi_docno VARCHAR (30))
BEGIN
    select a.company as company,
       a.branch as branch,
       a.docid as docid,
       a.docno as docno,
       a.bprefno as bprefno,
       a.docdate as docdate,
       a.bpname as vendor,
       a.u_rr_no as rrno,
       a.u_supp_inv as invnum,
       a.u_supp_dr as drnum,
       a.u_hauler as hauler,
       a.u_driver as driver,
       a.u_plateno as plateno,
       b.itemdesc as description,
       b.quantity as qty,
       c.uomsa as unit
from purchasedeliveries a
inner join purchasedeliveryitems b on a.docid=b.docid
inner join items c on b.itemcode=c.itemcode
where a.docno=pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_grpoauthorityletter`
--

DROP PROCEDURE IF EXISTS `sp_grpoauthorityletter`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_grpoauthorityletter`(IN pi_docno VARCHAR(30))
BEGIN
SELECT
  p.bprefno,
  p.docno,
  p.docdate,
  p.billtoaddress,
  p.bpname,
  p.u_atl,
  p.u_vessel,
  p.u_voyage,
  p.u_dt_pickup,
  p.u_driver,
  p.u_plateno,
  p.u_hauler,
  p.u_dr_no,
  p.u_rr_no,
  pd.itemdesc,
  pd.quantity
FROM purchasedeliveries p
join purchasedeliveryitems pd  on pd.docid = p.docid
where p.docno = pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_je`
--

DROP PROCEDURE IF EXISTS `sp_je`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_je`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docid VARCHAR(30), IN pi_docdate VARCHAR(30), IN pi_summary VARCHAR(30), IN pi_mode VARCHAR(20), IN pi_status VARCHAR(15), IN pi_info VARCHAR(254))
BEGIN   DECLARE v_statusdesc VARCHAR(50);   IF pi_status = "unposted" then     set v_statusdesc = 'U N P O S T E D';   ELSE     set v_statusdesc = 'P O S T E D';   end if;   IF pi_summary = "0" then     SELECT CONCAT(C.BRANCHCODE,' - ',C.BRANCHNAME) AS BRANCHNAME, D.COMPANYNAME, A.COMPANY,A.BRANCH,A.DOCID,A.DOCDATE,A.DOCDUEDATE,A.TAXDATE,A.DOCTYPE,A.DOCNO,A.GLACCTNO,A.GLACCTNAME,          A.GLDEBIT,A.GLCREDIT,A.SLTYPE,A.SLACCTNO,A.SLACCTNAME,A.SLDEBIT,A.SLCREDIT,A.REMARKS,A.DEPARTMENT,          A.PROJCODE,A.PROFITCENTER, B.REMARKS AS DOCREMARKS,          v_statusdesc AS SUBTITLE, pi_info AS INFO     from JOURNALENTRYITEMS A, JOURNALENTRIES B, BRANCHES C, COMPANIES D       where A.COMPANY=D.COMPANYCODE AND             A.COMPANY=C.COMPANYCODE AND A.BRANCH=C.BRANCHCODE AND             A.COMPANY=B.COMPANY AND A.BRANCH=B.BRANCH AND A.DOCID = B.DOCID AND             A.COMPANY = pi_company and A.BRANCH=pi_branch and             ((pi_mode='DAILY' and A.DOCDATE=pi_docdate) or (pi_mode='ASOF' and A.DOCDATE<=pi_docdate) or (pi_mode='DOCID' and A.DOCID=pi_docid)) AND             ((pi_status='unposted' and A.SBO_POST_FLAG=0) or (pi_status='posted' and A.SBO_POST_FLAG=1));   else     SELECT CONCAT(C.BRANCHCODE,' - ',C.BRANCHNAME) AS BRANCHNAME, D.COMPANYNAME,A.DOCDATE,A.GLACCTNO,A.GLACCTNAME,          SUM(A.GLDEBIT) AS GLDEBIT,SUM(A.GLCREDIT) AS GLCREDIT,          v_statusdesc AS SUBTITLE, pi_info AS INFO     from JOURNALENTRYITEMS A, JOURNALENTRIES B, BRANCHES C, COMPANIES D       where A.COMPANY=D.COMPANYCODE AND             A.COMPANY=C.COMPANYCODE AND A.BRANCH=C.BRANCHCODE AND             A.COMPANY=B.COMPANY AND A.BRANCH=B.BRANCH AND A.DOCID = B.DOCID AND             A.COMPANY = pi_company and A.BRANCH=pi_branch and             ((pi_mode='DAILY' and A.DOCDATE=pi_docdate) or (pi_mode='ASOF' and A.DOCDATE<=pi_docdate)) AND             ((pi_status='unposted' and A.SBO_POST_FLAG=0) or (pi_status='posted' and A.SBO_POST_FLAG=1))       group by A.DOCDATE,A.GLACCTNO,A.GLACCTNAME;   end if; END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_jvparticulars`
--

DROP PROCEDURE IF EXISTS `sp_jvparticulars`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_jvparticulars`(IN pi_company VARCHAR (30), IN pi_branch VARCHAR (30), IN pi_docno VARCHAR (30))
BEGIN
select
jvi.itemname,
jvi.debit,
jvi.credit,
jv.remarks,
jv.docno
from journalvouchers jv
  inner join journalvoucheritems jvi
    on jv.company = jvi.company
    and jv.branch = jvi.branch
    and jv.docid = jvi.docid
where jv.docno = pi_docno
and jv.branch = pi_branch;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_pickdelsto`
--

DROP PROCEDURE IF EXISTS `sp_pickdelsto`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_pickdelsto`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_datefr varchar(20),
	IN pi_dateto varchar(20),
  IN pi_pdatefr varchar(20),
  IN pi_pdateto varchar(20))
BEGIN
	DROP TEMPORARY TABLE IF EXISTS tmp_gastypes;
	CREATE TEMPORARY TABLE tmp_gastypes(
		docno varchar(20),
		ado decimal(25, 10),
		prem decimal(25, 10),
		unl decimal(25, 10),
		reg decimal(25, 10),
    ker decimal(25, 10),
    bfo decimal(25, 10));
	INSERT INTO tmp_gastypes()
		SELECT sto.docno,
			CASE WHEN stoi.itemcode = 'w0001' THEN stoi.quantity
				else 0 end AS 'ado',
			CASE WHEN stoi.itemcode = 'w0002' THEN stoi.quantity
				else 0 end AS 'prem',
			CASE WHEN stoi.itemcode = 'w0003' THEN stoi.quantity
				else 0 end AS 'unl',
			CASE WHEN stoi.itemcode = 'w0004' THEN stoi.quantity
				else 0 end AS 'reg',
      CASE WHEN stoi.itemcode = 'w0005' THEN stoi.quantity
				else 0 end AS 'ker',
      CASE WHEN stoi.itemcode = 'b0001' THEN stoi.quantity
				else 0 end AS 'bfo'
	FROM stocktransfers AS sto
	LEFT JOIN stocktransferitems AS stoi on sto.company = stoi.company AND sto.branch = stoi.branch AND sto.docid = stoi.docid
	WHERE stoi.itemcode IN ('W0001','W0002','W0003','W0004','w0005','b0001')
		AND sto.company = pi_company AND sto.branch = pi_branch
    AND sto.u_mcapproval = '2'
		
    AND (pi_datefr='' OR (pi_datefr<>'' and sto.u_schedeldt >= pi_datefr))
    AND (pi_dateto='' OR (pi_dateto<>'' and sto.u_schedeldt <= pi_dateto))
    AND (pi_pdatefr='' OR (pi_pdatefr<>'' and sto.docdate >= pi_pdatefr))
    AND (pi_pdateto='' OR (pi_pdateto<>'' and sto.docdate <= pi_pdateto))
   	ORDER BY sto.docdate, sto.u_schedeldt, sto.docno, stoi.itemcode;
  	
	DROP TEMPORARY TABLE IF EXISTS tmp_gastypes_sum;
	CREATE TEMPORARY TABLE tmp_gastypes_sum(
		docno varchar(20),
		ado decimal(25, 10),
		prem decimal(25, 10),
		unl decimal(25, 10),
		reg decimal(25, 10),
    ker decimal(25, 10),
    bfo decimal(25, 10),
		PRIMARY KEY(docno));
	INSERT INTO tmp_gastypes_sum()
		SELECT docno, SUM(ado), SUM(prem), SUM(unl), SUM(reg), SUM(bfo), SUM(ker)
		FROM tmp_gastypes
		GROUP BY docno;
	SELECT DATE(pi_datefr) AS Datefr, DATE(pi_dateto) AS Dateto,
         DATE(pi_pdatefr) AS PDatefr, DATE(pi_pdateto) AS PDateto,
         sto.docdate, IFNULL(sto.u_schedeldt, '') AS 'delivery_date',
		sto.docno, sto.bpcode, sto.bpname, sto.u_schedeldt, sto.u_dr_no, sto.u_depot, sto.u_mcapproval,
    
    CASE WHEN sto.docstatus = 'D' then 'DRAFT'
				   WHEN sto.docstatus = 'O' then 'OPEN'
           WHEN sto.docstatus = 'C' then 'CLOSED'
           ELSE '' END AS 'DocStatus',
		tgs.ado, tgs.prem, tgs.unl, tgs.reg, tgs.bfo,tgs.ker, udfv.fieldvaluedesc as 'u_expecttime'
	FROM stocktransfers AS sto
		LEFT JOIN stocktransferitems AS stoi on sto.company = stoi.company AND sto.branch = stoi.branch AND sto.docid = stoi.docid
    LEFT JOIN tmp_gastypes_sum AS tgs ON sto.docno = tgs.docno
    LEFT JOIN udfvalues AS udfv on sto.u_expecttime = udfv.fieldvalue and udfv.tablename='stocktransfers'
    
		WHERE stoi.itemcode IN ('W0001','W0002','W0003','W0004','w0005','b0001')
		AND sto.company = pi_company AND sto.branch = pi_branch
    AND sto.u_mcapproval = '2'
		
    AND (pi_datefr='' OR (pi_datefr<>'' and sto.u_schedeldt >= pi_datefr))
    AND (pi_dateto='' OR (pi_dateto<>'' and sto.u_schedeldt <= pi_dateto))
    AND (pi_pdatefr='' OR (pi_pdatefr<>'' and sto.docdate >= pi_pdatefr))
    AND (pi_pdateto='' OR (pi_pdateto<>'' and sto.docdate <= pi_pdateto))
	GROUP BY sto.docdate, sto.docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_pickupdeliver`
--

DROP PROCEDURE IF EXISTS `sp_pickupdeliver`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_pickupdeliver`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_datefr varchar(20),
	IN pi_dateto varchar(20),
  IN pi_pdatefr varchar(20),
  IN pi_pdateto varchar(20))
BEGIN
	DROP TEMPORARY TABLE IF EXISTS tmp_gastypes;
	CREATE TEMPORARY TABLE tmp_gastypes(
		docno varchar(20),
		ado decimal(25, 10),
		prem decimal(25, 10),
		unl decimal(25, 10),
		reg decimal(25, 10),
    ker decimal(25, 10),
    bfo decimal(25, 10));
	INSERT INTO tmp_gastypes()
SELECT a.docno,
			CASE WHEN b.itemcode = 'w0001' THEN b.quantity
				else 0 end AS 'ado',
			CASE WHEN b.itemcode = 'w0002' THEN b.quantity
				else 0 end AS 'prem',
			CASE WHEN b.itemcode = 'w0003' THEN b.quantity
				else 0 end AS 'unl',
			CASE WHEN b.itemcode = 'w0004' THEN b.quantity
				else 0 end AS 'reg',
      CASE WHEN b.itemcode = 'w0005' THEN b.quantity
				else 0 end AS 'ker',
      CASE WHEN b.itemcode = 'b0001' THEN b.quantity
				else 0 end AS 'bfo'
	FROM salesorders AS a
	LEFT JOIN salesorderitems AS b on a.company = b.company AND a.branch = b.branch AND a.docid = b.docid
	LEFT JOIN shiptypes AS c on a.shiptype = c.shiptype
  WHERE itemcode in ('w0001','w0002','w0003','w0004','w0005','b0001')
		AND a.company = pi_company AND a.branch = pi_branch
		
    AND (pi_datefr='' OR (pi_datefr<>'' and a.u_schedeldt >= pi_datefr))
    AND (pi_dateto='' OR (pi_dateto<>'' and a.u_schedeldt <= pi_dateto))
    AND (pi_pdatefr='' OR (pi_pdatefr<>'' and a.docdate >= pi_pdatefr))
    AND (pi_pdateto='' OR (pi_pdateto<>'' and a.docdate <= pi_pdateto))
    AND a.docstatus not in ('CN')
   	ORDER BY a.docdate, a.u_schedeldt, a.docno, b.itemcode;
  	
	DROP TEMPORARY TABLE IF EXISTS tmp_gastypes_sum;
	CREATE TEMPORARY TABLE tmp_gastypes_sum(
		docno varchar(20),
		ado decimal(25, 10),
		prem decimal(25, 10),
		unl decimal(25, 10),
		reg decimal(25, 10),
    ker decimal(25, 10),
    bfo decimal(25, 10),
		PRIMARY KEY(docno));
	INSERT INTO tmp_gastypes_sum()
		SELECT docno, SUM(ado), SUM(prem), SUM(unl), SUM(reg), SUM(ker), SUM(bfo)
		FROM tmp_gastypes
		GROUP BY docno;
	SELECT DATE(pi_datefr) AS Datefr, DATE(pi_dateto) AS Dateto,
         DATE(pi_pdatefr) AS PDatefr, DATE(pi_pdateto) AS PDateto,
    a.docdate, IFNULL(a.u_schedeldt, '') AS 'delivery_date',
		a.docno, a.bprefno, a.bpcode, a.bpname, a.u_schedeldt,
    a.docstatus as 'DocStatus',a.shiptype, c.shiptypename, a.u_depot,
		tgs.ado, tgs.prem, tgs.unl, tgs.reg, tgs.ker, tgs.bfo,  udfv.fieldvaluedesc as 'u_expecttime'
	FROM salesorders AS a
		LEFT JOIN salesorderitems AS b on a.company = b.company AND a.branch = b.branch AND a.docid = b.docid
		LEFT JOIN shiptypes AS c on a.shiptype = c.shiptype
		LEFT JOIN tmp_gastypes_sum AS tgs ON a.docno = tgs.docno
    LEFT JOIN udfvalues AS udfv on a.u_expecttime = udfv.fieldvalue and udfv.tablename='salesorders'
	WHERE b.itemcode IN ('W0001','W0002','W0003','W0004','W0005','B0001')
		AND a.company = pi_company AND a.branch = pi_branch
		
    AND (pi_datefr='' OR (pi_datefr<>'' and a.u_schedeldt >= pi_datefr))
    AND (pi_dateto='' OR (pi_dateto<>'' and a.u_schedeldt <= pi_dateto))
    AND (pi_pdatefr='' OR (pi_pdatefr<>'' and a.docdate >= pi_pdatefr))
    AND (pi_pdateto='' OR (pi_pdateto<>'' and a.docdate <= pi_pdateto))
    AND a.docstatus not in ('CN')
	GROUP BY a.docno
	ORDER BY a.docdate, a.u_schedeldt, a.docno, b.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_pickupdeliver1`
--

DROP PROCEDURE IF EXISTS `sp_pickupdeliver1`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_pickupdeliver1`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_datefr varchar(20),
	IN pi_dateto varchar(20),
  IN pi_pdatefr varchar(20),
  IN pi_pdateto varchar(20))
BEGIN
	DROP TEMPORARY TABLE IF EXISTS tmp_gastypes;
	CREATE TEMPORARY TABLE tmp_gastypes(
		docno varchar(20),
		ado decimal(25, 10),
		prem decimal(25, 10),
		unl decimal(25, 10),
		reg decimal(25, 10),
    ker decimal(25, 10),
    bfo decimal(25, 10),
    sfo decimal(25, 10),
    lpg decimal(25, 10));
	INSERT INTO tmp_gastypes()
SELECT a.docno,
			CASE WHEN b.itemcode = 'w0001' THEN b.quantity
				else 0 end AS 'ado',
			CASE WHEN b.itemcode = 'w0002' THEN b.quantity
				else 0 end AS 'prem',
			CASE WHEN b.itemcode = 'w0003' THEN b.quantity
				else 0 end AS 'unl',
			CASE WHEN b.itemcode = 'w0004' THEN b.quantity
				else 0 end AS 'reg',
      CASE WHEN b.itemcode = 'w0005' THEN b.quantity
				else 0 end AS 'ker',
      CASE WHEN b.itemcode = 'b0001' THEN b.quantity
				else 0 end AS 'bfo',
      CASE WHEN b.itemcode = 'b0002' THEN b.quantity
				else 0 end AS 'sfo',
      CASE WHEN b.itemcode = 'lpg0001' THEN b.quantity
				else 0 end AS 'lpg'
	FROM salesorders AS a
	LEFT JOIN salesorderitems AS b on a.company = b.company AND a.branch = b.branch AND a.docid = b.docid
	LEFT JOIN shiptypes AS c on a.shiptype = c.shiptype
  WHERE itemcode in ('w0001','w0002','w0003','w0004','w0005','b0001','b0002','lpg0001')
		AND a.company = pi_company AND a.branch = pi_branch
		
    AND (pi_datefr='' OR (pi_datefr<>'' and a.u_schedeldt >= pi_datefr))
    AND (pi_dateto='' OR (pi_dateto<>'' and a.u_schedeldt <= pi_dateto))
    AND (pi_pdatefr='' OR (pi_pdatefr<>'' and a.docdate >= pi_pdatefr))
    AND (pi_pdateto='' OR (pi_pdateto<>'' and a.docdate <= pi_pdateto))
    AND a.docstatus not in ('CN')
   	ORDER BY a.docdate, a.u_schedeldt, a.docno, b.itemcode;
  	
	DROP TEMPORARY TABLE IF EXISTS tmp_gastypes_sum;
	CREATE TEMPORARY TABLE tmp_gastypes_sum(
		docno varchar(20),
		ado decimal(25, 10),
		prem decimal(25, 10),
		unl decimal(25, 10),
		reg decimal(25, 10),
    ker decimal(25, 10),
    bfo decimal(25, 10),
    sfo decimal(25, 10),
    lpg decimal(25, 10),
		PRIMARY KEY(docno));
	INSERT INTO tmp_gastypes_sum()
		SELECT docno, SUM(ado), SUM(prem), SUM(unl), SUM(reg), SUM(ker), SUM(bfo), SUM(sfo), SUM(lpg)
		FROM tmp_gastypes
		GROUP BY docno;
	SELECT DATE(pi_datefr) AS Datefr, DATE(pi_dateto) AS Dateto,
         DATE(pi_pdatefr) AS PDatefr, DATE(pi_pdateto) AS PDateto,
    a.docdate, IFNULL(a.u_schedeldt, '') AS 'delivery_date',
		a.docno, a.bprefno, a.bpcode, a.bpname, a.u_schedeldt,
    a.docstatus as 'DocStatus',a.shiptype, c.shiptypename, a.u_depot,
		tgs.ado, tgs.prem, tgs.unl, tgs.reg, tgs.ker, tgs.bfo, tgs.sfo, tgs.lpg,  udfv.fieldvaluedesc as 'u_expecttime'
	FROM salesorders AS a
		LEFT JOIN salesorderitems AS b on a.company = b.company AND a.branch = b.branch AND a.docid = b.docid
		LEFT JOIN shiptypes AS c on a.shiptype = c.shiptype
		LEFT JOIN tmp_gastypes_sum AS tgs ON a.docno = tgs.docno
    LEFT JOIN udfvalues AS udfv on a.u_expecttime = udfv.fieldvalue and udfv.tablename='salesorders'
	WHERE b.itemcode IN ('W0001','W0002','W0003','W0004','W0005','B0001','B0002','LPG0001')
		AND a.company = pi_company AND a.branch = pi_branch
		
    AND (pi_datefr='' OR (pi_datefr<>'' and a.u_schedeldt >= pi_datefr))
    AND (pi_dateto='' OR (pi_dateto<>'' and a.u_schedeldt <= pi_dateto))
    AND (pi_pdatefr='' OR (pi_pdatefr<>'' and a.docdate >= pi_pdatefr))
    AND (pi_pdateto='' OR (pi_pdateto<>'' and a.docdate <= pi_pdateto))
    AND a.docstatus not in ('CN')
	GROUP BY a.docno
	ORDER BY a.docdate, a.u_schedeldt, a.docno, b.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_pickupdeliver2`
--

DROP PROCEDURE IF EXISTS `sp_pickupdeliver2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_pickupdeliver2`(
	IN pi_company varchar(20), IN pi_branch varchar(20),
	IN pi_datefr varchar(20),
	IN pi_dateto varchar(20),
  IN pi_pdatefr varchar(20),
  IN pi_pdateto varchar(20))
BEGIN
	DROP TEMPORARY TABLE IF EXISTS tmp_gastypes;
	CREATE TEMPORARY TABLE tmp_gastypes(
		docno varchar(20),
		ado decimal(25, 10),
		prem decimal(25, 10),
		unl decimal(25, 10),
		reg decimal(25, 10),
    ker decimal(25, 10),
    bfo decimal(25, 10),
    lpg decimal(25, 10));
	INSERT INTO tmp_gastypes()
SELECT a.docno,
			CASE WHEN b.itemcode = 'w0001' THEN b.quantity
				else 0 end AS 'ado',
			CASE WHEN b.itemcode = 'w0002' THEN b.quantity
				else 0 end AS 'prem',
			CASE WHEN b.itemcode = 'w0003' THEN b.quantity
				else 0 end AS 'unl',
			CASE WHEN b.itemcode = 'w0004' THEN b.quantity
				else 0 end AS 'reg',
      CASE WHEN b.itemcode = 'w0005' THEN b.quantity
				else 0 end AS 'ker',
      CASE WHEN b.itemcode = 'b0001' THEN b.quantity
				else 0 end AS 'bfo',
      CASE WHEN b.itemcode = 'lpg0001' THEN b.quantity
				else 0 end AS 'lpg'
	FROM salesorders AS a
	LEFT JOIN salesorderitems AS b on a.company = b.company AND a.branch = b.branch AND a.docid = b.docid
	LEFT JOIN shiptypes AS c on a.shiptype = c.shiptype
  WHERE itemcode in ('w0001','w0002','w0003','w0004','w0005','b0001','lpg0001')
		AND a.company = pi_company AND a.branch = pi_branch
		
    AND (pi_datefr='' OR (pi_datefr<>'' and a.u_schedeldt >= pi_datefr))
    AND (pi_dateto='' OR (pi_dateto<>'' and a.u_schedeldt <= pi_dateto))
    AND (pi_pdatefr='' OR (pi_pdatefr<>'' and a.docdate >= pi_pdatefr))
    AND (pi_pdateto='' OR (pi_pdateto<>'' and a.docdate <= pi_pdateto))
    AND a.docstatus not in ('CN')
   	ORDER BY a.docdate, a.u_schedeldt, a.docno, b.itemcode;
  	
	DROP TEMPORARY TABLE IF EXISTS tmp_gastypes_sum;
	CREATE TEMPORARY TABLE tmp_gastypes_sum(
		docno varchar(20),
		ado decimal(25, 10),
		prem decimal(25, 10),
		unl decimal(25, 10),
		reg decimal(25, 10),
    ker decimal(25, 10),
    bfo decimal(25, 10),
    lpg decimal(25, 10),
		PRIMARY KEY(docno));
	INSERT INTO tmp_gastypes_sum()
		SELECT docno, SUM(ado), SUM(prem), SUM(unl), SUM(reg), SUM(ker), SUM(bfo), SUM(lpg)
		FROM tmp_gastypes
		GROUP BY docno;
	SELECT DATE(pi_datefr) AS Datefr, DATE(pi_dateto) AS Dateto,
         DATE(pi_pdatefr) AS PDatefr, DATE(pi_pdateto) AS PDateto,
    a.docdate, IFNULL(a.u_schedeldt, '') AS 'delivery_date',
		a.docno, a.bprefno, a.bpcode, a.bpname, a.u_schedeldt,
    a.docstatus as 'DocStatus',a.shiptype, c.shiptypename, a.u_depot,
		tgs.ado, tgs.prem, tgs.unl, tgs.reg, tgs.ker, tgs.bfo, tgs.lpg,  udfv.fieldvaluedesc as 'u_expecttime'
	FROM salesorders AS a
		LEFT JOIN salesorderitems AS b on a.company = b.company AND a.branch = b.branch AND a.docid = b.docid
		LEFT JOIN shiptypes AS c on a.shiptype = c.shiptype
		LEFT JOIN tmp_gastypes_sum AS tgs ON a.docno = tgs.docno
    LEFT JOIN udfvalues AS udfv on a.u_expecttime = udfv.fieldvalue and udfv.tablename='salesorders'
	WHERE b.itemcode IN ('W0001','W0002','W0003','W0004','W0005','B0001','LPG0001')
		AND a.company = pi_company AND a.branch = pi_branch
		
    AND (pi_datefr='' OR (pi_datefr<>'' and a.u_schedeldt >= pi_datefr))
    AND (pi_dateto='' OR (pi_dateto<>'' and a.u_schedeldt <= pi_dateto))
    AND (pi_pdatefr='' OR (pi_pdatefr<>'' and a.docdate >= pi_pdatefr))
    AND (pi_pdateto='' OR (pi_pdateto<>'' and a.docdate <= pi_pdateto))
    AND a.docstatus not in ('CN')
	GROUP BY a.docno
	ORDER BY a.docdate, a.u_schedeldt, a.docno, b.itemcode;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_po`
--

DROP PROCEDURE IF EXISTS `sp_po`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_po`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.BPCODE as bpcode,
       a.BPNAME as bpname,
       a.SHIPTOADDRESS as shiptoadd,
       a.BPREFNO as bprefno,
       a.DOCDATE as docdate,
       a.DOCNO as docno,
       b.PAYMENTTERMNAME as term,
       d.ITEMCODE as itemcode,
       d.ITEMDESC as itemdesc,
       d.QUANTITY as qty,
       d.UNITPRICE as unitprice,
       d.LINETOTAL as linetotal,
       i.username as created_by,
       d.uom as unit,
       if(a.shiptoaddress is null,e.branchname,concat("(",e.branchname,")",' ',a.shiptoaddress) ) as 'shiptoaddress' ,
       a.remarks
       
       from purchaseorders a
            left outer join purchaseorderitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join paymentterms b on a.PAYMENTTERM = b.PAYMENTTERM
            left outer join items u on u.itemcode = d.itemcode
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join users i on d.CREATEDBY = i.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno and a.docstatus = 'O';
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_pot`
--

DROP PROCEDURE IF EXISTS `sp_pot`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_pot`(
	IN pi_company varchar(20), pi_branch varchar(20),
	IN pi_date_fr varchar(20), IN pi_date_to varchar(20))
BEGIN
	DECLARE company_name varchar(100);
	DECLARE branch_name varchar(100);
	
	SET company_name := (SELECT UPPER(c.companyname) FROM companies AS c WHERE c.companycode = pi_company);
	SET branch_name := (SELECT UPPER(b.branchname) FROM branches AS b WHERE b.branchcode = pi_branch);

	SELECT 
		
		company_name, branch_name,
		IFNULL(cg.groupname, '') AS 'custgroup_name',
		
		po.docno AS 'po_docno', po.docdate AS 'po_docdate',
		po.bpcode AS 'po_bpcode', po.bpname AS 'po_bpname',
		pod.itemcode AS 'po_itemcode', pod.itemdesc AS 'po_itemdesc', pod.quantity AS 'po_quantity',
		
		IFNULL(api.docno, '') AS 'ap_docno', api.docdate AS 'ap_docdate', IFNULL(api.docstatus, '') AS 'ap_docstatus',
		IFNULL(apid.itemdesc, '') AS 'ap_itemdesc', IFNULL(apid.quantity, 0) AS 'ap_quantity'
	FROM purchaseorders AS po
		LEFT JOIN purchaseorderitems AS pod 
			ON po.company = pod.company AND po.branch = pod.branch AND po.docid = pod.docid
		LEFT JOIN apinvoiceitems AS apid
			ON pod.company = apid.company AND pod.branch = apid.branch 
				AND pod.docid = apid.basedocid AND pod.lineid = apid.baselineid AND pod.itemcode = apid.itemcode
				LEFT JOIN items AS i ON apid.itemcode = i.itemcode
			LEFT JOIN apinvoices AS api
				ON apid.company = api.company AND apid.branch = api.branch AND apid.docid = api.docid
		LEFT JOIN customers c ON po.company = c.company AND po.bpcode = c.custno
		LEFT JOIN customergroups AS cg ON c.custgroup = cg.custgroup
	WHERE 
		po.company = pi_company AND po.branch = 'ho'
		AND po.docdate BETWEEN pi_date_fr AND pi_date_to;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_pp`
--

DROP PROCEDURE IF EXISTS `sp_pp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_pp`()
BEGIN
	SELECT DISTINCT da.branch, b.branchname, da.docno, da.docdate, das.seqid, asu.userid, u.username
	FROM documentapprovals AS da
		LEFT JOIN documentapprovalstages AS das
			ON da.company = das.company AND da.branch = das.branch AND da.docid = das.docid
		LEFT JOIN approvalstageusers AS asu
			ON das.stepcode = asu.stepcode
			LEFT JOIN users AS u
				ON asu.userid = u.userid
		LEFT JOIN branches AS b
			ON da.company = b.companycode AND da.branch = b.branchcode
	WHERE da.status = 'p'
		
		AND asu.userid NOT IN ('ess', 'adv');
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_purchaseorder`
--

DROP PROCEDURE IF EXISTS `sp_purchaseorder`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_purchaseorder`(IN pi_docno VARCHAR (30))
BEGIN
select a.company as company,
       a.branch as branch,
       a.docno as docno,
       a.shiptoaddress as deliverto,
       a.docdate as docdate,
       a.paymentterm as term,
       a.bprefno as refno,
       b.docid as docid,
       b.itemdesc as description,
       b.quantity as qty,
       f.uomsa as unit,
       b.unitprice as uprice,
       b.linetotal as amount,
       a.bpname as vendor,
       e.paymenttermname as pytname,
       f.uomsa as unit,
       a.u_pr_no as prno,
       b.linetotal
from purchaseorders a
inner join purchaseorderitems b on a.docid=b.docid
inner join items f on b.itemcode=f.itemcode
inner join paymentterms e on a.paymentterm=e.paymentterm
where a.docno = pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_retailsr`
--

DROP PROCEDURE IF EXISTS `sp_retailsr`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_retailsr`(IN pi_company VARCHAR(30),
                                   IN pi_branch VARCHAR(30),
                                   IN pi_datefr VARCHAR(30),
                                   IN pi_dateto VARCHAR(30),
                                   IN pi_area VARCHAR(30))
BEGIN
select
        DATE_FORMAT(pi_datefr,'%m/%d/%Y') AS Datefr, DATE_FORMAT(pi_dateto,'%m/%d/%Y') AS Dateto,
        sto.docdate,
        sto.bpname,
        sto.docno,
        sto.u_dr_no,
	      stoi.fromwhscode,
	      
        w.warehousename as 'whscode',
        stoi.itemdesc,
        stoi.quantity,
        i.uomsa,
        p.paymenttermname,
        if(substring_index(stoi.fromwhscode,'-',1)='UGT',stoi.fromwhscode,substring_index(stoi.fromwhscode,'-',1)) as bwarehouse,
        if(sto2.docno is null,'',sto2.docno) as 'returnedrefno',
        if(pi_area='','',ud.name) as 'depotname',
        if(pi_area<>'','',sto.u_depot) as 'depot',
        pi_area
from stocktransfers sto
inner join stocktransferitems AS stoi on sto.company = stoi.company AND sto.branch = stoi.branch AND sto.docid = stoi.docid
inner join items i on i.itemcode = stoi.itemcode
left join customers c on sto.bpcode = c.custno
left join warehouses w on stoi.whscode = w.warehouse
left join paymentterms p on c.paymentterm = p.paymentterm
left outer join stocktransfers sto2 on sto2.company = sto.company AND sto2.branch = sto.branch AND sto2.u_returnrefno = sto.docno
left outer join u_depot ud on sto.u_depot=ud.name
where sto.company = pi_company
    AND sto.branch = pi_branch
    AND sto.docdate BETWEEN pi_datefr AND pi_dateto
    AND (pi_area=''or (pi_area<>'' and pi_area=ud.code))
    AND (sto.u_returned='n' or sto.u_returned is null)
    AND (sto.u_returnrefno='' or sto.u_returnrefno is null)
    AND (sto2.docno is null or sto2.docno='')
order by sto.docdate,sto.bpcode,sto.docno,stoi.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_rr`
--

DROP PROCEDURE IF EXISTS `sp_rr`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_rr`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.BPCODE as bpcode,
       a.BPNAME as bpname,
       a.BPREFNO as bprefno,
       a.DOCDATE as docdate,
       a.DOCNO as docno,
       d.ITEMCODE as itemcode,
       d.ITEMDESC as itemdesc,
       d.QUANTITY as qty,
       i.username as created_by,
       u.uomsa as unit,
       a.u_rr_no as rr,
       a.u_supp_dr as dr,
       a.u_supp_inv as inv,
       a.u_plateno as plateno,
       a.u_driver as driver,
       a.u_hauler as haulercode,
       s.suppname as haulername
       from apinvoices a
            left outer join apinvoiceitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join items u on u.itemcode = d.itemcode
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join users i on d.CREATEDBY = i.userid
            left join suppliers s on a.u_hauler = s.suppno
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno and a.docstatus = 'O';
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_salesinvoice`
--

DROP PROCEDURE IF EXISTS `sp_salesinvoice`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_salesinvoice`(IN pi_docno VARCHAR(30))
BEGIN
select  ar.bpname,
        ar.shiptoaddress,
        ar.docno,
        ar.bprefno,
        ar.basedocno,
        ar.docdate,
        ar.paymentterm,
        ari.quantity,
        i.uomsa,
        ari.itemdesc,
        if (ar.shiptype = '001', 'X','') as pickup,
        if (ar.shiptype = '002', 'X','') as delivery,
        ari.unitprice,
        ari.linetotal,
        ar.u_si_no,
        p.paymenttermname,
        ar.u_dr_no,
        ar.totalbefdisc,
        ar.vatamount,
	ar.dueamount
from arinvoices ar
inner join arinvoiceitems ari on ari.docid = ar.docid
inner join items i on i.itemcode = ari.itemcode
inner join paymentterms p on ar.paymentterm = p.paymentterm
where ar.docno = pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_salesorder`
--

DROP PROCEDURE IF EXISTS `sp_salesorder`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_salesorder`(IN pi_company VARCHAR(30),IN pi_branch VARCHAR(30),IN pi_docno VARCHAR(30))
BEGIN
select so.bpname,so.billtoaddress,so.shiptoaddress,so.shiptype,so.docno,so.bprefno,so.docdate,sp.salespersonname,
so.docduedate,p.paymenttermname,si.quantity,i.uomsa,si.itemdesc as itemdesc,si.price as price,si.linetotal as linetotal,
if (so.shiptype = '001', 'X','') as pickup,if (so.shiptype = '002', 'X','') as delivery,so.remarks,si.basedocno,
so.totalamount
from salesorders so
inner join salespersons sp on so.salesperson = sp.salesperson
inner join paymentterms p on so.paymentterm = p.paymentterm
inner join salesorderitems si on so.docid = si.docid and so.branch=si.branch and so.company=si.company
inner join items i on si.itemcode = i.itemcode
where
so.company=pi_company  and
so.branch=pi_branch and
so.docno = pi_docno
union
select so.bpname,so.billtoaddress,so.shiptoaddress,so.shiptype,so.docno,so.bprefno,so.docdate,sp.salespersonname,
so.docduedate,p.paymenttermname,
CASE WHEN si.chrgcode='ECC' THEN so.u_eccqty ELSE 0 END AS 'quantity',
CASE WHEN si.chrgcode='ECC' THEN 'L' ELSE '' END AS 'uomsa',
si.chrgname as 'itemdesc',
CASE WHEN si.chrgcode='FREIGHT' THEN uf.u_wvat
     WHEN si.chrgcode='ECC' THEN uf.u_ecc
     WHEN si.chrgcode='PUMPING' THEN uf.u_pumping
ELSE 0 END AS 'price',
si.amount as 'linetotal',
so.u_commref,so.u_comm,so.u_costsheet,if (so.shiptype = '001', 'X','') as pickup,if (so.shiptype = '002', 'X','') as delivery,so.remarks,'' as 'basedocno',
so.totalamount,so.u_schedeldt,so.u_po_no, so.u_expecttime, so.u_freightrate, so.u_eccqty, so.u_eccrate, so.u_pumpingrate
from salesorders so
inner join salespersons sp on so.salesperson = sp.salesperson
inner join paymentterms p on so.paymentterm = p.paymentterm
inner join salesorderotherchargesitems si on so.docid = si.docid and so.branch=si.branch and so.company=si.company
left outer join customers c on so.bpcode=c.custno
where
so.company=pi_company  and
so.branch=pi_branch and
so.docno = pi_docno;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_soa`
--

DROP PROCEDURE IF EXISTS `sp_soa`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_soa`(
	IN pi_company varchar(30), pi_branch varchar(30),
	IN pi_bpcode varchar(30))
BEGIN
	DROP TEMPORARY TABLE IF EXISTS tmp_totalvolume;
	CREATE TEMPORARY TABLE tmp_totalvolume (
		del_date varchar(30),
		total_volume decimal(25, 10));
	INSERT INTO tmp_totalvolume()
		SELECT ai.docdate, SUM(aii.quantity)
		FROM arinvoices AS ai
			LEFT JOIN arinvoiceitems AS aii
				ON ai.company = aii.company AND ai.branch = aii.branch AND ai.docid = aii.docid
		WHERE ai.docstatus = 'o' 
			AND aii.itemcode IN ('w0001', 'w0002', 'w0003', 'w0004')
			AND ai.company = pi_company AND ai.branch = 'ho'
			AND ai.bpcode = pi_bpcode
		GROUP BY ai.docdate;
	
	SELECT 
		
		ai.bpcode AS 'to_bp_code', ai.bpname AS 'to_bp_name', ai.billtoaddress AS 'address',
		
		ai.u_freightrate AS 'freight_rate', ai.u_eccrate AS 'ecc_rate', ai.u_pumpingrate AS 'pumping_rate',
		ai.u_eccqty AS 'ecc_quantity', ttv.total_volume AS 'total_volume',
		
		ai.docdate AS 'delivery_date', 
		ai.bprefno AS 'so_no', aii.basedocno AS 'so_base_doc',
		ai.u_dr_no AS 'dr_no', ai.docno AS 'dr_doc_no',
		ai.u_po_no AS 'po_no',
		aii.itemcode AS 'item_code', aii.itemdesc AS 'product', aii.quantity AS 'particular', 
		aii.unitprice AS 'unit_price',
		ai.settledamount AS 'less'
	FROM arinvoices AS ai
		LEFT JOIN arinvoiceitems AS aii
			ON ai.company = aii.company AND ai.branch = aii.branch AND ai.docid = aii.docid
		LEFT JOIN tmp_totalvolume AS ttv
			ON ai.docdate = ttv.del_date
	WHERE ai.docstatus = 'o' 
		AND aii.itemcode IN ('w0001', 'w0002', 'w0003', 'w0004')
		AND ai.company = pi_company AND ai.branch = 'ho'
		AND ai.bpcode = pi_bpcode
	ORDER BY ai.docdate;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_stock`
--

DROP PROCEDURE IF EXISTS `sp_stock`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_stock`(IN pi_docno VARCHAR(30))
BEGIN
select sto.bpcode,sto.bpname,sto.shiptoaddress,sto.docno,sto.docdate,sto.taxdate,sto.fromwhscode,
stoi.itemcode,stoi.itemdesc,stoi.whscode,stoi.quantity,stoi.u_tankno,
sto.u_hauler as haulercode,
s.suppname as haulername,
sto.u_driver,sto.u_plateno,sto.u_dr_no,sto.u_atl,sto.u_schedeldt,
i.uomsa,p.paymenttermname
from stocktransfers sto
inner join stocktransferitems stoi on stoi.docid = sto.docid
inner join items i on i.itemcode = stoi.itemcode
left join suppliers s on sto.u_hauler = s.suppno
left join customers c on sto.bpcode = c.custno
left join paymentterms p on c.paymentterm = p.paymentterm
where sto.docno = pi_docno
and sto.docstatus = 'C';
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_stockbywarehouse`
--

DROP PROCEDURE IF EXISTS `sp_stockbywarehouse`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_stockbywarehouse`(IN pi_company VARCHAR(30), IN pi_warehouse VARCHAR(30), IN pi_itemcode VARCHAR(30))
BEGIN

select

upper(f.COMPANYNAME) as company,
upper(concat(sc.branch,' - ', e.BRANCHNAME)) as branchdesc,
sc.branch,
sc.itemcode,
i.itemdesc,
concat(sc.itemcode,' - ', i.itemdesc) as itemdescription,
sc.warehouse,
w.warehousename,
sum(sc.instockqty) as inqty,
date(now()) as today

from stockcardsummary sc
left outer join branches e on e.BRANCHCODE = sc.branch
left outer join companies f on f.COMPANYCODE = sc.company
left outer join warehouses w on w.warehouse = sc.warehouse
left outer join items i on i.itemcode=sc.itemcode

where sc.warehouse = pi_warehouse and
      ((pi_itemcode='') or (pi_itemcode<>'' and sc.itemcode=pi_itemcode ))

group by sc.branch,sc.warehouse,sc.itemcode having sum(sc.instockqty) > 0
order by sc.itemcode,sc.branch;


END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_stockinout`
--

DROP PROCEDURE IF EXISTS `sp_stockinout`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_stockinout`(IN pi_docno VARCHAR(30), IN pi_company VARCHAR(30),IN pi_branch VARCHAR(30))
BEGIN
select sto.bpcode,sto.bpname,sto.shiptoaddress,sto.docno,sto.docdate,sto.taxdate,sto.fromwhscode,
stoi.itemcode,stoi.itemdesc,stoi.whscode,stoi.quantity,stoi.u_tankno,
sto.u_hauler as haulercode,
s.suppname as haulername,
sto.u_driver,sto.u_plateno,sto.u_dr_no,sto.u_atl,sto.u_schedeldt,sto.u_sto_no,
i.uomsa,p.paymenttermname,w.warehousename,w1.warehousename as 'fromwarehousename'
from stocktransfers sto
inner join stocktransferitems stoi on stoi.docid = sto.docid and stoi.branch = sto.branch and stoi.company = sto.company
inner join items i on i.itemcode = stoi.itemcode
left join suppliers s on sto.u_hauler = s.suppno
left join customers c on sto.bpcode = c.custno
left join paymentterms p on c.paymentterm = p.paymentterm
left join warehouses w on stoi.whscode=w.warehouse
left join warehouses w1 on sto.fromwhscode=w1.warehouse
where sto.docno = pi_docno
and sto.docstatus = 'C';
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_stockledger`
--

DROP PROCEDURE IF EXISTS `sp_stockledger`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_stockledger`()
BEGIN    Select itemcode,'' as itemname, refdate, refno,reftype, qty as quantity, costprice as itemcost, 0 as balance from stockcard limit 0,100;  END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_strequest`
--

DROP PROCEDURE IF EXISTS `sp_strequest`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_strequest`(IN pi_docno VARCHAR(30),
				                        IN pi_company VARCHAR(30),
				                        IN pi_branch VARCHAR(30))
BEGIN

select 
	sto.bpcode,
	sto.bpname,
	sto.docno,
	sto.docdate,
	stoi.itemcode,
	stoi.itemdesc,
	stoi.quantity,
	stoi.u_tankno,
	sto.u_schedeldt,
	sto.u_expecttime,
	i.uomsa,
	u.username,
	sto.remarks,
	DATE_FORMAT(sto.datecreated,'%M %d %Y') as createddate

from stocktransfers sto
inner join stocktransferitems stoi on stoi.docid = sto.docid and stoi.branch = sto.branch and stoi.company = sto.company
inner join items i on i.itemcode = stoi.itemcode
left join customers c on sto.bpcode = c.custno
left join paymentterms p on c.paymentterm = p.paymentterm
inner join users u
  on p.createdby = u.userid
where sto.docno = pi_docno
and sto.docstatus = 'D';

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_task_itemscommited`
--

DROP PROCEDURE IF EXISTS `sp_task_itemscommited`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_task_itemscommited`()
BEGIN

update stockcardsummary set commitedqty=0;
update stockcardsummary set commitedqty=ifnull((select sum(salesorderitems.openquantity) from salesorderitems, salesorders where salesorderitems.docid=salesorders.docid and salesorders.docstatus not in ('CN','C') and salesorderitems.itemcode=stockcardsummary.itemcode and salesorderitems.whscode=stockcardsummary.warehouse),0)
    ;
update stockcardsummary set availableqty=instockqty+orderedqty-commitedqty;

select 1;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `sp_test`
--

DROP PROCEDURE IF EXISTS `sp_test`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `sp_test`()
BEGIN
	SELECT '' AS test FROM salesorders;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `statement_of_account`
--

DROP PROCEDURE IF EXISTS `statement_of_account`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `statement_of_account`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_source VARCHAR(30),
IN pi_date VARCHAR(30))
BEGIN
  DECLARE v_advms DATE;
  DECLARE v_advme DATE;
  DECLARE v_30ms DATE;
  DECLARE v_60ms DATE;
  DECLARE v_90ms DATE;
  DECLARE v_30me DATE;
  DECLARE v_60me DATE;
  DECLARE v_90me DATE;
  DECLARE v_MONTH_END INT;
  SET v_30ms = date(concat(substring(pi_date,1,7),'-01'));
  SET v_advms = v_30ms + interval 1 month;
  SET v_60ms = v_30ms - interval 1 month;
  SET v_90ms = v_30ms - interval 2 month;
  SET v_30me = date(pi_date);
  SET v_advme = last_day(v_30me + interval 1 month);
  SET v_60me = last_day(v_30me - interval 1 month);
  SET v_90me = last_day(v_30me - interval 2 month);
  SET v_MONTH_END = concat('-',substring(v_60me,9,2)+1);
CREATE TEMPORARY TABLE  `payments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `SOURCE` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` varchar(10) NULL default '',
    `REMARKS` varchar(1000) NULL default '',
    `REFTYPE` varchar(50) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company, a.branch, a.docno, a.docno, a.DOCDATE,
        'A/R Invoice', 1, a.totalamount
        from arinvoices a
        where a.company = pi_company
        and a.branch = pi_branch
        and a.trxtype<>'POS' and a.accttype='' AND a.DOCSTATUS NOT IN('D')
        and a.docdate <= pi_date
        AND a.bpcode = pi_source;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company, a.branch, a.docno, c.DOCNO, c.DOCDATE,
        if(c.pdc = 1, concat('PDC - ', 'Bank :', d.bank,  ' Cheque No. :', d.checkno, ' Cheque Date:', d.checkdate),C.REMARKS), 1, 0-(b.amount - b.penaltypaid) as AMOUNT
        from arinvoices a
             left outer join collectionsinvoices b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join collections c on c.company = b.company and c.branchcode = b.branch and c.docno = b.docno
             left outer join collectionscheques d on d.company = b.company and d.branch = b.branch and d.docno = b.docno
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        AND a.bpcode = pi_source;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company,a.branch,a.docno, c.DOCNO, c.DOCDATE, C.REMARKS, 1, 0-(b.credit - b.debit) as AMOUNT
        from arinvoices a
             left outer join journalvoucheritems b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join journalvouchers c on c.company = b.company and c.branch = b.branch and c.docid = b.docid
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        AND a.bpcode = pi_source
        and c.docdate <= pi_date;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
    select a.COMPANY, a.BRANCH, if(a.BASEDOCNO = '', b.BASEDOCNO, a.BASEDOCNO), a.DOCNO, a.DOCDATE, 'Sales Return', 1, 0-(a.BASEAMOUNT)
           from arcreditmemos a
                left outer join arcreditmemoitems b on a.docid = b.docid and a.company = b.company
                and a.branch = b.branch
           WHERE a.company = pi_company AND a.branch = pi_branch
                 AND a.bpcode = pi_source AND a.DOCDATE <= pi_date
           GROUP by a.DOCNO;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company, a.branch, a.docno, c.DOCNO, c.DOCDATE, e.CHRGNAME, 0, 0-(b.amount) as AMOUNT
        from arinvoices a
             left outer join collectionsothercharges b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join collections c on c.company = b.company and c.branchcode = b.branch and c.docno = b.docno
             left outer join othercharges e on b.CHRGCODE = e.CHRGCODE
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        AND a.bpcode = pi_source;
  INSERT
    INTO payments (COMPANY,BRANCH,SOURCE,DOCNO,DOCDATE,REMARKS,REFTYPE,AMOUNT)
        SELECT a.company, a.branch, a.docno, c.DOCNO, c.DOCDATE, e.cashcardname, 0, b.amount as AMOUNT
        from arinvoices a
             left outer join collectionscashcards b on b.company = a.company and b.branch = a.branch and b.refno = a.docno
             left outer join collections c on c.company = b.company and c.branchcode = b.branch and c.docno = b.docno
             left outer join cashcards e on b.cashcard = e.cashcard
        where a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        AND a.bpcode = pi_source;
CREATE TEMPORARY TABLE  `payments_sum_openning` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `SOURCE` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` varchar(10) NULL default '',
    `REMARKS` varchar(1000) NULL default '',
    `REFTYPE` varchar(50) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO payments_sum_openning (COMPANY,BRANCH,SOURCE,AMOUNT)
      Select COMPANY,BRANCH,SOURCE,sum(AMOUNT) from payments where docdate <= v_60me group by company;
CREATE TEMPORARY TABLE  `payments_sum_closing` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `SOURCE` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DOCDATE` varchar(10) NULL default '',
    `REMARKS` varchar(1000) NULL default '',
    `REFTYPE` varchar(50) NULL default '',
    `AMOUNT` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO payments_sum_closing (COMPANY,BRANCH,SOURCE,AMOUNT)
      Select COMPANY,BRANCH,SOURCE,sum(AMOUNT) from payments
              where docdate <= pi_date group by company;
CREATE TEMPORARY TABLE  `address` (
    `CUSTNO` varchar(30) NULL default '',
    `ADDRESS` varchar(1000) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO address (CUSTNO,ADDRESS)
         SELECT REFID, concat(ad.STREET,', ', ad.BARANGAY,', ', ad.CITY,', ', ad.ZIP,' ', ad.COUNTRY)
           FROM addresses ad
           WHERE ad.REFID = pi_source and ad.ADDRESSTYPE = 0 LIMIT 1;
DROP TEMPORARY TABLE IF EXISTS `pdcpayments`;
CREATE TEMPORARY TABLE  `pdcpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `ACCTNO` varchar(30) NULL default '',
    `PDCAMOUNT` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`ACCTNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO pdcpayments (COMPANY,BRANCH,ACCTNO,PDCAMOUNT)
      SELECT a.company,a.branch,a.refno, sum(a.rebate + a.amount) as pdcamount
        from collectionsinvoices a, collectionscheques b, collections c
        where b.company = a.company and b.branch = a.branch
        and b.docno = a.docno
        and b.company = c.company
        and b.branch = c.branchcode
        and b.docno = c.docno
        and c.pdc=1
        and a.company = pi_company and a.branch = pi_branch
        and b.checkdate >= pi_date
        group by a.refno;
DROP TEMPORARY TABLE IF EXISTS `balances`;
CREATE TEMPORARY TABLE  `balances` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by a.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by d.DOCNO;
  INSERT
    INTO balances (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.amount - b.penaltypaid) as BALANCE, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and (c.docdate <= pi_date)
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `journalpayments`;
CREATE TEMPORARY TABLE  `journalpayments` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,d.docno, sum(b.credit - b.debit) as BALANCE, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by d.DOCNO;
  INSERT
    INTO journalpayments (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
        SELECT a.company,a.branch,a.docno, sum(b.debit - b.credit) as BALANCE, c.DOCDATE
        from arcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and c.docdate <= pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `sale_return`;
CREATE TEMPORARY TABLE  `sale_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO sale_return (COMPANY,BRANCH,DOCNO,BALANCE,DOCDATE)
       SELECT a.company,a.branch,a.docno, sum(b.BASEAMOUNT), b.DOCDATE
        from arinvoices a, arcreditmemos b
        where b.company = a.company
        and b.branch = a.branch
        and (b.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and b.docdate <= pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `adv`;
CREATE TEMPORARY TABLE  `adv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arinvoices a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, collectionsinvoices b, collections c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype=''
        and c.valuedate > pi_date
        group by d.DOCNO;
  INSERT
    INTO adv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.amount - b.penaltypaid) as advancepayment, c.DOCDATE
        from arcreditmemos a, collectionsinvoices b, collections c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branchcode = b.branch
        and c.docno = b.docno
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.valuedate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `advjv`;
CREATE TEMPORARY TABLE  `advjv` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arinvoices a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,d.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from journalvouchers a, journalvoucheritems d, journalvoucheritems b, journalvouchers c
        where d.company = a.company
        and d.branch = a.branch
        and d.docid = a.docid
        and b.company = a.company
        and b.branch = a.branch
        and b.refno = d.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and d.company = pi_company
        and d.branch = pi_branch
        and d.itemtype = 'C'
        AND d.reftype = ''
        AND d.accttype=''
        and c.docdate > pi_date
        group by d.DOCNO;
  INSERT
    INTO advjv (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
        SELECT a.company,a.branch,a.docno, 0 - sum(b.credit - b.debit) as advancepayment, c.DOCDATE
        from arcreditmemos a, journalvoucheritems b, journalvouchers c
        where b.company = a.company
        and b.branch = a.branch
        and b.refno = a.docno
        and c.company = b.company
        and c.branch = b.branch
        and c.docid = b.docid
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype=''
        and c.docdate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `adv_sales_return`;
CREATE TEMPORARY TABLE  `adv_sales_return` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `advancepayment` NUMERIC(18,6) NULL default '0',
    `DOCDATE` varchar(10) NULL default '',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO adv_sales_return (COMPANY,BRANCH,DOCNO,advancepayment,DOCDATE)
       SELECT a.company,a.branch,a.docno, sum(0 - b.BASEAMOUNT), b.DOCDATE
        from arinvoices a, arcreditmemos b
        where b.company = a.company
        and b.branch = a.branch
        and (b.BASEDOCNO = a.docno)
        and a.company = pi_company
        and a.branch = pi_branch
        AND a.accttype='' and a.docdate <= pi_date
        and b.docdate > pi_date
        group by a.DOCNO;
DROP TEMPORARY TABLE IF EXISTS `concatfield`;
CREATE TEMPORARY TABLE  `concatfield` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `advpay` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`DOCNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D15,D30,UP30)
    SELECT arinvoices.COMPANY, arinvoices.BRANCH, arinvoices.DOCNO,
        (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(arinvoices.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (arinvoices.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) >= 31
        then (arinvoices.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM arinvoices
        LEFT OUTER JOIN departments on if(arinvoices.saletype = '', arinvoices.department = departments.department, arinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arinvoices.COMPANY = balances.COMPANY AND arinvoices.BRANCH = balances.BRANCH AND arinvoices.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arinvoices.COMPANY = journalpayments.COMPANY AND arinvoices.BRANCH = journalpayments.BRANCH AND arinvoices.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arinvoices.COMPANY = adv.COMPANY AND arinvoices.BRANCH = adv.BRANCH AND arinvoices.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arinvoices.COMPANY = advjv.COMPANY AND arinvoices.BRANCH = advjv.BRANCH AND arinvoices.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON arinvoices.COMPANY = sale_return.COMPANY AND arinvoices.BRANCH = sale_return.BRANCH AND arinvoices.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON arinvoices.COMPANY = adv_sales_return.COMPANY AND arinvoices.BRANCH = adv_sales_return.BRANCH AND arinvoices.DOCNO = adv_sales_return.DOCNO
        WHERE arinvoices.trxtype<>'POS' and arinvoices.accttype='' and arinvoices.docdate <= pi_date
        AND arinvoices.BPCODE = pi_source
        AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        GROUP BY arinvoices.DOCNO
        ORDER BY arinvoices.docno ASC;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D15,D30,UP30)
    SELECT journalvoucheritems.COMPANY, journalvoucheritems.BRANCH, journalvoucheritems.DOCNO,
        (journalvoucheritems.grossamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(journalvouchers.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (journalvoucheritems.grossamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) >= 31
        then (journalvoucheritems.grossamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvoucheritems.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON journalvouchers.COMPANY = balances.COMPANY AND journalvouchers.BRANCH = balances.BRANCH AND journalvoucheritems.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON journalvouchers.COMPANY = journalpayments.COMPANY AND journalvouchers.BRANCH = journalpayments.BRANCH AND journalvoucheritems.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON journalvouchers.COMPANY = adv.COMPANY AND journalvouchers.BRANCH = adv.BRANCH AND journalvoucheritems.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON journalvouchers.COMPANY = advjv.COMPANY AND journalvouchers.BRANCH = advjv.BRANCH AND journalvoucheritems.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON journalvouchers.COMPANY = sale_return.COMPANY AND journalvouchers.BRANCH = sale_return.BRANCH AND journalvoucheritems.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON journalvouchers.COMPANY = adv_sales_return.COMPANY AND journalvouchers.BRANCH = adv_sales_return.BRANCH AND journalvoucheritems.DOCNO = adv_sales_return.DOCNO
        WHERE journalvoucheritems.itemtype = 'C'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
        GROUP BY journalvoucheritems.DOCNO
        ORDER BY journalvoucheritems.DOCNO ASC;
INSERT
    INTO concatfield (COMPANY,BRANCH,DOCNO,DUEAMOUNT,advpay,current,D15,D30,UP30)
    SELECT arcreditmemos.COMPANY, arcreditmemos.BRANCH, arcreditmemos.DOCNO,
        (arcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) as DUEAMOUNT,
        (if (adv.advancepayment is null, 0, adv.advancepayment) +
        if (advjv.advancepayment is null, 0, advjv.advancepayment) +
        if (adv_sales_return.advancepayment is null, 0, adv_sales_return.advancepayment)) AS advpay,
        if(arcreditmemos.DOCDUEDATE <= v_advme,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) <=0
        and datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) > v_MONTH_END
        then (arcreditmemos.totalamount - if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))<0,
        (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)),0) end
        ,0) as 'current',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 1 and 15 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D15',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d'))
        between 16 and 30 then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'D30',
        if((arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE))>0,
        case when datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) >= 31
        then (arcreditmemos.totalamount -
        if (balances.BALANCE is null, 0, balances.BALANCE) -
        if (journalpayments.BALANCE is null, 0, journalpayments.BALANCE) -
        if (sale_return.BALANCE is null, 0, sale_return.BALANCE)) else 0.00 end,
        0) as 'UP30'
        FROM arcreditmemos
        LEFT OUTER JOIN departments on if(arcreditmemos.saletype = '', arcreditmemos.department = departments.department, arcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arcreditmemos.COMPANY = pdcpayments.COMPANY AND arcreditmemos.BRANCH = pdcpayments.BRANCH AND arcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN balances ON arcreditmemos.COMPANY = balances.COMPANY AND arcreditmemos.BRANCH = balances.BRANCH AND arcreditmemos.DOCNO = balances.DOCNO
        LEFT OUTER JOIN journalpayments ON arcreditmemos.COMPANY = journalpayments.COMPANY AND arcreditmemos.BRANCH = journalpayments.BRANCH AND arcreditmemos.DOCNO = journalpayments.DOCNO
        LEFT OUTER JOIN adv ON arcreditmemos.COMPANY = adv.COMPANY AND arcreditmemos.BRANCH = adv.BRANCH AND arcreditmemos.DOCNO = adv.DOCNO
        LEFT OUTER JOIN advjv ON arcreditmemos.COMPANY = advjv.COMPANY AND arcreditmemos.BRANCH = advjv.BRANCH AND arcreditmemos.DOCNO = advjv.DOCNO
        LEFT OUTER JOIN sale_return ON arcreditmemos.COMPANY = sale_return.COMPANY AND arcreditmemos.BRANCH = sale_return.BRANCH AND arcreditmemos.DOCNO = sale_return.DOCNO
        LEFT OUTER JOIN adv_sales_return ON arcreditmemos.COMPANY = adv_sales_return.COMPANY AND arcreditmemos.BRANCH = adv_sales_return.BRANCH AND arcreditmemos.DOCNO = adv_sales_return.DOCNO
        WHERE arcreditmemos.totalamount > 0 AND arcreditmemos.accttype = ''
        AND arcreditmemos.docdate <= pi_date
        AND arcreditmemos.BPCODE = pi_source
        AND arcreditmemos.COMPANY = pi_company AND arcreditmemos.BRANCH = pi_branch
        GROUP BY arcreditmemos.DOCNO
        ORDER BY arcreditmemos.docno ASC;
DROP TEMPORARY TABLE IF EXISTS `mainfield`;
CREATE TEMPORARY TABLE  `mainfield` (
    `COMPANY` varchar(100) NULL default '',
    `BRANCH` varchar(100) NULL default '',
    `BRANCHNAME` varchar(100) NULL default '',
    `BPCODE` varchar(100) NULL default '',
    `BPNAME` varchar(500) NULL default '',
    `BILLTOADDRESS` varchar(1000) NULL default '',
    `ITEMCODE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `DOCDUEDATE` DATE NULL,
    `DUEAMOUNT` NUMERIC(18,6) NULL default '0',
    `aging` NUMERIC(18,6) NULL default '0',
    `fisrtmonth` DATE NULL,
    `secondndmonth` DATE NULL,
    `thirdmonth` DATE NULL,
    `advpay` NUMERIC(18,6) NULL default '0',
    `current` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0',
    `PDC` NUMERIC(18,6) NULL default '0',
    `cname` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D15,D30,UP30,
    PDC,cname)
    SELECT arinvoices.COMPANY,
        arinvoices.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        arinvoices.BPCODE,
        arinvoices.BPNAME,
        arinvoices.BILLTOADDRESS,
        arinvoiceitems.ITEMCODE,
        arinvoices.DOCNO,
        date(if(arinvoices.DOCDUEDATE is null, now(), arinvoices.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(arinvoices.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D15 as '15',
        concatfield.D30 as '30',
        concatfield.UP30 as 'UP30',
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname
        FROM arinvoices
        LEFT OUTER JOIN branches ON arinvoices.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN arinvoiceitems ON arinvoices.BRANCH = arinvoiceitems.BRANCH AND arinvoices.COMPANY = arinvoiceitems.COMPANY AND arinvoices.DOCID = arinvoiceitems.DOCID
        LEFT OUTER JOIN companies on arinvoices.company = companies.companycode
        LEFT OUTER JOIN departments on if(arinvoices.saletype = '', arinvoices.department = departments.department, arinvoices.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arinvoices.COMPANY = pdcpayments.COMPANY AND arinvoices.BRANCH = pdcpayments.BRANCH AND arinvoices.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arinvoices.COMPANY = concatfield.COMPANY AND arinvoices.BRANCH = concatfield.BRANCH
                        AND arinvoices.DOCNO = concatfield.DOCNO
        WHERE arinvoices.trxtype<>'POS' and arinvoices.accttype='' and arinvoices.docdate <= pi_date
        AND arinvoices.COMPANY = pi_company AND arinvoices.BRANCH = pi_branch
        AND arinvoices.BPCODE = pi_source
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY arinvoices.DOCNO, branches.BRANCHNAME
        ORDER BY arinvoices.docno ASC;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D15,D30,UP30,
    PDC,cname)
    SELECT arcreditmemos.COMPANY,
        arcreditmemos.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        arcreditmemos.BPCODE,
        arcreditmemos.BPNAME,
        arcreditmemos.BILLTOADDRESS,
        arcreditmemoitems.ITEMCODE,
        arcreditmemos.DOCNO,
        date(if(arcreditmemos.DOCDUEDATE is null, now(), arcreditmemos.DOCDUEDATE)) as DOCDUEDATE,
        0-(concatfield.DUEAMOUNT),
        datediff(pi_date, date_format(arcreditmemos.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        0-(concatfield.advpay),
        0-(concatfield.current),
        0-(concatfield.D15) as '15',
        0-(concatfield.D30) as '30',
        0-(concatfield.UP30) as 'UP30',
        0-(if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount)) AS 'PDC',
        upper(companies.companyname) as cname
        FROM arcreditmemos
        LEFT OUTER JOIN branches ON arcreditmemos.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN arcreditmemoitems ON arcreditmemos.BRANCH = arcreditmemoitems.BRANCH AND arcreditmemos.COMPANY = arcreditmemoitems.COMPANY AND arcreditmemos.DOCID = arcreditmemoitems.DOCID
        LEFT OUTER JOIN companies on arcreditmemos.company = companies.companycode
        LEFT OUTER JOIN departments on if(arcreditmemos.saletype = '', arcreditmemos.department = departments.department, arcreditmemos.saletype = departments.department)
        LEFT OUTER JOIN pdcpayments ON arcreditmemos.COMPANY = pdcpayments.COMPANY AND arcreditmemos.BRANCH = pdcpayments.BRANCH AND arcreditmemos.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON arcreditmemos.COMPANY = concatfield.COMPANY AND arcreditmemos.BRANCH = concatfield.BRANCH
                        AND arcreditmemos.DOCNO = concatfield.DOCNO
        WHERE arcreditmemos.totalamount > 0 AND arcreditmemos.accttype = ''
        AND arcreditmemos.docdate <= pi_date
        AND arcreditmemos.BPCODE = pi_source
        AND arcreditmemos.COMPANY = pi_company AND arcreditmemos.BRANCH = pi_branch
        AND (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY arcreditmemos.DOCNO, branches.BRANCHNAME
        ORDER BY arcreditmemos.docno ASC;
INSERT
    INTO mainfield (COMPANY,BRANCH,BRANCHNAME,BPCODE,BPNAME,BILLTOADDRESS,ITEMCODE,DOCNO,DOCDUEDATE,
    DUEAMOUNT,aging,fisrtmonth,secondndmonth,thirdmonth,advpay,current,D15,D30,UP30,
    PDC,cname)
    SELECT journalvouchers.COMPANY,
        journalvouchers.BRANCH,
        upper(branches.BRANCHNAME) as BRANCHNAME,
        journalvoucheritems.itemno as BPCODE,
        journalvoucheritems.itemname as BPNAME,
        '' as BILLTOADDRESS,
        '' as ITEMCODE,
        journalvoucheritems.DOCNO,
        date(if(journalvouchers.DOCDUEDATE is null, now(), journalvouchers.DOCDUEDATE)) as DOCDUEDATE,
        concatfield.DUEAMOUNT,
        datediff(pi_date, date_format(journalvouchers.DOCDUEDATE, '%y-%m-%d')) AS aging,
        date(pi_date) - interval 0 month as 1month,
        date(pi_date) - interval 1 month as 2month,
        date(pi_date) - interval 2 month as 3month,
        concatfield.advpay,
        concatfield.current,
        concatfield.D15 as '15',
        concatfield.D30 as '30',
        concatfield.UP30 as 'UP30',
        if (pdcpayments.pdcamount is null, 0, pdcpayments.pdcamount) AS 'PDC',
        upper(companies.companyname) as cname
        FROM journalvoucheritems
        INNER JOIN journalvouchers ON journalvoucheritems.company = journalvouchers.company AND journalvoucheritems.branch = journalvouchers.branch AND journalvoucheritems.docid = journalvouchers.docid AND journalvouchers.docdate <= pi_date
        LEFT OUTER JOIN branches ON journalvouchers.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on journalvouchers.company = companies.companycode
        LEFT OUTER JOIN departments on journalvoucheritems.department = departments.department
        LEFT OUTER JOIN pdcpayments ON journalvouchers.COMPANY = pdcpayments.COMPANY AND journalvouchers.BRANCH = pdcpayments.BRANCH AND journalvouchers.DOCNO = pdcpayments.ACCTNO
        LEFT OUTER JOIN concatfield ON journalvouchers.COMPANY = concatfield.COMPANY AND journalvouchers.BRANCH = concatfield.BRANCH
                        AND journalvoucheritems.DOCNO = concatfield.DOCNO
        WHERE journalvoucheritems.itemtype = 'C'
          AND journalvoucheritems.reftype = ''
          AND journalvoucheritems.accttype=''
          AND journalvoucheritems.COMPANY = pi_company AND journalvoucheritems.BRANCH = pi_branch
        and (concatfield.DUEAMOUNT<>0 or (concatfield.DUEAMOUNT=0 and concatfield.advpay<>0))
        GROUP BY journalvoucheritems.DOCNO, branches.BRANCHNAME
        ORDER BY journalvoucheritems.docno ASC;
CREATE TEMPORARY TABLE  `aging` (
    `BPCODE` varchar(300) NULL default '',
    `current` NUMERIC(18,6) NULL default '0',
    `D15` NUMERIC(18,6) NULL default '0',
    `D30` NUMERIC(18,6) NULL default '0',
    `UP30` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO aging (BPCODE, current,D15,D30,UP30)
    SELECT BPCODE,
    sum(if(DUEAMOUNT < 0, DUEAMOUNT, current)) as current,
    sum(if(DUEAMOUNT < 0, 0, D15)) as 'D15',
    sum(if(DUEAMOUNT < 0, 0, D30)) as 'D30',
    sum(if(DUEAMOUNT < 0, 0, UP30)) as 'UP30'
    FROM mainfield where BPCODE = pi_source group by BPCODE;
select
      upper(c.COMPANYNAME) as COMPANY,
      upper(concat(d.BRANCHCODE, ' ',d.BRANCHNAME)) as BRANCH,
      f.custno as BPCODE,
      f.custname as BPNAME,
      ad.ADDRESS as BILLTOADDRESS,
      '' as SOURCE,
      date(concat(year(pi_date),'-',month(pi_date),'-','1')) as DOCDATE,
      '' as DUE,
      '' as DEPT,
      '' as ZONE,
      '' as SUB,
      '' as GP,
      f.CREDITLIMIT as CREDITLIMIT,
      sp.SALESPERSONNAME as SALESMAN,
      f.PHONE1 as PHONE,
      '' as ITEMCODE,
      '' as ITEMDESC,
      '' as QUANTITY,
      '' as UNITPRICE,
      pc.amount as PRICE,
      '' as WHSCODE,
      null as FDD,
      null as LDD,
      po.AMOUNT as AMOUNTDUE,
      date(p.DOCDATE) as DOCDATE2,
      p.DOCNO as DOCNO,
      if (p.REMARKS is null or p.REMARKS = '', 'Payment', p.REMARKS) as PARTICULARS,
      if(p.AMOUNT is null, 1, p.REFTYPE) as REFTYPE,
      p.AMOUNT,
      date(pi_date) as date1,x.current,x.D15,x.D30,x.UP30
      from customers f
      LEFT OUTER JOIN payments p on p.company = pi_company and p.BRANCH = pi_branch
                      and month(p.docdate) = month(date(pi_date)) and year(p.docdate) = year(date(pi_date))
      LEFT OUTER JOIN payments_sum_openning po on po.company = pi_company and po.BRANCH = pi_branch
      LEFT OUTER JOIN payments_sum_closing pc on pc.company = pi_company and pc.BRANCH = pi_branch
      LEFT OUTER JOIN companies c on c.companycode = pi_company
      LEFT OUTER JOIN branches d ON d.BRANCHCODE = pi_branch
      LEFT OUTER JOIN salespersons sp on f.SALESPERSON = sp.SALESPERSON
      LEFT OUTER JOIN address ad on f.CUSTNO = ad.CUSTNO
      LEFT OUTER JOIN aging x on f.CUSTNO = x.BPCODE
      where f.custno = pi_source
      order by p.DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `stocktransferitems_ghe`
--

DROP PROCEDURE IF EXISTS `stocktransferitems_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `stocktransferitems_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docid DECIMAL(18,0))
BEGIN

DECLARE v_lineid   NUMERIC(18,0);
DECLARE v_itemcode VARCHAR(100);
DECLARE v_itemdesc VARCHAR(100);
DECLARE v_quantity NUMERIC(18,6);
DECLARE v_itemcost NUMERIC(18,6);
DECLARE v_sbnids   VARCHAR(500);
DECLARE v_sbncnt   NUMERIC(18,6);
DECLARE v_done     INT;
DECLARE v_warehouse VARCHAR(100);
DECLARE v_linkno VARCHAR(100);

DECLARE v_position  INT;
DECLARE v_qposition INT;
DECLARE v_endpoint  INT;
DECLARE v_qendpoint INT;
DECLARE v_batch     VARCHAR(500);
DECLARE v_batchqty  VARCHAR(500);
DECLARE v_batch_no  VARCHAR(500);
DECLARE v_batch_q  VARCHAR(500);
DECLARE v_batch_qty NUMERIC(18,6);

DECLARE stocktransferitems_cur CURSOR FOR
  SELECT LINEID, ITEMCODE, ITEMDESC, QUANTITY, UNITPRICE, SBNIDS, SBNCNT, WHSCODE, U_U_LINKNO
      FROM STOCKTRANSFERITEMS
      WHERE COMPANY = pi_company AND
            BRANCH  = pi_branch  AND
            DOCID   = pi_docid;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;

DROP TEMPORARY TABLE IF EXISTS stocktransferitems_temp ;
CREATE TEMPORARY TABLE  `stocktransferitems_temp` (
    `LINEID` NUMERIC(18,0) NULL default '0',
    `ITEMCODE` varchar(500) NULL default '',
    `ITEMDESC` varchar(500) NULL default '',
    `QUANTITY` NUMERIC(18,6),
    `ITEMCOST` NUMERIC(18,6),
    `LINETOTAL` NUMERIC(18,6),
    `BATCH` varchar(500) NULL default '',
    `BATCHQTY` NUMERIC(18,6),
    `WHSCODE` VARCHAR(100),
    `LINKNO` VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  OPEN stocktransferitems_cur;
  transferloop: LOOP
    FETCH stocktransferitems_cur INTO v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_sbnids, v_sbncnt, v_warehouse, v_linkno;
    IF v_done = 1 THEN
       Leave transferloop;
    END IF;

    SET v_position = 1;
    SET v_qposition = 1;
    SET v_endpoint = 1;
    SET v_qendpoint = 1;
    IF v_sbncnt > 0 THEN
       SET v_batch = Concat(mid(v_sbnids,locate('|',v_sbnids)+1,locate('|',v_sbnids,locate('|',v_sbnids)+1)-locate('|',v_sbnids)-1),'`');
       SET v_batchqty = Concat(mid(v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1,locate('|',v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1)-locate('|',v_sbnids,locate('|',v_sbnids)+1)-1),'`');
       WHILE MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint) > '' DO
            SET v_batch_no = MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint);
            SET v_batch_q  = MID(v_batchqty, v_qposition, locate('`',v_batchqty,v_qposition)-v_qendpoint);
            SET v_batch_qty = CAST(v_batch_q AS SIGNED);
            SET v_position = v_position + Length(v_batch_no) + 1;
            SET v_qposition = v_qposition + Length(v_batch_q) + 1;
            SET v_endpoint = v_position;
            SET v_qendpoint = v_qposition;

           INSERT INTO stocktransferitems_temp (`LINEID`,`ITEMCODE`,`ITEMDESC`,`QUANTITY`,`ITEMCOST`,`LINETOTAL`, `BATCH`,`BATCHQTY`,`WHSCODE`, `LINKNO`)
                            VALUES (v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_quantity * v_itemcost, v_batch_no, v_batch_qty,v_warehouse,v_linkno);
       END WHILE;
    ELSE
           INSERT INTO stocktransferitems_temp (`LINEID`,`ITEMCODE`,`ITEMDESC`,`QUANTITY`,`ITEMCOST`,`LINETOTAL`, `BATCH`,`BATCHQTY`,`WHSCODE`,`LINKNO`)
                            VALUES (v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_quantity * v_itemcost, '', 0,v_warehouse,v_linkno);
    END IF;

    SET v_done = 0;
  END LOOP transferloop;
  CLOSE stocktransferitems_cur;

  SELECT * FROM stocktransferitems_temp;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `stocktransferitems_st`
--

DROP PROCEDURE IF EXISTS `stocktransferitems_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `stocktransferitems_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docid DECIMAL(18,0))
BEGIN

DECLARE v_lineid   NUMERIC(18,0);
DECLARE v_itemcode VARCHAR(100);
DECLARE v_itemdesc VARCHAR(100);
DECLARE v_quantity NUMERIC(18,6);
DECLARE v_itemcost NUMERIC(18,6);
DECLARE v_sbnids   VARCHAR(500);
DECLARE v_sbncnt   NUMERIC(18,6);
DECLARE v_done     INT;
DECLARE v_warehouse VARCHAR(100);

DECLARE v_position  INT;
DECLARE v_qposition INT;
DECLARE v_endpoint  INT;
DECLARE v_qendpoint INT;
DECLARE v_batch     VARCHAR(500);
DECLARE v_batchqty  VARCHAR(500);
DECLARE v_batch_no  VARCHAR(500);
DECLARE v_batch_q  VARCHAR(500);
DECLARE v_batch_qty NUMERIC(18,6);

DECLARE stocktransferitems_cur CURSOR FOR
  SELECT LINEID, ITEMCODE, ITEMDESC, QUANTITY, UNITPRICE, SBNIDS, SBNCNT, WHSCODE
      FROM STOCKTRANSFERITEMS
      WHERE COMPANY = pi_company AND
            BRANCH  = pi_branch  AND
            DOCID   = pi_docid;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;

DROP TEMPORARY TABLE IF EXISTS stocktransferitems_temp ;
CREATE TEMPORARY TABLE  `stocktransferitems_temp` (
    `LINEID` NUMERIC(18,0) NULL default '0',
    `ITEMCODE` varchar(500) NULL default '',
    `ITEMDESC` varchar(500) NULL default '',
    `QUANTITY` NUMERIC(18,6),
    `ITEMCOST` NUMERIC(18,6),
    `LINETOTAL` NUMERIC(18,6),
    `BATCH` varchar(500) NULL default '',
    `BATCHQTY` NUMERIC(18,6),
    `WHSCODE` VARCHAR(100)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  OPEN stocktransferitems_cur;
  transferloop: LOOP
    FETCH stocktransferitems_cur INTO v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_sbnids, v_sbncnt, v_warehouse;
    IF v_done = 1 THEN
       Leave transferloop;
    END IF;

    SET v_position = 1;
    SET v_qposition = 1;
    SET v_endpoint = 1;
    SET v_qendpoint = 1;
    IF v_sbncnt > 0 THEN
       SET v_batch = Concat(mid(v_sbnids,locate('|',v_sbnids)+1,locate('|',v_sbnids,locate('|',v_sbnids)+1)-locate('|',v_sbnids)-1),'`');
       SET v_batchqty = Concat(mid(v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1,locate('|',v_sbnids,locate('|',v_sbnids,locate('|',v_sbnids)+1)+1)-locate('|',v_sbnids,locate('|',v_sbnids)+1)-1),'`');
       WHILE MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint) > '' DO
            SET v_batch_no = MID(v_batch, v_position, locate('`',v_batch,v_position)-v_endpoint);
            SET v_batch_q  = MID(v_batchqty, v_qposition, locate('`',v_batchqty,v_qposition)-v_qendpoint);
            SET v_batch_qty = CAST(v_batch_q AS SIGNED);
            SET v_position = v_position + Length(v_batch_no) + 1;
            SET v_qposition = v_qposition + Length(v_batch_q) + 1;
            SET v_endpoint = v_position;
            SET v_qendpoint = v_qposition;

           INSERT INTO stocktransferitems_temp (`LINEID`,`ITEMCODE`,`ITEMDESC`,`QUANTITY`,`ITEMCOST`,`LINETOTAL`, `BATCH`,`BATCHQTY`,`WHSCODE`)
                            VALUES (v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_quantity * v_itemcost, v_batch_no, v_batch_qty,v_warehouse);
       END WHILE;
    ELSE
           INSERT INTO stocktransferitems_temp (`LINEID`,`ITEMCODE`,`ITEMDESC`,`QUANTITY`,`ITEMCOST`,`LINETOTAL`, `BATCH`,`BATCHQTY`,`WHSCODE`)
                            VALUES (v_lineid, v_itemcode, v_itemdesc, v_quantity, v_itemcost, v_quantity * v_itemcost, '', 0,v_warehouse);
    END IF;

    SET v_done = 0;
  END LOOP transferloop;
  CLOSE stocktransferitems_cur;

  SELECT * FROM stocktransferitems_temp;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `stock_aging`
--

DROP PROCEDURE IF EXISTS `stock_aging`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `stock_aging`(IN pi_company VARCHAR(30),IN pi_branch VARCHAR(30), IN pi_whse VARCHAR(30), IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `itemref` (
    `ITEMCODE` varchar(30) NULL default '',
    `ITEMDESC` varchar(500) NULL default '',
    `ITEMCLASSNAME` varchar(30) NULL default '',
    `ITEMCLASS` varchar(30) NULL default '',
    `ITEMGROUPNAME` varchar(30) NULL default '',
    `ITEMGROUP` varchar(30) NULL default '',
    `MAKE` varchar(30) NULL default '',
     PRIMARY KEY  (`ITEMCODE`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO itemref (ITEMCODE,ITEMDESC,ITEMCLASSNAME,ITEMGROUPNAME,MAKE,ITEMGROUP,ITEMCLASS)
      SELECT a.ITEMCODE, a.ITEMDESC, b.ITEMCLASSNAME, c.ITEMGROUPNAME, a.MAKE, a.ITEMGROUP , a.ITEMCLASS
        from items a
        left outer join itemclasses b on a.ITEMCLASS = b.ITEMCLASS
        left outer join itemgroups c on a.ITEMGROUP = c.ITEMGROUP;
CREATE TEMPORARY TABLE  `mergetables` (
    `COMPANY` varchar(30) NOT NULL default '',
    `BRANCH` varchar(500) NOT NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NOT NULL default '',
    `QTY` NUMERIC(18,6) NOT NULL default '0',
    `COST` NUMERIC(18,6) NOT NULL default '0',
    `WAREHOUSE` varchar(500) NOT NULL default '',
    `CHASSIS` varchar(500) NOT NULL default '',
    `ENGINENO` varchar(500) NOT NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE,CHASSIS,ENGINENO)
      SELECT a.COMPANY,a.BRANCH,if(a.REFDATE = '0000-00-00', now(),a.REFDATE),a.ITEMCODE, sum(a.QTY*-1) as QTY,
        sum((a.QTY*a.COSTPRICE)*-1) as COST, a.warehouse, a.SERIALNO, a.MFRSERIALNO
        from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.refdate > pi_date1
        AND (pi_whse='' or (pi_whse<>'' AND a.warehouse = pi_whse))
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        GROUP BY a.ITEMCODE,a.SERIALNO, a.MFRSERIALNO, a.REFDATE;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE,CHASSIS,ENGINENO)
      SELECT a.COMPANY,a.BRANCH,if(a.REF2DATE = '0000-00-00', now(),a.AGEDATE),a.ITEMCODE,
        SUM(a.QTY) as QTY, SUM(a.STOCKVALUE) as COST, a.warehouse, a.SERIALNO, a.MFRSERIALNO
        from stockcardissuance a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.REF2DATE > pi_date1
        AND (pi_whse='' or (pi_whse<>'' AND a.warehouse = pi_whse))
        AND REF2TYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        GROUP BY a.ITEMCODE,a.SERIALNO, a.MFRSERIALNO, a.AGEDATE;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE,CHASSIS,ENGINENO)
      SELECT a.COMPANY,a.BRANCH,if(a.REFDATE = '0000-00-00', now(),a.AGEDATE),a.ITEMCODE,
        SUM(a.QTY) as QTY, SUM(a.STOCKVALUE) as COST, a.warehouse, a.SERIALNO, a.MFRSERIALNO
        from stockcardcosting a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
        AND (pi_whse='' or (pi_whse<>'' AND a.warehouse = pi_whse))
        GROUP BY a.ITEMCODE,a.SERIALNO, a.MFRSERIALNO, a.AGEDATE;
      SELECT
            upper(c.companyname) as COMPANY, upper(a.BRANCH) as BRANCH, upper(d.BRANCHNAME) as BRANCHNAME, UPPER(b.ITEMGROUPNAME) as DEPARTMENT,
            upper(j.warehousename) as INVENTORY_TYPE, date(pi_date1) as DATE1, a.ITEMCODE as ITEMCODE, b.ITEMDESC as ITEMDESC,
            upper(i.MAKENAME) as MAKE, upper(b.ITEMCLASSNAME) as ITEMCLASS, a.CHASSIS, a.ENGINENO,
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) <= 30 or
                      a.REFDATE = '0000-00-00' then if (SUM(a.QTY) is null, 0, SUM(a.QTY)) else 0.00 end as '01_30_QTY',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) <= 30 or
                      a.REFDATE = '0000-00-00' then if (SUM(a.COST) is null, 0, SUM(a.COST)) else 0.00 end as '01_30_COST',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) between 31 and 45 then if (SUM(a.QTY) is null, 0, SUM(a.QTY)) else 0.00 end as '31_45_QTY',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) between 31 and 45 then if (SUM(a.COST) is null, 0, SUM(a.COST)) else 0.00 end as '31_45_COST',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) between 46 and 90 then if (SUM(a.QTY) is null, 0, SUM(a.QTY)) else 0.00 end as '46_90_QTY',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) between 46 and 90 then if (SUM(a.COST) is null, 0, SUM(a.COST)) else 0.00 end as '46_90_COST',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) between 91 and 120 then if (SUM(a.QTY) is null, 0, SUM(a.QTY)) else 0.00 end as '91_120_QTY',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) between 91 and 120 then if (SUM(a.COST) is null, 0, SUM(a.COST)) else 0.00 end as '91_120_COST',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) between 121 and 180 then if (SUM(a.QTY) is null, 0, SUM(a.QTY)) else 0.00 end as '121_180_QTY',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) between 121 and 180 then if (SUM(a.COST) is null, 0, SUM(a.COST)) else 0.00 end as '121_180_COST',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) >= 181 then if (SUM(a.QTY) is null, 0, SUM(a.QTY)) else 0.00 end as '180_UP_QTY',
            case when datediff(pi_date1, date_format(a.REFDATE, '%y-%m-%d')) >= 181 then if (SUM(a.COST) is null, 0, SUM(a.COST)) else 0.00 end as '180_UP_COST'
        from mergetables a
              LEFT OUTER JOIN itemref b ON a.ITEMCODE = b.ITEMCODE
              LEFT OUTER JOIN companies c on a.company = c.companycode
              LEFT OUTER JOIN branches d ON a.BRANCH = d.BRANCHCODE
              LEFT OUTER JOIN makes i on b.MAKE = i.MAKE
              LEFT OUTER JOIN warehouses j on a.warehouse = j.warehouse
        GROUP BY a.ITEMCODE, a.CHASSIS, a.ENGINENO, a.REFDATE
        HAVING SUM(a.QTY) > 0 AND SUM(a.COST) > 0
        order by a.ITEMCODE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `stock_ledger`
--

DROP PROCEDURE IF EXISTS `stock_ledger`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `stock_ledger`(IN pi_company VARCHAR(30),IN pi_branch VARCHAR(30),
                                IN pi_department VARCHAR(30), IN pi_whse VARCHAR(30),
                                IN pi_itemcode VARCHAR(30), IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN

DROP TEMPORARY TABLE IF EXISTS  `itemref`;
CREATE TEMPORARY TABLE  `itemref` (
    `ITEMCODE` varchar(30) NULL default '',
    `ITEMDESC` varchar(500) NULL default '',
    `ITEMCLASSNAME` varchar(30) NULL default '',
    `ITEMCLASS` varchar(30) NULL default '',
    `ITEMGROUPNAME` varchar(30) NULL default '',
    `ITEMGROUP` varchar(30) NULL default '',
    `UOM` varchar(30) NULL default '',
    `MAKE` varchar(30) NULL default '',
     PRIMARY KEY  (`ITEMCODE`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO itemref (ITEMCODE,ITEMDESC,ITEMCLASSNAME,ITEMGROUPNAME,MAKE,ITEMGROUP,UOM,ITEMCLASS)
      SELECT a.ITEMCODE, a.ITEMDESC, b.ITEMCLASSNAME, c.ITEMGROUPNAME, a.MAKE, a.ITEMGROUP, a.UOM, a.ITEMCLASS
        from items a
             LEFT OUTER JOIN itemclasses b ON a.ITEMCLASS = b.ITEMCLASS
             LEFT OUTER JOIN itemgroups c ON a.ITEMGROUP = c.ITEMGROUP
        WHERE a.ITEMCODE = pi_itemcode;

DROP TEMPORARY TABLE IF EXISTS  `lastorder`;
CREATE TEMPORARY TABLE  `lastorder` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `REFNO` varchar(30) NULL default '',
    `REFTYPE` varchar(30) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO lastorder (COMPANY,BRANCH,REFDATE,REFNO,REFTYPE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.REFNO,a.REFTYPE,a.ITEMCODE, a.QTY as QTY,
        a.COSTPRICE as COST, a.warehouse AS WAREHOUSE
        from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.ITEMCODE = pi_itemcode
        AND REFTYPE IN ('AP') AND a.warehouse = pi_whse
        order by a.REFDATE desc limit 0,1;

DROP TEMPORARY TABLE IF EXISTS  `currentcost`;
CREATE TEMPORARY TABLE  `currentcost` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `REFNO` varchar(30) NULL default '',
    `REFTYPE` varchar(30) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO currentcost (COMPANY,BRANCH,REFDATE,REFNO,REFTYPE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.REFNO,a.REFTYPE,a.ITEMCODE, a.QTY as QTY,
        a.COSTPRICE as COST, a.warehouse AS WAREHOUSE
        from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.ITEMCODE = pi_itemcode
        AND a.QTY > 0 AND a.warehouse = pi_whse
        order by a.REFDATE desc limit 0,1;

DROP TEMPORARY TABLE IF EXISTS  `balance`;
CREATE TEMPORARY TABLE  `balance` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO balance (COMPANY,BRANCH,ITEMCODE,QTY)
      SELECT a.COMPANY,a.BRANCH,a.ITEMCODE, sum(a.QTY) as QTY
        from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.refdate < pi_date1
        AND a.ITEMCODE = pi_itemcode AND a.warehouse = pi_whse
        group by a.ITEMCODE;

DROP TEMPORARY TABLE IF EXISTS  `history`;
CREATE TEMPORARY TABLE  `history` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `REFNO` varchar(30) NULL default '',
    `REFTYPE` varchar(30) NULL default '',
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default '',
    `cust_supp` varchar(100) default '', costprice decimal(25, 10) default 0
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO history ()
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.REFNO,a.REFTYPE,a.ITEMCODE, SUM(a.QTY) AS QTY,
			IF(a.REFTYPE = 'SR', SUM(a.COSTPRICE), SUM(a.QTY * a.COSTPRICE)) AS COST, a.warehouse AS WAREHOUSE,
			CASE a.reftype
				WHEN 'ap' THEN api.bpname
				WHEN 'cm' THEN arcm.bpname
				WHEN 'gi' THEN gi.bpname
				WHEN 'gt' THEN st.bpname
				WHEN 'gt-' THEN st.bpname
				WHEN 'gt+' THEN st.bpname
				WHEN 'in' THEN ari.bpname
				END,
			a.costprice
		FROM stockcard a
			LEFT JOIN apinvoices AS api
				ON a.company = api.company AND a.branch = api.branch AND a.refno = api.docno
			LEFT JOIN arinvoices AS ari
				ON a.company = ari.company AND a.branch = ari.branch AND a.refno = ari.docno
			LEFT JOIN arcreditmemos AS arcm
				ON a.company = arcm.company AND a.branch = arcm.branch AND a.refno = arcm.docno
			LEFT JOIN goodsissues AS gi
				ON a.company = gi.company AND a.branch = gi.branch AND a.refno = gi.docno
			LEFT JOIN stocktransfers AS st
				ON a.company = st.company AND a.branch = st.branch AND a.refno = st.docno
		WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.refdate between pi_date1 and pi_date2
			AND a.ITEMCODE = pi_itemcode
			AND a.warehouse = pi_whse
		GROUP BY a.REFDATE, a.REFNO, a.REFTYPE, a.ITEMCODE, a.warehouse;

	SELECT
		UPPER(c.companyname) AS COMPANY,
		date(pi_date1) AS DATE1,
		date(pi_date2) AS DATE2,
		CONCAT(TRIM(b.ITEMCODE), ' - ', b.ITEMDESC) AS ITEM,
		UPPER(CONCAT(a.BRANCH, ' - ', d.BRANCHNAME)) AS STORE,
		UPPER(CONCAT(b.ITEMGROUP, ' - ', b.ITEMGROUPNAME)) AS DEPARTMENT,
		UPPER(j.warehousename) AS HAND,
		h.REFDATE AS LAST_ORDER,
		b.UOM,
		'' AS ITEM_LOC,
		'' AS SEQ,
		x.COST AS CURR_COST,
		IF(y.QTY IS NULL, 0, y.QTY) AS b_qty,
		DATE(a.REFDATE) AS DOCDATE,
		a.REFNO AS SOURCE,
		CASE WHEN a.QTY > 0 THEN IF(a.QTY IS NULL, 0, a.QTY) ELSE 0 END AS 'INQTY',
		CASE WHEN a.QTY > 0 THEN IF(a.COST IS NULL, 0, a.COST) ELSE 0 END AS 'INCOST',
		CASE WHEN a.QTY < 0 THEN IF(a.QTY IS NULL, 0, a.QTY / -1) ELSE 0 END AS 'OUTQTY',
		CASE WHEN a.QTY < 0 THEN IF(a.COST IS NULL, 0, a.COST) ELSE 0 END AS 'OUTCOST',
		IF(a.COST IS NULL, 0, a.COST) AS ORIGCOST,
		IF(a.QTY IS NULL, 0, a.QTY) AS ORIGQTY,
		a.REFTYPE,
		IFNULL(a.cust_supp, '') AS 'cust_supp', a.costprice
	FROM history a
		LEFT OUTER JOIN itemref b ON a.ITEMCODE = b.ITEMCODE
		LEFT OUTER JOIN companies c on a.company = c.companycode
		LEFT OUTER JOIN branches d ON a.BRANCH = d.BRANCHCODE
		LEFT OUTER JOIN makes i on b.MAKE = i.MAKE
		LEFT OUTER JOIN warehouses j on a.warehouse = j.warehouse and a.branch=j.branch
		LEFT OUTER JOIN lastorder h on a.ITEMCODE = h.ITEMCODE
		LEFT OUTER JOIN currentcost x on a.ITEMCODE = x.ITEMCODE
		LEFT OUTER JOIN balance y on a.ITEMCODE = y.ITEMCODE
	WHERE (pi_department = '' or (pi_department <> '' AND b.ITEMGROUP = pi_department))
		AND a.warehouse = pi_whse
	ORDER BY a.REFDATE, a.ITEMCODE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `stock_status_all_whse_w_cost`
--

DROP PROCEDURE IF EXISTS `stock_status_all_whse_w_cost`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `stock_status_all_whse_w_cost`(IN pi_company VARCHAR(30),
IN pi_branch VARCHAR(30), IN pi_whse VARCHAR(30),
IN pi_brandcode VARCHAR(30), IN pi_itemgroup VARCHAR(30), IN pi_itemcode VARCHAR(30), IN pi_date1 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `itemref` (
    `ITEMCODE` varchar(30) NULL default '',
    `ITEMDESC` varchar(500) NULL default '',
    `ITEMCLASSNAME` varchar(30) NULL default '',
    `ITEMCLASS` varchar(30) NULL default '',
    `ITEMGROUPNAME` varchar(30) NULL default '',
    `ITEMGROUP` varchar(30) NULL default '',
    `MAKE` varchar(30) NULL default '',
     PRIMARY KEY  (`ITEMCODE`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO itemref (ITEMCODE,ITEMDESC,ITEMCLASSNAME,ITEMGROUPNAME,MAKE,ITEMGROUP,ITEMCLASS)
      SELECT a.ITEMCODE, a.ITEMDESC, b.ITEMCLASSNAME, c.ITEMGROUPNAME, a.MAKE, a.ITEMGROUP , a.ITEMCLASS
        from items a
        left outer join itemclasses b on a.ITEMCLASS = b.ITEMCLASS
        left outer join itemgroups c on a.ITEMGROUP = c.ITEMGROUP;
CREATE TEMPORARY TABLE  `mergetables` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(500) NULL default '',
    `REFDATE` DATE NULL,
    `ITEMCODE` varchar(30) NULL default '',
    `QTY` NUMERIC(18,6) NULL default '0',
    `COST` NUMERIC(18,6) NULL default '0',
    `WAREHOUSE` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.ITEMCODE, sum(a.QTY*-1) as QTY,
        sum((a.QTY*ROUND(a.COSTPRICE, 2))*-1) as COST, a.warehouse AS WAREHOUSE
        from stockcard a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.refdate > pi_date1
        AND (pi_whse='' or (pi_whse<>'' AND a.warehouse = pi_whse))
        AND REFTYPE IN ('GR','IQ+','GT+','GA+','PDN','AP','RT','CM','POR')
        group by a.REFDATE, a.ITEMCODE, a.warehouse;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REF2DATE as REFDATE,a.ITEMCODE,
        sum(a.QTY) as QTY, sum(ROUND(a.STOCKVALUE, 2)) as COST, a.warehouse AS WAREHOUSE
        from stockcardissuance a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch AND a.REF2DATE > pi_date1
        AND (pi_whse='' or (pi_whse<>'' AND a.warehouse = pi_whse))
        AND REF2TYPE IN ('GI','IQ-','GT-','GA-','DN','SI','IN','PRT','ACM','POI','JO')
        group by a.REF2DATE, a.ITEMCODE, a.warehouse;
  INSERT
    INTO mergetables (COMPANY,BRANCH,REFDATE,ITEMCODE,QTY,COST,WAREHOUSE)
      SELECT a.COMPANY,a.BRANCH,a.REFDATE,a.ITEMCODE,
        sum(a.QTY) as QTY, sum(ROUND(a.STOCKVALUE, 2)) as COST, a.warehouse AS WAREHOUSE
        from stockcardcosting a
        WHERE a.company = pi_company AND a.BRANCH = pi_branch
        AND (pi_whse='' or (pi_whse<>'' AND a.warehouse = pi_whse))
        group by a.REFDATE, a.ITEMCODE, a.warehouse;
SELECT
       upper(c.companyname) as COMPANY, a.BRANCH, upper(d.BRANCHNAME) as BRANCHNAME, UPPER(b.ITEMGROUPNAME) as DEPARTMENT,
       upper(j.warehousename) as INVENTORY_TYPE, date(pi_date1) as DATE1, upper(i.MAKENAME) as BRANDCODE, a.ITEMCODE as ITEMCODE,
       b.ITEMDESC as ITEMDESC,
       if (sum(a.QTY) is null, 0, sum(a.QTY)) as ONSTOCK,
       if (sum(a.COST) is null, 0, sum(a.COST)) as TOTALCOST,
       if (sum(a.COST) is null, 0, sum(a.COST)) / if (sum(a.QTY) is null, 0, sum(a.QTY)) as COST,
       upper(b.ITEMCLASSNAME) as ITEMGROUP
FROM mergetables a
LEFT OUTER JOIN itemref b ON a.ITEMCODE = b.ITEMCODE
LEFT OUTER JOIN companies c on a.company = c.companycode
LEFT OUTER JOIN branches d ON a.BRANCH = d.BRANCHCODE
LEFT OUTER JOIN makes i on b.MAKE = i.MAKE
LEFT OUTER JOIN warehouses j on a.warehouse = j.warehouse
WHERE a.company = pi_company AND a.BRANCH = pi_branch
      AND (pi_brandcode='' or (pi_brandcode<>'' and b.MAKE = pi_brandcode))
      AND (pi_itemgroup='' or (pi_itemgroup<>'' and b.ITEMCLASS = pi_itemgroup))
      AND (pi_itemcode='' or (pi_itemcode<>'' and a.ITEMCODE = pi_itemcode))
      group by a.ITEMCODE, a.warehouse
      HAVING SUM(a.QTY) > 0 AND SUM(a.COST) > 0
      order by a.ITEMCODE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `stock_tranfer_report`
--

DROP PROCEDURE IF EXISTS `stock_tranfer_report`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `stock_tranfer_report`(IN pi_company varchar(200),
                                        IN pi_branch varchar(200),
                                        IN pi_date1 varchar(200),
                                        IN pi_date2 varchar(200),
                                        IN pi_status varchar(200))
BEGIN
SELECT
        upper(companies.companyname) as COMPANY, A.BRANCH, upper(branches.BRANCHNAME) as BRANCHNAME,
        DATE(pi_date1) AS DATE1, DATE(pi_date2) AS DATE2,
        CASE
        WHEN pi_status = '' THEN 'ALL'
        WHEN pi_status = 'D' THEN 'DRAFT'
        WHEN pi_status = 'O' THEN 'OPEN'
        WHEN pi_status = 'C' THEN 'CLOSED'
        END
        AS ITEMGROUP,
        
        '' AS DEPT,
        A.FROMWHSCODE AS FROM_STORE,
        B.WHSCODE AS WHS,
        A.DOCDATE AS DATE, A.BPCODE, A.BPNAME AS SUPPLIER, A.DOCNO AS RRNO,
        B.ITEMCODE AS ITEMCODE,
        SUM(B.QUANTITY) AS QTY,
        sum(B.ITEMCOST) AS PRICE,
        SUM(B.QUANTITY) * sum(B.ITEMCOST) AS TOTAL
        FROM stocktransfers A
        LEFT OUTER JOIN stocktransferitems B ON A.DOCID = B.DOCID
        and A.COMPANY = B.COMPANY
        and A.BRANCH = B.BRANCH
        LEFT OUTER JOIN branches ON B.BRANCH = branches.BRANCHCODE
        LEFT OUTER JOIN companies on B.company = companies.companycode
        
        WHERE A.COMPANY = pi_company AND A.BRANCH = pi_branch
        AND A.DOCDATE BETWEEN pi_date1 AND pi_date2
        AND (pi_status='' or (pi_status<>'' AND A.DOCSTATUS = pi_status))
        GROUP BY A.DOCNO, B.ITEMCODE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `stock_transfers`
--

DROP PROCEDURE IF EXISTS `stock_transfers`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `stock_transfers`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company, upper(concat(a.branch,' - ', e.BRANCHNAME)) as branch,
       a.BPCODE as bpcode, a.BPNAME as bpname, a.shiptoaddress as shiptoadd, a.CONTACTPERSON as contact_person,
       a.DOCDATE as docdate, a.DOCNO as docno,
       c.SALESPERSONNAME as sales_person,
       a.fromwhscode,
       x.PRICELISTNAME,
       g.SERIALNO as chassis, g.MFRSERIALNO as 'engine',
       d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc,
       if(G.ITEMCODE IS NULL , d.QUANTITY, 1) as qty,
       d.ITEMCOST as unitprice,
       if(G.ITEMCODE IS NULL , d.QUANTITY, 1) * d.ITEMCOST as linetotal,
       a.totalamount as total_amount,
       d.whscode,
       a.REMARKS as remarks,
       i.username as created_by
       from stocktransfers a
            left outer join stocktransferitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            left outer join documentserials g on a.DOCID = g.DOCID and a.COMPANY = g.COMPANY and a.BRANCH = g.BRANCH
                                                 and d.OBJECTCODE = g.OBJECTCODE and d.ITEMCODE = g.ITEMCODE
            LEFT OUTER JOIN pricelists x ON a.PRICELIST = x.PRICELIST
            left outer join users i on d.CREATEDBY = i.userid
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
 group by a.DOCNO, d.ITEMCODE, g.SERIALNO, g.MFRSERIALNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `stock_transfers_ghe`
--

DROP PROCEDURE IF EXISTS `stock_transfers_ghe`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `stock_transfers_ghe`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docno VARCHAR(30))
BEGIN
select upper(f.COMPANYNAME) as company,
       upper(concat(e.BARANGAY,', ', e.STREET,', ', e.ZIP, ', ', e.CITY, ', ', pro.PROVINCENAME, ', ', ct.COUNTRYNAME)) as branch,
       a.u_u_bpcode as bpcode,
       a.u_u_tobp as bpname,
       concat(ad.BARANGAY,', ', ad.STREET,', ', ad.ZIP, ', ', ad.CITY, ', ', pro2.PROVINCENAME, ', ', ct2.COUNTRYNAME) as shiptoadd,
       a.CONTACTPERSON as contact_person,
       a.DOCDATE as docdate, a.DOCNO as docno,
       c.SALESPERSONNAME as sales_person,
       a.fromwhscode,
       x.PRICELISTNAME,
       '' as chassis, '' as 'engine',
       d.ITEMCODE as itemcode, d.ITEMDESC as itemdesc,
       d.QUANTITY as qty,
       d.ITEMCOST as unitprice,
       d.QUANTITY * d.ITEMCOST as linetotal,
       a.totalamount as total_amount,
       d.whscode,
       a.REMARKS as remarks,
       i.username as created_by,
       e.U_U_TELNO,
       e.U_U_FAXNO,
       e.U_U_EMAIL,
       d.lineid
       from stocktransfers a
            left outer join stocktransferitems d on a.DOCID = d.DOCID and a.COMPANY = d.COMPANY and a.BRANCH = d.BRANCH
            left outer join salespersons c on a.SALESPERSON = c.SALESPERSON
            left outer join branches e on e.BRANCHCODE = pi_branch
            left outer join companies f on f.COMPANYCODE = pi_company
            LEFT OUTER JOIN pricelists x ON a.PRICELIST = x.PRICELIST
            left outer join users i on d.CREATEDBY = i.userid
            left outer join addresses ad on a.u_u_bpcode = ad.refid
                                         and if(a.u_u_bptype = 'C', ad.reftype = 'CUSTOMER', ad.reftype = 'SUPPLIER')
                                         and ad.addresstype = 0
            left outer join countries ct on e.country = ct.country
            left outer join provinces pro on e.province = pro.province
            left outer join countries ct2 on ad.country = ct2.country
            left outer join provinces pro2 on ad.province = pro2.province
      where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.DOCNO = pi_docno
      Group by a.docno, d.lineid;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `subsidiary_ledger`
--

DROP PROCEDURE IF EXISTS `subsidiary_ledger`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `subsidiary_ledger`(IN pi_company VARCHAR(30),
                                     IN pi_branch VARCHAR(30),
                                     IN pi_acctno VARCHAR(30),
                                     IN pi_date1 VARCHAR(30))
BEGIN
  DECLARE v_statusdesc VARCHAR(50);
  DECLARE v_subtitle2 VARCHAR(50);
  DECLARE gl_year VARCHAR(50);
  IF month(pi_date1) = 1 then
     set gl_year = year(pi_date1) - 1;
  ELSEIF month(pi_date1) <> 1 then
     set gl_year = year(pi_date1);
  end if;
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(500) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `SLACCTNO` varchar(100) NULL default '',
    `SLACCTNAME` varchar(100) NULL default '',
    `SLDEBIT` NUMERIC(18,6) NULL default '0',
    `SLCREDIT` NUMERIC(18,6) NULL default '0',
    `DOCTYPE` varchar(100) NULL default '',
    `DOCNO` varchar(100) NULL default '',
    `REFNO` varchar(100) NULL default '',
    `REMARKS` varchar(1000) NULL default '',
    `LINEID` varchar(100) NULL default '',
    `DOCSTATUS` varchar(100) NULL default '',
    `SLTYPE` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT,
             SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, DOCTYPE, DOCNO, REFNO, REMARKS, LINEID, DOCSTATUS, SLTYPE)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE,
             b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, b.GLDEBIT), if (b.GLCREDIT is null, 0, b.GLCREDIT),
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANKACCTNO
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             b.SUBSIDIARY
             ELSE b.SLACCTNO END,
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANK
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             q.SUBSIDIARYNAME
             ELSE if (b.REFERENCE2 = '' , concat(b.SLACCTNAME, ' ', b.REFERENCE1), concat(b.SLACCTNAME, ' ', b.REFERENCE2)) END,
             CASE
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             ELSE if(b.SLDEBIT = 0,if (b.GLDEBIT is null, 0, b.GLDEBIT),if (b.SLDEBIT is null, 0, b.SLDEBIT)) END,
             CASE
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             ELSE if(b.GLCREDIT = 0,if (b.GLCREDIT is null, 0, b.GLCREDIT), if (b.SLCREDIT is null, 0, b.SLCREDIT)) END,
             b.DOCTYPE, a.DOCNO, b.REFERENCE1, a.REMARKS, b.LINEID,
             IF(a.SBO_POST_FLAG<>0, 'POSTED', 'UNPOSTED'),
             CASE WHEN b.SLTYPE = 'C' THEN ' - CUSTOMER' WHEN b.SLTYPE = 'S' THEN ' - SUPPLIER' ELSE '' END
             FROM journalentries a
             LEFT OUTER JOIN journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             LEFT OUTER JOIN chartofaccountsubsidiaries q on b.SUBSIDIARY = q.SUBSIDIARY
             where a.COMPANY = pi_company and a.BRANCH = pi_branch
             AND A.DOCDATE <= pi_date1
             AND ((b.GLACCTNO like '1%') or (b.GLACCTNO like '2%') or (b.GLACCTNO like '3%'))
             AND (pi_acctno='' or (pi_acctno<>'' AND b.GLACCTNO = pi_acctno));
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT,
             SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, DOCTYPE, DOCNO, REFNO, REMARKS, LINEID, DOCSTATUS, SLTYPE)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE,
             b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, b.GLDEBIT), if (b.GLCREDIT is null, 0, b.GLCREDIT),
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANKACCTNO
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             b.SUBSIDIARY
             ELSE b.SLACCTNO END,
             CASE
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             b.BANK
             WHEN b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             q.SUBSIDIARYNAME
             ELSE if (b.REFERENCE2 = '' , concat(b.SLACCTNAME, ' ', b.REFERENCE1), concat(b.SLACCTNAME, ' ', b.REFERENCE2)) END,
             CASE
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             WHEN b.SLDEBIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLDEBIT is null, 0, b.GLDEBIT)
             ELSE if(b.SLDEBIT = 0,if (b.GLDEBIT is null, 0, b.GLDEBIT),if (b.SLDEBIT is null, 0, b.SLDEBIT)) END,
             CASE
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY = '' AND b.BANKACCTNO <> '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             WHEN b.SLCREDIT = 0 AND b.SLACCTNO = '' AND b.SUBSIDIARY <> '' AND b.BANKACCTNO = '' THEN
             if (b.GLCREDIT is null, 0, b.GLCREDIT)
             ELSE if(b.GLCREDIT = 0,if (b.GLCREDIT is null, 0, b.GLCREDIT), if (b.SLCREDIT is null, 0, b.SLCREDIT)) END,
             b.DOCTYPE, a.DOCNO, b.REFERENCE1, a.REMARKS, b.LINEID,
             IF(a.SBO_POST_FLAG<>0, 'POSTED', 'UNPOSTED'),
             CASE WHEN b.SLTYPE = 'C' THEN ' - CUSTOMER' WHEN b.SLTYPE = 'S' THEN ' - SUPPLIER' ELSE '' END
             FROM journalentries a
             LEFT OUTER JOIN journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             LEFT OUTER JOIN chartofaccountsubsidiaries q on b.SUBSIDIARY = q.SUBSIDIARY
             where a.COMPANY = pi_company and a.BRANCH = pi_branch
             AND A.DOCDATE between date(concat(gl_year,'-02-01')) AND pi_date1
             AND ((b.GLACCTNO like '4%') or (b.GLACCTNO like '5%')
                or (b.GLACCTNO like '6%') or (b.GLACCTNO like '7%'))
             AND (pi_acctno='' or (pi_acctno<>'' AND b.GLACCTNO = pi_acctno));
SELECT upper(c.COMPANYNAME) as COMPANY,
pi_branch as BRANCH,
UPPER(CONCAT(pi_branch, ' - ', b.BRANCHNAME)) AS BRANCHNAME,
Date(a.DOCDATE) as POSTINGDDATE,
Date(a.DUEDATE) as DUEDATE,
DATE(pi_date1) AS DATE1,
if(pi_acctno = '', 'All', concat(a.GLACCTNO, ' - ',a.GLACCTNAME)) as DOCTYPENAME,
a.DOCNO,
a.DOCTYPE,
a.REFNO,
a.GLACCTNO AS ACCTCODE,
a.GLACCTNAME AS ACCTNAME,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS DEBIT,
if (a.GLCREDIT is null, 0, a.GLCREDIT) AS CREDIT,
a.SLACCTNO AS SLACCTCODE,
a.SLACCTNAME AS SLACCTNAME,
if (a.SLDEBIT is null, 0, a.SLDEBIT) AS SLDEBIT,
if (a.SLCREDIT is null, 0, a.SLCREDIT) AS SLCREDIT,
UPPER(a.REMARKS) AS REMARKS,
a.DOCSTATUS,
a.SLTYPE
FROM je a
LEFT OUTER JOIN branches b on b.BRANCHCODE = pi_branch
LEFT OUTER JOIN companies c on c.COMPANYCODE = pi_company;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `supplier_checkbalances`
--

DROP PROCEDURE IF EXISTS `supplier_checkbalances`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `supplier_checkbalances`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_mode VARCHAR(10))
BEGIN
DECLARE v_Company       varchar(30);
DECLARE v_Branch       varchar(30);
DECLARE v_SuppNo       varchar(30);
DECLARE v_Balance numeric(20,2);
DECLARE v_Done        integer;
DECLARE v_Updated        integer;
DECLARE Cursor_bpbalances CURSOR FOR SELECT Company, Branch, SuppNo, (AP+CM+DP+JV) FROM bpbalances where BALANCE<>(AP+CM+DP+JV);
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_Done = 1 ;
DROP TEMPORARY TABLE IF EXISTS `bpbalances`;
CREATE TEMPORARY TABLE  `bpbalances` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `SUPPNO` varchar(30) NULL default '',
    `BALANCE` NUMERIC(18,6) NULL default '0',
    `AP` NUMERIC(18,6) NULL default '0',
    `CM` NUMERIC(18,6) NULL default '0',
    `DP` NUMERIC(18,6) NULL default '0',
    `JV` NUMERIC(18,6) NULL default '0',
    PRIMARY KEY  (`COMPANY`,`BRANCH`,`SUPPNO`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
INSERT
    INTO bpbalances (COMPANY,BRANCH,SUPPNO,BALANCE,AP,CM,DP,JV)
select ifnull(supplierbalances.company,''),ifnull(supplierbalances.branch,''),suppliers.suppno,ifnull(supplierbalances.balance,0) as balance,
  ifnull((select sum(dueamount *-1) from apinvoices where apinvoices.company=supplierbalances.company and apinvoices.branch=supplierbalances.branch and apinvoices.docstatus IN ('O','C') and apinvoices.bpcode=suppliers.suppno),0),
  ifnull((select sum(dueamount) from apcreditmemos where apcreditmemos.company=supplierbalances.company and apcreditmemos.branch=supplierbalances.branch and apcreditmemos.docstatus IN ('O','C') and apcreditmemos.bpcode=suppliers.suppno),0),
  ifnull((select sum(balanceamount) from payments where payments.company=supplierbalances.company and payments.branchcode=supplierbalances.branch and payments.docstat IN ('O','C') and payments.bpcode=suppliers.suppno),0),
  ifnull((select sum(balanceamount) from journalvoucheritems where journalvoucheritems.company=supplierbalances.company and journalvoucheritems.branch=supplierbalances.branch and journalvoucheritems.itemtype='S' and journalvoucheritems.itemno=suppliers.suppno and journalvoucheritems.reftype=''),0)
from suppliers left join supplierbalances on (pi_company='' or (pi_company<>'' and supplierbalances.company=pi_company)) and (pi_branch='' or (pi_branch<>'' and supplierbalances.branch=pi_branch)) and supplierbalances.suppno=suppliers.suppno;
if pi_mode = 'update' then
  SET v_Updated = 0 ;
  SET v_Done = 0 ;
  BLOCK1: BEGIN
  OPEN Cursor_bpbalances ;
  REPEAT
    FETCH Cursor_bpbalances INTO v_Company, v_Branch, v_SuppNo, v_Balance ;
    IF NOT v_Done THEN
       update supplierbalances set balance=v_Balance where company=v_Company and branch=v_Branch and suppno=v_SuppNo;
       SET v_Updated = v_Updated + 1;
    END IF ;
  UNTIL v_Done END REPEAT ;
  CLOSE Cursor_bpbalances ;
  END BLOCK1 ;
  select 1;
elseif pi_mode = 'balanced' then
  select COMPANY,BRANCH,SUPPNO,BALANCE,(AP+CM+DP+JV),AP,CM,DP,JV from bpbalances where BALANCE=(AP+CM+DP+JV);
elseif pi_mode = 'unbalanced' then
  select COMPANY,BRANCH,SUPPNO,BALANCE-(AP+CM+DP+JV),BALANCE,(AP+CM+DP+JV),AP,CM,DP,JV from bpbalances where BALANCE<>(AP+CM+DP+JV);
end if;
end $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `supplier_ledger`
--

DROP PROCEDURE IF EXISTS `supplier_ledger`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `supplier_ledger`(IN pi_company VARCHAR(30),
                                   IN pi_branch VARCHAR(30),
                                   IN pi_bpcode VARCHAR(30),
                                   IN pi_date1 VARCHAR(30),
                                   IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `trans_opening` (
    `POSTDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCNO` varchar(30) NULL default '',
    `DOCSTATUS` varchar(30) NULL default '',
    `DEBIT` NUMERIC(18,6) NOT NULL default '0',
    `CREDIT` NUMERIC(18,6) NOT NULL default '0',
    `OBJECTCODE` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE)
    select A.POSTDATE, A.DOCDATE, A.DOCNO, '' AS DOCSTATUS,0 AS DEBIT,  A.TOTALAMOUNT AS CREDIT,A.OBJECTCODE
                        from APINVOICES A
                        WHERE A.COMPANY=pi_company AND A.BRANCH=pi_branch
                        and a.bpcode = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1;
  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', A.TOTALAMOUNT + A.BASEAMOUNT,0, A.OBJECTCODE
                        from APCREDITMEMOS A
                        WHERE A.COMPANY=pi_company AND A.BRANCH=pi_branch
                        and a.bpcode = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1;
  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', SUM(IF(B.DEBIT>0,B.GROSSAMOUNT,0)), SUM(IF(B.CREDIT>0,B.GROSSAMOUNT,0)), A.OBJECTCODE
                        from JOURNALVOUCHERS A, JOURNALVOUCHERITEMS B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCH AND B.DOCID=A.DOCID AND A.COMPANY=pi_company
                        AND A.BRANCH=pi_branch
                        AND B.ITEMTYPE='S'
                        and b.itemno = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', SUM(CASE WHEN B.AMOUNT>0 THEN B.AMOUNT ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE ABS(B.AMOUNT) END) AS CREDIT, A.OBJECTCODE
                        from PAYMENTS A, PAYMENTINVOICES B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                        AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                        AND A.CLEARED IN (1,-1)
                        and a.bpcode = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE)
		select A.POSTDATE, A.CANCELLEDDATE, A.DOCNO, 'CN', SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE B.AMOUNT  END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN ABS(B.AMOUNT) ELSE 0 END) AS CREDIT, A.OBJECTCODE
                        from PAYMENTS A, PAYMENTINVOICES B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO AND A.COMPANY=pi_company
                        AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                        AND A.CLEARED IN (-1)
                        and a.bpcode = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, B.REFTYPE, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE B.AMOUNT END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN ABS(B.AMOUNT) ELSE 0 END) AS CREDIT, A.OBJECTCODE
                        from COLLECTIONS A, COLLECTIONSINVOICES B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                        AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                        AND A.CLEARED IN (1,-99)
                        and a.custno = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, 'CN', SUM(CASE WHEN B.AMOUNT>0 THEN B.AMOUNT ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE ABS(B.AMOUNT) END) AS CREDIT, A.OBJECTCODE
                        from COLLECTIONS A, COLLECTIONSINVOICES B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO AND A.COMPANY=pi_company
                        AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0 AND A.CLEARED IN (-99)
                        AND A.DOCSTAT='CN'
                        and a.custno = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
  INSERT
    INTO trans_opening (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, 'BC', SUM(CASE WHEN B.AMOUNT>0 THEN B.AMOUNT ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE ABS(B.AMOUNT) END) AS CREDIT, A.OBJECTCODE
                        from COLLECTIONS A, COLLECTIONSINVOICES B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO AND A.COMPANY=pi_company
                        AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0 AND A.CLEARED IN (-99)
                        AND A.DOCSTAT='BC'
                        and a.custno = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') < pi_date1
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
CREATE TEMPORARY TABLE  `trans_opening_sum` (
    `bpcode` varchar(30) NULL default '',
    `total` NUMERIC(18,6) NOT NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO trans_opening_sum (bpcode,total)
    select pi_bpcode, if(sum(x.debit-x.credit)is null,0,sum(x.debit-x.credit)) from trans_opening x;
CREATE TEMPORARY TABLE  `trans` (
    `POSTDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCNO` varchar(30) NULL default '',
    `DOCSTATUS` varchar(30) NULL default '',
    `DEBIT` NUMERIC(18,6) NOT NULL default '0',
    `CREDIT` NUMERIC(18,6) NOT NULL default '0',
    `OBJECTCODE` varchar(30) NULL default '',
    `bpcode` varchar(30) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,bpcode)
    select A.POSTDATE, A.DOCDATE, A.DOCNO, '' AS DOCSTATUS,0 AS DEBIT,  A.TOTALAMOUNT AS CREDIT,A.OBJECTCODE,pi_bpcode
                        from APINVOICES A
                        WHERE A.COMPANY=pi_company AND A.BRANCH=pi_branch
                        and a.bpcode = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2;
  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', A.TOTALAMOUNT + A.BASEAMOUNT,0, A.OBJECTCODE,pi_bpcode
                        from APCREDITMEMOS A
                        WHERE A.COMPANY=pi_company AND A.BRANCH=pi_branch
                        and a.bpcode = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2;
  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', SUM(IF(B.DEBIT>0,B.GROSSAMOUNT,0)), SUM(IF(B.CREDIT>0,B.GROSSAMOUNT,0)), A.OBJECTCODE,
           pi_bpcode
                        from JOURNALVOUCHERS A, JOURNALVOUCHERITEMS B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCH AND B.DOCID=A.DOCID AND A.COMPANY=pi_company
                        AND A.BRANCH=pi_branch
                        AND B.ITEMTYPE='S'
                        and b.itemno = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, '', SUM(CASE WHEN B.AMOUNT>0 THEN B.AMOUNT ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE ABS(B.AMOUNT) END) AS CREDIT, A.OBJECTCODE,
           pi_bpcode
                        from PAYMENTS A, PAYMENTINVOICES B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                        AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                        AND A.CLEARED IN (1,-1)
                        and a.bpcode = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,bpcode)
		select A.POSTDATE, A.CANCELLEDDATE, A.DOCNO, 'CN', SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE B.AMOUNT  END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN ABS(B.AMOUNT) ELSE 0 END) AS CREDIT, A.OBJECTCODE,
           pi_bpcode
                        from PAYMENTS A, PAYMENTINVOICES B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO AND A.COMPANY=pi_company
                        AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                        AND A.CLEARED IN (-1)
                        and a.bpcode = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, B.REFTYPE, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE B.AMOUNT END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN ABS(B.AMOUNT) ELSE 0 END) AS CREDIT, A.OBJECTCODE,
           pi_bpcode
                        from COLLECTIONS A, COLLECTIONSINVOICES B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO
                        AND A.COMPANY=pi_company AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0
                        AND A.CLEARED IN (1,-99)
                        and a.custno = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, 'CN', SUM(CASE WHEN B.AMOUNT>0 THEN B.AMOUNT ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE ABS(B.AMOUNT) END) AS CREDIT, A.OBJECTCODE,
           pi_bpcode
                        from COLLECTIONS A, COLLECTIONSINVOICES B 
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO AND A.COMPANY=pi_company
                        AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0 AND A.CLEARED IN (-99)
                        AND A.DOCSTAT='CN'
                        and a.custno = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
  INSERT
    INTO trans (POSTDATE,DOCDATE,DOCNO,DOCSTATUS,DEBIT,CREDIT,OBJECTCODE,bpcode)
		select A.POSTDATE, A.DOCDATE, A.DOCNO, 'BC', SUM(CASE WHEN B.AMOUNT>0 THEN B.AMOUNT ELSE 0 END) AS DEBIT, SUM(CASE WHEN B.AMOUNT>0 THEN 0 ELSE ABS(B.AMOUNT) END) AS CREDIT, A.OBJECTCODE,
           pi_bpcode
                        from COLLECTIONS A, COLLECTIONSINVOICES B
                        WHERE B.COMPANY=A.COMPANY AND B.BRANCH=A.BRANCHCODE AND B.DOCNO=A.DOCNO AND A.COMPANY=pi_company
                        AND A.BRANCHCODE=pi_branch AND B.REFTYPE NOT IN ('DEPOSIT') AND B.ISADVANCES=0 AND A.CLEARED IN (-99)
                        AND A.DOCSTAT='BC'
                        and a.custno = pi_bpcode
                        and DATE_FORMAT(A.POSTDATE, '%Y-%m-%d') between pi_date1 and pi_date2
                        GROUP BY A.POSTDATE, A.DOCDATE, A.DOCNO, A.OBJECTCODE;
CREATE TEMPORARY TABLE  `trans_sum` (
    `bpcode` varchar(30) NULL default '',
    `totaldebit` NUMERIC(18,6) NOT NULL default '0',
    `totalcredit` NUMERIC(18,6) NOT NULL default '0',
    `total` NUMERIC(18,6) NOT NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO trans_sum (bpcode,totaldebit,totalcredit,total)
    select pi_bpcode, sum(x.debit), sum(x.credit), if(sum(x.debit-x.credit)is null,0,sum(x.debit-x.credit))
           from trans x
    group by pi_bpcode;

select
      upper(c.companyname) as COMPANY,
      upper(concat(d.BRANCHCODE, ' - ',d.BRANCHNAME)) as BRANCH,
      upper(ct.suppno) as BPCODE,
      upper(ct.suppname) as BPNAME,
      (select upper(concat(if(ax.BARANGAY is null or ax.BARANGAY = '','' , concat(ax.BARANGAY,', '))
                 , if(ax.STREET is null or ax.STREET = '','' , concat(ax.STREET,', '))
                 , if(ax.ZIP is null or ax.ZIP = '','' , concat(ax.ZIP,', '))
                 , if(ax.CITY is null or ax.CITY = '','' , concat(ax.CITY,', '))
                 , if(ax3.PROVINCENAME is null or ax3.PROVINCENAME = '','' , concat(ax3.PROVINCENAME,', '))
                 , if(ax2.COUNTRYNAME is null or ax2.COUNTRYNAME = '','' , ax2.COUNTRYNAME)))
           from addresses ax
                LEFT OUTER JOIN countries ax2 on ax.country = ax2.country
                LEFT OUTER JOIN provinces ax3 on ax.province = ax3.province
     where ax.refid = a.BPCODE and ax.reftype = 'SUPPLIER' and ax.addresstype = 0 limit 1) as BPADDRESS,
      upper(sp.SALESPERSONNAME) as SALESPERSON,
      ct.CREDITLIMIT as CREDITLIMIT,
      date(pi_date1) as date1,
      date(pi_date2) as date2,
      a.POSTDATE,
      a.DOCDATE,
      a.DOCNO,
      a.DOCSTATUS,
      b.total as OB,
      if(a.DEBIT is null,0,a.DEBIT) as DEBIT,
      if(a.CREDIT is null,0,a.CREDIT) as CREDIT,
      if(ax.totaldebit is null,0,ax.totaldebit) as totaldebit,
      if(ax.totalcredit is null,0,ax.totalcredit*-1) as totalcredit,
      b.total + if(ax.total is null,0,ax.total) as total,
      a.OBJECTCODE
from suppliers ct
     LEFT OUTER JOIN companies c ON c.companycode = pi_company
     LEFT OUTER JOIN branches d ON d.BRANCHCODE = pi_branch
     LEFT OUTER JOIN salespersons sp on ct.SALESPERSON = sp.SALESPERSON
     LEFT OUTER JOIN trans a ON ct.suppno = a.bpcode
     LEFT OUTER JOIN trans_opening_sum b ON ct.suppno = b.bpcode
     LEFT OUTER JOIN trans_sum ax ON ct.suppno = ax.bpcode
where ct.suppno = pi_bpcode
order by POSTDATE, DOCNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `top_grossers`
--

DROP PROCEDURE IF EXISTS `top_grossers`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `top_grossers`(IN pi_company VARCHAR(30),
                                IN pi_area VARCHAR(30),
                                IN pi_customer_group VARCHAR(30),
                                IN pi_product VARCHAR(30),
                                IN pi_date1 VARCHAR(30),
                                IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `top_grossers` (
    `Company` varchar(30) NULL default '',
    `CompanyName` varchar(200) NULL default '',
    `CompanyType` varchar(30) NULL default '',
    `Branch` varchar(30) NULL default '',
    `BranchName` varchar(200) NULL default '',
    `Area` varchar(200) NULL default '',
    `Retail_Group` varchar(200) NULL default '',
    `date1` DATE NULL,
    `date2` DATE NULL,
    `Bio_diesel` NUMERIC(18,6) NULL default '0',
    `Premium` NUMERIC(18,6) NULL default '0',
    `Unleaded` NUMERIC(18,6) NULL default '0',
    `Regular` NUMERIC(18,6) NULL default '0',
    `Kerosene` NUMERIC(18,6) NULL default '0',
    `Total` NUMERIC(18,6) NULL default '0'
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO top_grossers (
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `Area`,
    `Retail_Group`,
    `date1`,
    `date2`,
    `Bio_diesel`,
    `Premium`,
    `Unleaded`,
    `Regular`,
    `Kerosene`,
    `Total`)
Select
       a.Company,
       upper(co.companyname) as CompanyName,
       upper(concat('(',co.companytype, ' Group)')) as CompanyType,
       a.Branch,
       upper(concat(a.BRANCH,' - ',br.BRANCHNAME)) as BranchName,
       if(pi_area = '','ALL',upper(brg.branchgroupname)) as Area,
       if(pi_customer_group = '','ALL',upper(cust.custfname)) as Retail_Group,
       date(pi_date1) as date1,
       date(pi_date2) as date2,
       if(a.u_itemcode = 'W0001',sum(a.u_sold_liters),0) as Bio_diesel,
       if(a.u_itemcode = 'W0002',sum(a.u_sold_liters),0) as Premium,
       if(a.u_itemcode = 'W0003',sum(a.u_sold_liters),0) as Unleaded,
       if(a.u_itemcode = 'W0004',sum(a.u_sold_liters),0) as Regular,
       if(a.u_itemcode = 'W0005',sum(a.u_sold_liters),0) as Kerosene,
       sum(a.u_sold_liters) as Total
       from u_dailyshiftsalesreadings a
       left outer join u_dailyshiftsales b ON a.company = b.company and a.branch = b.branch and a.docid = b.docid
                                           and b.U_DFLTREADINGTYPE = a.u_readingtype
       left outer join items i ON a.u_itemcode = i.itemcode
       left outer join branches br ON a.BRANCH = br.BRANCHCODE
       left outer join branchgroups brg ON br.branchgroup = brg.branchgroup
       left outer join customers cust ON a.branch = cust.u_retailbranch
       left outer join companies co ON a.company = co.companycode
   where a.company = pi_company
         and (pi_area ='' or (pi_area<>'' and br.branchgroup = pi_area))
         and (pi_customer_group ='' or (pi_customer_group<>'' and cust.custfname = pi_customer_group))
         and (pi_product ='' or (pi_product<>'' and
                                                   case when pi_product = 1 then a.u_itemcode in('W0002','W0003','W0004')
                                                        when pi_product = 2 then a.u_itemcode in('W0001')
                                                   else a.u_itemcode in('W0005')
                                                   end))
         and b.u_date_from between pi_date1 and pi_date2
   group by a.Branch, a.u_itemcode;
select
    `Company`,
    `CompanyName`,
    `CompanyType`,
    `Branch`,
    `BranchName`,
    `Area`,
    `Retail_Group`,
    case when pi_product = '' then 'ALL'
         when pi_product = 1 then 'GASOLINE'
         when pi_product = 2 then 'BIO-DIESEL'
    ELSE 'KEROSENE' END as product,
    `date1`,
    `date2`,
    sum(Bio_diesel) as Bio_diesel,
    sum(Premium) as Premium,
    sum(Unleaded) as Unleaded,
    sum(Regular) as Regular,
    sum(Kerosene) as Kerosene,
    sum(Total) as Total
    from top_grossers
where branch not in('')
group by Branch
order by sum(Total) desc;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `top_sales_group_sp`
--

DROP PROCEDURE IF EXISTS `top_sales_group_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `top_sales_group_sp`(IN pi_date_from DATE, IN pi_date_to DATE, IN pi_group_from VARCHAR(20), IN pi_group_to VARCHAR(20))
BEGIN
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_group_from VARCHAR(20);
DECLARE v_group_to VARCHAR(20);
  IF pi_date_from is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_from;
  END IF;
  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;
  IF pi_group_from is null THEN SET v_group_from = '';
  ELSE SET v_group_from = pi_group_from;
  END IF;
  IF pi_group_to is null THEN SET v_group_to = '';
  ELSE SET v_group_to = pi_group_to;
  END IF;
  IF v_group_from = '' and v_group_to = '' THEN
    SET v_group_to = 'ZZZZZZZZZZZZZZZZZZZ';
  END IF;
  SELECT arinvoiceitems.ITEMCODE,
         arinvoiceitems.ITEMDESC,
         itemgroups.ITEMGROUP,
         sum(arinvoiceitems.QUANTITY) as QUANTITY,
         itemgroups.ITEMGROUPNAME
    FROM arinvoiceitems,
         arinvoices,
         items,
         itemgroups
   WHERE ( arinvoiceitems.COMPANY = arinvoices.COMPANY ) and
         ( arinvoiceitems.BRANCH = arinvoices.BRANCH ) and
         ( arinvoiceitems.DOCID = arinvoices.DOCID ) and
         ( arinvoices.DOCDATE >= v_date_from and arinvoices.DOCDATE <= v_date_to ) and
         ( items.ITEMCODE = arinvoiceitems.ITEMCODE ) and
         ( items.ITEMGROUP = itemgroups.ITEMGROUP ) and
         ( items.ITEMGROUP >= pi_group_from and items.ITEMGROUP <= v_group_to)
	GROUP BY  arinvoiceitems.ITEMCODE, arinvoiceitems.ITEMDESC, items.ITEMGROUP
  ORDER BY QUANTITY;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `top_sales_sp`
--

DROP PROCEDURE IF EXISTS `top_sales_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `top_sales_sp`(IN pi_date_from DATE, IN pi_date_to DATE)
BEGIN
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_group_from VARCHAR(20);
DECLARE v_group_to VARCHAR(20);
  IF pi_date_from is null THEN
    SET v_date_from = DATE('2000-01-01');
  ELSE
    SET v_date_from = pi_date_from;
  END IF;
  IF pi_date_to is null THEN
    SET v_date_to = DATE('2100-01-01');
  ELSE
    SET v_date_to = pi_date_to;
  END IF;
  SELECT arinvoiceitems.ITEMCODE,
         arinvoiceitems.ITEMDESC,
         sum(arinvoiceitems.QUANTITY) as QUANTITY
    FROM arinvoiceitems,
         arinvoices,
         items
   WHERE ( arinvoiceitems.COMPANY = arinvoices.COMPANY ) and
         ( arinvoiceitems.BRANCH = arinvoices.BRANCH ) and
         ( arinvoiceitems.DOCID = arinvoices.DOCID ) and
         ( items.ITEMCODE = arinvoiceitems.ITEMCODE ) and
         ( arinvoices.DOCDATE >= v_date_from and arinvoices.DOCDATE <= v_date_to )
	GROUP BY arinvoiceitems.ITEMCODE, arinvoiceitems.ITEMDESC, items.ITEMGROUP
  ORDER BY QUANTITY;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `transactionlisting_st`
--

DROP PROCEDURE IF EXISTS `transactionlisting_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `transactionlisting_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_glacctno_fr VARCHAR(30),
                                    IN pi_glacctno_to VARCHAR(30), IN pi_date_fr DATE, IN pi_date_to DATE, IN pi_currency VARCHAR(30), IN pi_newpage INT)
BEGIN

DECLARE v_glacctno_fr VARCHAR(30);
DECLARE v_glacctno_to VARCHAR(30);
DECLARE v_selectall   INT;
DECLARE v_now        VARCHAR(30);
DECLARE v_loccurrency VARCHAR(30);
DECLARE v_currency    INT;

SELECT CO.CURRENCY INTO v_loccurrency
  FROM COMPANIES CO WHERE CO.COMPANYCODE  = pi_company;

IF v_loccurrency =  pi_currency THEN
   SET v_currency = 0;
ELSE
   SET v_currency = 1;
END IF;

SET v_now = CAST(NOW() as char(30));

  IF pi_glacctno_fr is null THEN
    SET v_glacctno_fr = '';
  ELSE
    SET v_glacctno_fr = pi_glacctno_fr;
  END IF;

  IF pi_glacctno_to is null THEN
    SET v_glacctno_to = '';
  ELSE
    SET v_glacctno_to = pi_glacctno_to;
  END IF;

  IF v_glacctno_fr = '' and v_glacctno_to = '' THEN
     SET v_selectall = 1;
  ELSEIF v_glacctno_fr > '' and v_glacctno_to = '' THEN
    SET v_selectall = 0;
    SET v_glacctno_to = v_glacctno_fr;
  ELSEIF v_glacctno_fr = '' and v_glacctno_to > '' THEN
    SET v_selectall = 0;
    SET v_glacctno_fr = v_glacctno_to;
  END IF;


  CREATE TABLE IF NOT EXISTS `JOURNAL_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `GLDEBIT_FC`      DECIMAL(20,6),
    `GLCREDIT_FC`     DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS JOURNAL_TEMP2 ;
  CREATE TEMPORARY TABLE `JOURNAL_TEMP2` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `C_NOW`        TEXT,
    `DOCID`        DECIMAL(20,0),
    `LINEID`       DECIMAL(20,0),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `GLDEBIT_FC`   DECIMAL(20,6),
    `GLCREDIT_FC`  DECIMAL(20,6),
    `SLTYPE`       VARCHAR(100),
    `SLACCTNO`     VARCHAR(100),
    `SLACCTNAME`   VARCHAR(100),
    `SLDEBIT`      DECIMAL(20,6),
    `SLCREDIT`     DECIMAL(20,6),
    `REMARKS`      TEXT,
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6),
    `ORITYPE`      VARCHAR(100),
    `BPCODE`       VARCHAR(100),
    `BPNAME`       VARCHAR(100),
    `PAYTO`        TEXT,
    `REFNO`        VARCHAR(200)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS LEDGER_TEMP ;
  CREATE TEMPORARY TABLE `LEDGER_TEMP` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `LINETYPE`     VARCHAR(100),
    `DOCDATE`      DATE,
    `DOCTYPE`      VARCHAR(100),
    `DOCNO`        VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `FORACCTNO`    VARCHAR(100),
    `DESCRIPTION`  TEXT,
    `DESCRIPTION2` TEXT,
    `DESCRIPTION3` VARCHAR(200),
    `GLDEBIT`      DECIMAL(20,6),
    `GLCREDIT`     DECIMAL(20,6),
    `GLDEBIT_FC`   DECIMAL(20,6),
    `GLCREDIT_FC`  DECIMAL(20,6),
    `CURRENCY`     VARCHAR(100),
    `CURRENCYRATE` DECIMAL(20,6)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  IF v_currency = 0 THEN
      INSERT INTO JOURNAL_TEMP (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, v_now, JE.DOCID, JE.LINEID, JE.DOCDATE, JE.DOCTYPE, JE.DOCNO, JE.GLACCTNO, JE.GLACCTNAME, JE.GLDEBIT,
               JE.GLCREDIT, JE.GLDEBIT_FC, JE.GLCREDIT_FC, JE.SLTYPE, JE.SLACCTNO, JE.SLACCTNAME, JE.SLDEBIT, JE.SLCREDIT, JE.REMARKS, JE.CURRENCY,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'JV'  THEN JE.CURRENCYRATE
                    ELSE JE.CURRENCYRATE END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.DOCTYPE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.DOCTYPE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.DOCTYPE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.DOCTYPE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.DOCTYPE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.DOCTYPE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.DOCTYPE
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'AR'  THEN AR.BPCODE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPCODE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPCODE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPCODE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.BPCODE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.BPCODE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPCODE
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'AR'  THEN AR.BPNAME
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPNAME
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPNAME
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPNAME
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.BPNAME
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.BPNAME
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPNAME
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'PY' AND PY.DOCTYPE = 'A' THEN PY.ADDRESS
                    WHEN JE.DOCTYPE = 'RC' AND RC.DOCTYPE = 'A' THEN RC.ADDRESS
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.BPREFNO
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPREFNO
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPREFNO
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPREFNO
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.REFNO
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.REFNO
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPREFNO
                    ELSE '' END
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN ARINVOICES AR            ON AR.COMPANY      = pi_company  AND AR.BRANCH      = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','') AND AR.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APINVOICES AP            ON AP.COMPANY      = pi_company  AND AP.BRANCH      = pi_branch  AND AP.OBJECTCODE = IF(JE.DOCTYPE = 'AP','APINVOICE','')       AND AP.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN ARCREDITMEMOS CM         ON CM.COMPANY      = pi_company  AND CM.BRANCH      = pi_branch  AND CM.OBJECTCODE = IF(JE.DOCTYPE = 'CM','ARCREDITMEMO','')    AND CM.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APCREDITMEMOS ACM        ON ACM.COMPANY     = pi_company  AND ACM.BRANCH     = pi_branch  AND ACM.OBJECTCODE = IF(JE.DOCTYPE = 'ACM','APCREDITMEMO','')   AND ACM.DOCNO = JE.DOCNO
                LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT ON DT.COMPANY      = pi_company  AND DT.BRANCH      = pi_branch  AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','')   AND DT.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN PAYMENTS PY              ON PY.COMPANY      = pi_company  AND PY.BRANCHCODE  = pi_branch  AND PY.OBJECTCODE = IF(JE.DOCTYPE = 'PY','OUTGOINGPAYMENT','') AND PY.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN COLLECTIONS RC           ON RC.COMPANY      = pi_company  AND RC.BRANCHCODE  = pi_branch  AND RC.OBJECTCODE = IF(JE.DOCTYPE = 'RC','INCOMINGPAYMENT','') AND RC.DOCNO  = JE.DOCNO
 
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH =  pi_branch  AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to;

  ELSE

      INSERT INTO JOURNAL_TEMP (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, v_now, JE.DOCID, JE.LINEID, JE.DOCDATE, JE.DOCTYPE, JE.DOCNO, JE.GLACCTNO, JE.GLACCTNAME, JE.GLDEBIT,
               JE.GLCREDIT, JE.GLDEBIT_FC, JE.GLCREDIT_FC, JE.SLTYPE, JE.SLACCTNO, JE.SLACCTNAME, JE.SLDEBIT, JE.SLCREDIT, JE.REMARKS, JE.CURRENCY,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.CURRENCYRATE
                    WHEN JE.DOCTYPE = 'JV'  THEN JE.CURRENCYRATE
                    ELSE JE.CURRENCYRATE END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.DOCTYPE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.DOCTYPE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.DOCTYPE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.DOCTYPE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.DOCTYPE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.DOCTYPE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.DOCTYPE
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'AR'  THEN AR.BPCODE
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPCODE
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPCODE
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPCODE
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.BPCODE
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.BPCODE
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPCODE
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'AR'  THEN AR.BPNAME
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPNAME
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPNAME
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPNAME
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.BPNAME
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.BPNAME
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPNAME
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE = 'PY' AND PY.DOCTYPE = 'A' THEN PY.ADDRESS
                    WHEN JE.DOCTYPE = 'RC' AND RC.DOCTYPE = 'A' THEN RC.ADDRESS
                    ELSE '' END,
               CASE WHEN JE.DOCTYPE IN('AR', 'CS') THEN AR.BPREFNO
                    WHEN JE.DOCTYPE = 'CM'  THEN CM.BPREFNO
                    WHEN JE.DOCTYPE = 'AP'  THEN AP.BPREFNO
                    WHEN JE.DOCTYPE = 'ACM' THEN ACM.BPREFNO
                    WHEN JE.DOCTYPE = 'PY'  THEN PY.REFNO
                    WHEN JE.DOCTYPE = 'RC'  THEN RC.REFNO
                    WHEN JE.DOCTYPE = 'DT'  THEN DT.BPREFNO
                    ELSE '' END
            FROM JOURNALENTRYITEMS JE
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = pi_company
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = pi_company  AND BR.BRANCHCODE = pi_branch
                LEFT OUTER JOIN ARINVOICES AR            ON AR.COMPANY      = pi_company  AND AR.BRANCH      = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','') AND AR.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APINVOICES AP            ON AP.COMPANY      = pi_company  AND AP.BRANCH      = pi_branch  AND AP.OBJECTCODE = IF(JE.DOCTYPE = 'AP','APINVOICE','')       AND AP.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN ARCREDITMEMOS CM         ON CM.COMPANY      = pi_company  AND CM.BRANCH      = pi_branch  AND CM.OBJECTCODE = IF(JE.DOCTYPE = 'CM','ARCREDITMEMO','')    AND CM.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN APCREDITMEMOS ACM        ON ACM.COMPANY     = pi_company  AND ACM.BRANCH     = pi_branch  AND ACM.OBJECTCODE = IF(JE.DOCTYPE = 'ACM','APCREDITMEMO','')   AND ACM.DOCNO = JE.DOCNO
                LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT ON DT.COMPANY      = pi_company  AND DT.BRANCH      = pi_branch  AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','')   AND DT.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN PAYMENTS PY              ON PY.COMPANY      = pi_company  AND PY.BRANCHCODE  = pi_branch  AND PY.OBJECTCODE = IF(JE.DOCTYPE = 'PY','OUTGOINGPAYMENT','') AND PY.DOCNO  = JE.DOCNO
                LEFT OUTER JOIN COLLECTIONS RC           ON RC.COMPANY      = pi_company  AND RC.BRANCHCODE  = pi_branch  AND RC.OBJECTCODE = IF(JE.DOCTYPE = 'RC','INCOMINGPAYMENT','') AND RC.DOCNO  = JE.DOCNO
 
            WHERE JE.COMPANY  = pi_company AND
                  JE.BRANCH   =  pi_branch AND
                  JE.DOCDATE >= pi_date_fr AND
                  JE.DOCDATE <= pi_date_to AND
                  JE.CURRENCY = pi_currency;

  END IF;

  IF v_selectall = 1 THEN
        INSERT INTO JOURNAL_TEMP2 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
               SELECT * FROM JOURNAL_TEMP WHERE JOURNAL_TEMP.C_NOW = v_now;


  ELSE

        INSERT INTO JOURNAL_TEMP2 (COMPANY, BRANCH, C_NOW, DOCID, LINEID, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, GLDEBIT,
                                GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, SLTYPE, SLACCTNO, SLACCTNAME, SLDEBIT, SLCREDIT, REMARKS, CURRENCY, CURRENCYRATE, ORITYPE,
                                BPCODE, BPNAME, PAYTO, REFNO)
               SELECT * FROM JOURNAL_TEMP JE
                     WHERE JE.GLACCTNO >= v_glacctno_fr AND
                           JE.GLACCTNO <= v_glacctno_to AND
                           JE.C_NOW = v_now;

  END IF;


  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
                           DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY, CURRENCYRATE)
      SELECT JE.COMPANY,
             JE.BRANCH,
             'B' AS LINETYPE,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT') THEN JE.BPCODE
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN
                    (SELECT JET2.GLACCTNO   FROM JOURNAL_TEMP JET2 WHERE JET2.DOCTYPE = 'CS' AND JET2.DOCNO = JE.DOCNO AND JET2.GLDEBIT > 0 AND
                     JET2.C_NOW = v_now LIMIT 1)
                  ELSE '' END AS BP_CODE,
             CASE WHEN JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT') THEN JE.BPNAME
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN
                    (SELECT JET2.GLACCTNAME FROM JOURNAL_TEMP JET2 WHERE JET2.DOCTYPE = 'CS' AND JET2.DOCNO = JE.DOCNO AND JET2.GLDEBIT > 0 AND
                     JET2.C_NOW = v_now LIMIT 1)
                  ELSE '' END AS BP_NAME,
             '',
             JE.REFNO,
             JE.GLDEBIT,
             JE.GLCREDIT,
             JE.GLDEBIT_FC,
             JE.GLCREDIT_FC,
             JE.CURRENCY,
             JE.CURRENCYRATE
        FROM JOURNAL_TEMP2 JE
          WHERE (JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT', 'CS')) AND
                (JE.ORITYPE = 'I') AND
                (JE.C_NOW = v_now) ;


  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
                           DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY, CURRENCYRATE)
      SELECT JE.COMPANY,
             JE.BRANCH,
             'B' AS LINETYPE,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT') THEN JE.BPCODE
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN
                     (SELECT JET.GLACCTNO   FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'CS' AND JET.DOCNO = JE.DOCNO AND JET.GLDEBIT > 0 AND
                     JET.C_NOW = v_now LIMIT 1)
                  ELSE '' END,
             CASE WHEN JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT') THEN JE.BPNAME
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN
                     (SELECT JET.GLACCTNAME FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'CS' AND JET.DOCNO = JE.DOCNO AND JET.GLDEBIT > 0 AND
                     JET.C_NOW = v_now LIMIT 1)
                  ELSE '' END,
             CASE WHEN JE.DOCTYPE = 'AR'  THEN ARI.ITEMDESC
                  WHEN JE.DOCTYPE = 'CM'  THEN CMI.ITEMDESC
                  WHEN JE.DOCTYPE = 'AP'  THEN API.ITEMDESC
                  WHEN JE.DOCTYPE = 'ACM' THEN ACI.ITEMDESC
                  WHEN JE.DOCTYPE = 'DT'  THEN DTI.ITEMDESC
                  WHEN JE.DOCTYPE = 'CS' AND JE.GLCREDIT > 0 THEN ARI.ITEMDESC
                  ELSE '' END,
             JE.REFNO,
             CASE WHEN JE.DOCTYPE = 'AP' AND JE.GLDEBIT > 0 AND API.GLACCTNO = JE.GLACCTNO THEN IF(APBO.AMOUNT IS NULL,(API.LINETOTAL * JE.CURRENCYRATE),(API.LINETOTAL + APBO.AMOUNT) * JE.CURRENCYRATE)
                  WHEN JE.DOCTYPE = 'CM' AND JE.GLDEBIT > 0 AND CMI.GLACCTNO = JE.GLACCTNO THEN IF(ARCBO.AMOUNT IS NULL, (CMI.LINETOTAL * JE.CURRENCYRATE), (CMI.LINETOTAL + ARCBO.AMOUNT) * JE.CURRENCYRATE)
                  ELSE JE.GLDEBIT END,
             CASE WHEN JE.DOCTYPE IN('AR','CS')  AND JE.GLCREDIT > 0 AND ARI.GLACCTNO = JE.GLACCTNO THEN IF(ARBO.AMOUNT IS NULL, (ARI.LINETOTAL * JE.CURRENCYRATE), (ARI.LINETOTAL + ARBO.AMOUNT) * JE.CURRENCYRATE)
                  WHEN JE.DOCTYPE = 'ACM'        AND JE.GLCREDIT > 0 AND ACI.GLACCTNO = JE.GLACCTNO THEN IF(APCBO.AMOUNT IS NULL,(ACI.LINETOTAL * JE.CURRENCYRATE),(ACI.LINETOTAL + APCBO.AMOUNT) * JE.CURRENCYRATE)
                  WHEN JE.DOCTYPE = 'DT'         AND JE.GLCREDIT > 0 AND DTI.GLACCTNO = JE.GLACCTNO THEN (DTI.LINETOTAL * JE.CURRENCYRATE)
                  ELSE JE.GLCREDIT END,
             CASE WHEN JE.DOCTYPE = 'AP' AND JE.GLDEBIT > 0 AND API.GLACCTNO = JE.GLACCTNO THEN IF(APBO.AMOUNT IS NULL,API.LINETOTAL,(API.LINETOTAL + APBO.AMOUNT))
                  WHEN JE.DOCTYPE = 'CM' AND JE.GLDEBIT > 0 AND CMI.GLACCTNO = JE.GLACCTNO THEN IF(ARCBO.AMOUNT IS NULL, CMI.LINETOTAL, (CMI.LINETOTAL + ARCBO.AMOUNT))
                  ELSE JE.GLDEBIT_FC END,
             CASE WHEN JE.DOCTYPE IN('AR','CS')  AND JE.GLCREDIT > 0 AND ARI.GLACCTNO = JE.GLACCTNO THEN IF(ARBO.AMOUNT IS NULL, ARI.LINETOTAL, (ARI.LINETOTAL + ARBO.AMOUNT))
                  WHEN JE.DOCTYPE = 'ACM'        AND JE.GLCREDIT > 0 AND ACI.GLACCTNO = JE.GLACCTNO THEN IF(APCBO.AMOUNT IS NULL,ACI.LINETOTAL, (ACI.LINETOTAL + APCBO.AMOUNT))
                  WHEN JE.DOCTYPE = 'DT'         AND JE.GLCREDIT > 0 AND DTI.GLACCTNO = JE.GLACCTNO THEN (DTI.LINETOTAL)
                  ELSE JE.GLCREDIT_FC END,
             JE.CURRENCY,
             JE.CURRENCYRATE
        FROM JOURNAL_TEMP2 JE
             LEFT OUTER JOIN ARINVOICES AR                 ON AR.COMPANY  = pi_company  AND AR.BRANCH  = pi_branch  AND AR.OBJECTCODE = IF(JE.DOCTYPE IN('AR','CS'),'ARINVOICE','') AND AR.DOCNO  = JE.DOCNO
             LEFT OUTER JOIN ARINVOICEITEMS ARI            ON ARI.COMPANY = AR.COMPANY  AND ARI.BRANCH = AR.BRANCH  AND ARI.DOCID = AR.DOCID  AND ARI.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT ARO.COMPANY, ARO.BRANCH, SUM(ARO.AMOUNT) AS AMOUNT, BO.GLACCTNO, ARO.DOCID
                                   FROM ARINVOICEOTHERCHARGESITEMS ARO, BRANCHOTHERCHARGES BO
                                   WHERE ARO.COMPANY = BO.COMPANY AND
                                         ARO.BRANCH = BO.BRANCH   AND
                                         ARO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY ARO.DOCID, BO.GLACCTNO) AS ARBO
                                                           ON ARBO.COMPANY = pi_company AND ARBO.BRANCH = pi_branch AND ARBO.DOCID = AR.DOCID AND ARBO.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN APINVOICES AP                 ON AP.COMPANY  = pi_company  AND AP.BRANCH  = pi_branch  AND AP.OBJECTCODE = IF(JE.DOCTYPE = 'AP','APINVOICE','')     AND AP.DOCNO  = JE.DOCNO
             LEFT OUTER JOIN APINVOICEITEMS API            ON API.COMPANY = AP.COMPANY  AND API.BRANCH = AP.BRANCH  AND API.DOCID = AP.DOCID  AND API.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT APO.COMPANY, APO.BRANCH, SUM(APO.AMOUNT) AS AMOUNT, BO.GLACCTNO, APO.DOCID
                                   FROM APINVOICEOTHERCHARGESITEMS APO, BRANCHOTHERCHARGES BO
                                   WHERE APO.COMPANY = BO.COMPANY AND
                                         APO.BRANCH = BO.BRANCH   AND
                                         APO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY APO.DOCID, BO.GLACCTNO) AS APBO
                                                           ON APBO.COMPANY = pi_company AND APBO.BRANCH = pi_branch AND APBO.DOCID = AP.DOCID AND APBO.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN ARCREDITMEMOS CM              ON CM.COMPANY  = pi_company  AND CM.BRANCH  = pi_branch  AND CM.OBJECTCODE = IF(JE.DOCTYPE = 'CM','ARCREDITMEMO','')  AND CM.DOCNO  = JE.DOCNO
             LEFT OUTER JOIN ARCREDITMEMOITEMS CMI         ON CMI.COMPANY = CM.COMPANY  AND CMI.BRANCH = CM.BRANCH  AND CMI.DOCID = CM.DOCID  AND CMI.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT ARO.COMPANY, ARO.BRANCH, SUM(ARO.AMOUNT) AS AMOUNT, BO.GLACCTNO, ARO.DOCID
                                   FROM ARCREDITMEMOOTHERCHARGESITEMS ARO, BRANCHOTHERCHARGES BO
                                   WHERE ARO.COMPANY = BO.COMPANY AND
                                         ARO.BRANCH = BO.BRANCH   AND
                                         ARO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY ARO.DOCID, BO.GLACCTNO) AS ARCBO
                                                           ON ARCBO.COMPANY = pi_company AND ARCBO.BRANCH = pi_branch AND ARCBO.DOCID = CM.DOCID AND ARCBO.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN APCREDITMEMOS ACM             ON ACM.COMPANY = pi_company  AND ACM.BRANCH = pi_branch  AND ACM.OBJECTCODE = IF(JE.DOCTYPE = 'ACM','APCREDITMEMO','') AND ACM.DOCNO = JE.DOCNO
             LEFT OUTER JOIN APCREDITMEMOITEMS ACI         ON ACI.COMPANY = ACM.COMPANY AND ACI.BRANCH = ACM.BRANCH AND ACI.DOCID = ACM.DOCID AND ACI.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN (SELECT APO.COMPANY, APO.BRANCH, SUM(APO.AMOUNT) AS AMOUNT, BO.GLACCTNO, APO.DOCID
                                   FROM APCREDITMEMOOTHERCHARGESITEMS APO, BRANCHOTHERCHARGES BO
                                   WHERE APO.COMPANY = BO.COMPANY AND
                                         APO.BRANCH = BO.BRANCH   AND
                                         APO.CHRGCODE = BO.CHRGCODE
                                         GROUP BY APO.DOCID, BO.GLACCTNO) AS APCBO
                                                           ON APCBO.COMPANY = pi_company AND APCBO.BRANCH = pi_branch AND APCBO.DOCID = ACM.DOCID AND APCBO.GLACCTNO = JE.GLACCTNO
             LEFT OUTER JOIN ARDOWNPAYMENTINVOICES DT      ON DT.COMPANY = pi_company   AND DT.BRANCH = pi_branch   AND DT.OBJECTCODE = IF(JE.DOCTYPE = 'DT','ARDOWNPAYMENT','') AND DT.DOCNO = JE.DOCNO
             LEFT OUTER JOIN ARDOWNPAYMENTINVOICEITEMS DTI ON DTI.COMPANY = DT.COMPANY  AND DTI.BRANCH = DT.BRANCH  AND DTI.DOCID = DT.DOCID  AND DTI.GLACCTNO = JE.GLACCTNO
          WHERE (JE.DOCTYPE IN ('AP', 'AR', 'CM', 'ACM', 'DT', 'CS')) AND
                (JE.ORITYPE = 'S') AND
                (JE.C_NOW = v_now) ;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
                           DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY, CURRENCYRATE)
      SELECT JE.COMPANY,
             JE.BRANCH,
             'B' AS LINETYPE,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             '',
             IF(JV.REFERENCE1 > '', CONCAT('REF. 1: ',JV.REFERENCE1), ''),
             IF(JV.REFERENCE2 > '', CONCAT('REF. 2: ',JV.REFERENCE2), ''),
             JE.REFNO,
             JE.GLDEBIT, JE.GLCREDIT,
             JE.GLDEBIT_FC, JE.GLCREDIT_FC, JE.CURRENCY, JE.CURRENCYRATE

        FROM JOURNAL_TEMP2 JE
             LEFT OUTER JOIN JOURNALVOUCHERS JV      ON JV.COMPANY = pi_company   AND JV.BRANCH = pi_branch   AND JV.DOCNO  = JE.DOCNO
 
          WHERE (JE.DOCTYPE = 'JV') AND
                (JE.C_NOW = v_now) ;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
                           DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY, CURRENCYRATE)
      SELECT JE.COMPANY,
             JE.BRANCH,
             'B' AS LINETYPE,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             JE.BPCODE,
             JE.BPNAME,
             '',
             JE.REFNO,
             JE.GLDEBIT,
             JE.GLCREDIT,
             JE.GLDEBIT_FC, JE.GLCREDIT_FC, JE.CURRENCY, JE.CURRENCYRATE
        FROM JOURNAL_TEMP2 JE
          WHERE (JE.DOCTYPE IN ('PY', 'RC')) AND
                (JE.ORITYPE IN ('S', 'C')) AND
                (JE.C_NOW = v_now) ;

  INSERT INTO LEDGER_TEMP (COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
                           DESCRIPTION2, DESCRIPTION3, GLDEBIT, GLCREDIT, GLDEBIT_FC, GLCREDIT_FC, CURRENCY, CURRENCYRATE)
      SELECT JE.COMPANY,
             JE.BRANCH,
             'B' AS LINETYPE,
             JE.DOCDATE,
             JE.DOCTYPE,
             JE.DOCNO,
             JE.GLACCTNO,
             JE.GLACCTNAME,
             CASE WHEN JE.DOCTYPE = 'PY' AND JE.GLDEBIT > 0  THEN
                     (SELECT JET.GLACCTNO FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'PY' AND JET.DOCNO = JE.DOCNO AND JET.GLCREDIT > 0  AND
                     JET.C_NOW = v_now LIMIT 1)

                  WHEN JE.DOCTYPE = 'RC' AND JE.GLCREDIT > 0 THEN
                      (SELECT JET.GLACCTNO FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'RC' AND JET.DOCNO = JE.DOCNO AND JET.GLDEBIT > 0  AND
                     JET.C_NOW = v_now LIMIT 1)

                  ELSE '' END,
             CASE WHEN JE.DOCTYPE = 'PY' AND JE.GLDEBIT > 0  THEN
                     (SELECT JET.GLACCTNAME FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'PY' AND JET.DOCNO = JE.DOCNO AND JET.GLCREDIT > 0 AND
                     JET.C_NOW = v_now LIMIT 1)

                  WHEN JE.DOCTYPE = 'RC' AND JE.GLCREDIT > 0 THEN
                     (SELECT JET.GLACCTNAME FROM JOURNAL_TEMP JET WHERE JET.DOCTYPE = 'RC' AND JET.DOCNO = JE.DOCNO AND JET.GLDEBIT > 0  AND
                     JET.C_NOW = v_now LIMIT 1)

                  ELSE '' END,
             CASE WHEN JE.DOCTYPE = 'PY' AND JE.GLDEBIT  > 0 THEN PA.REMARKS
                  WHEN JE.DOCTYPE = 'PY' AND JE.GLCREDIT > 0 THEN JE.PAYTO
                  WHEN JE.DOCTYPE = 'RC' AND JE.GLDEBIT  > 0 THEN JE.PAYTO
                  WHEN JE.DOCTYPE = 'RC' AND JE.GLCREDIT > 0 THEN CA.REMARKS
                  ELSE '' END,
             JE.REFNO,
             CASE WHEN JE.DOCTYPE = 'PY' AND JE.GLDEBIT > 0  AND PA.GLACCTNO = JE.GLACCTNO THEN (PA.GROSSAMOUNT * JE.CURRENCYRATE)
                  ELSE JE.GLDEBIT END,
             CASE WHEN JE.DOCTYPE = 'RC' AND JE.GLCREDIT > 0 AND CA.GLACCTNO = JE.GLACCTNO THEN (CA.GROSSAMOUNT * JE.CURRENCYRATE)
                  ELSE JE.GLCREDIT END,
             CASE WHEN JE.DOCTYPE = 'PY' AND JE.GLDEBIT_FC > 0  AND PA.GLACCTNO = JE.GLACCTNO THEN PA.GROSSAMOUNT
                  ELSE JE.GLDEBIT_FC END,
             CASE WHEN JE.DOCTYPE = 'RC' AND JE.GLCREDIT_FC > 0 AND CA.GLACCTNO = JE.GLACCTNO THEN CA.GROSSAMOUNT
                  ELSE JE.GLCREDIT_FC END,
             JE.CURRENCY, JE.CURRENCYRATE
        FROM JOURNAL_TEMP2 JE
            LEFT OUTER JOIN PAYMENTACCOUNTS PA     ON PA.COMPANY = pi_company AND PA.BRANCH = pi_branch AND PA.DOCNO = JE.DOCNO AND PA.GLACCTNO = JE.GLACCTNO
            LEFT OUTER JOIN COLLECTIONSACCOUNTS CA ON CA.COMPANY = pi_company AND CA.BRANCH = pi_branch AND CA.DOCNO = JE.DOCNO AND CA.GLACCTNO = JE.GLACCTNO
          WHERE (JE.DOCTYPE IN ('PY', 'RC')) AND
                (JE.ORITYPE = 'A') AND
                (JE.C_NOW = v_now) ;

  DELETE FROM LEDGER_TEMP WHERE GLDEBIT = 0 AND GLCREDIT = 0;

  DELETE FROM JOURNAL_TEMP WHERE JOURNAL_TEMP.C_NOW = v_now;
  

  IF v_currency = 0 THEN
     SELECT COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
            DESCRIPTION2, DESCRIPTION3, IF(GLDEBIT > 0, GLDEBIT, GLCREDIT * -1) AS AMOUNT,
            IF(v_loccurrency <> CURRENCY, IF(GLDEBIT_FC > 0, GLDEBIT_FC, GLCREDIT_FC * -1),0) AS AMOUNT_FC,
            v_loccurrency as CURRENCY, CURRENCYRATE, CONCAT(GLACCTNO,v_loccurrency) AS GROUPCODE, v_loccurrency AS LCCURRENCY
       FROM LEDGER_TEMP ORDER BY GLACCTNO, LINETYPE, DOCDATE;

  ELSE
     SELECT COMPANY, BRANCH, LINETYPE, DOCDATE, DOCTYPE, DOCNO, GLACCTNO, GLACCTNAME, FORACCTNO, DESCRIPTION,
            DESCRIPTION2, DESCRIPTION3, IF(GLDEBIT > 0, GLDEBIT, GLCREDIT * -1) AS AMOUNT,
            IF(v_loccurrency <> CURRENCY, IF(GLDEBIT_FC > 0, GLDEBIT_FC, GLCREDIT_FC * -1),0) AS AMOUNT_FC,
            CURRENCY, CURRENCYRATE, CONCAT(GLACCTNO,CURRENCY) AS GROUPCODE, v_loccurrency AS LCCURRENCY
       FROM LEDGER_TEMP ORDER BY GLACCTNO, CURRENCY, LINETYPE, DOCDATE;
  END IF;

END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `transaction_journal`
--

DROP PROCEDURE IF EXISTS `transaction_journal`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `transaction_journal`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_account VARCHAR(200), IN pi_date1 VARCHAR(30), IN pi_date2 VARCHAR(30))
BEGIN
CREATE TEMPORARY TABLE  `je_opening` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
    `REMARKS` varchar(1000) NULL default '',
    `SUPPNO` varchar(500) NULL default '',
    `SUPPNAME` varchar(500) NULL default '',
    `REF1` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je_opening (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, OGLDEBIT, OGLCREDIT, REMARKS,SUPPNO,SUPPNAME,REF1)
    SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             sum(if (b.GLDEBIT is null, 0, ROUND(b.GLDEBIT, 2))) as GLDEBIT,
             sum(if (b.GLCREDIT is null, 0, ROUND(b.GLCREDIT, 2))) as GLCREDIT, b.REMARKS,
             b.SLACCTNO, b.SLACCTNAME, b.REFERENCE2
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE < pi_date1
             group by b.GLACCTNO, b.SLACCTNO;
CREATE TEMPORARY TABLE  `je` (
    `COMPANY` varchar(30) NULL default '',
    `BRANCH` varchar(30) NULL default '',
    `DUEDATE` DATE NULL,
    `DOCDATE` DATE NULL,
    `DOCTYPE` varchar(30) NULL default '',
    `DOCID` varchar(30) NULL default '',
    `DOCNO` varchar(30) NULL default '',
    `CREATEDBY` varchar(30) NULL default '',
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(100) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `OGLDEBIT` NUMERIC(18,6) NULL default '0',
    `OGLCREDIT` NUMERIC(18,6) NULL default '0',
    `REMARKS` varchar(1000) NULL default '',
    `SUPPNO` varchar(500) NULL default '',
    `SUPPNAME` varchar(500) NULL default '',
    `REF1` varchar(500) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO je (COMPANY, BRANCH, DUEDATE, DOCDATE, DOCTYPE, DOCID, DOCNO, CREATEDBY, GLACCTNO, GLACCTNAME, GLDEBIT, GLCREDIT, REMARKS,SUPPNO,SUPPNAME,REF1)
      SELECT a.COMPANY, a.BRANCH, a.DOCDUEDATE, a.DOCDATE, a.DOCTYPE, a.DOCID, a.DOCNO, a.CREATEDBY, b.GLACCTNO, b.GLACCTNAME,
             if (b.GLDEBIT is null, 0, ROUND(b.GLDEBIT, 2)), if (b.GLCREDIT is null, 0, ROUND(b.GLCREDIT, 2)), A.REMARKS,
             b.SLACCTNO, b.SLACCTNAME, A.DOCREMARKS
             FROM journalentries a
             left outer join journalentryitems b
             on  b.COMPANY = a.COMPANY
             and b.BRANCH = a.BRANCH
             and b.docid = a.docid
             where a.COMPANY = pi_company and a.BRANCH = pi_branch and a.SBO_POST_FLAG=1
             and a.DOCDATE BETWEEN pi_date1 and pi_date2;
CREATE TEMPORARY TABLE  `parentacct` (
    `ACCTCODE` varchar(100) NULL default '',
    `ACCTNAME` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO parentacct (ACCTCODE, ACCTNAME)
    SELECT if (c.FORMATCODE not in(''), c.FORMATCODE, c.ACCTCODE) as ACCTCODE, c.ACCTNAME
           FROM chartofaccounts c;
SELECT upper(c.COMPANYNAME) as Company, pi_branch as BRANCH, UPPER(b.BRANCHNAME) AS BRANCHNAME,
Date(a.DOCDATE) as posting_date, Date(a.DUEDATE) as due_date, a.DOCTYPE AS series, a.DOCNO AS doc_no,
a.DOCID AS trans_no, a.REMARKS AS remarks,
if(a.GLACCTNO is null, d.GLACCTNO, a.GLACCTNO) AS acct_code,
if(a.GLACCTNAME is null, d.GLACCTNAME, a.GLACCTNAME) AS acct_name,
if (a.GLDEBIT is null, 0, a.GLDEBIT) AS debit, if (a.GLCREDIT is null, 0, a.GLCREDIT) AS credit,
if (d.OGLDEBIT is null, 0, d.OGLDEBIT) as OGLDEBIT, if (d.OGLCREDIT is null, 0, d.OGLCREDIT) as OGLCREDIT,
x.LEVEL AS level, x.PARENTACCT AS parent_code,
DATE(pi_date1) AS date1, DATE(pi_date2) AS date2, DATE(pi_date1) - interval 1 day AS date3, l.ACCTCODE AS level0_code, l.ACCTNAME AS level0_name,
upper(case when x.PARENTACCT like '1%' then '1'
     when x.PARENTACCT like '2%' then '2'
     when x.PARENTACCT like '3%' then '3'
     when x.PARENTACCT like '4%' then '4'
     when x.PARENTACCT like '5%' then '5'
     when x.PARENTACCT like '6%' then '6'
     when x.PARENTACCT like '7%' then '7'
     when x.PARENTACCT like '8%' then '8'
else ''
end) as drawer_no,
upper(case when x.PARENTACCT like '1%' then 'Assets'
     when x.PARENTACCT like '2%' then 'Liabilities'
     when x.PARENTACCT like '3%' then 'Capital and Reserves'
     when x.PARENTACCT like '4%' then 'Turnover'
     when x.PARENTACCT like '5%' then 'Cost of Sales'
     when x.PARENTACCT like '6%' then 'Operating Costs'
     when x.PARENTACCT like '7%' then 'Non-Operating Income and Expenditure'
     when x.PARENTACCT like '8%' then 'Taxation and Extraordinary Items'
else ''
end) as drawer,
if(a.SUPPNO is null,d.SUPPNO,a.SUPPNO) as SUPPNO,
if(a.SUPPNAME is null,d.SUPPNAME,a.SUPPNAME) as SUPPNAME,
A.REF1 as REF
FROM chartofaccounts x
left outer join je a on a.GLACCTNO = x.FORMATCODE
left outer join je_opening d on if(a.SUPPNO is null,d.GLACCTNO = x.FORMATCODE,d.GLACCTNO = x.FORMATCODE and a.SUPPNO = d.SUPPNO)
left outer join branches b on b.BRANCHCODE = pi_branch
left outer join companies c on c.COMPANYCODE = pi_company
left outer join parentacct l on l.ACCTCODE = x.PARENTACCT
WHERE x.PARENTACCT NOT IN('')
      and (pi_account ='' or (pi_account<>'' and x.formatcode = pi_account))
Order by x.PARENTACCT, x.LEVEL;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `trialbalanceaccount_st`
--

DROP PROCEDURE IF EXISTS `trialbalanceaccount_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `trialbalanceaccount_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_month VARCHAR(10), IN pi_year VARCHAR(10),
                                         IN pi_exzero INT, IN pi_rpttype INT)
BEGIN

DECLARE v_period DATE;
DECLARE v_month INT;
DECLARE v_financialyear DATE;
DECLARE v_companyname VARCHAR(100);
DECLARE v_branchname VARCHAR(100);

SELECT financialyear INTO v_financialyear
    FROM postingperiods
    WHERE YR = CONVERT(pi_year, SIGNED) LIMIT 1;

  SET v_period = LAST_DAY(DATE(CONCAT(pi_year,'-',pi_month,'-01')));

  DROP TEMPORARY TABLE IF EXISTS TRIALBALANCE_OPEN ;
  CREATE TEMPORARY TABLE `TRIALBALANCE_OPEN` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `OPENDEBIT`    DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTHGLDEBIT`   DECIMAL(20,6),
    `MTHGLCREDIT`  DECIMAL(20,6),
    `YRGLDEBIT`    DECIMAL(20,6),
    `YRGLCREDIT`   DECIMAL(20,6),
    `PERIOD`       DATE
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  DROP TEMPORARY TABLE IF EXISTS COA_TEMP ;
  CREATE TEMPORARY TABLE  `COA_TEMP` (
    `DRAWER`       VARCHAR(100),
    `ACCTCODE`     VARCHAR(100),
    `ACCTNAME`     VARCHAR(200),
    `PARENTACCT`   VARCHAR(100),
    `ACCTLEVEL`    INT,
    `POSTABLE`     INT,
    `ACCTTYPE`     VARCHAR(100),
    `FINTYPE`      VARCHAR(10)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

  SELECT COMPANYNAME INTO v_companyname FROM COMPANIES WHERE COMPANYCODE = pi_company;
  SELECT BRANCHNAME INTO v_branchname FROM BRANCHES WHERE COMPANYCODE = pi_company and BRANCHCODE = pi_branch;

 CALL chartofaccountdrawer_st('BS');

 INSERT INTO COA_TEMP (DRAWER, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, ACCTTYPE, FINTYPE)
   SELECT DRAWER, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, ACCTTYPE, 'BS'
        FROM COA_DRAWER WHERE POSTABLE = 1;

 CALL chartofaccountdrawer_st('PL');

 INSERT INTO COA_TEMP (DRAWER, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, ACCTTYPE, FINTYPE)
   SELECT DRAWER, ACCTCODE, ACCTNAME, PARENTACCT, ACCTLEVEL, POSTABLE, ACCTTYPE, 'PL'
        FROM COA_DRAWER WHERE POSTABLE = 1;

IF pi_exzero = 1 THEN

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT v_companyname, v_branchname, C.ACCTCODE, C.ACCTNAME, 0, 0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               0, 0, v_period
            FROM COA_TEMP C,
                 JOURNALENTRYITEMS JE
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH = pi_branch AND
                  JE.GLACCTNO = C.ACCTCODE AND
                  JE.DOCDATE <= v_period AND
                  C.FINTYPE = 'BS'
                  GROUP BY C.ACCTCODE;

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT v_companyname, v_branchname, C.ACCTCODE, C.ACCTNAME, 0, 0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               0, 0, v_period
            FROM COA_TEMP C,
                 JOURNALENTRYITEMS JE
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH = pi_branch AND
                  JE.GLACCTNO = C.ACCTCODE AND
                  JE.DOCDATE >= v_financialyear AND
                  JE.DOCDATE <= v_period AND
                  C.FINTYPE = 'PL'
                  GROUP BY C.ACCTCODE;

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT v_companyname, v_branchname, C.ACCTCODE, C.ACCTNAME, 0, 0, 0, 0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               v_period
            FROM COA_TEMP C,
                 JOURNALENTRYITEMS JE
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH = pi_branch AND
                  JE.GLACCTNO = C.ACCTCODE AND
                  MONTH(JE.DOCDATE) =  CONVERT(pi_month,SIGNED) AND
                  YEAR(JE.DOCDATE)  = CONVERT(pi_year,SIGNED)
                  GROUP BY C.ACCTCODE;

ELSE

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT v_companyname, v_branchname, C.ACCTCODE, C.ACCTNAME, 0, 0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               0,0, v_period
            FROM COA_TEMP C
                LEFT OUTER JOIN JOURNALENTRYITEMS JE     ON JE.COMPANY = pi_company AND JE.BRANCH = pi_branch AND JE.GLACCTNO = C.ACCTCODE  AND JE.DOCDATE <= v_period
            WHERE C.FINTYPE = 'BS'
                GROUP BY C.ACCTCODE;

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT v_companyname, v_branchname, C.ACCTCODE, C.ACCTNAME, 0, 0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               0,0, v_period
            FROM COA_TEMP C
                LEFT OUTER JOIN JOURNALENTRYITEMS JE     ON JE.COMPANY = pi_company AND JE.BRANCH = pi_branch AND JE.GLACCTNO = C.ACCTCODE  AND
                                                            JE.DOCDATE >= v_financialyear AND JE.DOCDATE <= v_period
            WHERE C.FINTYPE = 'PL'
                GROUP BY C.ACCTCODE;

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT v_companyname, v_branchname, C.ACCTCODE, C.ACCTNAME, 0, 0, 0, 0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               v_period
            FROM COA_TEMP C
                LEFT OUTER JOIN JOURNALENTRYITEMS JE     ON JE.COMPANY = pi_company AND JE.BRANCH = pi_branch AND JE.GLACCTNO = C.ACCTCODE AND MONTH(JE.DOCDATE) =  CONVERT(pi_month,SIGNED) AND YEAR(JE.DOCDATE)  = CONVERT(pi_year,SIGNED)
                GROUP BY C.ACCTCODE;

END IF;




  SELECT COMPANY, BRANCH, GLACCTNO, GLACCTNAME, SUM(OPENDEBIT), SUM(OPENCREDIT), SUM(YRGLDEBIT), SUM(YRGLCREDIT), SUM(MTHGLDEBIT), SUM(MTHGLCREDIT), PERIOD
    FROM TRIALBALANCE_OPEN GROUP BY  COMPANY, BRANCH, GLACCTNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `trialbalancecreditor_st`
--

DROP PROCEDURE IF EXISTS `trialbalancecreditor_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `trialbalancecreditor_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_month VARCHAR(10), IN pi_year VARCHAR(10),
                                         IN pi_exzero INT, IN pi_rpttype INT)
BEGIN

DECLARE v_period DATE;
DECLARE v_month INT;
DECLARE v_financialyear DATE;
DECLARE v_companyname VARCHAR(100);
DECLARE v_branchname VARCHAR(100);

SELECT financialyear INTO v_financialyear
    FROM postingperiods
    WHERE YR = CONVERT(pi_year, SIGNED) LIMIT 1;

  SET v_period = LAST_DAY(DATE(CONCAT(pi_year,'-',pi_month,'-01')));

  DROP TEMPORARY TABLE IF EXISTS TRIALBALANCE_OPEN ;
  CREATE TEMPORARY TABLE `TRIALBALANCE_OPEN` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `OPENDEBIT`    DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTHGLDEBIT`   DECIMAL(20,6),
    `MTHGLCREDIT`  DECIMAL(20,6),
    `YRGLDEBIT`    DECIMAL(20,6),
    `YRGLCREDIT`   DECIMAL(20,6),
    `PERIOD`       DATE
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

SELECT COMPANYNAME INTO v_companyname FROM COMPANIES WHERE COMPANYCODE = pi_company;
SELECT BRANCHNAME INTO v_branchname FROM BRANCHES WHERE COMPANYCODE = pi_company and BRANCHCODE = pi_branch;

IF pi_exzero = 1 THEN

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT v_companyname, v_branchname, S.SUPPNO, S.SUPPNAME,0,0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               0,0, v_period
            FROM SUPPLIERS S,
                 JOURNALENTRYITEMS JE
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH = pi_branch AND
                  JE.SLTYPE = 'S' AND
                  JE.SLACCTNO = S.SUPPNO AND
                  JE.DOCDATE <= v_period
                  GROUP BY S.SUPPNO;

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT v_companyname, v_branchname, S.SUPPNO, S.SUPPNAME,0,0,0,0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               v_period
            FROM SUPPLIERS S,
                 JOURNALENTRYITEMS JE
            WHERE JE.COMPANY = pi_company AND
                  JE.BRANCH = pi_branch AND
                  JE.SLTYPE = 'S' AND
                  JE.SLACCTNO = S.SUPPNO AND
                  MONTH(JE.DOCDATE) =  CONVERT(pi_month,SIGNED) AND
                  YEAR(JE.DOCDATE)  = CONVERT(pi_year,SIGNED)
                  GROUP BY S.SUPPNO;

ELSE

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT v_companyname, v_branchname, S.SUPPNO, S.SUPPNAME,0,0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               0,0, v_period
            FROM SUPPLIERS S
                LEFT OUTER JOIN JOURNALENTRYITEMS JE     ON JE.COMPANY = pi_company AND JE.BRANCH = pi_branch AND JE.SLTYPE = 'S' AND JE.SLACCTNO = S.SUPPNO  AND JE.DOCDATE <= v_period
                GROUP BY S.SUPPNO;

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT v_companyname, v_branchname, S.SUPPNO, S.SUPPNAME,0,0,0,0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               v_period
            FROM SUPPLIERS S
                LEFT OUTER JOIN JOURNALENTRYITEMS JE     ON JE.COMPANY = pi_company AND JE.BRANCH = pi_branch AND JE.SLTYPE = 'S' AND JE.SLACCTNO = S.SUPPNO AND MONTH(JE.DOCDATE) =  CONVERT(pi_month,SIGNED) AND YEAR(JE.DOCDATE)  = CONVERT(pi_year,SIGNED)
                GROUP BY S.SUPPNO;

END IF;



  SELECT COMPANY, BRANCH, GLACCTNO, GLACCTNAME, SUM(OPENDEBIT), SUM(OPENCREDIT), SUM(YRGLDEBIT), SUM(YRGLCREDIT), SUM(MTHGLDEBIT), SUM(MTHGLCREDIT), PERIOD
    FROM TRIALBALANCE_OPEN GROUP BY  GLACCTNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `trialbalancedebtor_st`
--

DROP PROCEDURE IF EXISTS `trialbalancedebtor_st`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `trialbalancedebtor_st`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_month VARCHAR(10), IN pi_year VARCHAR(10),
                                         IN pi_exzero INT, IN pi_rpttype INT)
BEGIN

DECLARE v_period DATE;
DECLARE v_month INT;
DECLARE v_financialyear DATE;

SELECT financialyear INTO v_financialyear
    FROM postingperiods
    WHERE YR = CONVERT(pi_year, SIGNED) LIMIT 1;

  SET v_period = LAST_DAY(DATE(CONCAT(pi_year,'-',pi_month,'-01')));

  DROP TEMPORARY TABLE IF EXISTS TRIALBALANCE_OPEN ;
  CREATE TEMPORARY TABLE `TRIALBALANCE_OPEN` (
    `COMPANY`      VARCHAR(100),
    `BRANCH`       VARCHAR(100),
    `GLACCTNO`     VARCHAR(100),
    `GLACCTNAME`   VARCHAR(100),
    `OPENDEBIT`    DECIMAL(20,6),
    `OPENCREDIT`   DECIMAL(20,6),
    `MTHGLDEBIT`   DECIMAL(20,6),
    `MTHGLCREDIT`  DECIMAL(20,6),
    `YRGLDEBIT`    DECIMAL(20,6),
    `YRGLCREDIT`   DECIMAL(20,6),
    `PERIOD`       DATE
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;

IF pi_exzero = 1 THEN

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, C.CUSTNO, C.CUSTNAME,0,0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               0,0, v_period
            FROM CUSTOMERS C
                LEFT OUTER JOIN JOURNALENTRYITEMS JE     ON JE.COMPANY = C.COMPANY AND JE.BRANCH = C.BRANCH AND JE.SLTYPE = 'C' AND JE.SLACCTNO = C.CUSTNO
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = C.COMPANY
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = C.COMPANY  AND BR.BRANCHCODE = C.BRANCH
            WHERE C.COMPANY = pi_company  AND
                  C.BRANCH =  pi_branch   AND
                  JE.SLTYPE  = 'C'         AND
                  JE.DOCDATE <= v_period
                  GROUP BY C.CUSTNO;

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, C.CUSTNO, C.CUSTNAME,0,0,0,0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               v_period
            FROM CUSTOMERS C
                LEFT OUTER JOIN JOURNALENTRYITEMS JE     ON JE.COMPANY = C.COMPANY AND JE.BRANCH = C.BRANCH AND JE.SLTYPE = 'C' AND JE.SLACCTNO = C.CUSTNO
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = C.COMPANY
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = C.COMPANY  AND BR.BRANCHCODE = C.BRANCH
            WHERE C.COMPANY = pi_company  AND
                  C.BRANCH =  pi_branch   AND
                  JE.SLTYPE  = 'C'         AND
                  MONTH(JE.DOCDATE) =  CONVERT(pi_month,SIGNED) AND
                  YEAR(JE.DOCDATE)  = CONVERT(pi_year,SIGNED)
                  GROUP BY C.CUSTNO;

ELSE

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, C.CUSTNO, C.CUSTNAME,0,0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               0,0, v_period
            FROM CUSTOMERS C
                LEFT OUTER JOIN JOURNALENTRYITEMS JE     ON JE.COMPANY = C.COMPANY AND JE.BRANCH = C.BRANCH AND JE.SLTYPE = 'C' AND JE.SLACCTNO = C.CUSTNO  AND JE.DOCDATE <= v_period
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = C.COMPANY
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = C.COMPANY  AND BR.BRANCHCODE = C.BRANCH
            WHERE C.COMPANY = pi_company  AND
                  C.BRANCH =  pi_branch
                  GROUP BY C.CUSTNO;

      INSERT INTO TRIALBALANCE_OPEN (COMPANY, BRANCH, GLACCTNO, GLACCTNAME, OPENDEBIT, OPENCREDIT, YRGLDEBIT, YRGLCREDIT, MTHGLDEBIT, MTHGLCREDIT, PERIOD)
        SELECT CO.COMPANYNAME, BR.BRANCHNAME, C.CUSTNO, C.CUSTNAME,0,0,0,0,
               IF(SUM(JE.GLDEBIT) IS NULL, 0, IF(SUM(JE.GLCREDIT) IS NULL,SUM(JE.GLDEBIT),IF(SUM(JE.GLDEBIT - JE.GLCREDIT) > 0,SUM(JE.GLDEBIT - JE.GLCREDIT),0))),
               IF(SUM(JE.GLCREDIT) IS NULL, 0, IF(SUM(JE.GLDEBIT) IS NULL,SUM(JE.GLCREDIT),IF(SUM(JE.GLCREDIT - JE.GLDEBIT)>0, SUM(JE.GLCREDIT - JE.GLDEBIT), 0))),
               v_period
            FROM CUSTOMERS C
                LEFT OUTER JOIN JOURNALENTRYITEMS JE     ON JE.COMPANY = C.COMPANY AND JE.BRANCH = C.BRANCH AND JE.SLTYPE = 'C' AND JE.SLACCTNO = C.CUSTNO AND MONTH(JE.DOCDATE) =  CONVERT(pi_month,SIGNED) AND YEAR(JE.DOCDATE)  = CONVERT(pi_year,SIGNED)
                LEFT OUTER JOIN COMPANIES CO             ON CO.COMPANYCODE  = C.COMPANY
                LEFT OUTER JOIN BRANCHES  BR             ON BR.COMPANYCODE  = C.COMPANY  AND BR.BRANCHCODE = C.BRANCH
            WHERE C.COMPANY = pi_company  AND
                  C.BRANCH =  pi_branch   
                  GROUP BY C.CUSTNO;

END IF;



  SELECT COMPANY, BRANCH, GLACCTNO, GLACCTNAME, SUM(OPENDEBIT), SUM(OPENCREDIT), SUM(YRGLDEBIT), SUM(YRGLCREDIT), SUM(MTHGLDEBIT), SUM(MTHGLCREDIT), PERIOD
    FROM TRIALBALANCE_OPEN GROUP BY  COMPANY, BRANCH, GLACCTNO;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `trial_balance`
--

DROP PROCEDURE IF EXISTS `trial_balance`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `trial_balance`(IN pi_company VARCHAR(30), IN pi_branch VARCHAR(30), IN pi_docid VARCHAR(30), IN pi_docdate_from VARCHAR(30), IN pi_type VARCHAR(20), IN pi_mode VARCHAR(20), IN pi_status VARCHAR(15), IN pi_info VARCHAR(254))
BEGIN
  DECLARE v_statusdesc VARCHAR(50);
  DECLARE v_subtitle2 VARCHAR(50);
  DECLARE gl_year VARCHAR(50);
  IF pi_mode = "DAILY" then
    set v_subtitle2 = DATE_FORMAT(pi_docdate_from, '%M %e, %Y');
  ELSEIF pi_mode = "ASOF" then
    set v_subtitle2 = concat("As of : ",DATE_FORMAT(pi_docdate_from, '%M %Y'));
  ELSEIF pi_mode = "RANGE" then
    set v_subtitle2 = concat(DATE_FORMAT(pi_docdate_from, '%M %e, %Y')," - ",DATE_FORMAT(pi_docdate_from, '%M %e, %Y'));
  end if;
  IF month(pi_docdate_from) = 1 then
     set gl_year = year(pi_docdate_from) - 1;
  ELSEIF month(pi_docdate_from) <> 1 then
     set gl_year = year(pi_docdate_from);
  end if;
CREATE TEMPORARY TABLE  `trial_balance` (
    `BRANCHNAME` varchar(30) NULL default '',
    `COMPANYNAME` varchar(500) NULL default '',
    `DOCDATE` DATE NULL,
    `GLACCTNO` varchar(100) NULL default '',
    `GLACCTNAME` varchar(500) NULL default '',
    `GLDEBIT` NUMERIC(18,6) NULL default '0',
    `GLCREDIT` NUMERIC(18,6) NULL default '0',
    `SUBTITLE` varchar(500) NULL default '',
    `SUBTITLE2` varchar(500) NULL default '',
    `INFO` varchar(100) NULL default ''
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  INSERT
    INTO trial_balance (BRANCHNAME,COMPANYNAME,DOCDATE,GLACCTNO,GLACCTNAME,GLDEBIT,GLCREDIT,SUBTITLE,SUBTITLE2,INFO)
    SELECT UPPER(CONCAT(C.BRANCHCODE,' - ',C.BRANCHNAME)) AS BRANCHNAME,
           UPPER(D.COMPANYNAME) AS COMPANYNAME,
           A.DOCDATE,
           A.GLACCTNO,
           A.GLACCTNAME,
           sum(A.GLDEBIT),
           sum(A.GLCREDIT),
           v_statusdesc AS SUBTITLE,
           v_subtitle2 AS SUBTITLE2,
           pi_info AS INFO
    from JOURNALENTRYITEMS A
         left outer join JOURNALENTRIES B on A.COMPANY=B.COMPANY AND A.BRANCH=B.BRANCH AND A.DOCID = B.DOCID and A.SBO_POST_FLAG = B.SBO_POST_FLAG
         left outer join BRANCHES C on A.COMPANY=C.COMPANYCODE AND A.BRANCH=C.BRANCHCODE
         left outer join COMPANIES D on A.COMPANY=D.COMPANYCODE
      where A.COMPANY = pi_company and A.BRANCH=pi_branch
            AND A.SBO_POST_FLAG=1
            AND A.DOCDATE <= pi_docdate_from
            AND ((A.GLACCTNO like '1%') or (A.GLACCTNO like '2%') or (A.GLACCTNO like '3%'))
    Group by A.GLACCTNO;
  INSERT
    INTO trial_balance (BRANCHNAME,COMPANYNAME,DOCDATE,GLACCTNO,GLACCTNAME,GLDEBIT,GLCREDIT,SUBTITLE,SUBTITLE2,INFO)
    SELECT UPPER(CONCAT(C.BRANCHCODE,' - ',C.BRANCHNAME)) AS BRANCHNAME,
           UPPER(D.COMPANYNAME) AS COMPANYNAME,
           A.DOCDATE,
           A.GLACCTNO,
           A.GLACCTNAME,
           sum(A.GLDEBIT),
           sum(A.GLCREDIT),
           v_statusdesc AS SUBTITLE,
           v_subtitle2 AS SUBTITLE2,
           pi_info AS INFO
    from JOURNALENTRYITEMS A
         left outer join JOURNALENTRIES B on A.COMPANY=B.COMPANY AND A.BRANCH=B.BRANCH AND A.DOCID = B.DOCID and A.SBO_POST_FLAG = B.SBO_POST_FLAG
         left outer join BRANCHES C on A.COMPANY=C.COMPANYCODE AND A.BRANCH=C.BRANCHCODE
         left outer join COMPANIES D on A.COMPANY=D.COMPANYCODE
      where A.COMPANY = pi_company and A.BRANCH=pi_branch
            AND A.SBO_POST_FLAG=1
            AND A.DOCDATE between date(concat(gl_year,'-02-01'))
                AND pi_docdate_from
            AND ((A.GLACCTNO like '4%') or (A.GLACCTNO like '5%')
                or (A.GLACCTNO like '6%') or (A.GLACCTNO like '7%'))
    Group by A.GLACCTNO;
SELECT BRANCHNAME,
       COMPANYNAME,
       DOCDATE,
       GLACCTNO,
       GLACCTNAME,
       GLDEBIT,
       GLCREDIT,
       SUBTITLE,
       SUBTITLE2,
       INFO
from trial_balance
Order by GLACCTNO,DOCDATE;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `unapplied_deposit`
--

DROP PROCEDURE IF EXISTS `unapplied_deposit`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `unapplied_deposit`(IN pi_company varchar(200),
                                    IN pi_branch varchar(200),
                                    IN pi_date varchar(200))
BEGIN
Select upper(a.bpname) AS name, upper(c.companyname) as COMPANY, upper(a.branchcode) as BRANCH,
        upper(a.bpcode) as CUSTNO,
        a.docno as REFNO,
        a.DOCDATE, a.BALANCEAMOUNT as PAIDAMOUNT,
        date(pi_date) AS valuedate,
        upper(b.BRANCHNAME) as BRANCHNAME, '' as LOANTYPENAME, a.REMARKS
        FROM collections A
            LEFT OUTER JOIN branches B ON A.BRANCHCODE = B.BRANCHCODE
            LEFT OUTER JOIN companies C on C.COMPANYCODE = A.COMPANY
            LEFT OUTER JOIN departments D on A.DEPARTMENT = D.DEPARTMENT
        where a.collfor = 'RS' and a.docstat = 'O'
              AND A.COMPANY = pi_company AND B.BRANCHCODE = pi_branch
              AND A.DOCDATE <= pi_date
        order by a.docdate;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `weekly_container_sp`
--

DROP PROCEDURE IF EXISTS `weekly_container_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `weekly_container_sp`(IN pi_company VARCHAR(100), IN pi_branch VARCHAR(100), IN pi_date_from DATE, IN pi_date_to DATE)
BEGIN
DECLARE v_date_from DATE;
DECLARE v_date_to DATE;
DECLARE v_done INT;
DECLARE v_bpcode, v_shiptocode, v_shipmode, v_fdes, v_cntr, v_seal, v_bookno, v_shipline, u_sono VARCHAR(50);
DECLARE v_etd, v_eta DATE;
DECLARE v_docno, v_docno_all VARCHAR(100);
DECLARE v_count INT;
DECLARE v_closingtime VARCHAR(20);
DECLARE v_carrier VARCHAR(20);
DECLARE v_cntrremark VARCHAR(20);
DECLARE v_cntrdate DATE;






    SELECT SD.BPCODE, SD.SHIPTOCODE, SD.U_U_SHIPMODE, SD.U_U_FDES, SD.U_U_ETD, SD.U_U_ETA, SD.U_U_CNTR, SD.U_U_SEAL, SD.U_U_BOOKNO, SD.U_U_SHIPLINE,
           GROUP_CONCAT(DISTINCT SD2.BASEDOCNO) AS SONO,SD.U_U_CLOSINGTIME, SD.U_U_CARRIER, SD.U_U_CNTRDATE, SD.U_U_CNTRREMARK
    FROM SALESDELIVERIES SD
         LEFT OUTER JOIN SALESDELIVERYITEMS SD2 ON SD2.COMPANY = SD.COMPANY AND SD2.BRANCH = SD.BRANCH AND SD2.DOCID = SD.DOCID
    WHERE SD.COMPANY = pi_company and
          SD.BRANCH = pi_branch and
          SD.U_U_BOOKNO > ''         and
          SD.U_U_ETD >= pi_date_from and
          SD.U_U_ETD <= pi_date_to
	 GROUP BY SD.U_U_BOOKNO
   ORDER BY SD.U_U_ETD, SD.U_U_BOOKNO;




END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `yearly_container_compare_sp`
--

DROP PROCEDURE IF EXISTS `yearly_container_compare_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `yearly_container_compare_sp`(IN pi_cur_year VARCHAR(4), IN pi_no_year INT)
BEGIN
DECLARE v_cur_year INT;
DECLARE v_bpcode VARCHAR(100);
DECLARE v_total INT;
DECLARE v_cont_wap INT;
DECLARE v_cont_dc INT;
DECLARE v_mth01, v_mth02, v_mth03, v_mth04, v_mth05, v_mth06 INT;
DECLARE v_mth07, v_mth08, v_mth09, v_mth10, v_mth11, v_mth12 INT;
DECLARE v_mth01A, v_mth02A, v_mth03A, v_mth04A, v_mth05A, v_mth06A INT;
DECLARE v_mth07A, v_mth08A, v_mth09A, v_mth10A, v_mth11A, v_mth12A INT;
DECLARE v_mth01B, v_mth02B, v_mth03B, v_mth04B, v_mth05B, v_mth06B INT;
DECLARE v_mth07B, v_mth08B, v_mth09B, v_mth10B, v_mth11B, v_mth12B INT;
DECLARE v_mth01D, v_mth02D, v_mth03D, v_mth04D, v_mth05D, v_mth06D INT;
DECLARE v_mth07D, v_mth08D, v_mth09D, v_mth10D, v_mth11D, v_mth12D INT;
DECLARE v_curtime TIME;
DECLARE v_curdate DATE;
DECLARE v_curdate_from DATE;
DECLARE v_curdate_to DATE;
DECLARE v_inidate_from DATE;
DECLARE v_inidate_to DATE;
DECLARE v_done INT;
DECLARE v_int_mth INT;
DECLARE v_int_yr INT;
DECLARE v_no_year INT;
DECLARE v_yearcompare INT;
 SET v_cur_year = CONVERT(pi_cur_year,SIGNED);
 SET v_curdate = CURDATE();
 SET v_curtime = Now();
 SET v_int_mth = 1;
 SET v_int_yr = 1;
 SET v_no_year = pi_no_year;
 SET v_yearcompare = 1;
 SET v_mth01D = 0;
 SET v_mth02D = 0;
 SET v_mth03D = 0;
 SET v_mth04D = 0;
 SET v_mth05D = 0;
 SET v_mth06D = 0;
 SET v_mth07D = 0;
 SET v_mth08D = 0;
 SET v_mth09D = 0;
 SET v_mth10D = 0;
 SET v_mth11D = 0;
 SET v_mth12D = 0;
 SET v_inidate_from = DATE(concat(CONVERT(v_cur_year, CHAR(4)),'-01-01'));
 SET v_inidate_to = v_inidate_from + interval 1 month;
  DROP TEMPORARY TABLE IF EXISTS container01 ;
  CREATE TEMPORARY TABLE `container01` (
    `YEARCONT` VARCHAR(4) NOT NULL default '',
    `MTH01` INTEGER NOT NULL default '0',
    `MTH02` INTEGER NOT NULL default '0',
    `MTH03` INTEGER NOT NULL default '0',
    `MTH04` INTEGER NOT NULL default '0',
    `MTH05` INTEGER NOT NULL default '0',
    `MTH06` INTEGER NOT NULL default '0',
    `MTH07` INTEGER NOT NULL default '0',
    `MTH08` INTEGER NOT NULL default '0',
    `MTH09` INTEGER NOT NULL default '0',
    `MTH10` INTEGER NOT NULL default '0',
    `MTH11` INTEGER NOT NULL default '0',
    `MTH12` INTEGER NOT NULL default '0',
    `TOTAL` INTEGER NOT NULL default '0',
    `YEARPAR` VARCHAR(10),
    `CURRENTDATE` DATE,
    `CURRENTTIME` TIME,
    PRIMARY KEY  (`YEARCONT`, `CURRENTDATE`, `CURRENTTIME`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  IF v_no_year < 2 THEN
    SET v_no_year = 2;
  END IF;
  WHILE v_int_yr <= pi_no_year DO
        SET v_curdate_from = v_inidate_from;
        SET v_curdate_to = v_inidate_to;
        SET v_int_mth = 1;
        SET v_total = 0;
        SET v_mth01 = 0;
        SET v_mth02 = 0;
        SET v_mth03 = 0;
        SET v_mth04 = 0;
        SET v_mth05 = 0;
        SET v_mth06 = 0;
        SET v_mth07 = 0;
        SET v_mth08 = 0;
        SET v_mth09 = 0;
        SET v_mth10 = 0;
        SET v_mth11 = 0;
        SET v_mth12 = 0;
        WHILE v_int_mth <= 12 DO
           SELECT COUNT(arinvoices.DOCNO) INTO v_cont_wap
               FROM customers,
                  arinvoices
           WHERE ( customers.COMPANY = arinvoices.COMPANY ) and
                 ( customers.BRANCH = arinvoices.BRANCH ) and
                 ( customers.CUSTNO = arinvoices.BPCODE ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and arinvoices.DOCDATE < v_curdate_to ) and
                 ( arinvoices.U_U_SALESTYPE = 'NS' or arinvoices.U_U_SALESTYPE = 'DC'  ) and
                 ( customers.U_U_REGION = 'ASC' ) ;
             SET v_total = v_total + v_cont_wap;
           CASE v_int_mth
             WHEN 1 THEN
                SET v_mth01 = v_cont_wap;
             WHEN 2 THEN
                SET v_mth02 = v_cont_wap;
             WHEN 3 THEN
                SET v_mth03 = v_cont_wap;
             WHEN 4 THEN
                SET v_mth04 = v_cont_wap;
             WHEN 5 THEN
                SET v_mth05 = v_cont_wap;
             WHEN 6 THEN
                SET v_mth06 = v_cont_wap;
             WHEN 7 THEN
                SET v_mth07 = v_cont_wap;
             WHEN 8 THEN
                SET v_mth08 = v_cont_wap;
             WHEN 9 THEN
                SET v_mth09 = v_cont_wap;
             WHEN 10 THEN
                SET v_mth10 = v_cont_wap;
             WHEN 11 THEN
                SET v_mth11 = v_cont_wap;
             WHEN 12 THEN
                SET v_mth12 = v_cont_wap;
           END CASE;
           SET v_int_mth = v_int_mth + 1;
           SET v_curdate_from = v_curdate_from + interval 1 month;
           SET v_curdate_to = v_curdate_from + interval 1 month;
        END WHILE;
        INSERT INTO container01 (YEARCONT, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10,
                                 MTH11, MTH12, TOTAL, CURRENTDATE, CURRENTTIME)
                         VALUES (v_cur_year, v_mth01, v_mth02, v_mth03, v_mth04, v_mth05, v_mth06, v_mth07, v_mth08, v_mth09, v_mth10,
                                 v_mth11, v_mth12, v_total, v_curdate, v_curtime);
           IF v_yearcompare = 1 THEN
              SET v_mth01A = v_mth01;
              SET v_mth02A = v_mth02;
              SET v_mth03A = v_mth03;
              SET v_mth04A = v_mth04;
              SET v_mth05A = v_mth05;
              SET v_mth06A = v_mth06;
              SET v_mth07A = v_mth07;
              SET v_mth08A = v_mth08;
              SET v_mth09A = v_mth09;
              SET v_mth10A = v_mth10;
              SET v_mth11A = v_mth11;
              SET v_mth12A = v_mth12;
           END IF;
           IF v_yearcompare = 2 THEN
              SET v_mth01B = v_mth01;
              SET v_mth02B = v_mth02;
              SET v_mth03B = v_mth03;
              SET v_mth04B = v_mth04;
              SET v_mth05B = v_mth05;
              SET v_mth06B = v_mth06;
              SET v_mth07B = v_mth07;
              SET v_mth08B = v_mth08;
              SET v_mth09B = v_mth09;
              SET v_mth10B = v_mth10;
              SET v_mth11B = v_mth11;
              SET v_mth12B = v_mth12;
           END IF;
          IF v_yearcompare = 2 THEN
               SET v_total = (v_mth01A - v_mth01B) + (v_mth02A - v_mth02B) + (v_mth03A - v_mth03B) + (v_mth04A - v_mth04B)
                           + (v_mth05A - v_mth05B) + (v_mth06A - v_mth06B) + (v_mth07A - v_mth07B) + (v_mth08A - v_mth08B)
                           + (v_mth09A - v_mth09B) + (v_mth10A - v_mth10B) + (v_mth11A - v_mth11B) +(v_mth12A - v_mth12B);
               INSERT INTO container01 (YEARCONT, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10,
                                       MTH11, MTH12, TOTAL, CURRENTDATE, CURRENTTIME)
                               VALUES ('COMP', (v_mth01A - v_mth01B), (v_mth02A - v_mth02B), (v_mth03A - v_mth03B), (v_mth04A - v_mth04B),
                                       (v_mth05A - v_mth05B), (v_mth06A - v_mth06B), (v_mth07A - v_mth07B), (v_mth08A - v_mth08B),
                                       (v_mth09A - v_mth09B), (v_mth10A - v_mth10B), (v_mth11A - v_mth11B), (v_mth12A - v_mth12B),
                                       v_total, v_curdate, v_curtime);
               IF v_mth01A > 0 THEN
                  SET v_mth01D =  ROUND(((v_mth01A - v_mth01B) / v_mth01A ) * 100);
               END IF;
               IF v_mth02A > 0 THEN
                  SET v_mth02D =  ROUND(((v_mth02A - v_mth02B) / v_mth02A ) * 100);
               END IF;
               IF v_mth03A > 0 THEN
                  SET v_mth03D =  ROUND(((v_mth03A - v_mth03B) / v_mth03A ) * 100);
               END IF;
               IF v_mth04A > 0 THEN
                  SET v_mth04D =  ROUND(((v_mth04A - v_mth04B) / v_mth04A ) * 100);
               END IF;
               IF v_mth05A > 0 THEN
                  SET v_mth05D =  ROUND(((v_mth05A - v_mth05B) / v_mth05A ) * 100);
               END IF;
               IF v_mth06A > 0 THEN
                  SET v_mth06D =  ROUND(((v_mth06A - v_mth06B) / v_mth06A ) * 100);
               END IF;
               IF v_mth07A > 0 THEN
                  SET v_mth07D =  ROUND(((v_mth07A - v_mth07B) / v_mth07A ) * 100);
               END IF;
               IF v_mth08A > 0 THEN
                  SET v_mth08D =  ROUND(((v_mth08A - v_mth08B) / v_mth08A ) * 100);
               END IF;
               IF v_mth09A > 0 THEN
                  SET v_mth09D =  ROUND(((v_mth09A - v_mth09B) / v_mth09A ) * 100);
               END IF;
               IF v_mth10A > 0 THEN
                  SET v_mth10D =  ROUND(((v_mth10A - v_mth10B) / v_mth10A ) * 100);
               END IF;
               IF v_mth11A > 0 THEN
                  SET v_mth11D =  ROUND(((v_mth11A - v_mth11B) / v_mth11A ) * 100);
               END IF;
               IF v_mth12A > 0 THEN
                  SET v_mth12D =  ROUND(((v_mth12A - v_mth12B) / v_mth12A ) * 100);
               END IF;
               SET v_total =  (((v_mth01A + v_mth02A + v_mth03A + v_mth04A + v_mth05A + v_mth06A + v_mth07A + v_mth08A + v_mth09A + v_mth10A + v_mth11A + v_mth12A) -
                              (v_mth01B + v_mth02B + v_mth03B + v_mth04B + v_mth05B + v_mth06B + v_mth07B + v_mth08B + v_mth09B + v_mth10B + v_mth11B + v_mth12B)) /
                              (v_mth01A + v_mth02A + v_mth03A + v_mth04A + v_mth05A + v_mth06A + v_mth07A + v_mth08A + v_mth09A + v_mth10A + v_mth11A + v_mth12A)) * 100;
              INSERT INTO container01 (YEARCONT, MTH01, MTH02, MTH03, MTH04, MTH05, MTH06, MTH07, MTH08, MTH09, MTH10,
                                       MTH11, MTH12, TOTAL, CURRENTDATE, CURRENTTIME)
                               VALUES ('DIFF', v_mth01D, v_mth02D, v_mth03D, v_mth04D, v_mth05D, v_mth06D, v_mth07D, v_mth08D, v_mth09D, v_mth10D,
                                       v_mth11D, v_mth12D, v_total, v_curdate, v_curtime);
          END IF;
      SET v_cur_year = v_cur_year - 1;
      SET v_inidate_from = DATE(concat(CONVERT(v_cur_year, CHAR(4)),'-01-01'));
       
      SET v_inidate_to = v_inidate_from + interval 1 month;
      SET v_int_yr = v_int_yr + 1;
      SET v_yearcompare = v_yearcompare + 1;
  END WHILE;
  SELECT * FROM container01 WHERE CURRENTDATE = v_curdate and CURRENTTIME = v_curtime;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `yearly_container_compare_sp2`
--

DROP PROCEDURE IF EXISTS `yearly_container_compare_sp2`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `yearly_container_compare_sp2`(IN pi_cur_year VARCHAR(4))
BEGIN
DECLARE v_cur_year INT;
DECLARE v_bpcode VARCHAR(100);
DECLARE v_total INT;
DECLARE v_cont_wap INT;
DECLARE v_cont_dc INT;
DECLARE v_mth01, v_mth02, v_mth03, v_mth04, v_mth05, v_mth06 INT;
DECLARE v_mth07, v_mth08, v_mth09, v_mth10, v_mth11, v_mth12 INT;
DECLARE v_mth01A, v_mth02A, v_mth03A, v_mth04A, v_mth05A, v_mth06A INT;
DECLARE v_mth07A, v_mth08A, v_mth09A, v_mth10A, v_mth11A, v_mth12A INT;
DECLARE v_mth01B, v_mth02B, v_mth03B, v_mth04B, v_mth05B, v_mth06B INT;
DECLARE v_mth07B, v_mth08B, v_mth09B, v_mth10B, v_mth11B, v_mth12B INT;
DECLARE v_mth01D, v_mth02D, v_mth03D, v_mth04D, v_mth05D, v_mth06D INT;
DECLARE v_mth07D, v_mth08D, v_mth09D, v_mth10D, v_mth11D, v_mth12D INT;
DECLARE v_curtime TIME;
DECLARE v_curdate DATE;
DECLARE v_curdate_from DATE;
DECLARE v_curdate_to DATE;
DECLARE v_inidate_from DATE;
DECLARE v_inidate_to DATE;
DECLARE v_done INT;
DECLARE v_int_mth INT;
DECLARE v_int_yr INT;
DECLARE v_no_year INT;
DECLARE v_yearcompare INT;
DECLARE v_monthchar VARCHAR(10);
 SET v_cur_year = CONVERT(pi_cur_year,SIGNED);
 SET v_curdate = CURDATE();
 SET v_curtime = Now();
 SET v_int_mth = 1;
 SET v_int_yr = 1;
 SET v_yearcompare = 1;
 SET v_inidate_from = DATE(concat(CONVERT(v_cur_year, CHAR(4)),'-01-01'));
 SET v_inidate_to = v_inidate_from + interval 1 month;
  DROP TEMPORARY TABLE IF EXISTS container02 ;
  CREATE TEMPORARY TABLE `container02` (
    `YEARCONT` VARCHAR(4) NOT NULL default '',
    `MTHCONT` INTEGER NOT NULL default '0',
    `MTHVALUE` INTEGER NOT NULL default '0',
    `CURRENTDATE` DATE,
    `CURRENTTIME` TIME,
    PRIMARY KEY  (`YEARCONT`, `MTHCONT`, `CURRENTDATE`, `CURRENTTIME`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  WHILE v_int_yr <= 2 DO
        SET v_curdate_from = v_inidate_from;
        SET v_curdate_to = v_inidate_to;
        SET v_int_mth = 1;
        SET v_total = 0;
        set v_cont_wap = 0;
        WHILE v_int_mth <= 12 DO
           SELECT COUNT(arinvoices.DOCNO) INTO v_cont_wap
               FROM customers,
                  arinvoices
           WHERE ( customers.COMPANY = arinvoices.COMPANY ) and
                 ( customers.BRANCH = arinvoices.BRANCH ) and
                 ( customers.CUSTNO = arinvoices.BPCODE ) and
                 ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
                 ( arinvoices.DOCDATE >= v_curdate_from and arinvoices.DOCDATE < v_curdate_to ) and
                 ( arinvoices.U_U_SALESTYPE = 'NS' or arinvoices.U_U_SALESTYPE = 'DC'  ) and
                 ( customers.U_U_REGION = 'ASC' ) ;
             INSERT INTO container02 (YEARCONT, MTHCONT, MTHVALUE, CURRENTDATE, CURRENTTIME)
                  VALUES (v_cur_year, v_int_mth, v_cont_wap, v_curdate, v_curtime);
           SET v_int_mth = v_int_mth + 1;
           SET v_curdate_from = v_curdate_from + interval 1 month;
           SET v_curdate_to = v_curdate_from + interval 1 month;
        END WHILE;
      SET v_cur_year = v_cur_year - 1;
      SET v_inidate_from = DATE(concat(CONVERT(v_cur_year, CHAR(4)),'-01-01'));
       
      SET v_inidate_to = v_inidate_from + interval 1 month;
      SET v_int_yr = v_int_yr + 1;
  END WHILE;
  SELECT * FROM container02 WHERE CURRENTDATE = v_curdate and CURRENTTIME = v_curtime;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;

--
-- Definition of procedure `yearly_container_type_sp`
--

DROP PROCEDURE IF EXISTS `yearly_container_type_sp`;

DELIMITER $$

/*!50003 SET @TEMP_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER' */ $$
CREATE PROCEDURE `yearly_container_type_sp`(IN pi_cur_year VARCHAR(4))
BEGIN
DECLARE v_cur_year INT;
DECLARE v_bpcode VARCHAR(100);
DECLARE v_total INT;
DECLARE v_cont_wap INT;
DECLARE v_cont_dc INT;
DECLARE v_mth01_wap, v_mth02_wap, v_mth03_wap, v_mth04_wap, v_mth05_wap, v_mth06_wap INT;
DECLARE v_mth07_wap, v_mth08_wap, v_mth09_wap, v_mth10_wap, v_mth11_wap, v_mth12_wap INT;
DECLARE v_mth01_dc, v_mth02_dc, v_mth03_dc, v_mth04_dc, v_mth05_dc, v_mth06_dc INT;
DECLARE v_mth07_dc, v_mth08_dc, v_mth09_dc, v_mth10_dc, v_mth11_dc, v_mth12_dc INT;
DECLARE v_curtime TIME;
DECLARE v_curdate DATE;
DECLARE v_curdate_from DATE;
DECLARE v_curdate_to DATE;
DECLARE v_inidate_from DATE;
DECLARE v_inidate_to DATE;
DECLARE v_done INT;
DECLARE v_int_mth INT;
  DECLARE cust_cur CURSOR FOR
    SELECT customers.CUSTNO
      FROM customers
     WHERE customers.U_U_REGION = 'ASC'
     ORDER BY customers.CUSTNO;
 DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1 ;
 SET v_cur_year = CONVERT(pi_cur_year,SIGNED);
 SET v_curdate = CURDATE();
 SET v_curtime = Now();
 SET v_int_mth = 1;
 SET v_inidate_from = DATE(concat(CONVERT(v_cur_year, CHAR(4)),'-01-01'));
 SET v_inidate_to = v_inidate_from + interval 1 month;
  CREATE TEMPORARY TABLE IF NOT EXISTS `container` (
    `BPCODE` VARCHAR(100) NOT NULL default '',
    `MTH01_WAP` INTEGER NOT NULL default '0',
    `MTH02_WAP` INTEGER NOT NULL default '0',
    `MTH03_WAP` INTEGER NOT NULL default '0',
    `MTH04_WAP` INTEGER NOT NULL default '0',
    `MTH05_WAP` INTEGER NOT NULL default '0',
    `MTH06_WAP` INTEGER NOT NULL default '0',
    `MTH07_WAP` INTEGER NOT NULL default '0',
    `MTH08_WAP` INTEGER NOT NULL default '0',
    `MTH09_WAP` INTEGER NOT NULL default '0',
    `MTH10_WAP` INTEGER NOT NULL default '0',
    `MTH11_WAP` INTEGER NOT NULL default '0',
    `MTH12_WAP` INTEGER NOT NULL default '0',
    `MTH01_DC` INTEGER NOT NULL default '0',
    `MTH02_DC` INTEGER NOT NULL default '0',
    `MTH03_DC` INTEGER NOT NULL default '0',
    `MTH04_DC` INTEGER NOT NULL default '0',
    `MTH05_DC` INTEGER NOT NULL default '0',
    `MTH06_DC` INTEGER NOT NULL default '0',
    `MTH07_DC` INTEGER NOT NULL default '0',
    `MTH08_DC` INTEGER NOT NULL default '0',
    `MTH09_DC` INTEGER NOT NULL default '0',
    `MTH10_DC` INTEGER NOT NULL default '0',
    `MTH11_DC` INTEGER NOT NULL default '0',
    `MTH12_DC` INTEGER NOT NULL default '0',
    `TOTAL` INTEGER NOT NULL default '0',
    `CURRENTDATE` DATE,
    `CURRENTTIME` TIME,
    PRIMARY KEY  (`BPCODE`, `CURRENTDATE`, `CURRENTTIME`)
  ) ENGINE=InnoDB DEFAULT CHARSET=latin1;
  OPEN cust_cur;
  custloop: LOOP
    FETCH cust_cur INTO v_bpcode;
    IF v_done = 1 THEN
       Leave custloop;
    END IF;
    SET v_curdate_from = v_inidate_from;
    SET v_curdate_to = v_inidate_to;
    SET v_int_mth = 1;
    SET v_total = 0;
    SET v_mth01_wap = 0;
    SET v_mth02_wap = 0;
    SET v_mth03_wap = 0;
    SET v_mth04_wap = 0;
    SET v_mth05_wap = 0;
    SET v_mth06_wap = 0;
    SET v_mth07_wap = 0;
    SET v_mth08_wap = 0;
    SET v_mth09_wap = 0;
    SET v_mth10_wap = 0;
    SET v_mth11_wap = 0;
    SET v_mth12_wap = 0;
    SET v_mth01_dc = 0;
    SET v_mth02_dc = 0;
    SET v_mth03_dc = 0;
    SET v_mth04_dc = 0;
    SET v_mth05_dc = 0;
    SET v_mth06_dc = 0;
    SET v_mth07_dc = 0;
    SET v_mth08_dc = 0;
    SET v_mth09_dc = 0;
    SET v_mth10_dc = 0;
    SET v_mth11_dc = 0;
    SET v_mth12_dc = 0;
    WHILE v_int_mth <= 12 DO
       SELECT COUNT(arinvoices.DOCNO) INTO v_cont_wap
         FROM customers,
              arinvoices
       WHERE ( customers.COMPANY = arinvoices.COMPANY ) and
             ( customers.BRANCH = arinvoices.BRANCH ) and
             ( customers.CUSTNO = arinvoices.BPCODE ) and
             ( arinvoices.BPCODE = v_bpcode ) and
             ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
             ( arinvoices.DOCDATE >= v_curdate_from and arinvoices.DOCDATE < v_curdate_to ) and
             ( arinvoices.U_U_SALESTYPE = 'NS' );
       SELECT COUNT(arinvoices.DOCNO) INTO v_cont_dc
         FROM customers,
              arinvoices
       WHERE ( customers.COMPANY = arinvoices.COMPANY ) and
             ( customers.BRANCH = arinvoices.BRANCH ) and
             ( customers.CUSTNO = arinvoices.BPCODE ) and
             ( arinvoices.BPCODE = v_bpcode ) and
             ( arinvoices.DOCSTATUS = 'O' or arinvoices.DOCSTATUS = 'C' ) and
             ( arinvoices.DOCDATE >= v_curdate_from and arinvoices.DOCDATE < v_curdate_to ) and
             ( arinvoices.U_U_SALESTYPE = 'DC' );
         SET v_total = v_total + v_cont_dc + v_cont_wap;
       CASE v_int_mth
         WHEN 1 THEN
            SET v_mth01_wap = v_cont_wap;
            SET v_mth01_dc = v_cont_dc;
         WHEN 2 THEN
            SET v_mth02_wap = v_cont_wap;
            SET v_mth02_dc = v_cont_dc;
         WHEN 3 THEN
            SET v_mth03_wap = v_cont_wap;
            SET v_mth03_dc = v_cont_dc;
         WHEN 4 THEN
            SET v_mth04_wap = v_cont_wap;
            SET v_mth04_dc = v_cont_dc;
         WHEN 5 THEN
            SET v_mth05_wap = v_cont_wap;
            SET v_mth05_dc = v_cont_dc;
         WHEN 6 THEN
            SET v_mth06_wap = v_cont_wap;
            SET v_mth06_dc = v_cont_dc;
         WHEN 7 THEN
            SET v_mth07_wap = v_cont_wap;
            SET v_mth07_dc = v_cont_dc;
         WHEN 8 THEN
            SET v_mth08_wap = v_cont_wap;
            SET v_mth08_dc = v_cont_dc;
         WHEN 9 THEN
            SET v_mth09_wap = v_cont_wap;
            SET v_mth09_dc = v_cont_dc;
         WHEN 10 THEN
            SET v_mth10_wap = v_cont_wap;
            SET v_mth10_dc = v_cont_dc;
         WHEN 11 THEN
            SET v_mth11_wap = v_cont_wap;
            SET v_mth11_dc = v_cont_dc;
         WHEN 12 THEN
            SET v_mth12_wap = v_cont_wap;
            SET v_mth12_dc = v_cont_dc;
       END CASE;
       SET v_int_mth = v_int_mth + 1;
       SET v_curdate_from = v_curdate_from + interval 1 month;
       SET v_curdate_to = v_curdate_from + interval 1 month;
    END WHILE;
    INSERT INTO container (BPCODE, MTH01_WAP, MTH02_WAP, MTH03_WAP, MTH04_WAP, MTH05_WAP, MTH06_WAP, MTH07_WAP, MTH08_WAP,
                           MTH09_WAP, MTH10_WAP, MTH11_WAP, MTH12_WAP, MTH01_DC, MTH02_DC, MTH03_DC, MTH04_DC, MTH05_DC,
                           MTH06_DC, MTH07_DC, MTH08_DC, MTH09_DC, MTH10_DC, MTH11_DC, MTH12_DC, TOTAL, CURRENTDATE, CURRENTTIME)
                   VALUES (v_bpcode, v_mth01_wap, v_mth02_wap, v_mth03_wap, v_mth04_wap, v_mth05_wap, v_mth06_wap, v_mth07_wap, v_mth08_wap,
                           v_mth09_wap, v_mth10_wap, v_mth11_wap, v_mth12_wap, v_mth01_dc, v_mth02_dc, v_mth03_dc, v_mth04_dc, v_mth05_dc,
                           v_mth06_dc, v_mth07_dc, v_mth08_dc, v_mth09_dc, v_mth10_dc, v_mth11_dc, v_mth12_dc, v_total, v_curdate, v_curtime);
     SET v_done = 0;
  END LOOP custloop;
  CLOSE cust_cur;
  SELECT * FROM container WHERE CURRENTDATE = v_curdate and CURRENTTIME = v_curtime;
END $$
/*!50003 SET SESSION SQL_MODE=@TEMP_SQL_MODE */  $$

DELIMITER ;



/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
